{"version":3,"sources":["app/parts/toolbar/ToolbarComponent.tsx","MyTools/channel-conception/react-hooks/useChannel.ts","MyTools/react-hooks/useCallbackFactory.ts","MyTools/react-callback-factory/CallbackFactory.ts","MyTools/react-hooks/useUnsubscribe.ts","app/parts/toolbar/channels-callbacks/onPageLabelChannel.ts","MyTools/channel-conception/defaults/empty.ts","app/parts/toolbar/ui-callbacks/onClick.ts","MyTools/react-di/defaults/defaultServiceProvider.ts","MyTools/react-hooks/useConstructor.ts","MyTools/react-di/DependenciesProvider.tsx","MyTools/react-di/logic/getDependency.ts","MyTools/react-di/hooks/useDependency.ts","MyTools/channel-conception/logic/jsonEqual.ts","MyTools/worker-observable/operators/fromThread.ts","MyTools/worker-observable/logic/functionToThread.ts","MyTools/channel-conception/Channel.ts","app/common/Routs.ts","app/common/types/ISortVariant.ts","app/parts/toolbar/ToolbarService.tsx","app/parts/toolbar/logic/getCardsCount.ts","app/parts/toolbar/logic/getGroupName.ts","app/parts/toolbar/logic/getPageLabel.ts","app/parts/navigation-panel/NavigationPanelService.ts","app/parts/toolbar/ui-callbacks/onLoadCardsCount.ts","app/parts/toolbar/defaults/initialState.ts","app/parts/toolbar/channels-callbacks/onCardsCountInGroupChannel.ts","app/parts/toolbar/ui-callbacks/onLoadLabel.ts","app/parts/toolbar/ToolbarContainer.tsx","app/parts/navigation-panel/elements/navigation-link-component/NavigationLinkComponent.tsx","app/parts/navigation-panel/NavigationPanelComponent.tsx","app/parts/navigation-panel/defaults/initialState.ts","app/parts/navigation-panel/channels-callbacks/onNavigationPanelOpenChannel.ts","app/parts/navigation-panel/ui-callbacks/onToggleDrawer.ts","app/parts/navigation-panel/NavigationPanelContainer.tsx","app/parts/error-dialog/ErrorComponent.tsx","app/parts/error-dialog/defaults/initialState.ts","app/parts/error-dialog/channels-callbacks/onErrorChannel.ts","app/parts/error-dialog/ui-callbacks/onClose.ts","app/parts/error-dialog/ErrorService.ts","app/parts/error-dialog/ErrorContainer.tsx","app/parts/spinner/SpinnerComponent.tsx","app/parts/spinner/channels-callbacks/onSpinnerCounterChannel.ts","app/parts/spinner/SpinnerService.ts","app/parts/spinner/SpinnerContainer.tsx","app/parts/confirm-dialog/elements/dialog-title/DialogTitleComponent.tsx","app/parts/confirm-dialog/ConfirmDialogComponent.tsx","app/common/defaults/defaultConfirmDialogState.ts","app/parts/confirm-dialog/channels-callbacks/onOpenDialogChannel.ts","app/parts/confirm-dialog/ui-callbacks/onClose.ts","app/parts/confirm-dialog/ui-callbacks/onClickAgree.ts","app/parts/confirm-dialog/ui-callbacks/onClickDisagree.ts","app/parts/confirm-dialog/ConfirmDialogService.ts","app/parts/confirm-dialog/ConfirmDialogContainer.tsx","app/common/elements/add-button/AddButtonComponent.tsx","app/pages/cards-groups-list/elements/circular-progress/CircularProgressComponent.tsx","app/common/elements/list-item-menu/ListItemMenuComponent.tsx","app/common/constants/DATE_FORMAT.ts","app/pages/cards-groups-list/elements/cards-groups-list-item/CardsGroupsListItemComponent.tsx","app/common/elements/filter/FilterComponent.tsx","app/pages/cards-groups-list/CardsGroupsListComponent.tsx","app/common/types/IRangeOfKnowledge.ts","app/pages/cards-groups-list/ui-callbacks/onResetProgress.tsx","app/pages/cards-groups-list/ui-callbacks/onEditItem.ts","app/pages/cards-groups-list/ui-callbacks/onDeleteItem.tsx","app/pages/cards-groups-list/ui-callbacks/onOpenEditor.ts","app/pages/cards-groups-list/ui-callbacks/onClickItem.ts","app/pages/cards-groups-list/ui-callbacks/onConstructor.ts","app/pages/cards-groups-list/channels-callbacks/onResetProgressChannel.ts","app/pages/cards-groups-list/channels-callbacks/onGroupDeleteChannel.ts","app/pages/cards-groups-list/channels-callbacks/onGroupsListChannel.ts","app/pages/cards-groups-list/ui-callbacks/onChangeSorting.ts","app/pages/cards-groups-list/channels-callbacks/onChangeFilterChannel.ts","app/common/defaults/defaultFilter.ts","app/pages/cards-groups-list/channels-callbacks/onFilterChannel.ts","app/pages/cards-groups-list/ui-callbacks/onChangeSearchableText.ts","app/pages/cards-groups-list/defaults/initialState.ts","app/pages/cards-groups-list/logic/countRepeatedCardsPercent.ts","app/common/types/IRepeatingType.ts","app/pages/cards-groups-list/CardsGroupsListService.ts","app/pages/cards-groups-list/logic/getDifficultCardsForRepeating.ts","app/pages/cards-groups-list/logic/updateObsoleteStatus.ts","app/pages/cards-groups-list/logic/updateRepeatingDate.ts","app/pages/cards-groups-list/logic/sortByFilter.ts","app/pages/cards-groups-list/logic/deleteGroup.ts","app/pages/cards-groups-list/logic/resetRepeatingProgress.ts","app/pages/cards-groups-list/ui-callbacks/onStartRepeatingDifficultCards.ts","app/pages/cards-groups-list/channels-callbacks/onStartRepeatingDifficultCardsChannel.ts","app/pages/cards-groups-list/CardsGroupsListContainer.tsx","app/pages/google-auth/GoogleAuthComponent.tsx","app/pages/google-auth/ui-callbacks/onSuccess.ts","app/pages/google-auth/ui-callbacks/onFailure.ts","app/pages/google-auth/channels-callbacks/onLoginChannel.ts","MyTools/react-di/Dependency.ts","app/pages/google-auth/GoogleAuthService.ts","app/pages/google-auth/GoogleAuthContainer.tsx","app/pages/google-backups/elements/backup-menu-component/BackupMenuComponent.tsx","app/pages/google-backups/elements/backups-list-item-component/BackupsListItemComponent.tsx","app/pages/google-backups/GoogleBackupsComponent.tsx","app/pages/google-backups/channels-callback/onBackupsNameLoadChannelError.ts","app/pages/google-backups/channels-callback/onBackupsNameLoadChannel.ts","app/pages/google-backups/channels-callback/onBackupLoadChannelError.ts","app/pages/google-backups/channels-callback/onBackupLoadChannel.ts","app/pages/google-backups/channels-callback/onBackupDeleteChannel.ts","app/pages/google-backups/channels-callback/onBackupUploadChannel.ts","app/pages/google-backups/ui-callbacks/onConstructor.ts","app/pages/google-backups/ui-callbacks/onLoad.tsx","app/pages/google-backups/ui-callbacks/onDelete.tsx","app/pages/google-backups/logic/getBackupFolder.ts","app/pages/google-backups/GoogleBackupsService.ts","app/pages/google-backups/logic/getBackupFiles.ts","app/pages/google-backups/logic/formatCreatedDate.ts","app/pages/google-backups/logic/loadBackupFile.ts","app/pages/google-backups/logic/createBackupFolder.ts","app/pages/google-backups/logic/createBackupName.ts","app/pages/google-backups/logic/createEmptyBackupFile.ts","app/pages/google-backups/logic/uploadBackupFile.ts","app/pages/google-backups/logic/deleteBackupFile.ts","app/pages/google-backups/GoogleBackupsContainer.tsx","app/pages/cards/elements/cards-list-actions/CardsListActions.tsx","app/pages/cards/elements/card-primary-text/CardPrimaryTextComponent.tsx","app/pages/cards/elements/cards-list-item/CardsListItemComponent.tsx","app/pages/cards/elements/cards-list/CardsListComponent.tsx","app/pages/cards/CardsComponent.tsx","app/pages/cards/ui-callbacks/onDeleteSelectedCards.tsx","app/pages/cards/ui-callbacks/onCopySelectedCards.tsx","app/pages/cards/ui-callbacks/onMovingSelectedCards.tsx","app/pages/cards/ui-callbacks/onSelectItem.ts","app/pages/cards/ui-callbacks/onStartSelecting.ts","app/pages/cards/ui-callbacks/onOpenRepeater.ts","app/pages/cards/ui-callbacks/onChangeSorting.ts","app/pages/cards/ui-callbacks/onChangeSearchableText.ts","app/pages/cards/channels-callbacks/onCardsChannel.ts","app/pages/cards/channels-callbacks/onCardsIDsByGroupIDsChannel.ts","app/pages/cards/channels-callbacks/onCardsIDsBySelectedItemsChannel.ts","app/pages/cards/channels-callbacks/onFilterChannel.ts","app/pages/cards/ui-callbacks/onConstructor.ts","app/pages/cards/channels-callbacks/onChangeFilter.ts","app/pages/cards/channels-callbacks/onResetCardProgressChannel.ts","app/pages/cards/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/cards/channels-callbacks/onMovingCardsChannel.ts","app/pages/cards/channels-callbacks/onCopyCardsChannel.ts","app/pages/cards/channels-callbacks/onDeleteCardsChannel.ts","app/pages/cards/channels-callbacks/onExistedGroupsIDsChannel.ts","app/pages/cards/ui-callbacks/onOpenEditor.ts","app/pages/cards/ui-callbacks/onEditItem.ts","app/pages/cards/ui-callbacks/onDeleteItem.tsx","app/pages/cards/ui-callbacks/onResetProgress.ts","app/pages/cards/ui-callbacks/onClickItem.ts","app/pages/cards/defaults/initialState.ts","app/pages/cards/logic/getCardsByGroup.ts","app/common/logic/deleteSingleCard.ts","app/pages/cards/logic/selectedItemsObjectToArray.ts","app/pages/cards/logic/getExistedCardsGroups.ts","app/pages/cards/CardsService.ts","app/pages/cards/logic/filterCards.ts","app/pages/cards/logic/resetCardProgress.ts","app/pages/cards/logic/changeCardsGroup.ts","app/pages/cards/logic/copyCardsInGroup.ts","app/pages/cards/logic/deleteCards.ts","app/pages/cards/logic/cardsToIDS.ts","app/pages/cards/logic/selectedItemsToIDs.ts","app/parts/selection-dialog/SelectionDialogService.ts","app/pages/cards/CardsContainer.tsx","app/pages/cards-repeater/elements/statistic/StatisticComponent.tsx","app/pages/cards-repeater/elements/all-cards-repeated/AllCardsRepeatedComponent.tsx","app/common/elements/cards-header/CardsHeaderComponent.tsx","app/common/elements/long-text-viewer/LongTextViewerComponent.tsx","app/common/elements/text-editor/TextEditorComponent.tsx","app/common/elements/long-text-editor/LongTextEditorComponent.tsx","app/common/elements/delete-button-footer/DeleteButtonFooterComponent.tsx","app/common/elements/question-card/QuestionCardComponent.tsx","app/common/elements/answer-card-footer/AnswerCardFooterComponent.tsx","app/common/elements/answer-card/AnswerCardComponent.tsx","app/common/elements/cards-content/CardsContentComponent.tsx","app/pages/cards-repeater/CardsRepeaterComponent.tsx","app/pages/cards-repeater/ui-callbacks/onDeleteCard.tsx","app/pages/cards-repeater/channels-callbacks/onDeleteSingleCardChannel.ts","app/common/defaults/defaultCard.ts","app/pages/cards-repeater/channels-callbacks/onCardChannel.ts","app/pages/cards-repeater/channels-callbacks/onCardEditingChannel.ts","app/common/defaults/defaultRepeatingProgress.ts","app/pages/cards-repeater/channels-callbacks/onStatisticChannel.ts","app/pages/cards-repeater/channels-callbacks/onRepeatingResultChannel.ts","app/pages/cards-repeater/ui-callbacks/onConstructor.ts","app/pages/cards-repeater/ui-callbacks/onClick.ts","app/pages/cards-repeater/ui-callbacks/onClickCard.ts","app/pages/cards-repeater/ui-callbacks/onBackClick.ts","app/common/logic/initDefaultCard.ts","app/pages/cards-repeater/ui-callbacks/onSwitchEditing.ts","app/pages/cards-repeater/ui-callbacks/onChangeQuestion.ts","app/pages/cards-repeater/ui-callbacks/onChangeAnswer.ts","app/pages/cards-repeater/defaults/initialState.ts","app/pages/cards-repeater/ui-callbacks/onReadByVoiceEngine.ts","app/pages/cards-repeater/channels-callbacks/onReadByVoiceEngineChannel.ts","app/common/logic/changeRangeOfKnowledge.ts","app/pages/cards-repeater/logic/shuffleCards.ts","app/pages/cards-repeater/logic/getCardForRepeating.ts","app/common/logic/refreshCardRepeatingDate.ts","app/common/logic/updateStatistic.ts","app/common/logic/readByVoiceEngine.ts","app/common/logic/prepareTextForVoiceEngine.ts","app/pages/cards-repeater/CardsRepeaterService.ts","app/pages/cards-repeater/logic/getCardsByIDs.ts","app/pages/cards-repeater/logic/getRepeatingProgress.ts","app/pages/cards-editor/CardsEditorService.ts","app/pages/cards-editor/logic/saveCard.ts","app/pages/cards-editor/logic/getEditingCard.ts","app/pages/cards-repeater/CardsRepeaterContainer.tsx","app/pages/local-backup/channels-callbacks/onLoadBackupChannel.ts","app/pages/local-backup/ui-callbacks/onFileSelect.tsx","app/pages/local-backup/LocalBackupsService.ts","app/pages/local-backup/logic/saveBackupFile.ts","app/pages/local-backup/LocalBackupsContainer.tsx","app/pages/cards-groups-editor/CardsGroupsEditorComponent.tsx","app/pages/cards-groups-editor/ui-callbacks/onChangeGroupName.ts","app/pages/cards-groups-editor/ui-callbacks/onSaveGroup.ts","app/pages/cards-groups-editor/ui-callbacks/onConstructor.ts","app/pages/cards-groups-editor/channels-callbacks/onGroupEditingChannel.ts","app/common/defaults/defaultCardsGroup.ts","app/pages/cards-groups-editor/channels-callbacks/onGroupChannel.ts","app/pages/cards-groups-editor/defaults/initialState.ts","app/pages/cards-groups-editor/CardsGroupsEditorService.ts","app/pages/cards-groups-editor/logic/saveCardsGroup.ts","app/pages/cards-groups-editor/logic/getEditingCardsGroup.ts","app/pages/cards-groups-editor/CardsGroupsEditorContainer.tsx","app/pages/cards-editor/CardsEditorComponent.tsx","app/pages/cards-editor/channels-callbacks/onCardEditingChannel.ts","app/pages/cards-editor/channels-callbacks/onCardChannel.ts","app/pages/cards-editor/ui-callbacks/onConstructor.ts","app/pages/cards-editor/ui-callbacks/onChangeQuestion.ts","app/pages/cards-editor/ui-callbacks/onChangeAnswer.ts","app/pages/cards-editor/ui-callbacks/onSaveCard.ts","app/pages/cards-editor/defaults/initialState.ts","app/pages/cards-editor/CardsEditorContainer.tsx","app/pages/settings/elements/settings-switcher/SettingsSwitcherComponent.tsx","app/pages/settings/elements/settings-number-input/SettingsNumberInputComponent.tsx","app/pages/settings/SettingsComponent.tsx","app/common/defaults/defaultSettings.ts","app/pages/settings/channels-callbacks/onChangeSettingsChannel.ts","app/pages/settings/channels-callbacks/onSettingsChannel.ts","app/pages/settings/ui-callbacks/onConstructor.ts","app/pages/settings/ui-callbacks/onChangeAlgorithm.ts","app/pages/settings/ui-callbacks/onChangeAutoObsolete.ts","app/pages/settings/ui-callbacks/onChangeTimeInDone.ts","app/pages/settings/ui-callbacks/onChangeTimeInProgress.ts","app/pages/settings/SettingsService.ts","app/pages/settings/SettingsContainer.tsx","app/pages/card-viewer/CardViewerComponent.tsx","app/pages/card-viewer/ui-callbacks/onDeleteCard.tsx","app/pages/card-viewer/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/card-viewer/ui-callbacks/onChangeAnswer.ts","app/pages/card-viewer/ui-callbacks/onChangeQuestion.ts","app/pages/card-viewer/ui-callbacks/onSwitchEditing.ts","app/pages/card-viewer/ui-callbacks/onClickYesNoButton.ts","app/pages/card-viewer/ui-callbacks/onClickCard.ts","app/pages/card-viewer/channels-callbacks/onCardChannel.ts","app/pages/card-viewer/channels-callbacks/onCardEditingChannel.ts","app/pages/card-viewer/channels-callbacks/onRepeatingResultChannel.ts","app/pages/card-viewer/ui-callbacks/onConstructor.ts","app/pages/card-viewer/defaults/initialState.ts","app/pages/card-viewer/ui-callbacks/onReadByVoiceEngine.ts","app/pages/card-viewer/channels-callbacks/onReadByVoiceEngineChannel.ts","app/pages/card-viewer/logic/getCardForViewing.ts","app/pages/card-viewer/CardViewerService.tsx","app/pages/card-viewer/CardViewerContainer.tsx","app/pages/statistic/elements/RemoveButtonComponent.tsx","app/pages/statistic/StatisticComponent.tsx","app/pages/statistic/defaults/initialState.ts","app/pages/statistic/channels-callbacks/onStatisticChannel.ts","app/pages/statistic/ui-callbacks/onConstructor.ts","app/pages/statistic/ui-callbacks/onRemoveStatistic.tsx","app/pages/statistic/channels-callbacks/onRemoveStatisticChannel.ts","app/common/defaults/defaultStatistic.ts","app/pages/statistic/StatisticService.ts","app/pages/statistic/logic/getRowsFromStatistic.ts","app/pages/statistic/StatisticContainer.tsx","app/pages/repeater-editor/elements/selecting-group-list-element/SelectingGroupListItem.tsx","app/pages/repeater-editor/RepeaterEditorComponent.tsx","app/common/defaults/defaultRepeater.ts","app/pages/repeater-editor/defaults/inititalState.ts","app/pages/repeater-editor/channels-callbacks/onGroupsListChannel.ts","app/pages/repeater-editor/channels-callbacks/onSaveRepeaterChannel.ts","app/pages/repeater-editor/ui-callbacks/onSaveRepeater.ts","app/pages/repeater-editor/channels-callbacks/onUpdateGroupsIDsChannel.ts","app/pages/repeater-editor/ui-callbacks/onSelect.ts","app/pages/repeater-editor/channels-callbacks/onRepeaterChannel.ts","app/pages/repeater-editor/ui-callbacks/onChangeName.ts","app/pages/repeater-editor/ui-callbacks/onConstructor.ts","app/pages/repeater-editor/channels-callbacks/onSelectedGroupsChannel.ts","app/pages/repeater-editor/RepeaterEditorService.ts","app/pages/repeater-editor/logic/updateExistRepeater.ts","app/pages/repeater-editor/logic/updateGroupsIDs.ts","app/pages/repeater-editor/logic/getRepeaterByID.ts","app/pages/repeater-editor/logic/getSelectedGroups.ts","app/pages/repeater-editor/RepeaterEditorContainer.tsx","app/common/logic/getRandomColor.ts","app/pages/repeater-list/elements/repeater-list-item/RepeaterListItem.tsx","app/pages/repeater-list/RepeaterListComponent.tsx","app/pages/repeater-list/defaults/initialState.ts","app/pages/repeater-list/ui-callbacks/onOpenEditor.ts","app/pages/repeater-list/channels-callbacks/onRepeaterListChannel.ts","app/pages/repeater-list/ui-callbacks/onConstructor.ts","app/pages/repeater-list/channels-callbacks/onStartRepeatingChannel.ts","app/pages/repeater-list/ui-callbacks/onStartRepeating.ts","app/pages/repeater-list/ui-callbacks/onRemoveRepeater.tsx","app/pages/repeater-list/channels-callbacks/onResetProgressChannel.ts","app/pages/repeater-list/ui-callbacks/onResetProgress.ts","app/pages/repeater-list/ui-callbacks/onEditRepeater.ts","app/pages/repeater-list/logic/getRepeaterByID.ts","app/pages/repeater-list/RepeaterListService.ts","app/pages/repeater-list/logic/mapGroupsNameToRepeater.ts","app/pages/repeater-list/logic/updateRepeatersProgress.ts","app/pages/repeater-list/logic/getCardsIDsFromRepeater.ts","app/pages/repeater-list/logic/removeRepeater.ts","app/pages/repeater-list/logic/resetRepeatingProgress.ts","app/pages/repeater-list/RepeaterListContainer.tsx","app/parts/navigation/NavigationContainer.tsx","app/parts/selection-dialog/SelectionDialogComponent.tsx","app/parts/selection-dialog/defaults/initialState.ts","app/parts/selection-dialog/channels-callbacks/onOpenDialogChannel.ts","app/parts/selection-dialog/ui-callbacks/onClose.ts","app/parts/selection-dialog/ui-callbacks/onClickItem.ts","app/parts/selection-dialog/SelectionDialogContainer.tsx","app/common/defaults/defaultAppState.ts","app/common/services/StorageService.ts","app/common/constants/STORE_NAME.ts","Dependencies.ts","app/common/services/DataBaseService.ts","app/common/services/VoiceService.ts","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["ToolbarComponent","pageLabel","onClick","cardsCount","AppBar","position","Toolbar","className","IconButton","edge","color","Typography","variant","useChannel","channel","next","additionalErrorHandler","deepEqual","value","useRef","subscription","current","closed","subscribe","useEffect","unsubscribe","useCallbackFactory","initialState","services","context","settings","location","useLocation","history","useHistory","useState","state","setState","setSubscription","subscriptions","forEach","subscribtion","push","useUnsubscribe","callbackSettings","useContext","callbackFactory","callback","args","externalCallbackSettings","onPageLabelChannel","label","prevState","empty","navigationPanelService","navigationPanelOpenChannel","defaultServiceProvider","dependenciesConstructors","dependenciesClasses","updateDependenciesClasses","dependencyConstructor","useConstructor","isFirstRun","DependenciesContext","createContext","DependenciesProvider","functions","children","ref","func","name","Provider","classInstance","dependencyKey","constructor","dependenciesInjectionPath","getDependency","dependency","clearDependenciesPath","initialArgs","countOfInjectionKey","key","Error","join","exec","toString","split","map","arg","charAt","toUpperCase","slice","useDependency","useMemo","jsonEqual","other","Array","length","JSON","stringify","fromThread","workerFunction","thread","functionString","functionBlob","Blob","type","Worker","URL","createObjectURL","functionToThread","Observable","observer","postMessage","onmessage","event","data","complete","terminate","onerror","err","error","Channel","observableCreator","outputSubject","previousEmittedValue","this","Subject","customErrorHandler","outputSubjectSubscription","globalNextHandler","globalErrorHandler","result","equalityError","console","setGlobalErrorHandler","setGlobalNextHandler","ISortVariant","Routs","path","ToolbarService","storageService","pageLabelChannel","cardsCountInGroupChannel","string","cardsGroupsId","of","pipe","switchMap","getBackup","backup","cardsGroupIndex","findIndex","group","id","cards","getCardsCount","nameCardsGroup","getGroupName","getPageLabel","NavigationPanelService","onLoadCardsCount","toolbarService","pathname","cardsGroupID","onCardsCountInGroupChannel","onLoadLabel","ToolbarContainer","AppContext","click","useCallback","NavigationLinkComponent","toggleDrawer","ListItem","button","to","NavigationPanelComponent","isOpen","SwipeableDrawer","anchor","open","onClose","onOpen","List","onNavigationPanelOpenChannel","onToggleDrawer","keyboardEvent","nativeEvent","NavigationPanelContainer","ErrorComponent","errorMessage","handleClose","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onErrorChannel","ErrorService","errorChannel","ErrorContainer","errorService","close","SpinnerComponent","isShow","LinearProgress","onSpinnerCounterChannel","spinnerCounter","SpinnerService","spinnerCounterChannel","difference","SpinnerContainer","spinnerService","DialogTitleComponent","titleBackgroundColor","icon","style","backgroundColor","ConfirmDialogComponent","onClickAgree","onClickDisagree","message","autoFocus","defaultConfirmDialogState","onOpenDialogChannel","confirmDialogContainerState","confirmDialogService","confirmationChannel","ConfirmDialogService","openDialogChannel","tap","ConfirmDialogContainer","clickAgree","clickDisagree","AddButtonComponent","Fab","size","CircularProgressComponent","percent","Box","display","CircularProgress","top","left","bottom","right","alignItems","justifyContent","component","Math","round","ListItemMenuComponent","menuSetup","React","anchorEl","setAnchorEl","keepMounted","Boolean","menuItem","MenuItem","handler","fieldName","currentTarget","DATE_FORMAT","CardsGroupsListItemComponent","cardsGroup","onClickItem","onEditItem","onDeleteItem","onResetProgress","onStartRepeatingDifficultCards","ListItemIcon","percentRepeatedCards","ListItemText","primary","secondary","format","repeatingDate","Date","FilterComponent","onChangeSearchableText","filter","onChangeSorting","sortVariants","Accordion","AccordionSummary","expandIcon","TextField","required","placeholder","onChange","target","searchableText","marginRight","stopPropagation","preventDefault","AccordionDetails","Select","sort","IRangeOfKnowledge","CardsGroupsListComponent","cardsGroups","onOpenEditor","height","NONE","DATE_ASK","DATE_DESK","NAME_ASK","NAME_DESK","PROGRESS_ASK","PROGRESS_DESC","itemData","itemSize","itemCount","overscanCount","width","index","cardGroup","cardsGroupsListService","isConfirm","resetProgressChannel","groupDeleteChannel","onConstructor","groupsListChannel","filterChannel","onResetProgressChannel","onGroupDeleteChannel","onGroupsListChannel","sortVariant","newFilter","changeFilterChannel","onChangeFilterChannel","defaultFilter","onFilterChannel","IRepeatingType","CardsGroupsListService","startRepeatingDifficultCardsChannel","cardsGroupId","getStatistic","statistic","getSettings","cardsInProgress","Map","Object","entries","cardsInProgressFrequency","a","card","Number","b","cardsForRepeating","item","difficultCardsAmountForRepeating","getDifficultCardsForRepeating","defer","autoObsolete","isEnable","timeInProgress","timeInDone","millisecondsInDay","currentDate","getTime","timeInProgressMilliseconds","timeInDoneMilliseconds","differences","dateRepeating","rangeOfKnowledge","DONE","IN_PROGRESS","TO_DO","updateObsoleteStatus","setBackup","updateRepeatingDate","statusDone","countRepeatedCardsPercent","mergeMap","getFilter","storedFilter","sortedCards","toLowerCase","indexOf","firstCardGroup","secondCardsGroup","sortByFilter","groupID","deleteGroup","cardGroupIndex","resetRepeatingProgress","storedFilters","setFilter","onStartRepeatingDifficultCardsChannel","cardsIDs","cardsIDsForRepeating","CardsGroupsListContainer","clickItem","openEditor","deleteItem","editItem","resetProgress","changeSorting","changeSearchableText","startRepeatingDifficultCards","GoogleAuthComponent","onSuccess","onFailure","clientId","buttonText","scope","response","googleAuthService","loginChannel","accessToken","onLoginChannel","replace","Dependency","GoogleAuthService","authToken","setAuthToken","GoogleAuthContainer","success","failure","BackupMenuComponent","backupID","onLoad","onDelete","BackupsListItemComponent","backupName","backupDate","GoogleBackupsComponent","backupsFiles","onCreate","createdTime","onBackupsNameLoadChannelError","onBackupsNameLoadChannel","onBackupLoadChannelError","onBackupLoadChannel","onBackupDeleteChannel","googleBackupsService","backupsNameLoadChannel","onBackupUploadChannel","backupLoadChannel","backupDeleteChannel","getBackupFolder","token","url","googleDriveFilesAPI","fetch","headers","method","then","json","files","find","file","mimeType","GoogleBackupsService","backupUploadChannel","getAuthToken","from","folder","getBackupFiles","googleDriveFiles","googleDriveFile","date","outputFormat","getFullYear","getMonth","getDate","getHours","getMinutes","formatCreatedDate","fileId","loadBackupFile","requestOptions","body","createBackupFolder","folderId","cardsAmount","createBackupName","fileName","parents","createEmptyBackupFile","responseType","uploadBackupFile","fileID","deleteBackupFile","GoogleBackupsContainer","load","deleteBackup","CardsListActions","onOpenRepeater","onStartSelecting","onMovingSelectedCards","onDeleteSelectedCards","onCopySelectedCards","hideOpenRepeaterButton","hideOpenEditorButton","hideMovingSelectedCardsButton","hideDeleteSelectedCardsButton","hideCopySelectedCardButton","CardPrimaryTextComponent","question","answer","CardsListItemComponent","onSelect","isEnabledSelecting","isSelected","dateText","getIconColor","Checkbox","checked","tabIndex","disableRipple","CardsListComponent","onSelectItem","selectedItems","CardsComponent","QUESTION_ASK","QUESTION_DESK","STATUS_ASK","STATUS_DESK","ANSWER_ASK","ANSWER_DESK","cardsListService","deleteCardsChannel","selectionDialogService","selectionChannel","copyCardsChannel","destinationGroupID","title","selectionItems","existedGroupsIDs","movingCardsChannel","cardID","cardsIDsBySelectedItemsChannel","cardsIDsByGroupIDsChannel","onCardsChannel","onCardsIDsByGroupIDsChannel","onCardsIDsBySelectedItemsChannel","cardsChannel","existedGroupsIDsChannel","onChangeFilter","onResetCardProgressChannel","onDeleteSingleCardChannel","onMovingCardsChannel","onCopyCardsChannel","onDeleteCardsChannel","onExistedGroupsIDsChannel","deleteSingleCardChannel","resetCardProgressChannel","getCardsByGroup","foundCardsGroup","deleteSingleCard","cardIndex","selectedItemsObjectToArray","selectedItemsObject","array","getExistedCardsGroups","CardsService","foundByTextCards","card1","card2","filterCards","resetCardProgress","selectedCardsIDs","selectedCards","changeCardsGroup","copyCardsInGroup","deleteCards","cardsToIDS","ids","selectedItemsToIDs","SelectionDialogService","CardsContainer","startSelecting","openRepeater","selectItem","movingSelectedCards","copySelectedCards","deleteSelectedCards","StatisticComponent","repeatingProgress","todo","inProgress","done","AllCardsRepeatedComponent","onBackClick","CardsHeaderComponent","isQuestionSide","onSwitchEditing","onReadByVoiceEngine","isEditable","Campaign","gutterBottom","Check","Edit","LongTextViewerComponent","viewHeight","text","onClickText","paddingTop","TextEditorComponent","onChangeText","changeableText","multiline","LongTextEditorComponent","DeleteButtonFooterComponent","CardActions","QuestionCardComponent","onClickCard","cardHeight","onDeleteCard","onChangeQuestion","Card","CardContent","AnswerCardFooterComponent","onClickYesNoButton","AnswerCardComponent","onChangeAnswer","actionStatus","setActionStatus","getText","cardBackgroundColor","CardsContentComponent","CardsRepeaterComponent","cardsRepeaterService","cardChannel","defaultCard","onCardChannel","repeatingProgressChannel","onCardEditingChannel","defaultRepeatingProgress","onStatisticChannel","onRepeatingResultChannel","isKnown","repeatingResultChannel","goBack","initDefaultCard","cardsEditorService","cardEditingChannel","editableCard","readByVoiceEngineChannel","onReadByVoiceEngineChannel","changeRangeOfKnowledge","getCardForRepeating","repeatingType","foundCard","RANDOM","randomIndex","copy","floor","random","shuffleCards","refreshCardRepeatingDate","updateStatistic","today","month","year","foundDayIndex","dailyStatistic","dayStatistic","readByVoiceEngine","voice","synth","window","speechSynthesis","speaking","cancel","speechSynthesisUtterance","SpeechSynthesisUtterance","warn","lang","rate","speak","prepareTextForVoiceEngine","log","CardsRepeaterService","voiceService","statisticValue","foundCards","getCardsByIDs","getRepeatingProgress","setStatistic","inputText","getRandomVoice","CardsEditorService","saveCard","getEditingCard","CardRepeaterContainer","clickCard","backClick","switchEditing","changeQuestion","changeAnswer","deleteCard","onLoadBackupChannel","onFileSelect","localBackupsService","reader","FileReader","onload","readerEvent","games","loadBackupChannel","readAsText","LocalBackupsService","localBackupChannel","fileData","blob","fileBuffer","document","createElement","href","download","revokeObjectURL","saveBackupFile","backupFile","parse","LocalBackupsContainer","handleFileSelect","CardsGroupsEditorComponent","groupName","onChangeGroupName","onSaveGroup","cardsGroupsEditorService","groupEditingChannel","groupChannel","onGroupEditingChannel","defaultCardsGroup","onGroupChannel","CardsGroupsEditorService","editedCardGroup","saveCardsGroup","cardGroupID","getEditingCardsGroup","CardsGroupsEditorContainer","changeGroupName","saveGroup","CardsEditorComponent","onSaveCard","CardsEditorContainer","SettingsSwitcherComponent","FormControlLabel","control","Switch","SettingsNumberInputComponent","Input","SettingsComponent","onChangeAlgorithm","onChangeAutoObsolete","onChangeTimeInDone","onChangeTimeInProgress","FormGroup","FormLabel","RadioGroup","DEFAULT","Radio","defaultSettings","onChangeSettingsChannel","settingsService","settingsChannel","onSettingsChannel","changeSettingsChannel","SettingsService","setSettings","SettingsContainer","changeAlgorithm","changeAutoObsolete","changeTimeInDone","changeTimeInProgress","CardViewerComponent","props","cardViewerService","getCardForViewing","i","CardViewerService","CardViewerContainer","clickYesNoButton","RemoveButtonComponent","rows","onRemoveStatistic","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","row","statisticService","statisticChannel","removeStatisticChannel","onRemoveStatisticChannel","defaultStatistic","cardsInDone","StatisticService","reverse","dateAsString","monthAsString","inProgressSum","keys","k","doneSum","getRowsFromStatistic","StatisticContainer","removeStatistic","SelectingGroupListItem","RepeaterEditorComponent","onSaveRepeater","selectedGroups","onChangeName","repeaterName","defaultRepeater","cardsGroupsIDs","repeater","onSaveRepeaterChannel","repeaterEditorService","saveRepeaterChannel","onUpdateGroupsIDsChannel","updateGroupsIDsChannel","onRepeaterChannel","selectedGroupsChannel","repeaterID","repeaterChannel","onSelectedGroupsChannel","RepeaterEditorService","getRepeaters","repeaters","repeaterIndex","updateExistRepeater","setRepeaters","updateGroupsIDs","getRepeaterByID","getSelectedGroups","RepeaterEditorContainer","saveRepeater","select","changeName","colors","chosenColors","RepeaterListItem","onStartRepeating","onDeleteRepeater","Stack","direction","groupsNames","isChosenColor","getRandomColor","Chip","borderColor","RepeaterListComponent","onEditRepeater","onRepeaterListChannel","repeaterListService","repeaterListChannel","onStartRepeatingChannel","startRepeatingChannel","onRemoveRepeater","removingRepeaterChannel","RepeaterListService","mapGroupsNameToRepeater","mappedRepeaters","repeatedCardsCount","updateRepeatersProgress","idsForRepeating","getCardsIDsFromRepeater","removeRepeater","RepeaterListContainer","startRepeating","editRepeater","NavigationContainer","exact","SelectionDialogComponent","itemID","SelectionDialogContainer","defaultAppState","StorageService","dataBaseService","cardsStorageID","authTokenLocalStorageID","settingsID","filterID","statisticID","repeatersID","getBackupFromDataBase","get","setBackupToDataBase","set","Promise","resolve","reject","localStorage","getItem","setItem","STORE_NAME","Dependencies","dataBase","DATA_BASE_NAME","put","openDB","upgrade","db","createObjectStore","voices","addEventListener","getVoices","App","appState","setAppState","screen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","catch","ReactDOM","render","getElementById","process","origin","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.28cbf172.chunk.js","sourcesContent":["import {FC} from 'react';\nimport {AppBar, IconButton, Toolbar, Typography} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nimport './ToolbarComponent.css'\nimport {IToolbarComponent} from './types/IToolbarComponent';\n\nexport const ToolbarComponent: FC<IToolbarComponent> = ({pageLabel, onClick, cardsCount}) => {\n\n    return (\n        <AppBar position=\"fixed\">\n            <Toolbar className=\"toolbar\">\n                <IconButton className=\"toolbar_menu-icon\" edge=\"start\" color=\"inherit\" aria-label=\"menu\"\n                            onClick={onClick}>\n                    <MenuIcon/>\n                </IconButton>\n                <Typography className=\"toolbar_label\" variant=\"h6\">\n                    {pageLabel}{cardsCount !== -1 ? ` (cards count: ${cardsCount})` : ''}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n};\n","import {useEffect, useRef} from 'react';\nimport {Subscription} from 'rxjs';\n\nimport {Channel} from '../Channel';\n\nexport const useChannel = <A, D>(\n    channel: Channel<A, D>,\n    next?: (value: D) => void,\n    additionalErrorHandler?: (error: Error) => void,\n    deepEqual: boolean = false\n) => {\n\n    const value = useRef<{ subscription: Subscription | null }>({\n        subscription: null\n    });\n\n    if (!value.current.subscription || value.current.subscription.closed) {\n        const subscription = channel.subscribe(next, additionalErrorHandler, deepEqual);\n        value.current.subscription = subscription;\n    }\n\n    useEffect(() => {\n        return () => {\n            channel.unsubscribe();\n        }\n    }, [channel]);\n};\n","import {useHistory, useLocation} from 'react-router';\nimport {Context, useContext, useState} from 'react';\nimport {useUnsubscribe} from './useUnsubscribe';\nimport {ICallbackSettings} from '../react-types/ICallbackSettings';\nimport {CallbackFactory} from '../react-callback-factory/CallbackFactory';\n\nexport const useCallbackFactory = <T extends ICallbackSettings<any, any, any, any>>(\n    initialState: T['state'],\n    services: T['services'],\n    context: Context<T['context']>\n) => {\n    const location = useLocation<T['location']>();\n\n    const history = useHistory<T['location']>();\n\n    const [state, setState] = useState<T[\"state\"]>(initialState);\n\n    const {setSubscription} = useUnsubscribe();\n\n    const value = useContext<T[\"context\"]>(context);\n\n    const callbackSettings: ICallbackSettings<T['state'], T['services'], T['location']['state'], T['context']> = {\n        location,\n        history,\n        services,\n        state,\n        setState,\n        context: value,\n        setSubscription\n    }\n\n    const externalCallbackSettings = callbackSettings as Pick<ICallbackSettings<T['state'], T['services'], T['location']['state'], T['context']>,\n        Exclude<keyof ICallbackSettings<T['state'], T['services'], T['location']['state'], T['context']>, 'services'>>\n\n    return {\n        callbackFactory: CallbackFactory(callbackSettings),\n        externalCallbackSettings\n    };\n}","import {ICallback} from \"../react-types/ICallback\";\n\nexport const CallbackFactory = <S>(settings: S) => <A>(callback: ICallback<S, A>) => {\n    return (args?: A) => callback(settings, args)\n}","import {useEffect, useRef} from 'react';\nimport {Subscription} from 'rxjs';\n\nexport const useUnsubscribe = () => {\n\n    const subscriptions = useRef<Array<Subscription>>([]);\n\n    useEffect(() => {\n        return () => {\n            subscriptions.current.forEach((subscription: Subscription) => {\n                if( !subscription.closed ) {\n                    subscription.unsubscribe();\n                }\n            });\n            subscriptions.current = [];\n        }\n    }, []);\n\n    return { setSubscription: (subscribtion: Subscription) => {\n        subscriptions.current.push(subscribtion);\n    }}\n};\n","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ToolbarCallbackSettings} from '../types/ToolbarCallbackSettings';\n\nexport const onPageLabelChannel: ICallback<ToolbarCallbackSettings, string> = (\n    {setState},\n    label = ''\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            label\n        }\n    });\n}","export const empty = {\n    empty: 'empty'\n};","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ToolbarCallbackSettings} from \"../types/ToolbarCallbackSettings\";\nimport {MouseEvent} from \"react\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onClick: ICallback<ToolbarCallbackSettings, MouseEvent> = (\n    {services: {navigationPanelService}}\n) => {\n    navigationPanelService.navigationPanelOpenChannel.next(empty);\n}","import {IServicesProvider} from \"../types/IServicesProvider\";\nimport {Dependency} from \"../Dependency\";\n\nexport const defaultServiceProvider: IServicesProvider = {\n    dependenciesConstructors: {},\n    dependenciesClasses: {},\n    updateDependenciesClasses: (dependencyConstructor: Dependency) => {\n    }\n};","import {useRef} from 'react';\n\nexport const useConstructor = (callback: () => void) => {\n\n    const value = useRef({isFirstRun: true});\n\n    if (value.current.isFirstRun) {\n        callback();\n        value.current.isFirstRun = false;\n    }\n};\n","import {createContext, FC, useRef} from \"react\";\nimport {defaultServiceProvider} from \"./defaults/defaultServiceProvider\";\nimport {useConstructor} from \"../react-hooks/useConstructor\";\nimport {IServicesProvider} from \"./types/IServicesProvider\";\nimport {Dependency} from \"./Dependency\";\nimport {IDependencyArgs} from \"./types/IDependencyArgs\";\n\nexport const DependenciesContext = createContext<IServicesProvider>(defaultServiceProvider);\n\nexport const DependenciesProvider: FC<{ functions: { new(...args: IDependencyArgs<any, any, any, any>): Dependency }[] }> = (\n    {functions, children}\n) => {\n\n    const ref = useRef(defaultServiceProvider);\n\n    const updateDependenciesClasses = (classInstance: Dependency) => {\n        const dependencyKey = classInstance.constructor.name;\n        ref.current.dependenciesClasses[dependencyKey] = classInstance;\n    }\n\n    useConstructor(() => {\n        functions.forEach((func) => {\n            ref.current.dependenciesConstructors[func.name] = func;\n        })\n    });\n\n    return <DependenciesContext.Provider value={{...ref.current, updateDependenciesClasses}}>\n        {children}\n    </DependenciesContext.Provider>\n}","import {Dependency} from '../Dependency';\nimport {IServicesProvider} from '../types/IServicesProvider';\nimport {IDependencyArgs} from '../types/IDependencyArgs';\n\nlet dependenciesInjectionPath: string[] = [];\nexport const getDependency = <T extends Dependency,\n    A extends Dependency,\n    B extends Dependency,\n    C extends Dependency,\n    >(\n    dependencyKey: { new(...args: IDependencyArgs<A, B, C, any>): T } | string,\n    context: IServicesProvider,\n    clearDependenciesPath = true\n) => {\n    let dependency;\n    let initialArgs: Dependency[] = [];\n\n    if (typeof dependencyKey !== 'string') {\n        dependencyKey = dependencyKey.name;\n    }\n    if (clearDependenciesPath) {\n        dependenciesInjectionPath = [];\n    }\n\n    dependenciesInjectionPath.push(dependencyKey);\n    let countOfInjectionKey = 0;\n    dependenciesInjectionPath.forEach((key: string) => {\n        if (key === dependencyKey) {\n            countOfInjectionKey++;\n        }\n    });\n    if (countOfInjectionKey > 2) {\n        throw Error(`There seems to be circular dependency: ${dependenciesInjectionPath.join(' -> ')}!`);\n    }\n\n    if (\n        !context.dependenciesClasses[dependencyKey]\n        && context.dependenciesConstructors[dependencyKey]\n    ) {\n        const constructor = context.dependenciesConstructors[dependencyKey];\n        const args = /constructor\\(\\s*([^)]+?)\\s*\\)/.exec(constructor.toString())\n\n        initialArgs = args ? args[1].split(/\\s*,\\s*/).map(\n            (arg) => {\n                arg = arg.charAt(0).toUpperCase() + arg.slice(1);\n                return getDependency(arg, context, false);\n            }\n        ) : [];\n\n        const classInstance = new constructor(...initialArgs);\n        context.updateDependenciesClasses(classInstance);\n        dependency = classInstance;\n    } else if (context.dependenciesClasses[dependencyKey]) {\n        dependency = context.dependenciesClasses[dependencyKey];\n    } else {\n        throw Error(`There is no any suited dependency with name: ${dependencyKey}!`);\n    }\n    return dependency;\n}","import {useContext, useMemo} from \"react\";\nimport {IServicesProvider} from \"../types/IServicesProvider\";\nimport {DependenciesContext} from \"../DependenciesProvider\";\nimport {Dependency} from \"../Dependency\";\nimport {getDependency} from \"../logic/getDependency\";\nimport {IDependencyArgs} from \"../types/IDependencyArgs\";\n\nexport const useDependency = <T extends Dependency,\n    A extends Dependency,\n    B extends Dependency,\n    C extends Dependency>(\n    dependencyConstructor: { new(...args: IDependencyArgs<A, B, C, any>): T }\n): T => {\n    const context = useContext<IServicesProvider>(DependenciesContext);\n\n    const dependency = useMemo(() => {\n        return getDependency(dependencyConstructor, context);\n    }, []);\n\n    return dependency as T;\n}","export const jsonEqual = <T>(args: { value: T, other: T }) => {\n    const {value, other} = args;\n\n    if(typeof value !== 'object') {\n        return value === other;\n    }\n\n    if(value instanceof Array && other instanceof Array) {\n       if(value.length !== other.length) {\n           return false;\n       }\n    }\n\n    return JSON.stringify(value) === JSON.stringify(other);\n}","import {Observable} from 'rxjs';\n\nimport {functionToThread} from \"../logic/functionToThread\";\n\nexport const fromThread = <A, R>(arg: A, workerFunction: (arg: A) => R): Observable<R> => {\n\n    const thread = functionToThread(workerFunction)\n\n    return new Observable(observer => {\n        thread.postMessage(arg);\n        thread.onmessage = (event: MessageEvent) => {\n            observer.next(event.data);\n            observer.complete();\n            thread.terminate();\n        }\n        thread.onerror = (err) => {\n            observer.error(err);\n        }\n    })\n}","export const functionToThread = <A, R>(workerFunction: (arg: A) => R) => {\n\n    const functionString = `(function worker() {\n            var self = this;\n            self.onmessage = function(e) {\n                const result = (${workerFunction.toString()})(e.data)\n                self.postMessage(result);\n            }\n        })()`;\n\n    const functionBlob = new Blob([functionString], {type: 'text/javascript'});\n\n    return new Worker(URL.createObjectURL(functionBlob));\n}","import {Observable, Subject, Subscription} from 'rxjs';\n\nimport {jsonEqual} from \"./logic/jsonEqual\";\nimport {fromThread} from \"../worker-observable/operators/fromThread\";\n\nexport class Channel<A, D> {\n\n    private readonly outputSubject: Subject<D>;\n    private observableCreator: (arg: A) => Observable<D>;\n    private subscriptions: Subscription[] = [];\n    private previousEmittedValue: D | null = null;\n    private static globalErrorHandler = (error: Error) => {};\n    private static globalNextHandler = () => {};\n\n    constructor(\n        observableCreator: (arg: A) => Observable<D>\n    ) {\n        this.outputSubject = new Subject<D>();\n        this.observableCreator = observableCreator;\n    }\n\n    next(value: A) {\n        //Don't make implement complete method because it can affect on subject behaviour in app\n        this.subscriptions.push(this.observableCreator(value).subscribe(\n            (value) => {\n                this.outputSubject.next(value);\n            },\n            (error) => {\n                this.outputSubject.error(error);\n            }\n        ));\n    }\n\n    subscribe(\n        next?: (data: D) => void,\n        customErrorHandler?: (error: Error) => void,\n        deepEqual = false\n    ): Subscription {\n        const outputSubjectSubscription = this.outputSubject.subscribe(\n            (data: D) => {\n                if (next) {\n                    if (deepEqual) {\n                        this.deepEqual(next, data);\n                    } else {\n                        next(data)\n                        Channel.globalNextHandler()\n                    }\n                }\n            },\n            (error: Error) => {\n                if (customErrorHandler) {\n                    customErrorHandler(error);\n                }\n                Channel.globalErrorHandler(error)\n            }\n        );\n        this.subscriptions.push(outputSubjectSubscription);\n        return outputSubjectSubscription;\n    }\n\n    private deepEqual(next: (data: D) => void, data: D): void {\n        if (!this.previousEmittedValue) {\n            next(data)\n            Channel.globalNextHandler()\n            this.previousEmittedValue = data;\n        }\n\n        const subscription = fromThread(\n            {value: data, other: this.previousEmittedValue},\n            jsonEqual\n        ).subscribe(\n            (result) => {\n                if (!result) {\n                    next(data)\n                    Channel.globalNextHandler()\n                    this.previousEmittedValue = data;\n                }\n            },\n            (equalityError) => {\n                console.error(equalityError)\n            }\n        )\n        this.subscriptions.push(subscription)\n    }\n\n    unsubscribe() {\n        this.subscriptions.forEach((subscribtion: Subscription) => {\n            if (!subscribtion.closed) {\n                subscribtion.unsubscribe();\n            }\n        });\n        this.subscriptions = [];\n        this.previousEmittedValue = null;\n    }\n\n    static setGlobalErrorHandler = (globalErrorHandler: (error: Error) => void) => {\n        Channel.globalErrorHandler = globalErrorHandler;\n    }\n\n    static setGlobalNextHandler = (globalNextHandler: () => void) => {\n        Channel.globalNextHandler = globalNextHandler;\n    }\n}\n","export const Routs = {\n    googleAuth: {\n        path: '/google-auth',\n        name: 'Auth Google'\n    },\n\n    googleBackups: {\n        path: '/google-backups',\n        name: 'Google Backups'\n    },\n\n    cardsGroups: {\n        path: '/cards-groups',\n        name: 'Cards Groups'\n    },\n\n    cards: {\n        path: '/cards-list',\n        name: 'Cards'\n    },\n\n    cardsRepeater: {\n        path: '/cards-repeater',\n        name: 'Repeat Card'\n    },\n\n    cardsEditor: {\n        path: '/cards-editor',\n        name: 'Edit Card'\n    },\n\n    localBackups: {\n        path: '/local-backups',\n        name: 'Local Backups'\n    },\n\n    cardsGroupEditor: {\n        path: '/cards-group-editor',\n        name: 'Edit Group'\n    },\n\n    settings: {\n        path: '/settings',\n        name: 'Settings'\n    },\n\n    cardViewer: {\n        path: '/card-viewer',\n        name: 'Card Preview'\n    },\n\n    statistic: {\n        path: '/statistic',\n        name: 'Statistic'\n    },\n\n    repeaterEditor: {\n        path: '/repeater-editor',\n        name: 'Edit repeater'\n    },\n\n    repeaterList: {\n        path: '/repeater-list',\n        name: 'Repeater list'\n    }\n};\n","export enum ISortVariant {\n    NONE = 'Нет сортировки',\n    QUESTION_ASK = 'По вопросу по возрастанию',\n    QUESTION_DESK = 'По вопросу по убыванию',\n    ANSWER_ASK = 'По ответу по возрастанию',\n    ANSWER_DESK = 'По ответу по убыванию',\n    NAME_ASK = 'По имени по возрастанию',\n    NAME_DESK = 'По имени по убыванию',\n    STATUS_ASK = 'По стсатусу сначала пройденные',\n    STATUS_DESK = 'По статусу сначала не пройденные',\n    DATE_ASK = 'По дате повторения сначала устаревшие',\n    DATE_DESK = 'По дате повторения сначала новые',\n    PROGRESS_ASK = 'Прогресс повторения повышение',\n    PROGRESS_DESC = 'Прогресс повторения понижение',\n}","import {of, switchMap} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {getPageLabel} from './logic/getPageLabel';\nimport {map} from 'rxjs/operators';\nimport {Routs} from '../../common/Routs';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {getCardsCount} from './logic/getCardsCount';\nimport {getGroupName} from './logic/getGroupName';\n\nexport class ToolbarService {\n\n    public pageLabelChannel: Channel<{ path: string, cardsGroupsId: number }, string>;\n\n    public cardsCountInGroupChannel: Channel<{ path: string, cardsGroupsId: number }, number>;\n\n    constructor(storageService: StorageService) {\n        this.cardsCountInGroupChannel = new Channel(\n            ({path: string, cardsGroupsId}) => of({path: string, cardsGroupsId}).pipe(\n                switchMap(({path, cardsGroupsId}) => {\n                    const isShowingCardsCount = path === Routs.cards.path || path === Routs.cardsRepeater.path\n                    if (isShowingCardsCount) {\n                        return storageService.getBackup().pipe(\n                            map((backup: ICardsGroup[]) => getCardsCount(backup, cardsGroupsId))\n                        );\n                    } else {\n                        return of(-1);\n                    }\n                })\n            )\n        )\n\n        this.pageLabelChannel = new Channel(\n            ({path, cardsGroupsId}) => {\n                return of({path, cardsGroupsId}).pipe(\n                    switchMap(({path, cardsGroupsId}) => {\n                            const isShowingGroupName = path === Routs.cards.path || path === Routs.cardsRepeater.path || path === Routs.cardViewer.path\n                            if (isShowingGroupName) {\n                                return storageService.getBackup().pipe(\n                                    map((backup: ICardsGroup[]) => getGroupName(backup, cardsGroupsId))\n                                );\n                            }\n                            return of(getPageLabel(path))\n                        }\n                    )\n                )\n            }\n        )\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getCardsCount = (backup: ICardsGroup[], cardsGroupsId: number) => {\n    const cardsGroupIndex = backup.findIndex((group) => {\n        return group.id === cardsGroupsId;\n    });\n    if (cardsGroupIndex > -1) {\n        return backup[cardsGroupIndex].cards.length;\n    } else {\n        return -1;\n    }\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getGroupName = (backup: ICardsGroup[], cardsGroupsId: number) => {\n    const cardsGroupIndex = backup.findIndex((group) => {\n        return group.id === cardsGroupsId;\n    });\n    if (cardsGroupIndex > -1) {\n        return backup[cardsGroupIndex].nameCardsGroup\n    } else {\n        return '';\n    }\n}","import {Routs} from \"../../../common/Routs\";\n\nexport const getPageLabel = (path: string) => {\n    if (path === Routs.googleAuth.path) {\n        return Routs.googleAuth.name;\n    }\n\n    if (path === Routs.googleBackups.path) {\n        return Routs.googleBackups.name;\n    }\n\n    if (path === Routs.cardsGroups.path) {\n        return Routs.cardsGroups.name;\n    }\n\n    if (path === Routs.cards.path) {\n        return Routs.cards.name;\n    }\n\n    if (path === Routs.cardsRepeater.path) {\n        return Routs.cardsRepeater.name;\n    }\n\n    if (path === Routs.localBackups.path) {\n        return Routs.localBackups.name;\n    }\n\n    if (path === Routs.settings.path) {\n        return Routs.settings.name;\n    }\n\n    if (path === Routs.cardViewer.path) {\n        return Routs.cardViewer.name;\n    }\n\n    if (path === Routs.statistic.path) {\n        return Routs.statistic.name;\n    }\n\n    return 'My Cards'\n}","import {of} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\nimport {empty} from \"../../../MyTools/channel-conception/defaults/empty\";\n\nexport class NavigationPanelService {\n\n    public navigationPanelOpenChannel: Channel<IEmpty, IEmpty>;\n\n    constructor() {\n        this.navigationPanelOpenChannel = new Channel(() => of(empty))\n    }\n}\n","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ToolbarCallbackSettings} from '../types/ToolbarCallbackSettings';\n\nexport const onLoadCardsCount: ICallback<ToolbarCallbackSettings, string> = (\n    {\n        location,\n        services: {toolbarService}\n    }\n) => {\n    toolbarService.cardsCountInGroupChannel.next({\n        path: location.pathname,\n        cardsGroupsId: location.state ? location.state.cardsGroupID : -1\n    });\n}","import {ToolbarContainerState} from '../types/ToolbarContainerState';\n\nexport const initialState: ToolbarContainerState = {\n    label: '',\n    cardsCount: -1\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ToolbarCallbackSettings} from '../types/ToolbarCallbackSettings';\n\nexport const onCardsCountInGroupChannel: ICallback<ToolbarCallbackSettings, number> = (\n    {setState},\n    cardsCount = -1\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            cardsCount\n        }\n    })\n}","import {ToolbarCallbackSettings} from '../types/ToolbarCallbackSettings';\nimport {ICallback} from '../../../../MyTools/react-types/ICallback';\n\nexport const onLoadLabel: ICallback<ToolbarCallbackSettings, string> = (\n    {\n        location,\n        services: {toolbarService}\n    }\n) => {\n    toolbarService.pageLabelChannel.next({\n        path: location.pathname,\n        cardsGroupsId: location.state ? location.state.cardsGroupID : -1\n    });\n}","import React, {FC, useCallback, useEffect} from 'react';\n\nimport {ToolbarComponent} from './ToolbarComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {ToolbarCallbackSettings} from './types/ToolbarCallbackSettings';\nimport {onPageLabelChannel} from './channels-callbacks/onPageLabelChannel';\nimport {onClick} from './ui-callbacks/onClick';\nimport {useDependency} from '../../../MyTools/react-di/hooks/useDependency';\nimport {ToolbarService} from './ToolbarService';\nimport {NavigationPanelService} from '../navigation-panel/NavigationPanelService';\nimport {onLoadCardsCount} from './ui-callbacks/onLoadCardsCount';\nimport {initialState} from './defaults/initialState';\nimport {onCardsCountInGroupChannel} from './channels-callbacks/onCardsCountInGroupChannel';\nimport {onLoadLabel} from './ui-callbacks/onLoadLabel';\n\nexport const ToolbarContainer: FC = () => {\n\n    const toolbarService = useDependency(ToolbarService);\n    const navigationPanelService = useDependency(NavigationPanelService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<ToolbarCallbackSettings>(\n        initialState,\n        {toolbarService, navigationPanelService},\n        AppContext\n    );\n\n    const {state, location} = externalCallbackSettings;\n\n    useChannel(toolbarService.pageLabelChannel, callbackFactory(onPageLabelChannel))\n    useChannel(toolbarService.cardsCountInGroupChannel, callbackFactory(onCardsCountInGroupChannel))\n\n    useEffect(() => {\n        callbackFactory(onLoadLabel)();\n        callbackFactory(onLoadCardsCount)();\n    }, [location.pathname]);\n\n    const click = useCallback(callbackFactory(onClick), []);\n\n    return (\n        <ToolbarComponent pageLabel={state.label} onClick={click} cardsCount={state.cardsCount}/>\n    )\n};\n","import {Link} from 'react-router-dom';\nimport {ListItem} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {INavigationLinkComponent} from \"./types/INavigationLinkComponent\";\n\nexport const NavigationLinkComponent: FC<INavigationLinkComponent> = (\n    {\n        path,\n        name,\n        toggleDrawer\n    }: INavigationLinkComponent\n) => {\n    return (\n        <ListItem button>\n            <Link to={path} onClick={toggleDrawer}>\n                {name}\n            </Link>\n        </ListItem>\n    )\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {List, SwipeableDrawer} from '@mui/material';\n\nimport {Routs} from '../../common/Routs';\nimport {NavigationLinkComponent} from './elements/navigation-link-component/NavigationLinkComponent';\nimport {INavigationPanelComponent} from \"./types/INavigationPanelComponent\";\n\nexport const NavigationPanelComponent: FC<INavigationPanelComponent> = ({isOpen, toggleDrawer}) => {\n\n    return (\n        <SwipeableDrawer\n            anchor=\"left\"\n            open={isOpen}\n            onClose={toggleDrawer}\n            onOpen={toggleDrawer}\n        >\n            <List>\n                <NavigationLinkComponent path={Routs.cardsGroups.path} name={Routs.cardsGroups.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.repeaterList.path} name={Routs.repeaterList.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.statistic.path} name={Routs.statistic.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.googleAuth.path} name={Routs.googleAuth.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.localBackups.path} name={Routs.localBackups.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.settings.path} name={Routs.settings.name}\n                                         toggleDrawer={toggleDrawer}/>\n            </List>\n        </SwipeableDrawer>\n    )\n};\n\n\n","export const initialState = {\n    isOpen: false\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {NavigationPanelCallbackSettings} from \"../types/NavigationPanelCallbackSettings\";\nimport {IEmpty} from \"../../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport const onNavigationPanelOpenChannel: ICallback<NavigationPanelCallbackSettings, IEmpty> = (\n    {setState}\n) => {\n    setState((prevState) => {\n        return {...prevState, isOpen: true}\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {NavigationPanelCallbackSettings} from \"../types/NavigationPanelCallbackSettings\";\nimport {SyntheticEvent} from \"react\";\n\nexport const onToggleDrawer: ICallback<NavigationPanelCallbackSettings, SyntheticEvent<Element, Event>> = (\n    {setState},\n    event\n) => {\n    const keyboardEvent = event && event.nativeEvent as KeyboardEvent\n    if (event && event.type === 'keydown' && (keyboardEvent?.key === 'Tab' || keyboardEvent?.key === 'Shift')) {\n        return;\n    }\n\n    setState((prevState) => {\n        return {...prevState, isOpen: !prevState.isOpen}\n    });\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {NavigationPanelComponent} from './NavigationPanelComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {initialState} from \"./defaults/initialState\";\nimport {onNavigationPanelOpenChannel} from \"./channels-callbacks/onNavigationPanelOpenChannel\";\nimport {onToggleDrawer} from \"./ui-callbacks/onToggleDrawer\";\nimport {NavigationPanelCallbackSettings} from \"./types/NavigationPanelCallbackSettings\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {NavigationPanelService} from \"./NavigationPanelService\";\n\nexport const NavigationPanelContainer: FC = () => {\n\n    const navigationPanelService = useDependency(NavigationPanelService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<NavigationPanelCallbackSettings>(\n        initialState,\n        {navigationPanelService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel(navigationPanelService.navigationPanelOpenChannel, callbackFactory(onNavigationPanelOpenChannel));\n\n    const toggleDrawer = useCallback(callbackFactory(onToggleDrawer), []);\n\n    return (\n        <NavigationPanelComponent isOpen={state.isOpen} toggleDrawer={toggleDrawer}/>\n    )\n};\n","import {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {IErrorComponent} from './types/IErrorComponent';\n\nexport const ErrorComponent: FC<IErrorComponent> = ({isOpen, errorMessage, handleClose}) => {\n\n    return (\n        <Dialog\n            open={isOpen}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n            onClose={handleClose}\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"Something went wrong\"}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {errorMessage}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button color=\"primary\" onClick={handleClose}>\n                    Ok\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n","export const initialState = {\n    isOpen: false,\n    errorMessage: ''\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ErrorCallbackSettings} from '../types/ErrorCallbackSettings';\n\nexport const onErrorChannel: ICallback<ErrorCallbackSettings, string> = (\n    {setState},\n    errorMessage = ''\n) => {\n    setState(() => {\n        return {\n            isOpen: true,\n            errorMessage\n        }\n    })\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ErrorCallbackSettings} from '../types/ErrorCallbackSettings';\nimport {initialState} from '../defaults/initialState';\n\nexport const onClose: ICallback<ErrorCallbackSettings, void> = (\n    {setState}\n) => {\n    setState(() => {\n        return initialState\n    })\n}","import {of} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class ErrorService {\n    public errorChannel: Channel<string, string>;\n\n\n    constructor() {\n        this.errorChannel = new Channel<string, string>((error: string)=> of(error));\n    }\n\n}\n","import React, {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ErrorComponent} from './ErrorComponent';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {initialState} from './defaults/initialState';\nimport {onErrorChannel} from './channels-callbacks/onErrorChannel';\nimport {onClose} from './ui-callbacks/onClose';\nimport {ErrorCallbackSettings} from './types/ErrorCallbackSettings';\nimport {useDependency} from '../../../MyTools/react-di/hooks/useDependency';\nimport {ErrorService} from './ErrorService';\n\nexport const ErrorContainer: FC = () => {\n\n    const errorService = useDependency(ErrorService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<ErrorCallbackSettings>(\n        initialState,\n        {\n            errorService\n        },\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel(errorService.errorChannel, callbackFactory(onErrorChannel));\n\n    const close = useCallback(callbackFactory(onClose), []);\n\n    return <ErrorComponent isOpen={state.isOpen} errorMessage={state.errorMessage} handleClose={close}/>\n};\n","import {LinearProgress} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {ISpinnerComponent} from \"./types/ISpinnerComponent\";\n\nexport const SpinnerComponent: FC<ISpinnerComponent> = ({isShow}) => {\n    return (\n        isShow ? <LinearProgress color=\"secondary\" /> : null\n    )\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SpinnerCallbackSettings} from \"../types/SpinnerCallbackSettings\";\n\nexport const onSpinnerCounterChannel: ICallback<SpinnerCallbackSettings, number> = (\n    {setState},\n    spinnerCounter = 0\n) => {\n    setState(() => spinnerCounter !== 0);\n}","import {of} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class SpinnerService {\n\n    public spinnerCounterChannel: Channel<number, number>;\n\n    private spinnerCounter = 0;\n\n    constructor() {\n        this.spinnerCounterChannel = new Channel((difference: number) => of('').pipe(map(() => {\n            if(this.spinnerCounter + difference >= 0) {\n                this.spinnerCounter = this.spinnerCounter + difference;\n            }\n            return this.spinnerCounter;\n        })))\n    }\n}\n","import * as React from 'react';\nimport {FC} from 'react';\n\nimport {SpinnerComponent} from './SpinnerComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {SpinnerCallbackSettings} from \"./types/SpinnerCallbackSettings\";\nimport {onSpinnerCounterChannel} from \"./channels-callbacks/onSpinnerCounterChannel\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {SpinnerService} from \"./SpinnerService\";\n\nexport const SpinnerContainer: FC = () => {\n\n    const spinnerService = useDependency(SpinnerService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<SpinnerCallbackSettings>(\n        false,\n        {spinnerService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel<number, number>(spinnerService.spinnerCounterChannel, callbackFactory(onSpinnerCounterChannel));\n\n    return <SpinnerComponent isShow={state}/>\n};\n","import DialogTitle from \"@mui/material/DialogTitle\";\nimport React, {FC} from \"react\";\n\nimport {IDialogTitleComponent} from \"./types/IDialogTitleComponent\";\nimport './DialogTitleComponent.css'\n\nexport const DialogTitleComponent: FC<IDialogTitleComponent> = (\n    {\n        titleBackgroundColor = 'grey',\n        icon = null\n    }\n) => {\n    return <DialogTitle\n        id=\"alert-dialog-title\"\n        style={\n            {\n                backgroundColor: titleBackgroundColor,\n                color: 'white'\n            }\n        }\n    >\n        <div className=\"dialog-title_value\">\n            Warning {icon}\n        </div>\n    </DialogTitle>\n}","import React, {FC} from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\nimport {IConfirmDialogComponent} from \"./types/IConfirmDialogComponent\";\nimport {DialogTitleComponent} from \"./elements/dialog-title/DialogTitleComponent\";\n\nexport const ConfirmDialogComponent: FC<IConfirmDialogComponent> = (\n    {\n        onClickAgree,\n        onClickDisagree,\n        isOpen,\n        message,\n        onClose,\n        titleBackgroundColor = 'grey',\n        icon = null\n    }\n) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitleComponent\n                    titleBackgroundColor={titleBackgroundColor}\n                    icon={icon}\n                />\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClickDisagree} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={onClickAgree} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n","import {ConfirmDialogContainerState} from \"../../parts/confirm-dialog/types/ConfirmDialogContainerState\";\n\nexport const defaultConfirmDialogState: ConfirmDialogContainerState = {\n    isOpen: false,\n    message: '',\n    icon: null,\n    titleBackgroundColor: 'grey'\n}","import {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\nimport {ConfirmDialogContainerState} from \"../types/ConfirmDialogContainerState\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\n\nexport const onOpenDialogChannel: ICallback<ConfirmDialogCallbackSettings, ConfirmDialogContainerState> = (\n    {setState, services: {confirmDialogService}},\n    confirmDialogContainerState = defaultConfirmDialogState\n) => {\n    setState(() => {\n        return {...confirmDialogContainerState}\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\n\nexport const onClose: ICallback<ConfirmDialogCallbackSettings, void> = (\n    {setState, services: {confirmDialogService}}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            isOpen: false, message: ''\n        }\n    });\n    confirmDialogService.confirmationChannel.unsubscribe();\n}","import {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\n\nexport const onClickAgree: ICallback<ConfirmDialogCallbackSettings, void> = (\n    {services: {confirmDialogService}}\n) => {\n    confirmDialogService.confirmationChannel.next(true);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\n\nexport const onClickDisagree: ICallback<ConfirmDialogCallbackSettings, void> = (\n    {services: {confirmDialogService}}\n) => {\n    confirmDialogService.confirmationChannel.next(false);\n}","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ConfirmDialogContainerState} from \"./types/ConfirmDialogContainerState\";\n\nexport class ConfirmDialogService {\n\n    public openDialogChannel = new Channel<ConfirmDialogContainerState, ConfirmDialogContainerState>(\n        (state: ConfirmDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.confirmationChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public confirmationChannel = new Channel<boolean, boolean>((value: boolean) => of(value));\n}\n\n","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {ConfirmDialogComponent} from './ConfirmDialogComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {defaultConfirmDialogState} from \"../../common/defaults/defaultConfirmDialogState\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {onOpenDialogChannel} from \"./channels-callbacks/onOpenDialogChannel\";\nimport {onClose} from \"./ui-callbacks/onClose\";\nimport {onClickAgree} from \"./ui-callbacks/onClickAgree\";\nimport {onClickDisagree} from \"./ui-callbacks/onClickDisagree\";\nimport {ConfirmDialogCallbackSettings} from \"./types/ConfirmDialogCallbackSettings\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {ConfirmDialogService} from \"./ConfirmDialogService\";\n\nexport const ConfirmDialogContainer: FC = () => {\n\n    const confirmDialogService = useDependency(ConfirmDialogService);\n\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<ConfirmDialogCallbackSettings>(\n        defaultConfirmDialogState,\n        {\n            confirmDialogService\n        },\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel(confirmDialogService.openDialogChannel, callbackFactory(onOpenDialogChannel));\n\n    const close = useCallback(callbackFactory(onClose), []);\n    const clickAgree = useCallback(callbackFactory(onClickAgree), [])\n    const clickDisagree = useCallback(callbackFactory(onClickDisagree), [])\n\n    return <ConfirmDialogComponent\n        isOpen={state.isOpen}\n        onClickAgree={clickAgree}\n        onClickDisagree={clickDisagree}\n        onClose={close}\n        message={state.message}\n        titleBackgroundColor={state.titleBackgroundColor}\n        icon={state.icon}\n    />\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport Fab from '@mui/material/Fab';\nimport AddIcon from '@mui/icons-material/Add';\n\nimport {IAddButton} from \"./types/IAddButton\";\nimport './AddButtonComponent.css'\n\nexport const AddButtonComponent: FC<IAddButton> = ({onClick}) => {\n    return <Fab size=\"medium\" color=\"secondary\" aria-label=\"add\" className=\"add-button\" onClick={onClick}>\n        <AddIcon/>\n    </Fab>\n};\n","import React, {FC} from 'react';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nimport {ICircularProgressComponent} from \"./types/ICircularProgressComponent\";\n\nexport const CircularProgressComponent: FC<ICircularProgressComponent> = ({percent}) => {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" value={percent}/>\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                    percent,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n};\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nimport {IListItemMenuComponent} from './types/IListItemMenuComponent';\n\nexport const ListItemMenuComponent: FC<IListItemMenuComponent> = (\n    {menuSetup}\n) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const onMenuClick = (handler: () => void) => () => {\n        handler();\n        handleClose();\n    }\n\n    return (\n        <>\n            <Menu\n                id=\"menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {menuSetup.map((menuItem) => {\n                    return <MenuItem key={menuItem.fieldName} onClick={onMenuClick(menuItem.handler)}>\n                        {menuItem.fieldName}\n                    </MenuItem>\n                })}\n            </Menu>\n            <IconButton aria-controls=\"menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n","export const DATE_FORMAT = \"dd-MM-yyyy\";","import React, {FC} from 'react'\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\n\nimport {CircularProgressComponent} from '../circular-progress/CircularProgressComponent';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport './CardsGroupsListItemComponent.css'\nimport {ICardsGroupsListItemComponent} from './types/ICardsGroupsListItemComponent';\nimport {DATE_FORMAT} from '../../../../common/constants/DATE_FORMAT';\nimport {IMenuSetupItem} from '../../../../common/elements/list-item-menu/types/IMenuSetupItem';\n\nexport const CardsGroupsListItemComponent: FC<ICardsGroupsListItemComponent> = (\n    {\n        cardsGroup,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onStartRepeatingDifficultCards\n    }\n) => {\n\n    const menuSetup: IMenuSetupItem[] = [\n        {\n            fieldName: 'Start Repeating Difficult Cards',\n            handler: () => {\n                onStartRepeatingDifficultCards(cardsGroup.id);\n            }\n        },\n        {\n            fieldName: 'Edit',\n            handler: () => {\n                onEditItem(cardsGroup.id);\n            }\n        },\n        {\n            fieldName: 'Delete',\n            handler: () => {\n                onDeleteItem(cardsGroup.id);\n            }\n        },\n        {\n            fieldName: 'Reset progress',\n            handler: () => {\n                onResetProgress(cardsGroup.id);\n            }\n        }\n    ];\n\n    return <>\n        <ListItem key={cardsGroup.id} button component=\"div\">\n            <ListItemIcon onClick={() => onClickItem(cardsGroup.id)}>\n                <CircularProgressComponent percent={cardsGroup.percentRepeatedCards || 0}/>\n            </ListItemIcon>\n            <ListItemText\n                className=\"cards-groups-list-item_card-name\"\n                onClick={() => onClickItem(cardsGroup.id)}\n                primary={cardsGroup.nameCardsGroup}\n                secondary={'Last repeating date: ' + format(cardsGroup.repeatingDate ? cardsGroup.repeatingDate : new Date(), DATE_FORMAT)}\n            />\n            <ListItemIcon>\n                <ListItemMenuComponent menuSetup={menuSetup}/>\n            </ListItemIcon>\n        </ListItem>\n    </>\n};\n","import {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    TextField,\n} from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport {ChangeEvent, default as React, FC} from \"react\";\n\nimport {ISortVariant} from \"../../types/ISortVariant\";\nimport {IFilterComponent} from \"./types/IFilterComponent\";\n\nexport const FilterComponent: FC<IFilterComponent> = (\n    {\n        onChangeSearchableText,\n        filter,\n        onChangeSorting,\n        sortVariants\n    }\n) => {\n\n    const handleChangingSearchableText = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeSearchableText(event.target.value);\n    };\n\n    const handleChangingSortingVariant = (event: SelectChangeEvent<ISortVariant>) => {\n        onChangeSorting(event.target.value as ISortVariant)\n    }\n\n    return <Accordion>\n        <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n        >\n            <TextField\n                className=\"text-editor\"\n                required\n                id=\"outlined-required\"\n                placeholder=\"Search text\"\n                onChange={handleChangingSearchableText}\n                value={filter.searchableText}\n                style={{\n                    marginRight: '20px',\n                }}\n                onClick={(event) => {\n                    event.stopPropagation()\n                    event.preventDefault()\n                }}\n            />\n        </AccordionSummary>\n        <AccordionDetails>\n            <Select\n                value={filter.sort}\n                label=\"Sorting\"\n                onChange={handleChangingSortingVariant}\n            >\n                {\n                    sortVariants.map((variant: ISortVariant) => {\n                        return <MenuItem key={variant} value={variant}>{variant}</MenuItem>\n                    })\n                }\n            </Select>\n        </AccordionDetails>\n    </Accordion>\n}","import React, {FC} from 'react';\nimport {FixedSizeList as List} from 'react-window';\n\nimport './CardsGroupsListComponent.css'\nimport {AddButtonComponent} from '../../common/elements/add-button/AddButtonComponent';\nimport {CardsGroupsListItemComponent} from './elements/cards-groups-list-item/CardsGroupsListItemComponent';\nimport {ICardsGroupsListComponent} from './types/ICardsGroupsListComponent';\nimport {FilterComponent} from '../../common/elements/filter/FilterComponent';\nimport {ISortVariant} from '../../common/types/ISortVariant';\n\nexport const CardsGroupsListComponent: FC<ICardsGroupsListComponent> = (\n    {\n        cardsGroups,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onOpenEditor,\n        onResetProgress,\n        onChangeSearchableText,\n        onChangeSorting,\n        onStartRepeatingDifficultCards,\n        filter,\n        height,\n    }\n) => {\n\n    return <>\n        <FilterComponent\n            filter={filter}\n            onChangeSearchableText={onChangeSearchableText}\n            onChangeSorting={onChangeSorting}\n            sortVariants={[\n                ISortVariant.NONE,\n                ISortVariant.DATE_ASK,\n                ISortVariant.DATE_DESK,\n                ISortVariant.NAME_ASK,\n                ISortVariant.NAME_DESK,\n                ISortVariant.PROGRESS_ASK,\n                ISortVariant.PROGRESS_DESC\n            ]}\n        />\n        <List\n            className=\"cards-groups\"\n            itemData={cardsGroups}\n            itemSize={55}\n            itemCount={cardsGroups.length}\n            overscanCount={5}\n            height={height}\n            width=\"100%\"\n        >\n            {({index, style}: any) => {\n                const cardGroup = cardsGroups[index];\n                return <div style={style}><CardsGroupsListItemComponent\n                    key={cardGroup.id}\n                    cardsGroup={cardGroup}\n                    onClickItem={onClickItem}\n                    onEditItem={onEditItem}\n                    onDeleteItem={onDeleteItem}\n                    onResetProgress={onResetProgress}\n                    onStartRepeatingDifficultCards={onStartRepeatingDifficultCards}\n                /></div>\n            }}\n        </List>\n        <AddButtonComponent onClick={onOpenEditor}/>\n    </>\n};\n","export enum IRangeOfKnowledge {\n    TO_DO,\n    IN_PROGRESS,\n    DONE\n}\n","import RefreshIcon from '@mui/icons-material/Refresh';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onResetProgress: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {services, setSubscription},\n    cardsGroupID = -1\n) => {\n    const {confirmDialogService, cardsGroupsListService} = services;\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsGroupsListService.resetProgressChannel.next(cardsGroupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to reset progress of this group?',\n        titleBackgroundColor: 'green',\n        icon: <RefreshIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {history, location},\n    cardsGroupID = -1\n) => {\n    history.push({\n        pathname: Routs.cardsGroupEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: cardsGroupID\n        }\n    })\n}","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {\n        history,\n        location,\n        services: {\n            confirmDialogService,\n            cardsGroupsListService\n        },\n        setSubscription\n    },\n    cardsGroupID = -1\n) => {\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsGroupsListService.groupDeleteChannel.next(cardsGroupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this group?',\n        icon: <DeleteIcon/>,\n        titleBackgroundColor: 'red'\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onOpenEditor: ICallback<ICardsGroupsCallbackSettings, void> = (\n    {history}\n) => {\n    history.push({\n        pathname: Routs.cardsGroupEditor.path\n    })\n}","import {Routs} from \"../../../common/Routs\";\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onClickItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {history, location},\n    cardsGroupID = -1\n) => {\n    history.push({\n        pathname: Routs.cards.path,\n        state: {\n            ...location.state,\n            cardsGroupID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<ICardsGroupsCallbackSettings, void> = (\n    {services}\n) => {\n    services.cardsGroupsListService.groupsListChannel.next(empty);\n    services.cardsGroupsListService.filterChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onResetProgressChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {\n        services: {\n            cardsGroupsListService\n        },\n    }\n) => {\n    cardsGroupsListService.groupsListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onGroupDeleteChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {\n        services: {\n            cardsGroupsListService\n        }\n    }\n) => {\n    cardsGroupsListService.groupsListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupsListChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {setState},\n    cardsGroups = []\n) => {\n    setState((prevState) => {\n        return {...prevState, cardsGroups}\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const onChangeSorting: ICallback<ICardsGroupsCallbackSettings, ISortVariant> = (\n    {services: {cardsGroupsListService}, setState},\n    sortVariant = ISortVariant.NONE\n) => {\n    setState((prevState) => {\n        const newFilter = {\n            ...prevState.filter,\n            sort: sortVariant\n        }\n        cardsGroupsListService.changeFilterChannel.next(newFilter);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {IStoredFilters} from \"../../../common/types/IStoredFilters\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onChangeFilterChannel: ICallback<ICardsGroupsCallbackSettings, IStoredFilters> = (\n    {\n        services: {\n            cardsGroupsListService\n        }\n    }\n) => {\n    cardsGroupsListService.filterChannel.next(empty);\n    cardsGroupsListService.groupsListChannel.next(empty);\n}","import {ISortVariant} from \"../types/ISortVariant\";\n\nexport const defaultFilter = {\n    searchableText: '',\n    sort: ISortVariant.NONE\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const onFilterChannel: ICallback<ICardsGroupsCallbackSettings, IFilter> = (\n    {setState, services},\n    filter = defaultFilter\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            filter\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onChangeSearchableText: ICallback<ICardsGroupsCallbackSettings, string> = (\n    {\n        setState,\n        services: {\n            cardsGroupsListService\n        }\n    },\n    searchableText = ''\n) => {\n    setState((prevState) => {\n        cardsGroupsListService.changeFilterChannel.next({\n            ...prevState.filter,\n            searchableText\n        })\n        return prevState\n    })\n}","import {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const initialState = {\n    cardsGroups: [],\n    filter: defaultFilter\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const countRepeatedCardsPercent = (cardsGroups: ICardsGroup[]) => {\n    cardsGroups.map((cardsGroup: ICardsGroup) => {\n        let statusDone = 0;\n        cardsGroup.cards.forEach((card: ICard) => {\n            if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n                statusDone++\n            }\n        });\n        cardsGroup.percentRepeatedCards = statusDone / cardsGroup.cards.length * 100;\n        return cardsGroup;\n    });\n    return cardsGroups;\n};\n","export enum IRepeatingType {\n    DEFAULT,\n    RANDOM\n}","import {map, mergeMap, switchMap, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {updateRepeatingDate} from './logic/updateRepeatingDate';\nimport {sortByFilter} from './logic/sortByFilter';\nimport {countRepeatedCardsPercent} from './logic/countRepeatedCardsPercent';\nimport {deleteGroup} from './logic/deleteGroup';\nimport {resetRepeatingProgress} from './logic/resetRepeatingProgress';\nimport {defer, of} from 'rxjs';\nimport {ISettings} from '../../common/types/ISettings';\nimport {updateObsoleteStatus} from './logic/updateObsoleteStatus';\nimport {IFilter} from '../../common/types/IFilter';\nimport {IStoredFilters} from '../../common/types/IStoredFilters';\nimport {IEmpty} from '../../../MyTools/channel-conception/defaults/IEmpty';\nimport {getDifficultCardsForRepeating} from './logic/getDifficultCardsForRepeating';\n\nexport class CardsGroupsListService {\n    public groupsListChannel: Channel<IEmpty, ICardsGroup[]>;\n    public groupDeleteChannel: Channel<number, ICardsGroup[]>;\n    public resetProgressChannel: Channel<number, ICardsGroup[]>;\n    public changeFilterChannel: Channel<IFilter, IStoredFilters>;\n    public filterChannel: Channel<IEmpty, IFilter>;\n    public startRepeatingDifficultCardsChannel: Channel<number, number[]>;\n\n    constructor(storageService: StorageService) {\n\n        this.startRepeatingDifficultCardsChannel = new Channel(\n            (cardsGroupId) => storageService.getStatistic().pipe(\n                switchMap((statistic) => {\n                    return storageService.getSettings().pipe(\n                        switchMap((settings) => {\n                            return storageService.getBackup().pipe(\n                                map((cardsGroups) => {\n                                    return getDifficultCardsForRepeating(cardsGroups, settings, statistic, cardsGroupId);\n                                })\n                            )\n                        })\n                    )\n                })\n            )\n        )\n\n        this.groupsListChannel = new Channel(() => storageService.getBackup().pipe(\n            switchMap((backup) => {\n                return storageService.getSettings().pipe(\n                    switchMap((settings: ISettings) => {\n                        return defer(() => {\n                            return settings.autoObsolete && settings.autoObsolete.isEnable ?\n                                of(\n                                    updateObsoleteStatus(\n                                        backup,\n                                        settings.autoObsolete.timeInProgress,\n                                        settings.autoObsolete.timeInDone\n                                    )\n                                ).pipe(tap((cardsGroups) => storageService.setBackup(cardsGroups))) :\n                                of(backup)\n                        })\n                    })\n                )\n            }),\n            map((cardsGroups: ICardsGroup[]) => updateRepeatingDate(cardsGroups)),\n            map((cardsGroups: ICardsGroup[]) => countRepeatedCardsPercent(cardsGroups)),\n            mergeMap((cardsGroups: ICardsGroup[]) => {\n                return storageService.getFilter().pipe(\n                    map((storedFilter) => sortByFilter(cardsGroups, storedFilter.cardsGroups))\n                )\n            })\n        ));\n\n        this.groupDeleteChannel = new Channel((groupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => deleteGroup(groupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ));\n\n        this.resetProgressChannel = new Channel((cardsGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => resetRepeatingProgress(cardsGroupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ))\n\n        this.filterChannel = new Channel(\n            () => storageService.getFilter().pipe(\n                map((storedFilters) => storedFilters.cardsGroups)\n            )\n        )\n\n        this.changeFilterChannel = new Channel<IFilter, IStoredFilters>(\n            (filter) => storageService.getFilter().pipe(\n                map((storedFilters) => {\n                        return {...storedFilters, cardsGroups: filter}\n                    }\n                ),\n                tap((storedFilters) => {\n                    storageService.setFilter(storedFilters);\n                })\n            )\n        )\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ISettings} from '../../../common/types/ISettings';\nimport {IStatistic} from '../../../common/types/IStatistic';\n\nexport const getDifficultCardsForRepeating = (\n    cardsGroups: ICardsGroup[],\n    settings: ISettings,\n    statistic: IStatistic,\n    cardsGroupId: number\n) => {\n    const cardsInProgress = new Map(Object.entries(statistic.cardsInProgressFrequency)\n        .filter((a) => {\n            const cardsGroupIndex = cardsGroups.findIndex((cardsGroup) => cardsGroup.id === cardsGroupId);\n            const group = cardsGroups[cardsGroupIndex];\n            const cardIndex = group.cards.findIndex((card) => card.id === Number(a[0]));\n            return cardIndex >= 0;\n        })\n        .sort((a, b) => {\n            if (a[1] > b[1]) {\n                return -1;\n            } else if (a[1] < b[1]) {\n                return 1;\n            } else {\n                return 0\n            }\n        })\n    );\n\n    const cardsForRepeating: number[] = [];\n    [...cardsInProgress.entries()].forEach((item) => {\n        if (cardsForRepeating.length <= settings.difficultCardsAmountForRepeating - 1) {\n            cardsForRepeating.push(Number(item[0]));\n        }\n    });\n\n    return cardsForRepeating;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const updateObsoleteStatus = (\n    cardsGroups: ICardsGroup[],\n    timeInProgress: number,\n    timeInDone: number\n): ICardsGroup[] => {\n\n    if(timeInProgress < 1 && timeInDone < 1) {\n        return cardsGroups;\n    }\n\n    const millisecondsInDay = 86400000;\n    const currentDate = new Date().getTime();\n    const timeInProgressMilliseconds = timeInProgress * millisecondsInDay;\n    const timeInDoneMilliseconds = timeInDone * millisecondsInDay;\n\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        cardsGroup.cards.forEach((card: ICard) => {\n            const differences = currentDate - card.dateRepeating;\n\n            if(card.rangeOfKnowledge === IRangeOfKnowledge.DONE && differences > timeInDoneMilliseconds) {\n                card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n            }\n\n            if(card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS && differences > timeInProgressMilliseconds) {\n                card.rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n            }\n        });\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\n\nexport const updateRepeatingDate = (cardsGroups: ICardsGroup[]) => {\n        cardsGroups.map((cardsGroup: ICardsGroup) => {\n            let dateRepeating = 0;\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (card.dateRepeating > dateRepeating) {\n                    dateRepeating = card.dateRepeating\n                }\n            });\n            cardsGroup.repeatingDate = dateRepeating;\n            return cardsGroup;\n        });\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const sortByFilter = (cardsGroups: ICardsGroup[], filter: IFilter) => {\n    let sortedCards = cardsGroups.filter(\n        (cardsGroup) => cardsGroup.nameCardsGroup.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1\n    );\n    if (filter.sort === ISortVariant.NAME_DESK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.nameCardsGroup > secondCardsGroup.nameCardsGroup) {\n                return 1\n            }\n            if (firstCardGroup.nameCardsGroup < secondCardsGroup.nameCardsGroup) {\n                return -1\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.NAME_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.nameCardsGroup > secondCardsGroup.nameCardsGroup) {\n                return -1\n            }\n            if (firstCardGroup.nameCardsGroup < secondCardsGroup.nameCardsGroup) {\n                return 1\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.DATE_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.repeatingDate && secondCardsGroup.repeatingDate) {\n                if (firstCardGroup.repeatingDate > secondCardsGroup.repeatingDate) {\n                    return 1\n                }\n                if (firstCardGroup.repeatingDate < secondCardsGroup.repeatingDate) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.DATE_DESK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.repeatingDate && secondCardsGroup.repeatingDate) {\n                if (firstCardGroup.repeatingDate < secondCardsGroup.repeatingDate) {\n                    return 1\n                }\n                if (firstCardGroup.repeatingDate > secondCardsGroup.repeatingDate) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.PROGRESS_DESC) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (\n                typeof firstCardGroup.percentRepeatedCards === 'number' &&\n                typeof secondCardsGroup.percentRepeatedCards === 'number'\n            ) {\n                if (firstCardGroup.percentRepeatedCards < secondCardsGroup.percentRepeatedCards) {\n                    return 1\n                }\n                if (firstCardGroup.percentRepeatedCards > secondCardsGroup.percentRepeatedCards) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.PROGRESS_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (\n                typeof firstCardGroup.percentRepeatedCards === 'number' &&\n                typeof secondCardsGroup.percentRepeatedCards === 'number'\n            ) {\n                if (firstCardGroup.percentRepeatedCards > secondCardsGroup.percentRepeatedCards) {\n                    return 1\n                }\n                if (firstCardGroup.percentRepeatedCards < secondCardsGroup.percentRepeatedCards) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    }\n\n    return sortedCards;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const deleteGroup = (groupID: number, cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.filter((cardGroup) => {\n        return cardGroup.id !== groupID;\n    });\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const resetRepeatingProgress = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n\n    if (cardGroupIndex < 0) {\n        return cardsGroups;\n    }\n\n    cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.map((card: ICard) => {\n        return {\n            ...card,\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO\n        }\n    });\n\n    return cardsGroups;\n};\n","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ICardsGroupsCallbackSettings} from '../types/ICardsGroupsCallbackSettings';\n\nexport const onStartRepeatingDifficultCards: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {services: {cardsGroupsListService}},\n    cardsGroupId = -1\n) => {\n    cardsGroupsListService.startRepeatingDifficultCardsChannel.next(cardsGroupId);\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ICardsGroupsCallbackSettings} from '../types/ICardsGroupsCallbackSettings';\nimport {Routs} from '../../../common/Routs';\n\nexport const onStartRepeatingDifficultCardsChannel: ICallback<ICardsGroupsCallbackSettings, number[]> = (\n    {\n        history,\n        location,\n        services: {\n            cardsGroupsListService\n        },\n    },\n    cardsIDs = []\n) => {\n    history.push({\n        pathname: Routs.cardsRepeater.path,\n        state: {\n            ...location.state,\n            cardsIDsForRepeating: cardsIDs\n        }\n    })\n}","import React, {FC, useCallback} from 'react';\n\nimport {CardsGroupsListComponent} from './CardsGroupsListComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {AppContext} from '../../../App';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {onResetProgress} from './ui-callbacks/onResetProgress';\nimport {onEditItem} from './ui-callbacks/onEditItem';\nimport {onDeleteItem} from './ui-callbacks/onDeleteItem';\nimport {onOpenEditor} from './ui-callbacks/onOpenEditor';\nimport {onClickItem} from './ui-callbacks/onClickItem';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onResetProgressChannel} from './channels-callbacks/onResetProgressChannel';\nimport {onGroupDeleteChannel} from './channels-callbacks/onGroupDeleteChannel';\nimport {onGroupsListChannel} from './channels-callbacks/onGroupsListChannel';\nimport {onChangeSorting} from './ui-callbacks/onChangeSorting';\nimport {onChangeFilterChannel} from './channels-callbacks/onChangeFilterChannel';\nimport {onFilterChannel} from './channels-callbacks/onFilterChannel';\nimport {onChangeSearchableText} from './ui-callbacks/onChangeSearchableText';\nimport {initialState} from './defaults/initialState';\nimport {ICardsGroupsCallbackSettings} from './types/ICardsGroupsCallbackSettings';\nimport {useDependency} from '../../../MyTools/react-di/hooks/useDependency';\nimport {CardsGroupsListService} from './CardsGroupsListService';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {onStartRepeatingDifficultCards} from './ui-callbacks/onStartRepeatingDifficultCards';\nimport {onStartRepeatingDifficultCardsChannel} from './channels-callbacks/onStartRepeatingDifficultCardsChannel';\n\nexport const CardsGroupsListContainer: FC = () => {\n\n    const cardsGroupsListService = useDependency(CardsGroupsListService);\n    const confirmDialogService = useDependency(ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<ICardsGroupsCallbackSettings>(\n        initialState,\n        {cardsGroupsListService, confirmDialogService},\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings;\n\n    useChannel(cardsGroupsListService.groupsListChannel, callbackFactory(onGroupsListChannel));\n    useChannel(cardsGroupsListService.groupDeleteChannel, callbackFactory(onGroupDeleteChannel));\n    useChannel(cardsGroupsListService.resetProgressChannel, callbackFactory(onResetProgressChannel));\n    useChannel(cardsGroupsListService.changeFilterChannel, callbackFactory(onChangeFilterChannel));\n    useChannel(cardsGroupsListService.filterChannel, callbackFactory(onFilterChannel))\n    useChannel(cardsGroupsListService.startRepeatingDifficultCardsChannel, callbackFactory(onStartRepeatingDifficultCardsChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const clickItem = useCallback(callbackFactory(onClickItem), []);\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const deleteItem = useCallback(callbackFactory(onDeleteItem), []);\n    const editItem = useCallback(callbackFactory(onEditItem), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const changeSorting = useCallback(callbackFactory(onChangeSorting), []);\n    const changeSearchableText = useCallback(callbackFactory(onChangeSearchableText), []);\n    const startRepeatingDifficultCards = useCallback(callbackFactory(onStartRepeatingDifficultCards), [])\n\n    return <CardsGroupsListComponent\n        onClickItem={clickItem}\n        onOpenEditor={openEditor}\n        onDeleteItem={deleteItem}\n        onEditItem={editItem}\n        onResetProgress={resetProgress}\n        onChangeSorting={changeSorting}\n        filter={state.filter}\n        onChangeSearchableText={changeSearchableText}\n        onStartRepeatingDifficultCards={startRepeatingDifficultCards}\n        height={context.height}\n        cardsGroups={state.cardsGroups}/>\n};\n","import GoogleLogin from 'react-google-login';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport './GoogleAuthComponent.css'\nimport {IGoogleAuthComponent} from \"./types/IGoogleAuthComponent\";\n\nexport const GoogleAuthComponent: FC<IGoogleAuthComponent> = ({onSuccess, onFailure, height}) => {\n    return (\n        <div className=\"google-auth\" style={{height}}>\n            <GoogleLogin\n                className=\"google-auth_button\"\n                clientId=\"627973926597-tj2la0mnorvm04cqmcosu2nj3b02g6k2.apps.googleusercontent.com\"\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                scope={'profile email https://www.googleapis.com/auth/drive'}\n            />\n        </div>\n    )\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleLoginResponse, GoogleLoginResponseOffline} from \"react-google-login\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\n\nexport const onSuccess: ICallback<GoogleAuthCallbackSettings, GoogleLoginResponse | GoogleLoginResponseOffline> = (\n    {services: {googleAuthService}},\n    response\n) => {\n    googleAuthService.loginChannel.next((response as GoogleLoginResponse).accessToken);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\nimport {GoogleLoginResponse, GoogleLoginResponseOffline} from \"react-google-login\";\n\nexport const onFailure: ICallback<GoogleAuthCallbackSettings, GoogleLoginResponse | GoogleLoginResponseOffline> = (\n    {services: {errorService}}\n) => {\n    errorService.errorChannel.next('Error of connection');\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onLoginChannel: ICallback<GoogleAuthCallbackSettings, string> = (\n    {history}\n) => {\n    history.replace(Routs.googleBackups.path);\n}","export class Dependency {\n    constructor(...args: Dependency[]) {\n    }\n}","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {Dependency} from \"../../../MyTools/react-di/Dependency\";\n\nexport class GoogleAuthService extends Dependency {\n    public loginChannel: Channel<string, string>;\n\n    constructor(storageService: StorageService) {\n        super();\n        this.loginChannel = new Channel((authToken: string) => of('').pipe(\n            tap(() => {\n                storageService.setAuthToken(authToken)\n            })\n        ));\n    }\n}\n","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {GoogleAuthComponent} from './GoogleAuthComponent';\nimport {AppContext} from '../../../App';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {onSuccess} from './ui-callbacks/onSuccess';\nimport {onFailure} from './ui-callbacks/onFailure';\nimport {onLoginChannel} from './channels-callbacks/onLoginChannel';\nimport {GoogleAuthCallbackSettings} from './types/GoogleAuthCallbackSettings';\nimport {useDependency} from '../../../MyTools/react-di/hooks/useDependency';\nimport {GoogleAuthService} from './GoogleAuthService';\nimport {ErrorService} from '../../parts/error-dialog/ErrorService';\n\nexport const GoogleAuthContainer: FC = () => {\n\n    const googleAuthService = useDependency(GoogleAuthService);\n    const errorService = useDependency(ErrorService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<GoogleAuthCallbackSettings>(\n        null,\n        {googleAuthService, errorService},\n        AppContext\n    );\n\n    const {context} = externalCallbackSettings;\n\n    useChannel(googleAuthService.loginChannel, callbackFactory(onLoginChannel));\n\n    const success = useCallback(callbackFactory(onSuccess), []);\n    const failure = useCallback(callbackFactory(onFailure), []);\n\n    return <GoogleAuthComponent\n        onSuccess={success}\n        onFailure={failure}\n        height={context.height}\n    />;\n};\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nimport {IBackupMenuComponent} from \"./types/IBackupMenuComponent\";\n\n\nexport const BackupMenuComponent: FC<IBackupMenuComponent> = ({backupID, onLoad, onDelete}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const onLoadBackup = () => {\n        setAnchorEl(null);\n        onLoad(backupID);\n    };\n\n    const onDeleteBackup = () => {\n        setAnchorEl(null);\n        onDelete(backupID);\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={onLoadBackup}>Load</MenuItem>\n                <MenuItem onClick={onDeleteBackup}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n","import {default as React, FC} from 'react';\nimport {ListItem, ListItemIcon, ListItemText} from '@mui/material';\n\nimport {BackupMenuComponent} from '../backup-menu-component/BackupMenuComponent';\nimport {IBackupsListItemComponent} from \"./types/IBackupsListItemComponent\";\n\nexport const BackupsListItemComponent: FC<IBackupsListItemComponent> = (\n    {\n        backupName,\n        backupDate,\n        backupID,\n        onLoad,\n        onDelete\n    }\n) => {\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={backupName}\n                secondary={backupDate}\n            />\n            <ListItemIcon>\n                <BackupMenuComponent backupID={backupID} onLoad={onLoad} onDelete={onDelete}/>\n            </ListItemIcon>\n        </ListItem>\n    );\n};\n","import {List} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {BackupsListItemComponent} from './elements/backups-list-item-component/BackupsListItemComponent';\nimport {AddButtonComponent} from '../../common/elements/add-button/AddButtonComponent';\nimport {IBackupsListComponent} from \"../local-backup/types/IBackupsListComponent\";\n\n\nexport const GoogleBackupsComponent: FC<IBackupsListComponent> = ({backupsFiles, onLoad, onCreate, onDelete}) => {\n    return (\n        <>\n            <List>\n                {\n                    backupsFiles.map((backup: IGoogleDriveFile) => {\n                        return <BackupsListItemComponent\n                            key={backup.id}\n                            backupName={backup.name}\n                            backupDate={backup.createdTime}\n                            onLoad={onLoad}\n                            onDelete={onDelete}\n                            backupID={backup.id}/>\n                    })\n                }\n            </List>\n            <AddButtonComponent onClick={onCreate}/>\n        </>\n    )\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {Routs} from \"../../../common/Routs\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\n\nexport const onBackupsNameLoadChannelError: ICallback<GoogleBackupCallbackSettings, Error> = (\n    {history, services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n    history.replace(Routs.googleAuth.path);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const onBackupsNameLoadChannel: ICallback<GoogleBackupCallbackSettings, IGoogleDriveFile[]> = (\n    {setState, services: {spinnerService}},\n    backupsFiles = []\n) => {\n    setState((prevState) => {\n        return {...prevState, backupsFiles}\n    });\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onBackupLoadChannelError: ICallback<GoogleBackupCallbackSettings, Error> = (\n    {history, services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n    history.replace(Routs.googleAuth.path);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onBackupLoadChannel: ICallback<GoogleBackupCallbackSettings, ICardsGroup[]> = (\n    {services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onBackupDeleteChannel: ICallback<GoogleBackupCallbackSettings, string> = (\n    {services: {googleBackupsService, spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n    googleBackupsService.backupsNameLoadChannel.next(empty)\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onBackupUploadChannel: ICallback<GoogleBackupCallbackSettings, string> = (\n    {services: {spinnerService, googleBackupsService}}\n) => {\n    googleBackupsService.backupsNameLoadChannel.next(empty)\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<GoogleBackupCallbackSettings, string> = (\n    {services: {googleBackupsService}}\n) => {\n    googleBackupsService.backupsNameLoadChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport UploadIcon from \"@mui/icons-material/Upload\";\nimport * as React from \"react\";\n\nexport const onLoad: ICallback<GoogleBackupCallbackSettings, string> = (\n    {\n        setSubscription,\n        services: {\n            spinnerService,\n            googleBackupsService,\n            confirmDialogService\n        }\n    },\n    backupID = '-1'\n) => {\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            spinnerService.spinnerCounterChannel.next(1);\n            googleBackupsService.backupLoadChannel.next(backupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to load this backup?',\n            titleBackgroundColor: 'red',\n            icon: <UploadIcon/>\n        }\n    );\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport * as React from \"react\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nexport const onDelete: ICallback<GoogleBackupCallbackSettings, string> = (\n    {\n        setSubscription,\n        services: {\n            spinnerService,\n            googleBackupsService,\n            confirmDialogService\n        }\n    },\n    backupID = '-1'\n) => {\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            spinnerService.spinnerCounterChannel.next(1);\n            googleBackupsService.backupDeleteChannel.next(backupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this backup?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const getBackupFolder = (token: string): Promise<IGoogleDriveFile | null> => {\n\n    const googleDriveFolderType = 'application/vnd.google-apps.folder';\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const backupFolderName = 'my-cards';\n    const searchFolderURI = googleDriveFilesAPI + '?q=name%20contains%20';\n    const url = `${searchFolderURI}'${backupFolderName}'`\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + token\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (result) => result.json()\n    ).then((result: { files: IGoogleDriveFile[] }) => {\n        let foundedFolder = result.files.find((file) => {\n            return file.mimeType === googleDriveFolderType\n        });\n        return foundedFolder || null;\n    })\n}","import {defer, from, mergeMap, of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {formatCreatedDate} from './logic/formatCreatedDate';\nimport {getBackupFolder} from \"./logic/getBackupFolder\";\nimport {getBackupFiles} from \"./logic/getBackupFiles\";\nimport {loadBackupFile} from \"./logic/loadBackupFile\";\nimport {createBackupFolder} from \"./logic/createBackupFolder\";\nimport {createEmptyBackupFile} from \"./logic/createEmptyBackupFile\";\nimport {createBackupName} from \"./logic/createBackupName\";\nimport {uploadBackupFile} from \"./logic/uploadBackupFile\";\nimport {deleteBackupFile} from \"./logic/deleteBackupFile\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class GoogleBackupsService {\n\n    public backupsNameLoadChannel: Channel<IEmpty, IGoogleDriveFile[]>;\n    public backupLoadChannel: Channel<string, ICardsGroup[]>;\n    public backupUploadChannel: Channel<void, string>;\n    public backupDeleteChannel: Channel<string, string>;\n\n    constructor(private storageService: StorageService) {\n\n        this.backupsNameLoadChannel = new Channel(() => storageService.getAuthToken().pipe(\n            mergeMap(\n                (authToken: string) => of(authToken).pipe(\n                    switchMap(() => from(getBackupFolder(authToken))),\n                    switchMap(\n                        (folder: IGoogleDriveFile | null) => from(getBackupFiles(authToken, folder))\n                    ),\n                    map((googleDriveFiles: IGoogleDriveFile[] | null) => formatCreatedDate(googleDriveFiles))\n                )\n            )\n        ));\n\n        this.backupLoadChannel = new Channel(\n            (backupID: string) => storageService.getAuthToken().pipe(\n                switchMap(\n                    (authToken) => from(loadBackupFile(authToken, backupID))\n                ),\n                tap((cards: ICardsGroup[]) => {\n                    storageService.setBackup(cards);\n                })\n            )\n        );\n\n        this.backupUploadChannel = new Channel(\n            () => storageService.getAuthToken().pipe(\n                mergeMap((authToken: string) => of(authToken).pipe(\n                        switchMap(() => from(getBackupFolder(authToken))),\n                        mergeMap((folder: IGoogleDriveFile | null) => {\n                            return defer(() => {\n                                return folder ? of(folder.id) : from(createBackupFolder(authToken))\n                            })\n                        }),\n                        mergeMap((folderId: string) => {\n                            return storageService.getBackup().pipe(\n                                map(\n                                    (cardsGroups) => createBackupName(cardsGroups)\n                                ),\n                                switchMap((name: string) => {\n                                    return from(createEmptyBackupFile(\n                                        authToken,\n                                        folderId,\n                                        name\n                                    ));\n                                })\n                            )\n                        }),\n                        switchMap((fileId: string) => {\n                            return storageService.getBackup().pipe(\n                                switchMap((cardsGroups) => {\n                                    return uploadBackupFile(\n                                        authToken,\n                                        fileId,\n                                        cardsGroups\n                                    )\n                                })\n                            )\n                        })\n                    )\n                )\n            )\n        );\n\n        this.backupDeleteChannel = new Channel((fileID: string) => storageService.getAuthToken().pipe(\n            switchMap((authToken) => deleteBackupFile(authToken, fileID))\n        ));\n    }\n}\n","import {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const getBackupFiles = (authToken: string, folder: IGoogleDriveFile | null): Promise<IGoogleDriveFile[] | null> => {\n\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const url = `${googleDriveFilesAPI}?q=\"${folder ? folder.id : -1}\"+in+parents&fields=files(id,createdTime,name)`\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.files)\n}","import {IGoogleDriveFile} from '../../../common/types/IGoogleDriveFile';\n\nexport const formatCreatedDate = (googleDriveFiles: IGoogleDriveFile[] | null) => {\n    return googleDriveFiles ? googleDriveFiles.map((googleDriveFile: IGoogleDriveFile) => {\n        const date = new Date(googleDriveFile.createdTime);\n        const outputFormat = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\n        return {\n            ...googleDriveFile, createdTime: outputFormat\n        };\n    }) : [];\n};\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const loadBackupFile = (authToken: string, fileId: string): Promise<ICardsGroup[]> => {\n\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const url = googleDriveFilesAPI + fileId + '?alt=media';\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    )\n}","export const createBackupFolder = (authToken: string): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/';\n    const backupFolderName = 'my-cards';\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            name: backupFolderName,\n            mimeType: 'application/vnd.google-apps.folder'\n        }),\n        method: 'POST'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.id)\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const createBackupName = (backup: ICardsGroup[]) => {\n    let cardsAmount = 0;\n    backup.forEach((cardsGroup) => {\n        cardsAmount = cardsAmount + cardsGroup.cards.length\n    })\n    return `groups(${backup.length})cards(${cardsAmount})`\n}","export const createEmptyBackupFile = (\n    authToken: string,\n    id: string,\n    fileName: string\n): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/';\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            parents: [id],\n            name: fileName\n        }),\n        method: 'POST'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.id)\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const uploadBackupFile = (\n    authToken: string,\n    fileId: string,\n    cardsGroups: ICardsGroup[]\n): Promise<string> => {\n\n    const url = \"https://www.googleapis.com/upload/drive/v3/files/\" + fileId;\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        body: JSON.stringify(cardsGroups, null, 4),\n        responseType: 'text',\n        method: 'PATCH'\n    }\n\n    return fetch(url, requestOptions).then(() => fileId);\n}","export const deleteBackupFile = (\n    authToken: string,\n    fileId: string\n): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/' + fileId;\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'DELETE'\n    }\n\n    return fetch(url, requestOptions).then(() => fileId)\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {GoogleBackupsComponent} from './GoogleBackupsComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {onBackupsNameLoadChannelError} from \"./channels-callback/onBackupsNameLoadChannelError\";\nimport {onBackupsNameLoadChannel} from \"./channels-callback/onBackupsNameLoadChannel\";\nimport {onBackupLoadChannelError} from \"./channels-callback/onBackupLoadChannelError\";\nimport {onBackupLoadChannel} from \"./channels-callback/onBackupLoadChannel\";\nimport {onBackupDeleteChannel} from \"./channels-callback/onBackupDeleteChannel\";\nimport {onBackupUploadChannel} from \"./channels-callback/onBackupUploadChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onLoad} from \"./ui-callbacks/onLoad\";\nimport {onDelete} from \"./ui-callbacks/onDelete\";\nimport {GoogleBackupCallbackSettings} from \"./types/GoogleBackupCallbackSettings\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {GoogleBackupsService} from \"./GoogleBackupsService\";\nimport {SpinnerService} from \"../../parts/spinner/SpinnerService\";\nimport {ConfirmDialogService} from \"../../parts/confirm-dialog/ConfirmDialogService\";\n\nexport const GoogleBackupsContainer: FC = () => {\n\n    const googleBackupsService = useDependency(GoogleBackupsService);\n    const spinnerService = useDependency(SpinnerService);\n    const confirmDialogService = useDependency(ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<GoogleBackupCallbackSettings>(\n        {\n            backupsFiles: []\n        },\n        {\n            googleBackupsService,\n            spinnerService,\n            confirmDialogService\n        },\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel(\n        googleBackupsService.backupsNameLoadChannel,\n        callbackFactory(onBackupsNameLoadChannel),\n        callbackFactory(onBackupsNameLoadChannelError)\n    );\n    useChannel(\n        googleBackupsService.backupLoadChannel,\n        callbackFactory(onBackupLoadChannel),\n        callbackFactory(onBackupLoadChannelError)\n    );\n    useChannel(googleBackupsService.backupDeleteChannel, callbackFactory(onBackupDeleteChannel));\n    useChannel(googleBackupsService.backupUploadChannel, callbackFactory(onBackupUploadChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const load = useCallback(callbackFactory(onLoad), []);\n    const deleteBackup = useCallback(callbackFactory(onDelete), []);\n\n    const onCreate = () => {\n        spinnerService.spinnerCounterChannel.next(1);\n        googleBackupsService.backupUploadChannel.next();\n    };\n\n    return <GoogleBackupsComponent\n        backupsFiles={state.backupsFiles}\n        onLoad={load}\n        onDelete={deleteBackup}\n        onCreate={onCreate}\n    />;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport CopyIcon from \"@mui/icons-material/CopyAll\";\nimport Fab from \"@mui/material/Fab\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport SelectAllIcon from \"@mui/icons-material/SelectAll\";\nimport DriveFileMoveIcon from \"@mui/icons-material/DriveFileMove\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport {ICardsListActions} from \"./types/ICardsListActions\";\nimport './CardsListActions.css'\n\nexport const CardsListActions: FC<ICardsListActions> = (\n    {\n        onOpenEditor,\n        onOpenRepeater,\n        onStartSelecting,\n        onMovingSelectedCards,\n        onDeleteSelectedCards,\n        onCopySelectedCards,\n        hideOpenRepeaterButton = false,\n        hideOpenEditorButton = false,\n        hideMovingSelectedCardsButton = false,\n        hideDeleteSelectedCardsButton = false,\n        hideCopySelectedCardButton = false\n    }\n) => {\n    return <div className=\"cards-list-actions\">\n        <Fab size=\"medium\" color=\"secondary\" onClick={onStartSelecting}>\n            <SelectAllIcon/>\n        </Fab>\n        <Fab size=\"medium\" color=\"primary\" onClick={onOpenRepeater}>\n            <PlayArrowIcon/>\n        </Fab>\n        {\n            !hideOpenEditorButton && <Fab size=\"medium\" color=\"secondary\" onClick={onOpenEditor}>\n                <AddIcon/>\n            </Fab>\n        }\n        {\n            !hideMovingSelectedCardsButton && <Fab size=\"medium\" color=\"primary\" onClick={onMovingSelectedCards}>\n                <DriveFileMoveIcon/>\n            </Fab>\n        }\n        {\n            !hideCopySelectedCardButton && <Fab size=\"medium\" color=\"secondary\" onClick={onCopySelectedCards}>\n                <CopyIcon/>\n            </Fab>\n        }\n        {\n            !hideDeleteSelectedCardsButton && <Fab size=\"medium\" color=\"secondary\" onClick={onDeleteSelectedCards}>\n                <DeleteIcon/>\n            </Fab>\n        }\n    </div>\n}","import React, {FC} from \"react\";\n\nimport {ICardPrimaryTextComponent} from \"./types/ICardPrimaryTextComponent\";\nimport './CardPrimaryTextComponent.css'\n\nexport const CardPrimaryTextComponent: FC<ICardPrimaryTextComponent> = ({card}) => {\n    return <div className=\"card-primary-text\">\n        <p className=\"card-primary-text_title\">\n            {card.question}\n        </p>\n        <p className=\"card-primary-text_content\">\n            {card.answer}\n        </p>\n    </div>\n}","import React, {FC} from 'react'\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport FlagIcon from '@mui/icons-material/Flag';\nimport {Checkbox} from '@mui/material';\n\nimport {ICard} from '../../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../../common/types/IRangeOfKnowledge';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport {ICardListItemComponent} from './types/ICardListItemComponent';\nimport {CardPrimaryTextComponent} from '../card-primary-text/CardPrimaryTextComponent';\nimport {DATE_FORMAT} from '../../../../common/constants/DATE_FORMAT';\nimport {IMenuSetupItem} from '../../../../common/elements/list-item-menu/types/IMenuSetupItem';\n\nexport const CardsListItemComponent: FC<ICardListItemComponent> = (\n    {\n        card,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onSelect,\n        isEnabledSelecting,\n        isSelected\n    }\n) => {\n\n    const dateText = 'Last repeating date: ' + format(card.dateRepeating ? card.dateRepeating : new Date(), DATE_FORMAT)\n\n    const getIconColor = (card: ICard): string => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n            return 'green'\n        }\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            return 'yellow'\n        }\n        return 'red'\n    };\n\n    const menuSetup: IMenuSetupItem[] = [\n        {\n            fieldName: 'Edit',\n            handler: () => {\n                onEditItem(card.id);\n            }\n        },\n        {\n            fieldName: 'Delete',\n            handler: () => {\n                onDeleteItem(card.id);\n            }\n        },\n        {\n            fieldName: 'Reset progress',\n            handler: () => {\n                onResetProgress(card.id);\n            }\n        }\n    ];\n\n    return <ListItem key={card.id} button>\n        <ListItemIcon onClick={() => onClickItem(card.id)}>\n            <FlagIcon style={{color: getIconColor(card)}}/>\n        </ListItemIcon>\n        <ListItemText\n            onClick={() => onClickItem(card.id)}\n            primary={<CardPrimaryTextComponent card={card}/>}\n            secondary={dateText}\n        />\n        {\n            !isEnabledSelecting ?\n                <ListItemIcon>\n                    <ListItemMenuComponent menuSetup={menuSetup}/>\n                </ListItemIcon> :\n                <ListItemIcon onClick={() => isEnabledSelecting && onSelect(card.id)}>\n                    <Checkbox\n                        edge=\"start\"\n                        checked={isSelected}\n                        tabIndex={-1}\n                        disableRipple\n                    />\n                </ListItemIcon>\n        }\n    </ListItem>\n};\n","import {FixedSizeList as List} from \"react-window\";\nimport * as React from \"react\";\nimport {FC} from \"react\";\n\nimport {CardsListItemComponent} from \"../cards-list-item/CardsListItemComponent\";\nimport {ICardsListComponent} from \"./types/ICardsListComponent\";\n\nexport const CardsListComponent: FC<ICardsListComponent> = (\n    {\n        cards,\n        height,\n        onEditItem,\n        onDeleteItem,\n        onSelectItem,\n        onResetProgress,\n        onClickItem,\n        isEnabledSelecting,\n        selectedItems\n    }\n) => {\n    return <List\n        className=\"cards\"\n        itemData={cards}\n        itemSize={75}\n        itemCount={cards.length}\n        overscanCount={5}\n        height={height}\n        width=\"100%\"\n    >\n        {\n            ({index, style}: any) => {\n                const card = cards[index];\n                return <div style={style}>\n                    <CardsListItemComponent\n                        key={card.id}\n                        card={card}\n                        onEditItem={onEditItem}\n                        onDeleteItem={onDeleteItem}\n                        onResetProgress={onResetProgress}\n                        onClickItem={onClickItem}\n                        onSelect={onSelectItem}\n                        isEnabledSelecting={isEnabledSelecting}\n                        isSelected={selectedItems[card.id]}\n                    />\n                </div>\n            }\n        }\n    </List>\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {FilterComponent} from \"../../common/elements/filter/FilterComponent\";\nimport {CardsListActions} from \"./elements/cards-list-actions/CardsListActions\";\nimport {ICardsComponent} from \"./types/ICardsComponent\";\nimport './CardsComponent.css';\nimport {CardsListComponent} from \"./elements/cards-list/CardsListComponent\";\nimport {ISortVariant} from \"../../common/types/ISortVariant\";\n\nexport const CardsComponent: FC<ICardsComponent> = (\n    {\n        cards,\n        filter,\n        onOpenEditor,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onChangeSearchableText,\n        onChangeSorting,\n        height,\n        onOpenRepeater,\n        onStartSelecting,\n        onSelectItem,\n        onDeleteSelectedCards,\n        onMovingSelectedCards,\n        onCopySelectedCards,\n        isEnabledSelecting,\n        selectedItems\n    }\n) => {\n    return (\n        <>\n                <FilterComponent\n                    onChangeSearchableText={onChangeSearchableText}\n                    onChangeSorting={onChangeSorting}\n                    filter={filter}\n                    sortVariants={[\n                            ISortVariant.NONE,\n                            ISortVariant.DATE_ASK,\n                            ISortVariant.DATE_DESK,\n                            ISortVariant.QUESTION_ASK,\n                            ISortVariant.QUESTION_DESK,\n                            ISortVariant.STATUS_ASK,\n                            ISortVariant.STATUS_DESK,\n                            ISortVariant.ANSWER_ASK,\n                            ISortVariant.ANSWER_DESK\n                    ]}\n                />\n                <CardsListComponent\n                    cards={cards}\n                    height={height}\n                    onEditItem={onEditItem}\n                    onDeleteItem={onDeleteItem}\n                    onResetProgress={onResetProgress}\n                    onClickItem={onClickItem}\n                    onSelectItem={onSelectItem}\n                    isEnabledSelecting={isEnabledSelecting}\n                    selectedItems={selectedItems}\n                />\n                <CardsListActions\n                    onOpenRepeater={onOpenRepeater}\n                    onOpenEditor={onOpenEditor}\n                    onStartSelecting={onStartSelecting}\n                    onCopySelectedCards={onCopySelectedCards}\n                    hideOpenEditorButton={isEnabledSelecting}\n                    hideOpenRepeaterButton={isEnabledSelecting}\n                    hideDeleteSelectedCardsButton={!isEnabledSelecting}\n                    hideMovingSelectedCardsButton={!isEnabledSelecting}\n                    hideCopySelectedCardButton={!isEnabledSelecting}\n                    onDeleteSelectedCards={onDeleteSelectedCards}\n                    onMovingSelectedCards={onMovingSelectedCards}\n                />\n        </>\n    )\n};\n","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteSelectedCards: ICallback<CardsCallbackSettings, void> = (\n    {services: {confirmDialogService, cardsListService}, setState, setSubscription}\n) => {\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            setState((prevState) => {\n                cardsListService.deleteCardsChannel.next(prevState.selectedItems);\n                return prevState;\n            })\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import CopyIcon from '@mui/icons-material/CopyAll';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onCopySelectedCards: ICallback<CardsCallbackSettings, void> = (\n    {services, setState, setSubscription}\n) => {\n    const {\n        cardsListService,\n        confirmDialogService,\n        selectionDialogService\n    } = services;\n\n    setState((prevState) => {\n\n        const subscription = selectionDialogService.selectionChannel.subscribe((groupID) => {\n\n            const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n                if (isConfirm) {\n                    cardsListService.copyCardsChannel.next({\n                        selectedItems: prevState.selectedItems,\n                        destinationGroupID: groupID\n                    });\n\n                    selectionDialogService.openDialogChannel.next({\n                        isOpen: false,\n                        title: '',\n                        selectionItems: []\n                    });\n                }\n\n                confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n            });\n\n            setSubscription(subscription);\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: true,\n                message: 'Do you want to copy this cards?',\n                titleBackgroundColor: 'orange',\n                icon: <CopyIcon/>\n            });\n        });\n\n        setSubscription(subscription);\n\n        selectionDialogService.openDialogChannel.next({\n            isOpen: true,\n            title: 'Select cards group',\n            selectionItems: prevState.existedGroupsIDs\n        })\n\n        return prevState;\n    })\n}","import MoveIcon from '@mui/icons-material/MoveToInbox';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onMovingSelectedCards: ICallback<CardsCallbackSettings, void> = (\n    {services, setState, setSubscription}\n) => {\n\n    setState((prevState) => {\n        const {\n            cardsListService,\n            confirmDialogService,\n            selectionDialogService\n        } = services;\n\n        const subscription = selectionDialogService.selectionChannel.subscribe((groupID) => {\n\n            const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n                if (isConfirm) {\n                    cardsListService.movingCardsChannel.next({\n                        selectedItems: prevState.selectedItems,\n                        destinationGroupID: groupID\n                    });\n\n                    selectionDialogService.openDialogChannel.next({\n                        isOpen: false,\n                        title: '',\n                        selectionItems: []\n                    });\n                }\n\n                confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n            });\n\n            setSubscription(subscription);\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: true,\n                message: 'Do you want to move this cards?',\n                titleBackgroundColor: 'green',\n                icon: <MoveIcon/>\n            });\n        });\n\n        setSubscription(subscription);\n\n        selectionDialogService.openDialogChannel.next({\n            isOpen: true,\n            title: 'Select cards group',\n            selectionItems: prevState.existedGroupsIDs\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onSelectItem: ICallback<CardsCallbackSettings, number> = (\n    settings,\n    cardID = -1\n) => {\n\n    const {setState} = settings;\n\n    setState((prevState) => {\n        const selectedItems = {\n            ...prevState.selectedItems\n        };\n\n        if (selectedItems[cardID]) {\n            selectedItems[cardID] = !selectedItems[cardID]\n        } else {\n            selectedItems[cardID] = true\n        }\n        return {\n            ...prevState,\n            selectedItems\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onStartSelecting: ICallback<CardsCallbackSettings, void> = (\n    {setState}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            isEnabledSelecting: !prevState.isEnabledSelecting,\n            selectedItems: !prevState.isEnabledSelecting ? {} : prevState.selectedItems\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onOpenRepeater: ICallback<CardsCallbackSettings, void> = (\n    {\n        setState,\n        location,\n        services\n    }\n) => {\n    setState((prevState) => {\n        if (prevState.isEnabledSelecting) {\n            services.cardsListService.cardsIDsBySelectedItemsChannel.next(prevState.selectedItems);\n        } else {\n            services.cardsListService.cardsIDsByGroupIDsChannel.next(location.state.cardsGroupID);\n        }\n        return prevState;\n    })\n}","import {ISortVariant} from \"../../../common/types/ISortVariant\";\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onChangeSorting: ICallback<CardsCallbackSettings, ISortVariant> = (\n    {setState, services, location},\n    sortVariant: ISortVariant = ISortVariant.NONE\n) => {\n    setState((prevState) => {\n        const newFilter = {\n            ...prevState.filter,\n            sort: sortVariant\n        }\n        services.cardsListService.changeFilterChannel.next(newFilter);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onChangeSearchableText: ICallback<CardsCallbackSettings, string> = (\n    {services, setState, location},\n    searchableText = ''\n) => {\n    setState((prevState) => {\n        const newFilter = {\n            ...prevState.filter,\n            searchableText: searchableText\n        }\n\n        services.cardsListService.changeFilterChannel.next(newFilter)\n\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {CardsContainerState} from \"../types/CardsContainerState\";\n\nexport const onCardsChannel: ICallback<CardsCallbackSettings, ICard[]> = (\n    {setState},\n    cards = []\n) => {\n    setState((prevState: CardsContainerState) => {\n        return {\n            ...prevState,\n            cards\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onCardsIDsByGroupIDsChannel: ICallback<CardsCallbackSettings, number[]> = (\n    {history, location},\n    args\n) => {\n    history.push({\n        pathname: Routs.cardsRepeater.path,\n        state: {\n            ...location.state,\n            cardsIDsForRepeating: args || []\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onCardsIDsBySelectedItemsChannel: ICallback<CardsCallbackSettings, number[]> = (\n    {history, location},\n    args\n) => {\n    if (args && args.length > 1) {\n        history.push({\n            pathname: Routs.cardsRepeater.path,\n            state: {\n                ...location.state,\n                cardsIDsForRepeating: args || []\n            }\n        })\n    } else if (args && args.length === 1) {\n        history.push({\n            pathname: Routs.cardViewer.path,\n            state: {\n                ...location.state,\n                cardsGroupID: location.state.cardsGroupID,\n                cardID: args[0]\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const onFilterChannel: ICallback<CardsCallbackSettings, IFilter> = (\n    {setState, services, location},\n    filter = defaultFilter\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            filter\n        }\n    });\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<CardsCallbackSettings, ISortVariant> = (\n    {services, setState, location}\n) => {\n    const {cardsListService} = services;\n    setState((prevState) => {\n        cardsListService.filterChannel.next(empty)\n        cardsListService.existedGroupsIDsChannel.next(empty);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {IStoredFilters} from \"../../../common/types/IStoredFilters\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onChangeFilter: ICallback<CardsCallbackSettings, IStoredFilters> = (\n    {services, location}\n) => {\n    services.cardsListService.filterChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onResetCardProgressChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next(\n            {\n                cardsGroupID: location.state.cardsGroupID,\n                filter: prevState.filter\n            }\n        )\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location},\n    cards = []\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onMovingCardsChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onCopyCardsChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {services, setState, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteCardsChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {CardsContainerState} from \"../types/CardsContainerState\";\n\nexport const onExistedGroupsIDsChannel: ICallback<CardsCallbackSettings, { id: number; label: string; }[]> = (\n    {setState},\n    existedGroupsIDs = []\n) => {\n    setState((prevState: CardsContainerState) => {\n        return {\n            ...prevState,\n            existedGroupsIDs\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onOpenEditor: ICallback<CardsCallbackSettings, void> = (\n    {\n        location,\n        history\n    }\n) => {\n    history.push({\n        pathname: Routs.cardsEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditItem: ICallback<CardsCallbackSettings, number> = (\n    {\n        location,\n        history\n    },\n    cardID = -1\n) => {\n    history.push({\n        pathname: Routs.cardsEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID,\n            cardID: cardID\n        }\n    })\n}","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteItem: ICallback<CardsCallbackSettings, number> = (\n    {\n        setSubscription,\n        services\n    },\n    cardID = -1\n) => {\n    const {confirmDialogService, cardsListService} = services;\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            cardsListService.deleteSingleCardChannel.next(cardID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this card?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onResetProgress: ICallback<CardsCallbackSettings, number> = (\n    {\n        services,\n        location\n    },\n    cardID = -1\n) => {\n    services.cardsListService.resetCardProgressChannel.next(\n        {\n            cardID,\n            cardsGroupID: location.state.cardsGroupID\n        }\n    )\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onClickItem: ICallback<CardsCallbackSettings, number> = (\n    {\n        location,\n        history\n    },\n    cardID = -1\n) => {\n    history.push({\n        pathname: Routs.cardViewer.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID,\n            cardID\n        }\n    })\n}","import {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const initialState = {\n    cards: [],\n    filter: defaultFilter,\n    isEnabledSelecting: false,\n    selectedItems: {},\n    existedGroupsIDs: []\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getCardsByGroup = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n    const foundCardsGroup = cardsGroups.find((cardsGroup: ICardsGroup) => {\n        return cardsGroup.id === cardsGroupID;\n    });\n\n    return foundCardsGroup ? foundCardsGroup.cards : [];\n};\n","import {ICardsGroup} from '../types/ICardsGroup';\nimport {ICard} from '../types/ICard';\n\nexport const deleteSingleCard = (cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => {\n        const cardIndex = cardGroup.cards.findIndex((card) => {\n            return card.id === cardID;\n        })\n\n        return cardIndex > -1\n    });\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.filter((card: ICard) => card.id !== cardID);\n    }\n\n    return cardsGroups;\n};\n","export const selectedItemsObjectToArray = (selectedItemsObject: {[key: number]: boolean}): number[] => {\n    const array: number[] = [];\n    for (let item in selectedItemsObject) {\n        if (selectedItemsObject[item]) {\n            array.push(Number(item));\n        }\n    }\n    return array\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const getExistedCardsGroups = (cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.map((cardsGroup) => {\n        return {\n            id: cardsGroup.id,\n            label: cardsGroup.nameCardsGroup\n        }\n    })\n}","import {map, mergeMap, tap} from 'rxjs/operators';\nimport {of} from \"rxjs\";\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {getCardsByGroup} from './logic/getCardsByGroup';\nimport {resetCardProgress} from './logic/resetCardProgress';\nimport {deleteSingleCard} from '../../common/logic/deleteSingleCard';\nimport {filterCards} from \"./logic/filterCards\";\nimport {IFilter} from \"../../common/types/IFilter\";\nimport {changeCardsGroup} from \"./logic/changeCardsGroup\";\nimport {selectedItemsObjectToArray} from \"./logic/selectedItemsObjectToArray\";\nimport {getExistedCardsGroups} from \"./logic/getExistedCardsGroups\";\nimport {copyCardsInGroup} from \"./logic/copyCardsInGroup\";\nimport {deleteCards} from \"./logic/deleteCards\";\nimport {cardsToIDS} from \"./logic/cardsToIDS\";\nimport {selectedItemsToIDs} from \"./logic/selectedItemsToIDs\";\nimport {IStoredFilters} from \"../../common/types/IStoredFilters\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class CardsService {\n    public cardsChannel: Channel<{ cardsGroupID: number, filter: IFilter }, ICard[]>;\n    public resetCardProgressChannel: Channel<{ cardID: number, cardsGroupID: number }, ICardsGroup[]>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public movingCardsChannel: Channel<{\n        selectedItems: { [key: number]: boolean };\n        destinationGroupID: number;\n    }, ICardsGroup[]>;\n    public copyCardsChannel: Channel<{\n        selectedItems: { [key: number]: boolean };\n        destinationGroupID: number;\n    }, ICardsGroup[]>;\n    public deleteCardsChannel: Channel<{ [key: number]: boolean }, ICardsGroup[]>;\n    public existedGroupsIDsChannel: Channel<IEmpty, Array<{ id: number; label: string }>>;\n    public cardsIDsByGroupIDsChannel: Channel<number, number[]>;\n    public cardsIDsBySelectedItemsChannel: Channel<{ [key: number]: boolean }, number[]>;\n    public filterChannel: Channel<IEmpty, IFilter>;\n    public changeFilterChannel: Channel<IFilter, IStoredFilters>;\n\n    constructor(private storageService: StorageService) {\n        this.cardsChannel = new Channel(\n            ({cardsGroupID, filter}) => this.storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => getCardsByGroup(cardsGroupID, cardsGroups)),\n                map((cards: ICard[]) => filterCards(cards, filter)))\n        );\n\n        this.resetCardProgressChannel = new Channel(\n            ({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => resetCardProgress(cardsGroupID, cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n\n        this.movingCardsChannel = new Channel((\n            {\n                selectedItems,\n                destinationGroupID\n            }\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => changeCardsGroup(\n                        cardsGroups,\n                        selectedCardsIDs,\n                        destinationGroupID\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.existedGroupsIDsChannel = new Channel(() => storageService.getBackup().pipe(\n            map(getExistedCardsGroups)\n        ))\n\n        this.copyCardsChannel = new Channel((\n            {\n                selectedItems,\n                destinationGroupID\n            }\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => copyCardsInGroup(\n                        cardsGroups,\n                        selectedCardsIDs,\n                        destinationGroupID\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.deleteCardsChannel = new Channel((\n            selectedItems\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => deleteCards(\n                        cardsGroups,\n                        selectedCardsIDs\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.cardsIDsByGroupIDsChannel = new Channel<number, number[]>(\n            (groupID) => storageService.getBackup().pipe(\n                map((cardsGroups) => getCardsByGroup(groupID, cardsGroups)),\n                map((cards: ICard[]) => cardsToIDS(cards))\n            )\n        )\n\n        this.cardsIDsBySelectedItemsChannel = new Channel(\n            (args) => of(args).pipe(\n                map(() => selectedItemsToIDs(args))\n            )\n        )\n\n        this.filterChannel = new Channel(\n            () => storageService.getFilter().pipe(\n                map((storedFilters) => storedFilters.cards)\n            )\n        )\n\n        this.changeFilterChannel = new Channel<IFilter, IStoredFilters>(\n            (filter) => storageService.getFilter().pipe(\n                map((storedFilters) => {\n                        return {...storedFilters, cards: filter}\n                    }\n                ),\n                tap((storedFilters) => {\n                    storageService.setFilter(storedFilters);\n                })\n            )\n        )\n    }\n}\n","import {ICard} from \"../../../common/types/ICard\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const filterCards = (cards: ICard[], filter: IFilter) => {\n    const foundByTextCards = cards.filter((card: ICard) => {\n        return card.question.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1 ||\n            card.answer.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1\n    })\n\n    let sortedCards = []\n\n    if (filter.sort === ISortVariant.QUESTION_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.question === card2.question) {\n                return 0\n            } else if (card1.question > card2.question) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.QUESTION_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.question === card2.question) {\n                return 0\n            } else if (card1.question > card2.question) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.STATUS_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.STATUS_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.DATE_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.dateRepeating === card2.dateRepeating) {\n                return 0\n            } else if (card1.dateRepeating > card2.dateRepeating) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.DATE_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.dateRepeating === card2.dateRepeating) {\n                return 0\n            } else if (card1.dateRepeating < card2.dateRepeating) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.ANSWER_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.answer === card2.answer) {\n                return 0\n            } else if (card1.answer < card2.answer) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.ANSWER_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.answer === card2.answer) {\n                return 0\n            } else if (card1.answer < card2.answer) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.PROGRESS_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge < card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.PROGRESS_DESC) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge < card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    }\n\n    return foundByTextCards\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const resetCardProgress = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards[cardIndex].rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n    }\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\n\nexport const changeCardsGroup = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[],\n    destinationGroupID: number\n) => {\n\n    const selectedCards: ICard[] = []\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card) => {\n            const isSelected = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id\n            }) > -1\n\n            if (isSelected) {\n                selectedCards.push(card);\n            }\n        });\n        cardsGroup.cards = cardsGroup.cards.filter((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id;\n            });\n\n            return foundCardIndex < 0;\n        })\n    })\n\n    cardsGroups.forEach((cardsGroup) => {\n        if(cardsGroup.id === destinationGroupID) {\n            cardsGroup.cards.push(...selectedCards)\n        }\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\n\nexport const copyCardsInGroup = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[],\n    destinationGroupID: number\n) => {\n    const selectedCards: ICard[] = []\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card, index) => {\n            const isSelected = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id\n            }) > -1\n\n            if (isSelected) {\n                selectedCards.push({\n                    ...card,\n                    id: new Date().getTime() + index * 1000\n                });\n            }\n        });\n    });\n\n    cardsGroups.forEach((cardsGroup) => {\n        if(cardsGroup.id === destinationGroupID) {\n            cardsGroup.cards.push(...selectedCards)\n        }\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const deleteCards = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[]\n) => {\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards = cardsGroup.cards.filter((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id;\n            });\n\n            return foundCardIndex < 0;\n        })\n    })\n\n    return cardsGroups;\n}","import {ICard} from \"../../../common/types/ICard\";\n\nexport const cardsToIDS = (cards: ICard[]) => {\n    return cards.map((card) => card.id)\n}","export const selectedItemsToIDs = (selectedItems: { [p: number]: boolean }): number[] => {\n    const ids = [];\n    for (let a in selectedItems) {\n        if (selectedItems[a]) {\n            ids.push(Number(a));\n        }\n    }\n    return ids;\n}","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {SelectionDialogContainerState} from \"./types/SelectionDialogContainerState\";\n\nexport class SelectionDialogService {\n\n    public openDialogChannel = new Channel<SelectionDialogContainerState, SelectionDialogContainerState>(\n        (state: SelectionDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.selectionChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public selectionChannel = new Channel<number, number>((value: number) => of(value));\n}\n\n","import React, {FC, useCallback} from 'react';\n\nimport {CardsComponent} from './CardsComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {AppContext} from '../../../App';\nimport {onDeleteSelectedCards} from \"./ui-callbacks/onDeleteSelectedCards\";\nimport {onCopySelectedCards} from \"./ui-callbacks/onCopySelectedCards\";\nimport {onMovingSelectedCards} from \"./ui-callbacks/onMovingSelectedCards\";\nimport {onSelectItem} from \"./ui-callbacks/onSelectItem\";\nimport {onStartSelecting} from \"./ui-callbacks/onStartSelecting\";\nimport {onOpenRepeater} from \"./ui-callbacks/onOpenRepeater\";\nimport {onChangeSorting} from \"./ui-callbacks/onChangeSorting\";\nimport {onChangeSearchableText} from \"./ui-callbacks/onChangeSearchableText\";\nimport {onCardsChannel} from \"./channels-callbacks/onCardsChannel\";\nimport {onCardsIDsByGroupIDsChannel} from \"./channels-callbacks/onCardsIDsByGroupIDsChannel\";\nimport {onCardsIDsBySelectedItemsChannel} from \"./channels-callbacks/onCardsIDsBySelectedItemsChannel\";\nimport {onFilterChannel} from \"./channels-callbacks/onFilterChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onChangeFilter} from \"./channels-callbacks/onChangeFilter\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {onResetCardProgressChannel} from \"./channels-callbacks/onResetCardProgressChannel\";\nimport {onDeleteSingleCardChannel} from \"./channels-callbacks/onDeleteSingleCardChannel\";\nimport {onMovingCardsChannel} from \"./channels-callbacks/onMovingCardsChannel\";\nimport {onCopyCardsChannel} from \"./channels-callbacks/onCopyCardsChannel\";\nimport {onDeleteCardsChannel} from \"./channels-callbacks/onDeleteCardsChannel\";\nimport {onExistedGroupsIDsChannel} from \"./channels-callbacks/onExistedGroupsIDsChannel\";\nimport {onOpenEditor} from \"./ui-callbacks/onOpenEditor\";\nimport {onEditItem} from \"./ui-callbacks/onEditItem\";\nimport {onDeleteItem} from \"./ui-callbacks/onDeleteItem\";\nimport {onResetProgress} from \"./ui-callbacks/onResetProgress\";\nimport {onClickItem} from \"./ui-callbacks/onClickItem\";\nimport {initialState} from \"./defaults/initialState\";\nimport {CardsCallbackSettings} from \"./types/CardsCallbackSettings\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {CardsService} from \"./CardsService\";\nimport {SelectionDialogService} from \"../../parts/selection-dialog/SelectionDialogService\";\nimport {ConfirmDialogService} from \"../../parts/confirm-dialog/ConfirmDialogService\";\n\nexport const CardsContainer: FC = () => {\n\n    const cardsListService = useDependency(CardsService);\n    const selectionDialogService = useDependency(SelectionDialogService);\n    const confirmDialogService = useDependency(ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<CardsCallbackSettings>(\n        initialState,\n        {cardsListService, selectionDialogService, confirmDialogService},\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings\n\n    useChannel(cardsListService.cardsChannel, callbackFactory(onCardsChannel));\n    useChannel(cardsListService.cardsIDsByGroupIDsChannel, callbackFactory(onCardsIDsByGroupIDsChannel));\n    useChannel(cardsListService.cardsIDsBySelectedItemsChannel, callbackFactory(onCardsIDsBySelectedItemsChannel));\n    useChannel(cardsListService.filterChannel, callbackFactory(onFilterChannel));\n    useChannel(cardsListService.changeFilterChannel, callbackFactory(onChangeFilter))\n    useChannel(cardsListService.resetCardProgressChannel, callbackFactory(onResetCardProgressChannel));\n    useChannel(cardsListService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel));\n    useChannel(cardsListService.movingCardsChannel, callbackFactory(onMovingCardsChannel));\n    useChannel(cardsListService.copyCardsChannel, callbackFactory(onCopyCardsChannel));\n    useChannel(cardsListService.deleteCardsChannel, callbackFactory(onDeleteCardsChannel))\n    useChannel(cardsListService.existedGroupsIDsChannel, callbackFactory(onExistedGroupsIDsChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const editItem = useCallback(callbackFactory(onEditItem), []);\n    const deleteItem = useCallback(callbackFactory(onDeleteItem), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const clickItem = useCallback(callbackFactory(onClickItem), []);\n    const changeSearchableText = useCallback(callbackFactory(onChangeSearchableText), [state.filter]);\n    const changeSorting = useCallback(callbackFactory(onChangeSorting), [state.filter]);\n\n    const startSelecting = useCallback(callbackFactory(onStartSelecting), []);\n    const openRepeater = useCallback(callbackFactory(onOpenRepeater), []);\n    const selectItem = useCallback(callbackFactory(onSelectItem), []);\n    const movingSelectedCards = useCallback(callbackFactory(onMovingSelectedCards), []);\n    const copySelectedCards = useCallback(callbackFactory(onCopySelectedCards), []);\n    const deleteSelectedCards = useCallback(callbackFactory(onDeleteSelectedCards), [])\n\n    return <CardsComponent\n        filter={state.filter}\n        onChangeSorting={changeSorting}\n        onChangeSearchableText={changeSearchableText}\n        cards={state.cards}\n        onOpenEditor={openEditor}\n        onEditItem={editItem}\n        onDeleteItem={deleteItem}\n        onResetProgress={resetProgress}\n        onClickItem={clickItem}\n        height={context.height}\n        onOpenRepeater={openRepeater}\n        onStartSelecting={startSelecting}\n        isEnabledSelecting={state.isEnabledSelecting}\n        onSelectItem={selectItem}\n        selectedItems={state.selectedItems}\n        onMovingSelectedCards={movingSelectedCards}\n        onDeleteSelectedCards={deleteSelectedCards}\n        onCopySelectedCards={copySelectedCards}\n    />\n};\n","import React, {FC} from 'react';\n\nimport {Button} from '@mui/material';\nimport {IRepeatingStatisticComponent} from \"./types/IRepeatingStatisticComponent\";\n\nexport const StatisticComponent: FC<IRepeatingStatisticComponent> = ({repeatingProgress}) => {\n\n    return <div>\n        <Button size=\"small\">\n            <span style={{color: \"red\"}}>To Do: {repeatingProgress.todo}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"orange\"}}>In progress: {repeatingProgress.inProgress}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"green\"}}>Completed: {repeatingProgress.done}</span>\n        </Button>\n    </div>\n};\n","import React, {FC} from 'react';\nimport {Button} from '@mui/material';\n\nimport {IAllCardsRepeatedComponent} from \"./types/IAllCardsRepeatedComponent\";\n\nexport const AllCardsRepeatedComponent: FC<IAllCardsRepeatedComponent> = ({onBackClick}) => {\n    return <>\n        <span>No cards for repeating</span>\n        <Button size=\"small\" color=\"primary\" onClick={onBackClick}>\n            Go back\n        </Button>\n    </>\n};\n","import React, {FC} from 'react';\nimport {IconButton} from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport {Campaign, Check, Edit} from '@mui/icons-material';\nimport {ICardsRepeaterHeaderComponent} from \"./types/ICardsRepeaterHeaderComponent\";\n\nexport const CardsHeaderComponent: FC<ICardsRepeaterHeaderComponent> = (\n    {\n        isQuestionSide,\n        onSwitchEditing,\n        onReadByVoiceEngine,\n        isEditable\n    }\n) => {\n    return <div className=\"cards-repeater_title\">\n        <IconButton color=\"inherit\" onClick={onReadByVoiceEngine}>\n            <Campaign/>\n        </IconButton>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {isQuestionSide ? 'Question' : 'Answer'}\n        </Typography>\n        <IconButton color=\"inherit\" onClick={onSwitchEditing}>\n            {isEditable ? <Check/> : <Edit/>}\n        </IconButton>\n    </div>\n};\n","import React, {FC} from 'react';\nimport {List} from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport {ILongTextViewerComponent} from './types/ILongTextViewerComponent';\nimport './LongTextViewerComponent.css'\n\nexport const LongTextViewerComponent: FC<ILongTextViewerComponent> = (\n    {\n        viewHeight,\n        text,\n        onClickText = () => {\n        }\n    }\n) => {\n    return <Typography\n        component=\"div\"\n        color=\"textSecondary\"\n        gutterBottom\n        onClick={onClickText}\n        className=\"long-text-viewer\"\n        style={{height: viewHeight - 20}}\n    >\n        <List style={{paddingTop: 0}}>\n            {text}\n        </List>\n    </Typography>\n}","import {ChangeEvent, default as React, FC} from 'react';\nimport {TextField} from '@mui/material';\n\nimport './TextEditorComponent.css'\nimport {ITextEditorComponent} from \"./types/ITextEditorComponent\";\n\nexport const TextEditorComponent: FC<ITextEditorComponent> = ({onChangeText, changeableText, label}) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeText(event.target.value);\n    };\n\n    return <TextField\n        className=\"text-editor\"\n        required\n        id=\"outlined-required\"\n        label={label || \"\"}\n        multiline\n        onChange={onChange}\n        value={changeableText}\n        variant=\"filled\"\n    />\n};\n","import React, {FC} from 'react';\n\nimport {TextEditorComponent} from '../text-editor/TextEditorComponent';\nimport {ILongTextEditorComponent} from './types/ILongTextEditorComponent';\nimport './LongTextEditorComponent.css'\n\nexport const LongTextEditorComponent: FC<ILongTextEditorComponent> = (\n    {\n        viewHeight,\n        text,\n        onChangeText\n    }\n) => {\n    return <div\n        className=\"long-text-editor\"\n        style={{\n            height: viewHeight - 20\n        }}\n    >\n        <TextEditorComponent onChangeText={onChangeText} changeableText={text}/>\n    </div>\n}","import React, {FC} from 'react';\nimport {Button, CardActions} from '@mui/material';\n\nimport {IDeleteButtonFooterComponent} from \"./types/IDeleteButtonFooterComponent\";\n\nexport const DeleteButtonFooterComponent: FC<IDeleteButtonFooterComponent> = ({onClick}) => {\n\n    return <>\n        {\n            <CardActions className=\"cards-repeater_buttons-container\" style={{height: 10}}>\n                <Button size=\"small\" color=\"primary\" onClick={() => onClick()}>\n                    Remove\n                </Button>\n            </CardActions>\n        }\n    </>\n};\n","import React, {FC} from 'react';\n\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\nimport {LongTextViewerComponent} from \"../long-text-viewer/LongTextViewerComponent\";\nimport {IQuestionCard} from \"./types/IQuestionCard\";\nimport {LongTextEditorComponent} from \"../long-text-editor/LongTextEditorComponent\";\nimport {DeleteButtonFooterComponent} from \"../delete-button-footer/DeleteButtonFooterComponent\";\n\nexport const QuestionCardComponent: FC<IQuestionCard> = (\n    {\n        card,\n        onClickCard,\n        cardHeight,\n        isEditable,\n        onDeleteCard,\n        onChangeQuestion\n    }\n) => {\n\n    const question = card ? card.question : '';\n\n    return <Card>\n        <CardContent onClick={onClickCard} style={{height: cardHeight}}>\n            {\n                isEditable ?\n                    <>\n                        <LongTextEditorComponent\n                            text={question}\n                            viewHeight={cardHeight}\n                            onChangeText={onChangeQuestion}\n                        />\n                        <DeleteButtonFooterComponent onClick={onDeleteCard}/>\n                    </>\n                    :\n                    <LongTextViewerComponent viewHeight={cardHeight} text={question}/>\n            }\n        </CardContent>\n    </Card>\n};\n","import React, {FC} from 'react';\nimport {Button, CardActions} from '@mui/material';\n\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\nimport {IAnswerCardFooterComponent} from './types/IAnswerCardFooterComponent';\nimport './AnswerCardFooterComponent.css'\n\nexport const AnswerCardFooterComponent: FC<IAnswerCardFooterComponent> = ({card, onClickYesNoButton}) => {\n\n    return <>\n        {\n            card && card.rangeOfKnowledge !== IRangeOfKnowledge.DONE ?\n                <CardActions className=\"answer-card-footer\">\n                    <Button\n                        className=\"answer-card-footer_action answer-card-footer_action-button-yes\"\n                        size=\"small\"\n                        color=\"primary\"\n                        onClick={() => onClickYesNoButton(true)}>\n                        Yes\n                    </Button>\n                    <Button\n                        className=\"answer-card-footer_action answer-card-footer_action-button-no\"\n                        size=\"small\" color=\"primary\"\n                        onClick={() => onClickYesNoButton(false)}>\n                        No\n                    </Button>\n                </CardActions> :\n                <div>Repeated</div>\n        }\n    </>\n};\n","import React, {FC, useState} from 'react';\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\n\nimport {AnswerCardFooterComponent} from '../answer-card-footer/AnswerCardFooterComponent';\nimport {IAnswerCardComponent} from './types/IAnswerCardComponent';\nimport {LongTextViewerComponent} from '../long-text-viewer/LongTextViewerComponent';\nimport {LongTextEditorComponent} from '../long-text-editor/LongTextEditorComponent';\nimport {DeleteButtonFooterComponent} from '../delete-button-footer/DeleteButtonFooterComponent';\n\nexport const AnswerCardComponent: FC<IAnswerCardComponent> = (\n    {\n        card,\n        cardHeight,\n        onClickText,\n        onClickYesNoButton,\n        isEditable,\n        onChangeAnswer,\n        onDeleteCard\n    }\n) => {\n    const [actionStatus, setActionStatus] = useState<null | 'yes' | 'no'>(null);\n\n    const getText = () => {\n        return card ? card.answer : '';\n    };\n\n    const onClickButton = (arg: boolean) => {\n        onClickYesNoButton(arg);\n        setActionStatus(arg ? 'yes' : 'no');\n    }\n\n    const cardBackgroundColor = actionStatus === 'yes' ?\n        'rgba(0,128,0,0.35)' :\n        actionStatus === 'no' ? 'rgb(252,189,154)' : 'white'\n\n    return <Card\n        className=\"cards-repeater answer-card-component\"\n        style={{\n            backgroundColor: cardBackgroundColor\n        }}>\n        <CardContent\n            style={{\n                height: cardHeight\n            }}>\n            {\n                isEditable ?\n                    <>\n                        <LongTextEditorComponent\n                            text={getText()}\n                            viewHeight={cardHeight}\n                            onChangeText={onChangeAnswer}\n                        />\n                        <DeleteButtonFooterComponent onClick={onDeleteCard}/>\n                    </>\n                    :\n                    <>\n                        <LongTextViewerComponent\n                            viewHeight={cardHeight}\n                            text={getText()}\n                            onClickText={onClickText}\n                        />\n                        <AnswerCardFooterComponent onClickYesNoButton={onClickButton} card={card}/>\n                    </>\n            }\n        </CardContent>\n    </Card>\n};\n","import React, {FC} from \"react\";\n\nimport {CardsHeaderComponent} from \"../cards-header/CardsHeaderComponent\";\nimport {QuestionCardComponent} from \"../question-card/QuestionCardComponent\";\nimport {AnswerCardComponent} from \"../answer-card/AnswerCardComponent\";\nimport {ICardsContentComponent} from \"./types/ICardsContentComponent\";\n\nexport const CardsContentComponent: FC<ICardsContentComponent> = (\n    {\n        isQuestionSide,\n        isEditable,\n        onSwitchEditing,\n        card,\n        cardHeight,\n        onClickCard,\n        onChangeAnswer,\n        onChangeQuestion,\n        onDeleteCard,\n        onClickYesNoButton,\n        onReadByVoiceEngine\n    }\n) => {\n    return <>\n        <CardsHeaderComponent\n            onReadByVoiceEngine={onReadByVoiceEngine}\n            isQuestionSide={isQuestionSide}\n            isEditable={isEditable}\n            onSwitchEditing={onSwitchEditing}\n        />\n        {\n            isQuestionSide ?\n                <QuestionCardComponent\n                    card={card}\n                    onClickCard={onClickCard}\n                    cardHeight={cardHeight}\n                    isEditable={isEditable}\n                    onChangeQuestion={onChangeQuestion}\n                    onDeleteCard={onDeleteCard}\n                /> :\n                <AnswerCardComponent\n                    card={card}\n                    onClickText={onClickCard}\n                    cardHeight={cardHeight}\n                    onClickYesNoButton={onClickYesNoButton}\n                    onChangeAnswer={onChangeAnswer}\n                    isEditable={isEditable}\n                    onDeleteCard={onDeleteCard}\n                />\n        }\n    </>\n}","import React, {FC} from 'react';\n\nimport {StatisticComponent} from './elements/statistic/StatisticComponent';\nimport './CardsRepeaterComponent.css'\nimport {AllCardsRepeatedComponent} from './elements/all-cards-repeated/AllCardsRepeatedComponent';\nimport {CardsContentComponent} from '../../common/elements/cards-content/CardsContentComponent';\nimport {ICardsRepeaterComponent} from './types/ICardsRepeaterComponent';\n\nexport const CardsRepeaterComponent: FC<ICardsRepeaterComponent> = (\n    {\n            card,\n            cardHeight,\n            isQuestionSide,\n            onClickCard,\n            onClickYesNoButton,\n            repeatingProgress,\n            onBackClick,\n            onSwitchEditing,\n            isEditable,\n            onChangeAnswer,\n            onChangeQuestion,\n            onReadByVoiceEngine,\n            onDeleteCard\n    }\n) => {\n\n        return card && card.id !== -1 ?\n            <div className=\"cards-repeater\">\n                    <StatisticComponent repeatingProgress={repeatingProgress}/>\n                    <CardsContentComponent\n                        card={card}\n                        onDeleteCard={onDeleteCard}\n                        onClickYesNoButton={onClickYesNoButton}\n                        isQuestionSide={isQuestionSide}\n                        onClickCard={onClickCard}\n                        cardHeight={cardHeight}\n                        onSwitchEditing={onSwitchEditing}\n                        isEditable={isEditable}\n                        onChangeQuestion={onChangeQuestion}\n                        onChangeAnswer={onChangeAnswer}\n                        onReadByVoiceEngine={onReadByVoiceEngine}\n                    />\n            </div> :\n            <AllCardsRepeatedComponent onBackClick={onBackClick}/>\n};\n","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteCard: ICallback<CardRepeaterCallbackSettings, void> = (\n    {services, setState, setSubscription}\n) => {\n    const {confirmDialogService, cardsRepeaterService} = services;\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            setState((prevState) => {\n                cardsRepeaterService.deleteSingleCardChannel.next(prevState.card.id);\n                return prevState;\n            })\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardRepeaterCallbackSettings, ICardsGroup[]> = (\n    {services, location}\n) => {\n    services.cardsRepeaterService.cardChannel.next(\n        location.state ? location.state.cardsIDsForRepeating : []\n    )\n}","import {IRangeOfKnowledge} from \"../types/IRangeOfKnowledge\";\n\nexport const defaultCard = {\n    id: -1,\n    question: '',\n    answer: '',\n    rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n    dateRepeating: 0\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {CardRepeaterCallbackSettings} from '../types/CardRepeaterCallbackSettings';\nimport {ICard} from '../../../common/types/ICard';\nimport {defaultCard} from '../../../common/defaults/defaultCard';\nimport {empty} from '../../../../MyTools/channel-conception/defaults/empty';\n\nexport const onCardChannel: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {services: {cardsRepeaterService}, setState},\n    card = defaultCard\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card,\n            isQuestionSide: true,\n            isEditable: false\n        }\n    });\n    cardsRepeaterService.repeatingProgressChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onCardEditingChannel: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {setState},\n    card = defaultCard\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","export const defaultRepeatingProgress = {\n    inProgress: 0,\n    todo: 0,\n    done: 0\n};","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {IRepeatingProgress} from \"../../../common/types/IRepeatingProgress\";\nimport {defaultRepeatingProgress} from \"../../../common/defaults/defaultRepeatingProgress\";\n\nexport const onStatisticChannel: ICallback<CardRepeaterCallbackSettings, IRepeatingProgress> = (\n    {setState},\n    statistic = defaultRepeatingProgress\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeatingProgress: statistic\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onRepeatingResultChannel: ICallback<CardRepeaterCallbackSettings, ICardsGroup[]> = (\n    {services: {cardsRepeaterService}, location}\n) => {\n    cardsRepeaterService.cardChannel.next(location.state.cardsIDsForRepeating);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {services: {cardsRepeaterService}, location}\n) => {\n    if (location.state) {\n        cardsRepeaterService.cardChannel.next(location.state.cardsIDsForRepeating);\n    }\n    cardsRepeaterService.repeatingProgressChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const onClick: ICallback<CardRepeaterCallbackSettings, boolean> = (\n    {\n        setState,\n        location,\n        services: {cardsRepeaterService}\n    },\n    isKnown = false\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            cardsRepeaterService.repeatingResultChannel.next({\n                isKnown: isKnown,\n                cardID: prevState.card.id,\n                cardsGroupID: location.state.cardsGroupID\n            });\n            return prevState;\n        } else {\n            return {\n                ...prevState,\n                card: {\n                    id: -1,\n                    question: '',\n                    answer: '',\n                    rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n                    dateRepeating: 0\n                },\n                isQuestionSide: false,\n                isEditable: false\n            }\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onClickCard: ICallback<CardRepeaterCallbackSettings, void> = (\n    {setState}\n) => {\n\n    setState((prevState) => {\n        if (!prevState.isEditable) {\n            return {\n                ...prevState,\n                isQuestionSide: !prevState.isQuestionSide\n            }\n        }\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onBackClick: ICallback<CardRepeaterCallbackSettings, void> = (\n    {history}\n) => {\n    history.goBack();\n}","import {IRangeOfKnowledge} from \"../types/IRangeOfKnowledge\";\n\nexport const initDefaultCard = () => {\n    return {\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        answer: '',\n        question: '',\n        dateRepeating: 0,\n        id: new Date().getTime()\n    }\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const onSwitchEditing: ICallback<CardRepeaterCallbackSettings, void> = (\n    {setState, location, services: {cardsEditorService}}\n) => {\n    setState((prevState) => {\n        if (prevState.isEditable) {\n            cardsEditorService.cardEditingChannel.next({\n                card: prevState.card || initDefaultCard(),\n                cardsGroupID: location.state.cardsGroupID\n            })\n        }\n        return {\n            ...prevState,\n            isEditable: !prevState.isEditable\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardRepeaterCallbackSettings, string> = (\n    {setState},\n    question = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                question\n            };\n            return {...prevState, card: editableCard}\n        }\n        return prevState\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardRepeaterCallbackSettings, string> = (\n    {setState},\n    answer = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                answer\n            };\n            return {...prevState, card: editableCard}\n        }\n        return prevState;\n    });\n}","import {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\nimport {defaultRepeatingProgress} from \"../../../common/defaults/defaultRepeatingProgress\";\n\nexport const initialState = {\n    card: {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    },\n    isQuestionSide: true,\n    isEditable: false,\n    repeatingProgress: defaultRepeatingProgress\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onReadByVoiceEngine: ICallback<CardRepeaterCallbackSettings, void> = (\n    {setState, services}\n) => {\n    setState((prevState) => {\n        if (prevState.isQuestionSide) {\n            services.cardsRepeaterService.readByVoiceEngineChannel.next(prevState.card.question);\n        } else {\n            services.cardsRepeaterService.readByVoiceEngineChannel.next(prevState.card.answer);\n        }\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onReadByVoiceEngineChannel: ICallback<CardRepeaterCallbackSettings, string> = (\n    {},\n) => {\n}","import {IRepeatingArgs} from '../types/IRepeatingArgs';\nimport {ICardsGroup} from '../types/ICardsGroup';\nimport {ICard} from '../types/ICard';\nimport {IRangeOfKnowledge} from '../types/IRangeOfKnowledge';\n\nexport const changeRangeOfKnowledge = (args: IRepeatingArgs, cardsGroups: ICardsGroup[]) => {\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (!args.cardID || card.id === args.cardID) {\n                    if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (!args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n                    }\n                }\n            });\n        }\n    });\n\n\n    return cardsGroups;\n};\n","import {ICard} from '../../../common/types/ICard';\n\nexport const shuffleCards = (array: ICard[]) => {\n    const copy = [];\n    let length = array.length;\n    let randomIndex;\n\n    while (length) {\n        randomIndex = Math.floor(Math.random() * array.length);\n        if (randomIndex in array) {\n            copy.push(array[randomIndex]);\n            delete array[randomIndex];\n            length--;\n        }\n    }\n\n    return copy;\n};\n","import {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\nimport {IRepeatingType} from \"../../../common/types/IRepeatingType\";\nimport {shuffleCards} from \"./shuffleCards\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const getCardForRepeating = (cards: ICard[], repeatingType: IRepeatingType): ICard => {\n\n    let foundCard\n\n    if (repeatingType === IRepeatingType.RANDOM) {\n        const cardsWithoutDone = shuffleCards(cards).filter((card: ICard) => {\n            return card.rangeOfKnowledge !== IRangeOfKnowledge.DONE\n        })\n        foundCard = cardsWithoutDone[0];\n    } else {\n        foundCard = cards.find((card: ICard) => {\n            return card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO;\n        });\n\n        if (!foundCard) {\n            foundCard = cards.find((card: ICard) => {\n                return card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS;\n            });\n        }\n\n        if (cards.length === 1) {\n            foundCard = cards[0]\n        }\n    }\n\n    return foundCard || defaultCard\n};\n","import {ICardsGroup} from \"../types/ICardsGroup\";\nimport {IRepeatingArgs} from \"../types/IRepeatingArgs\";\nimport {ICard} from \"../types/ICard\";\n\nexport const refreshCardRepeatingDate = (args: IRepeatingArgs, cardsGroups: ICardsGroup[]) => {\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (!args.cardID || card.id === args.cardID) {\n                    card.dateRepeating = new Date().getTime();\n                }\n            });\n        }\n    });\n\n    return cardsGroups;\n}","import {IRepeatingArgs} from \"../types/IRepeatingArgs\";\nimport {IStatistic} from \"../types/IStatistic\";\n\nexport const updateStatistic = (statistic: IStatistic, args: IRepeatingArgs): IStatistic => {\n\n    let today = new Date();\n    let date = today.getDate();\n    let month = today.getMonth();\n    let year = today.getFullYear();\n    let foundDayIndex = statistic.dailyStatistic.findIndex((dayStatistic) => {\n        return dayStatistic.date === date && dayStatistic.year === year && dayStatistic.month === month\n    });\n\n    if (foundDayIndex >= 0) {\n        let dailyStatistic = statistic.dailyStatistic[foundDayIndex];\n        if (args.isKnown) {\n            if (dailyStatistic.done[args.cardID]) {\n                dailyStatistic.done[args.cardID] = dailyStatistic.done[args.cardID] + 1;\n            } else {\n                dailyStatistic.done[args.cardID] = 1;\n            }\n        } else {\n            if (dailyStatistic.inProgress[args.cardID]) {\n                dailyStatistic.inProgress[args.cardID] = dailyStatistic.inProgress[args.cardID] + 1;\n            } else {\n                dailyStatistic.inProgress[args.cardID] = 1;\n            }\n        }\n    } else {\n        statistic.dailyStatistic.push({\n            date,\n            year,\n            month,\n            inProgress: args.isKnown ? {} : {[args.cardID]: 1},\n            done: args.isKnown ? {[args.cardID]: 1} : {}\n        });\n    }\n    if (!args.isKnown) {\n        if (statistic.cardsInProgressFrequency[args.cardID]) {\n            statistic.cardsInProgressFrequency[args.cardID] = statistic.cardsInProgressFrequency[args.cardID] + 1;\n        } else {\n            statistic.cardsInProgressFrequency[args.cardID] = 1;\n        }\n    }\n\n    return statistic;\n}","export const readByVoiceEngine = (text: string, voice: SpeechSynthesisVoice) => {\n\n    const synth = window.speechSynthesis;\n    if (synth.speaking) {\n        synth.cancel();\n        return text;\n    }\n    const speechSynthesisUtterance = new SpeechSynthesisUtterance(text);\n    speechSynthesisUtterance.onerror = (error) => {\n        console.warn('Read text error', error);\n    }\n    speechSynthesisUtterance.voice = voice;\n    speechSynthesisUtterance.lang = 'en-US';\n    speechSynthesisUtterance.rate = 1;\n    synth.speak(speechSynthesisUtterance);\n\n    return text;\n}","export const prepareTextForVoiceEngine = (text: string): string => {\n    text = text.replace(/_/g, '');\n    text = text.replace(/=/g, '');\n    text = text.replace(/\\+/g, '');\n    text = text.replace(/[\\u0400-\\u04FF]/gi, '');\n    console.log(text);\n    return text;\n}","import {of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {IRepeatingArgs} from '../../common/types/IRepeatingArgs';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {IRepeatingProgress} from '../../common/types/IRepeatingProgress';\nimport {getCardsByIDs} from './logic/getCardsByIDs';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForRepeating} from './logic/getCardForRepeating';\nimport {getRepeatingProgress} from './logic/getRepeatingProgress';\nimport {refreshCardRepeatingDate} from '../../common/logic/refreshCardRepeatingDate';\nimport {deleteSingleCard} from '../../common/logic/deleteSingleCard';\nimport {updateStatistic} from '../../common/logic/updateStatistic';\nimport {IStatistic} from '../../common/types/IStatistic';\nimport {IEmpty} from '../../../MyTools/channel-conception/defaults/IEmpty';\nimport {readByVoiceEngine} from '../../common/logic/readByVoiceEngine';\nimport {VoiceService} from '../../common/services/VoiceService';\nimport {prepareTextForVoiceEngine} from '../../common/logic/prepareTextForVoiceEngine';\n\nexport class CardsRepeaterService {\n    public cardChannel: Channel<number[], ICard>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public repeatingProgressChannel: Channel<IEmpty, IRepeatingProgress>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public readByVoiceEngineChannel: Channel<string, string>;\n\n    private statisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    constructor(private storageService: StorageService, private voiceService: VoiceService) {\n        this.cardChannel = new Channel((cardsIDs) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardsByIDs(cardsGroups, cardsIDs)),\n            tap((cards) => {\n                this.statisticValue = getRepeatingProgress(cards);\n            }),\n            switchMap((cards: ICard[]) => this.storageService.getSettings().pipe(\n                map((settings) => {\n                    return getCardForRepeating(cards, settings.repeatingType);\n                })\n            ))\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getStatistic().pipe(\n                map((statistic: IStatistic) => updateStatistic(statistic, args)),\n                map((statistic: IStatistic) => this.storageService.setStatistic(statistic)),\n                switchMap(() => this.storageService.getBackup()),\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                map((cardsGroups: ICardsGroup[]) => refreshCardRepeatingDate(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups)),\n            );\n        });\n\n        this.repeatingProgressChannel = new Channel(() => of(this.statisticValue));\n\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n        this.readByVoiceEngineChannel = new Channel<string, string>(\n            (inputText) => of(inputText).pipe(\n                map((text) => prepareTextForVoiceEngine(text)),\n                map(\n                    (text) => readByVoiceEngine(text, voiceService.getRandomVoice())\n                )\n            )\n        );\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\n\nexport const getCardsByIDs = (cardsGroups: ICardsGroup[], cardsIDs: number[]) => {\n\n    let foundCards: Array<ICard> = [];\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card) => {\n            const foundIndex = cardsIDs.findIndex((value) => value === card.id)\n            if (foundIndex > -1) {\n                foundCards.push(card);\n            }\n        })\n    });\n\n    return foundCards;\n};\n","import {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\nimport {IRepeatingProgress} from '../../../common/types/IRepeatingProgress';\n\nexport const getRepeatingProgress = (cards: ICard[]): IRepeatingProgress => {\n\n    const repeatingProgress = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    cards.forEach((card: ICard) => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            repeatingProgress.inProgress = repeatingProgress.inProgress + 1\n        } else if (card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n            repeatingProgress.todo = repeatingProgress.todo + 1\n        } else {\n            repeatingProgress.done = repeatingProgress.done + 1\n        }\n    });\n\n    return repeatingProgress;\n};\n","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ICard} from '../../common/types/ICard';\nimport {saveCard} from './logic/saveCard';\nimport {getEditingCard} from './logic/getEditingCard';\n\nexport class CardsEditorService {\n\n    public cardEditingChannel: Channel<{ card: ICard, cardsGroupID: number }, ICard>;\n    public cardChannel: Channel<{ cardID: number, cardsGroupID: number }, ICard | undefined>;\n\n    constructor(storageService: StorageService) {\n        this.cardEditingChannel = new Channel(({card, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCard(cardsGroupID, card, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            }),\n            map(() => card)\n        ));\n\n        this.cardChannel = new Channel(({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCard(cardsGroupID, cardID, cardsGroups))\n        ));\n    }\n}","import {ICard} from '../../../common/types/ICard';\nimport {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveCard = (cardsGroupID: number, card: ICard, cardsGroups: ICardsGroup[]) => {\n\n    if (card.id === -1) {\n        card.id = new Date().getTime();\n    }\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => card.id === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex < 0) {\n        cardsGroups[cardGroupIndex].cards.push(card);\n    } else if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards[cardIndex] = card;\n    }\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const getEditingCard = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n        let card: ICard | undefined = {\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO,\n            answer: '',\n            question: '',\n            dateRepeating: 0,\n            id: new Date().getTime()\n        };\n\n        if (cardsGroup) {\n            card = cardsGroup.cards.find((card: ICard) => card.id === cardID)\n        }\n\n        return card;\n};\n","import React, {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {CardsRepeaterComponent} from './CardsRepeaterComponent';\nimport {AppContext} from '../../../App';\nimport {onDeleteCard} from './ui-callbacks/onDeleteCard';\nimport {onDeleteSingleCardChannel} from './channels-callbacks/onDeleteSingleCardChannel';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {onCardChannel} from './channels-callbacks/onCardChannel';\nimport {onCardEditingChannel} from './channels-callbacks/onCardEditingChannel';\nimport {onStatisticChannel} from './channels-callbacks/onStatisticChannel';\nimport {onRepeatingResultChannel} from './channels-callbacks/onRepeatingResultChannel';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onClick} from './ui-callbacks/onClick';\nimport {onClickCard} from './ui-callbacks/onClickCard';\nimport {onBackClick} from './ui-callbacks/onBackClick';\nimport {onSwitchEditing} from './ui-callbacks/onSwitchEditing';\nimport {onChangeQuestion} from './ui-callbacks/onChangeQuestion';\nimport {onChangeAnswer} from './ui-callbacks/onChangeAnswer';\nimport {initialState} from './defaults/initialState';\nimport {CardRepeaterCallbackSettings} from './types/CardRepeaterCallbackSettings';\nimport {onReadByVoiceEngine} from './ui-callbacks/onReadByVoiceEngine';\nimport {onReadByVoiceEngineChannel} from './channels-callbacks/onReadByVoiceEngineChannel';\nimport {useDependency} from '../../../MyTools/react-di/hooks/useDependency';\nimport {CardsRepeaterService} from './CardsRepeaterService';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {CardsEditorService} from '../cards-editor/CardsEditorService';\nimport {ToolbarService} from '../../parts/toolbar/ToolbarService';\n\nexport const CardRepeaterContainer: FC = () => {\n\n    const cardsRepeaterService = useDependency(CardsRepeaterService);\n    const cardsEditorService = useDependency(CardsEditorService);\n    const confirmDialogService = useDependency(ConfirmDialogService);\n    const toolbarService = useDependency(ToolbarService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<CardRepeaterCallbackSettings>(\n        initialState,\n        {\n            cardsRepeaterService,\n            cardsEditorService,\n            confirmDialogService,\n            toolbarService\n        },\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings;\n\n    useChannel(cardsRepeaterService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel))\n    useChannel(cardsRepeaterService.cardChannel, callbackFactory(onCardChannel));\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardsRepeaterService.repeatingProgressChannel, callbackFactory(onStatisticChannel));\n    useChannel(cardsRepeaterService.repeatingResultChannel, callbackFactory(onRepeatingResultChannel));\n    useChannel(cardsRepeaterService.readByVoiceEngineChannel, callbackFactory(onReadByVoiceEngineChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const click = useCallback(callbackFactory(onClick), []);\n    const clickCard = useCallback(callbackFactory(onClickCard), []);\n    const backClick = useCallback(callbackFactory(onBackClick), []);\n    const switchEditing = useCallback(callbackFactory(onSwitchEditing), []);\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), []);\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), []);\n    const deleteCard = useCallback(callbackFactory(onDeleteCard), [])\n    const readByVoiceEngine = useCallback(callbackFactory(onReadByVoiceEngine), []);\n\n    return <CardsRepeaterComponent\n        onReadByVoiceEngine={readByVoiceEngine}\n        onDeleteCard={deleteCard}\n        cardHeight={context.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={clickCard}\n        onClickYesNoButton={click}\n        card={state.card}\n        repeatingProgress={state.repeatingProgress}\n        onBackClick={backClick}\n        onSwitchEditing={switchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n    />\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {LocalBackupsCallbackSettings} from \"../types/LocalBackupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onLoadBackupChannel: ICallback<LocalBackupsCallbackSettings, ICardsGroup[]> = (\n    {services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {LocalBackupsCallbackSettings} from \"../types/LocalBackupsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport LoadIcon from \"@mui/icons-material/Download\";\nimport * as React from \"react\";\n\nexport const onFileSelect: ICallback<LocalBackupsCallbackSettings, any> = (\n    {\n        setSubscription,\n        services: {\n            spinnerService,\n            confirmDialogService,\n            localBackupsService\n        }\n    },\n    event\n) => {\n\n    let file = null;\n    if (event) {\n        file = event.target.files[0];\n    }\n    if (!file) {\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = (readerEvent: any) => {\n        const games: string = readerEvent.target.result;\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                spinnerService.spinnerCounterChannel.next(1);\n                localBackupsService.loadBackupChannel.next(games);\n            }\n\n            confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to load this backup, your current changes could be removed?',\n            titleBackgroundColor: 'red',\n            icon: <LoadIcon/>\n        });\n    };\n    reader.readAsText(file);\n}","import {of} from 'rxjs';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {switchMap, tap} from 'rxjs/operators';\nimport {saveBackupFile} from './logic/saveBackupFile';\n\nexport class LocalBackupsService {\n\n    public localBackupChannel: Channel<void, ICardsGroup[]>;\n    public loadBackupChannel: Channel<string, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.localBackupChannel = new Channel(() => this.storageService.getBackup().pipe(\n            tap((backup: ICardsGroup[]) => saveBackupFile(backup))\n        ));\n\n        this.loadBackupChannel = new Channel((backupFile: string) => of('').pipe(\n            switchMap(() => {\n                return this.storageService.setBackup(JSON.parse(backupFile));\n            })\n        ));\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveBackupFile = (backup: ICardsGroup[]) => {\n    const fileData: string = JSON.stringify(backup, null, 4);\n    const blob = new Blob([fileData], {type: \"octet/stream\"});\n    const url = window.URL.createObjectURL(blob);\n\n    const fileBuffer = document.createElement('a');\n\n    if (fileBuffer) {\n        fileBuffer.href = url;\n        fileBuffer.download = 'My Cards.txt';\n        fileBuffer.click();\n    }\n    window.URL.revokeObjectURL(url);\n};\n","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {Button} from '@mui/material';\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {onLoadBackupChannel} from \"./channels-callbacks/onLoadBackupChannel\";\nimport {onFileSelect} from \"./ui-callbacks/onFileSelect\";\nimport {LocalBackupsCallbackSettings} from \"./types/LocalBackupsCallbackSettings\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {LocalBackupsService} from \"./LocalBackupsService\";\nimport {SpinnerService} from \"../../parts/spinner/SpinnerService\";\nimport {ConfirmDialogService} from \"../../parts/confirm-dialog/ConfirmDialogService\";\n\nexport const LocalBackupsContainer: FC = () => {\n\n    const localBackupsService = useDependency(LocalBackupsService);\n    const spinnerService = useDependency(SpinnerService);\n    const confirmDialogService = useDependency(ConfirmDialogService);\n\n    const {\n        callbackFactory\n    } = useCallbackFactory<LocalBackupsCallbackSettings>(\n        null,\n        {\n            localBackupsService,\n            spinnerService,\n            confirmDialogService\n        },\n        AppContext\n    );\n\n    useChannel(localBackupsService.localBackupChannel);\n    useChannel(localBackupsService.loadBackupChannel, callbackFactory(onLoadBackupChannel));\n\n    const handleFileSelect = useCallback(callbackFactory(onFileSelect), [])\n\n    return <>\n        <input type=\"file\" onChange={handleFileSelect}/>\n        <Button size=\"small\" onClick={() => localBackupsService.localBackupChannel.next()}>\n            Save\n        </Button>\n    </>\n};\n","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {Button, TextField} from '@mui/material';\n\nimport './CardsGroupsEditorComponent.css'\nimport {ICardsGroupsEditorComponent} from \"./types/ICardsGroupsEditorComponent\";\n\nexport const CardsGroupsEditorComponent: FC<ICardsGroupsEditorComponent> = (\n    {groupName, onChangeGroupName, onSaveGroup}\n) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeGroupName(event.target.value);\n    };\n\n    return <div className=\"group-editor\">\n        <TextField\n            className=\"group-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Group name\"\n            onChange={onChange}\n            value={groupName}\n            variant=\"filled\"\n        />\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveGroup()}>\n            Save\n        </Button>\n    </div>\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onChangeGroupName: ICallback<ICardsGroupsEditorCallbackSettings, string> = (\n    {setState},\n    groupName = ''\n) => {\n    setState((prevState) => {\n        return {\n            cardsGroup: {\n                ...prevState.cardsGroup,\n                nameCardsGroup: groupName\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onSaveGroup: ICallback<ICardsGroupsEditorCallbackSettings, void> = (\n    {setState, services}\n) => {\n    setState((prevState) => {\n        services.cardsGroupsEditorService.groupEditingChannel.next(prevState.cardsGroup);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onConstructor: ICallback<ICardsGroupsEditorCallbackSettings, void> = (\n    {services, location}\n) => {\n    let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n    services.cardsGroupsEditorService.groupChannel.next(cardsGroupID)\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupEditingChannel: ICallback<ICardsGroupsEditorCallbackSettings, ICardsGroup[]> = (\n    {history}\n) => {\n    history.goBack();\n}","export const defaultCardsGroup = {\n    cards: [],\n    nameCardsGroup: '',\n    repeatingDate: new Date().getTime(),\n    id: new Date().getTime(),\n    percentRepeatedCards: 0\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {defaultCardsGroup} from \"../../../common/defaults/defaultCardsGroup\";\n\nexport const onGroupChannel: ICallback<ICardsGroupsEditorCallbackSettings, ICardsGroup> = (\n    {setState},\n    cardsGroup = defaultCardsGroup\n) => {\n    setState((prevState) => {\n        return {\n            cardsGroup\n        }\n    })\n}","import {defaultCardsGroup} from \"../../../common/defaults/defaultCardsGroup\";\n\nexport const initialState = {\n    cardsGroup: defaultCardsGroup\n}","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {saveCardsGroup} from './logic/saveCardsGroup';\nimport {getEditingCardsGroup} from './logic/getEditingCardsGroup';\n\nexport class CardsGroupsEditorService {\n\n    public groupEditingChannel: Channel<ICardsGroup, ICardsGroup[]>;\n    public groupChannel: Channel<number, ICardsGroup>;\n\n    constructor(storageService: StorageService) {\n        this.groupEditingChannel = new Channel((editedCardGroup: ICardsGroup) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCardsGroup(editedCardGroup, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            })\n        ));\n\n        this.groupChannel = new Channel((cardGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCardsGroup(cardGroupID, cardsGroups))\n        ))\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveCardsGroup = (editedCardGroup: ICardsGroup, cardsGroups: ICardsGroup[]) => {\n        const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => editedCardGroup.id === cardGroup.id);\n\n        if (cardGroupIndex < 0) {\n            cardsGroups.push(editedCardGroup);\n        } else {\n            cardsGroups[cardGroupIndex] = editedCardGroup;\n        }\n\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getEditingCardsGroup = (cardGroupID: number, cardsGroups: ICardsGroup[]): ICardsGroup => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardGroupID === cardGroup.id);\n\n        if (!cardsGroup) {\n            cardsGroup = {\n                cards: [],\n                nameCardsGroup: '',\n                repeatingDate: new Date().getTime(),\n                id: new Date().getTime(),\n                percentRepeatedCards: 0\n            }\n        }\n        return cardsGroup;\n};\n","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {CardsGroupsEditorComponent} from './CardsGroupsEditorComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {onChangeGroupName} from \"./ui-callbacks/onChangeGroupName\";\nimport {onSaveGroup} from \"./ui-callbacks/onSaveGroup\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onGroupEditingChannel} from \"./channels-callbacks/onGroupEditingChannel\";\nimport {onGroupChannel} from \"./channels-callbacks/onGroupChannel\";\nimport {initialState} from \"./defaults/initialState\";\nimport {ICardsGroupsEditorCallbackSettings} from \"./types/ICardsGroupsEditorCallbackSettings\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {CardsGroupsEditorService} from \"./CardsGroupsEditorService\";\n\nexport const CardsGroupsEditorContainer: FC = () => {\n\n    const cardsGroupsEditorService = useDependency(CardsGroupsEditorService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<ICardsGroupsEditorCallbackSettings>(\n        initialState,\n        {cardsGroupsEditorService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings;\n\n    useChannel(cardsGroupsEditorService.groupEditingChannel, callbackFactory(onGroupEditingChannel));\n    useChannel(cardsGroupsEditorService.groupChannel, callbackFactory(onGroupChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeGroupName = useCallback(callbackFactory(onChangeGroupName), []);\n    const saveGroup = useCallback(callbackFactory(onSaveGroup), []);\n\n    return <CardsGroupsEditorComponent\n        groupName={state.cardsGroup.nameCardsGroup}\n        onChangeGroupName={changeGroupName}\n        onSaveGroup={saveGroup}\n    />\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {Button} from '@mui/material';\n\nimport './CardsEditorComponent.css'\nimport {TextEditorComponent} from '../../common/elements/text-editor/TextEditorComponent';\nimport {ICardsEditorComponent} from \"./types/ICardsEditorComponent\";\n\nexport const CardsEditorComponent: FC<ICardsEditorComponent> = (\n    {\n        answer,\n        question,\n        onChangeAnswer,\n        onChangeQuestion,\n        onSaveCard\n    }\n) => {\n    return <div className=\"cards-editor\">\n        <TextEditorComponent onChangeText={onChangeQuestion} changeableText={question} label=\"Question\"/>\n        <TextEditorComponent onChangeText={onChangeAnswer} changeableText={answer} label=\"Answer\"/>\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveCard()}>\n            Save\n        </Button>\n    </div>\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onCardEditingChannel: ICallback<CardsEditorCallbackSettings, ICard> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onCardChannel: ICallback<CardsEditorCallbackSettings, ICard> = (\n    {history, setState},\n    card = defaultCard\n) => {\n    if (card) {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                card\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onConstructor: ICallback<CardsEditorCallbackSettings, void> = (\n    {\n        location,\n        services\n    }\n) => {\n    let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n    let cardID = location.state ? location.state.cardID : -1;\n    services.cardsEditorService.cardChannel.next({cardID, cardsGroupID});\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardsEditorCallbackSettings, string> = (\n    {history, setState},\n    question = ''\n) => {\n    setState((prevState) => {\n        return {\n            card: {\n                ...prevState.card,\n                question\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardsEditorCallbackSettings, string> = (\n    {history, setState},\n    answer = ''\n) => {\n    setState((prevState) => {\n        return {\n            card: {\n                ...prevState.card,\n                answer\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onSaveCard: ICallback<CardsEditorCallbackSettings, void> = (\n    {services, setState, location}\n) => {\n    setState((prevState) => {\n        services.cardsEditorService.cardEditingChannel.next(\n            {card: prevState.card, cardsGroupID: location.state.cardsGroupID}\n        );\n        return prevState;\n    })\n}","import {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const initialState = {\n    card: initDefaultCard()\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {CardsEditorComponent} from './CardsEditorComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {onCardEditingChannel} from \"./channels-callbacks/onCardEditingChannel\";\nimport {onCardChannel} from \"./channels-callbacks/onCardChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onChangeQuestion} from \"./ui-callbacks/onChangeQuestion\";\nimport {onChangeAnswer} from \"./ui-callbacks/onChangeAnswer\";\nimport {onSaveCard} from \"./ui-callbacks/onSaveCard\";\nimport {initialState} from \"./defaults/initialState\";\nimport {CardsEditorCallbackSettings} from \"./types/CardsEditorCallbackSettings\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {CardsEditorService} from \"./CardsEditorService\";\n\nexport const CardsEditorContainer: FC = () => {\n\n    const cardsEditorService = useDependency(CardsEditorService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<CardsEditorCallbackSettings>(\n        initialState,\n        {cardsEditorService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings;\n\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardsEditorService.cardChannel, callbackFactory(onCardChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), []);\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), []);\n    const saveCard = useCallback(callbackFactory(onSaveCard), []);\n\n    return <CardsEditorComponent\n        question={state.card.question}\n        answer={state.card.answer}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n        onSaveCard={saveCard}\n    />\n};\n","import * as React from \"react\";\nimport {ChangeEvent, FC} from \"react\";\nimport {FormControlLabel, Switch} from \"@mui/material\";\nimport {ISettingsSwitcherComponent} from \"./types/ISettingsSwitcherComponent\";\n\nexport const SettingsSwitcherComponent: FC<ISettingsSwitcherComponent> = (\n    {\n        checked,\n        label,\n        onChange\n    }\n) => {\n\n    const change = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.checked)\n    };\n\n    return <FormControlLabel\n        control={\n            <Switch\n                checked={checked}\n                onChange={change}\n            />\n        }\n        label={label}\n    />\n}","import * as React from \"react\";\nimport {ChangeEvent, FC} from \"react\";\n\nimport {ISettingsNumberInputComponent} from \"./types/ISettingsNumberInputComponent\";\nimport {FormControlLabel, Input} from \"@mui/material\";\n\nexport const SettingsNumberInputComponent: FC<ISettingsNumberInputComponent> = (\n    {\n        value,\n        label,\n        onChange,\n    }\n) => {\n\n    const change = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange(Number(event.target.value))\n    };\n\n    return <FormControlLabel\n        control={\n            <Input\n                type=\"number\"\n                value={value}\n                onChange={change}\n            />\n        }\n        label={label}\n    />\n}","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {FormControlLabel, FormGroup, FormLabel} from '@mui/material';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\n\nimport {ISettingsComponent} from './types/ISettingsComponent';\nimport {SettingsSwitcherComponent} from './elements/settings-switcher/SettingsSwitcherComponent';\nimport {SettingsNumberInputComponent} from './elements/settings-number-input/SettingsNumberInputComponent';\nimport './SettingsComponent.css'\nimport {IRepeatingType} from '../../common/types/IRepeatingType';\n\nexport const SettingsComponent: FC<ISettingsComponent> = (\n    {\n        settings,\n        onChangeAlgorithm,\n        onChangeAutoObsolete,\n        onChangeTimeInDone,\n        onChangeTimeInProgress\n    }\n) => {\n\n    const changeAlgorithm = (event: ChangeEvent<HTMLInputElement>) => {\n        let repeatingType = Number(event.target.value) as any\n        onChangeAlgorithm(repeatingType);\n    };\n\n    return <FormGroup className=\"settings-form\">\n        <FormLabel>Random repeating algorithm</FormLabel>\n        <RadioGroup value={settings.repeatingType} onChange={changeAlgorithm}>\n            <FormControlLabel value={IRepeatingType.DEFAULT} control={<Radio/>} label=\"Default\"/>\n            <FormControlLabel value={IRepeatingType.RANDOM} control={<Radio/>} label=\"Random\"/>\n        </RadioGroup>\n        <SettingsSwitcherComponent\n            checked={settings.autoObsolete?.isEnable}\n            label=\"Enable auto obsolete\"\n            onChange={onChangeAutoObsolete}\n        />\n        <SettingsNumberInputComponent\n            value={settings.autoObsolete?.timeInDone}\n            onChange={onChangeTimeInDone}\n            label=\"How long cards exist in done status (days)\"\n        />\n        <SettingsNumberInputComponent\n            value={settings.autoObsolete?.timeInProgress}\n            onChange={onChangeTimeInProgress}\n            label=\"How long cards exist in progress status (days)\"\n        />\n        <SettingsNumberInputComponent\n            value={settings.difficultCardsAmountForRepeating}\n            onChange={onChangeTimeInProgress}\n            label=\"How many difficult cards do you want to repeat by default\"\n        />\n    </FormGroup>\n};\n","import {ISettings} from '../types/ISettings';\nimport {IRepeatingType} from '../types/IRepeatingType';\n\nexport const defaultSettings: ISettings = {\n    repeatingType: IRepeatingType.DEFAULT,\n    autoObsolete: {\n        isEnable: false,\n        timeInDone: 7,\n        timeInProgress: 7\n    },\n    difficultCardsAmountForRepeating: 15\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {ISettings} from \"../../../common/types/ISettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onChangeSettingsChannel: ICallback<SettingsCallbackSettings, ISettings> = (\n    {services: {settingsService}}\n) => {\n    settingsService.settingsChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {ISettings} from \"../../../common/types/ISettings\";\nimport {defaultSettings} from \"../../../common/defaults/defaultSettings\";\n\nexport const onSettingsChannel: ICallback<SettingsCallbackSettings, ISettings> = (\n    {setState, services: {settingsService}},\n    settings = defaultSettings\n) => {\n    setState((prevState) => {\n        return {...prevState, ...settings}\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<SettingsCallbackSettings, void> = (\n    {setState, services: {settingsService}}\n) => {\n    settingsService.settingsChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {IRepeatingType} from \"../../../common/types/IRepeatingType\";\n\nexport const onChangeAlgorithm: ICallback<SettingsCallbackSettings, IRepeatingType> = (\n    {setState, services: {settingsService}},\n    repeatingType = IRepeatingType.DEFAULT\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            repeatingType\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\n\nexport const onChangeAutoObsolete: ICallback<SettingsCallbackSettings, boolean> = (\n    {setState, services: {settingsService}},\n    isEnable = false\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            autoObsolete: {\n                ...prevState.autoObsolete,\n                isEnable\n            }\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\n\nexport const onChangeTimeInDone: ICallback<SettingsCallbackSettings, number> = (\n    {setState, services: {settingsService}},\n    timeInDone = -1\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            autoObsolete: {\n                ...prevState.autoObsolete,\n                timeInDone\n            }\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\n\nexport const onChangeTimeInProgress: ICallback<SettingsCallbackSettings, number> = (\n    {setState, services: {settingsService}},\n    timeInProgress = -1\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            autoObsolete: {\n                ...prevState.autoObsolete,\n                timeInProgress\n            }\n        })\n        return prevState;\n    })\n}","import {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ISettings} from '../../common/types/ISettings';\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class SettingsService {\n\n    public settingsChannel: Channel<IEmpty, ISettings>;\n\n    public changeSettingsChannel: Channel<ISettings, ISettings>;\n\n    constructor(storageService: StorageService) {\n\n        this.settingsChannel = new Channel(() => storageService.getSettings());\n\n        this.changeSettingsChannel = new Channel(\n            (settings: ISettings) => storageService.setSettings(settings)\n        );\n    }\n}\n","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {SettingsComponent} from './SettingsComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {defaultSettings} from \"../../common/defaults/defaultSettings\";\nimport {onChangeSettingsChannel} from \"./channels-callbacks/onChangeSettingsChannel\";\nimport {onSettingsChannel} from \"./channels-callbacks/onSettingsChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onChangeAlgorithm} from \"./ui-callbacks/onChangeAlgorithm\";\nimport {onChangeAutoObsolete} from \"./ui-callbacks/onChangeAutoObsolete\";\nimport {onChangeTimeInDone} from \"./ui-callbacks/onChangeTimeInDone\";\nimport {onChangeTimeInProgress} from \"./ui-callbacks/onChangeTimeInProgress\";\nimport {SettingsCallbackSettings} from \"./types/SettingsCallbackSettings\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {SettingsService} from \"./SettingsService\";\n\nexport const SettingsContainer: FC = () => {\n\n    const settingsService = useDependency(SettingsService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<SettingsCallbackSettings>(\n        defaultSettings,\n        {settingsService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings;\n\n    useChannel(settingsService.changeSettingsChannel, callbackFactory(onChangeSettingsChannel));\n    useChannel(settingsService.settingsChannel, callbackFactory(onSettingsChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeAlgorithm = useCallback(callbackFactory(onChangeAlgorithm), []);\n    const changeAutoObsolete = useCallback(callbackFactory(onChangeAutoObsolete), [])\n    const changeTimeInDone = useCallback(callbackFactory(onChangeTimeInDone), [])\n    const changeTimeInProgress = useCallback(callbackFactory(onChangeTimeInProgress), [])\n\n    return <SettingsComponent\n        settings={state}\n        onChangeAlgorithm={changeAlgorithm}\n        onChangeAutoObsolete={changeAutoObsolete}\n        onChangeTimeInDone={changeTimeInDone}\n        onChangeTimeInProgress={changeTimeInProgress}\n    />\n};","import React, {FC} from \"react\";\n\nimport {CardsContentComponent} from \"../../common/elements/cards-content/CardsContentComponent\";\nimport {ICardsContentComponent} from \"../../common/elements/cards-content/types/ICardsContentComponent\";\n\nexport const CardViewerComponent: FC<ICardsContentComponent> = (props) => {\n\n    return <div className=\"cards-viewer\">\n        {\n            props.card.id === -1 ? <div>No card for viewing</div> : <CardsContentComponent {...props}/>\n        }\n    </div>\n};","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteCard: ICallback<CardViewerCallbackSettings, void> = (\n    {services, setSubscription, setState}\n) => {\n    setState((prevState) => {\n        const {confirmDialogService, cardViewerService} = services;\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardViewerService.deleteSingleCardChannel.next(prevState.card.id);\n            }\n\n            confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to delete this cards?',\n            titleBackgroundColor: 'red',\n            icon: <DeleteIcon/>\n        });\n        return prevState;\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardViewerCallbackSettings, ICardsGroup[]> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardViewerCallbackSettings, string> = (\n    {setState},\n    args = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                answer: args\n            };\n            return {...prevState, card: editableCard}\n        }\n        return prevState;\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardViewerCallbackSettings, string> = (\n    {setState},\n    args = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                question: args\n            };\n\n            return {...prevState, card: editableCard}\n        }\n        return prevState;\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const onSwitchEditing: ICallback<CardViewerCallbackSettings, void> = (\n    {\n        setState,\n        services,\n        location\n    }\n) => {\n    setState((prevState) => {\n        if (prevState.isEditable) {\n            services.cardsEditorService.cardEditingChannel.next({\n                card: prevState.card || initDefaultCard(),\n                cardsGroupID: location.state.cardsGroupID\n            })\n        }\n        return {\n            ...prevState,\n            isEditable: !prevState.isEditable\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onClickYesNoButton: ICallback<CardViewerCallbackSettings, boolean> = (\n    {\n        setState,\n        services,\n        location\n    },\n    args = false\n) => {\n\n    setState((prevState) => {\n        if (prevState.card) {\n            services.cardViewerService.repeatingResultChannel.next({\n                isKnown: args,\n                cardID: prevState.card.id,\n                cardsGroupID: location.state.cardsGroupID\n            });\n            return prevState;\n        } else {\n            return {\n                card: defaultCard,\n                isQuestionSide: false,\n                isEditable: false\n            }\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onClickCard: ICallback<CardViewerCallbackSettings, void> = (\n    {setState}\n) => {\n    setState((prevState) => {\n        if (!prevState.isEditable) {\n            return {\n                ...prevState,\n                isQuestionSide: !prevState.isQuestionSide\n            }\n        }\n        return prevState;\n    })\n}","import {CardViewerCallbackSettings} from '../types/CardViewerCallbackSettings';\nimport {ICard} from '../../../common/types/ICard';\nimport {defaultCard} from '../../../common/defaults/defaultCard';\nimport {ICallback} from '../../../../MyTools/react-types/ICallback';\n\nexport const onCardChannel: ICallback<CardViewerCallbackSettings, ICard> = (\n    {services, setState},\n    card = defaultCard\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onCardEditingChannel: ICallback<CardViewerCallbackSettings, ICard> = (\n    {setState},\n    card = defaultCard\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onRepeatingResultChannel: ICallback<CardViewerCallbackSettings, ICardsGroup[]> = (\n    {services, location}\n) => {\n    services.cardViewerService.cardChannel.next(location.state.cardID);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onConstructor: ICallback<CardViewerCallbackSettings, void> = (\n    {services, location}\n) => {\n    services.cardViewerService.cardChannel.next(location.state.cardID);\n}","import {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const initialState = {\n    card: {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    },\n    isQuestionSide: true,\n    isEditable: false\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onReadByVoiceEngine: ICallback<CardViewerCallbackSettings, void> = (\n    {services, setState}\n) => {\n    setState((prevState) => {\n        if (prevState.isQuestionSide) {\n            services.cardViewerService.readByVoiceEngineChannel.next(prevState.card.question);\n        } else {\n            services.cardViewerService.readByVoiceEngineChannel.next(prevState.card.answer);\n        }\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onReadByVoiceEngineChannel: ICallback<CardViewerCallbackSettings, string> = (\n    {}\n) => {\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const getCardForViewing = (cardsGroups: ICardsGroup[], cardID: number): ICard => {\n    let card = {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    };\n\n    for (let i = 0; i < cardsGroups.length; i++) {\n        const index = cardsGroups[i].cards.findIndex((card: ICard) => {\n            return card.id === cardID\n        })\n\n        if (index > -1) {\n            card = cardsGroups[i].cards[index];\n            return card;\n        }\n    }\n\n    return card;\n}","import {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {IRepeatingArgs} from '../../common/types/IRepeatingArgs';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForViewing} from './logic/getCardForViewing';\nimport {refreshCardRepeatingDate} from '../../common/logic/refreshCardRepeatingDate';\nimport {deleteSingleCard} from '../../common/logic/deleteSingleCard';\nimport {IStatistic} from '../../common/types/IStatistic';\nimport {updateStatistic} from '../../common/logic/updateStatistic';\nimport {readByVoiceEngine} from '../../common/logic/readByVoiceEngine';\nimport {of} from 'rxjs';\nimport {VoiceService} from '../../common/services/VoiceService';\nimport {prepareTextForVoiceEngine} from '../../common/logic/prepareTextForVoiceEngine';\n\nexport class CardViewerService {\n    public cardChannel: Channel<number, ICard>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public readByVoiceEngineChannel: Channel<string, string>;\n\n    constructor(private storageService: StorageService, private voiceService: VoiceService) {\n        this.cardChannel = new Channel((cardID = -1) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardForViewing(cardsGroups, cardID))\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getStatistic().pipe(\n                map((statistic: IStatistic) => updateStatistic(statistic, args)),\n                map((statistic: IStatistic) => this.storageService.setStatistic(statistic)),\n                switchMap(() => this.storageService.getBackup()),\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                map((cardsGroups: ICardsGroup[]) => refreshCardRepeatingDate(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups))\n            );\n        });\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n        this.readByVoiceEngineChannel = new Channel<string, string>(\n            (text) => of(text).pipe(\n                map((text) => prepareTextForVoiceEngine(text)),\n                map(\n                    (text) => readByVoiceEngine(text, voiceService.getRandomVoice())\n                )\n            )\n        );\n    }\n}\n","import React, {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {AppContext} from '../../../App';\nimport {CardViewerComponent} from './CardViewerComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {onDeleteCard} from './ui-callbacks/onDeleteCard';\nimport {onDeleteSingleCardChannel} from './channels-callbacks/onDeleteSingleCardChannel';\nimport {onChangeAnswer} from './ui-callbacks/onChangeAnswer';\nimport {onChangeQuestion} from './ui-callbacks/onChangeQuestion';\nimport {onSwitchEditing} from './ui-callbacks/onSwitchEditing';\nimport {onClickYesNoButton} from './ui-callbacks/onClickYesNoButton';\nimport {onClickCard} from './ui-callbacks/onClickCard';\nimport {onCardChannel} from './channels-callbacks/onCardChannel';\nimport {onCardEditingChannel} from './channels-callbacks/onCardEditingChannel';\nimport {onRepeatingResultChannel} from './channels-callbacks/onRepeatingResultChannel';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {initialState} from './defaults/initialState';\nimport {CardViewerCallbackSettings} from './types/CardViewerCallbackSettings';\nimport {onReadByVoiceEngine} from './ui-callbacks/onReadByVoiceEngine';\nimport {onReadByVoiceEngineChannel} from './channels-callbacks/onReadByVoiceEngineChannel';\nimport {useDependency} from '../../../MyTools/react-di/hooks/useDependency';\nimport {CardViewerService} from './CardViewerService';\nimport {CardsEditorService} from '../cards-editor/CardsEditorService';\nimport {ToolbarService} from '../../parts/toolbar/ToolbarService';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\n\nexport const CardViewerContainer: FC = () => {\n\n    const cardViewerService = useDependency(CardViewerService);\n    const cardsEditorService = useDependency(CardsEditorService);\n    const toolbarService = useDependency(ToolbarService);\n    const confirmDialogService = useDependency(ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<CardViewerCallbackSettings>(\n        initialState,\n        {cardViewerService, cardsEditorService, toolbarService, confirmDialogService},\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings\n\n    useChannel(cardViewerService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel))\n    useChannel(cardViewerService.cardChannel, callbackFactory(onCardChannel));\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardViewerService.repeatingResultChannel, callbackFactory(onRepeatingResultChannel));\n    useChannel(cardViewerService.readByVoiceEngineChannel, callbackFactory(onReadByVoiceEngineChannel));\n\n    useConstructor(callbackFactory(onConstructor))\n\n    const clickCard = useCallback(callbackFactory(onClickCard), [])\n    const clickYesNoButton = useCallback(callbackFactory(onClickYesNoButton), [])\n    const switchEditing = useCallback(callbackFactory(onSwitchEditing), [])\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), [])\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), [])\n    const deleteCard = useCallback(callbackFactory(onDeleteCard), [])\n    const readByVoiceEngine = useCallback(callbackFactory(onReadByVoiceEngine), [])\n\n    return <CardViewerComponent\n        onReadByVoiceEngine={readByVoiceEngine}\n        cardHeight={context.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={clickCard}\n        onClickYesNoButton={clickYesNoButton}\n        card={state.card}\n        onSwitchEditing={switchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n        onDeleteCard={deleteCard}\n    />\n}","import DeleteIcon from \"@mui/icons-material/Delete\";\nimport Fab from \"@mui/material/Fab\";\nimport * as React from \"react\";\nimport {FC} from \"react\";\n\nimport './RemoveButtonComponent.css'\nimport {IRemoveButtonComponent} from \"./types/IRemoveButtonComponent\";\n\nexport const RemoveButtonComponent: FC<IRemoveButtonComponent> = ({onClick}) => {\n    return <div className='remove-button-container'>\n        <Fab size=\"medium\" color=\"secondary\" onClick={onClick}>\n            <DeleteIcon/>\n        </Fab>\n    </div>\n}","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@mui/material\";\n\nimport './StatisticComponent.css'\nimport {IStatisticComponent} from \"./types/IStatisticComponent\";\nimport {RemoveButtonComponent} from \"./elements/RemoveButtonComponent\";\n\nexport const StatisticComponent: FC<IStatisticComponent> = ({rows, onRemoveStatistic}) => {\n    return <>\n        <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Date</TableCell>\n                        <TableCell>Done</TableCell>\n                        <TableCell>In Progress</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {rows.map((row) => (\n                        <TableRow key={row.date}>\n                            <TableCell>{row.date}</TableCell>\n                            <TableCell>{row.done}</TableCell>\n                            <TableCell>{row.inProgress}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n        <RemoveButtonComponent onClick={onRemoveStatistic}/>\n    </>\n}","export const initialState = {\n    rows: []\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {IRow} from \"../types/IRow\";\n\nexport const onStatisticChannel: ICallback<StatisticCallbackSettings, IRow[]> = (\n    {setState},\n    rows = []\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            rows\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<StatisticCallbackSettings, void> = (\n    {services: {statisticService}}\n) => {\n    statisticService.statisticChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport * as React from \"react\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onRemoveStatistic: ICallback<StatisticCallbackSettings, void> = (\n    {setSubscription, services: {statisticService, confirmDialogService}}\n) => {\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            statisticService.removeStatisticChannel.next(empty);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete statistic?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {initialState} from \"../defaults/initialState\";\nimport {IStatistic} from \"../../../common/types/IStatistic\";\n\nexport const onRemoveStatisticChannel: ICallback<StatisticCallbackSettings, IStatistic> = (\n    {setState}\n) => {\n    setState(() => {\n        return initialState;\n    })\n}","import {IStatistic} from \"../types/IStatistic\";\n\nexport const defaultStatistic: IStatistic = {\n    dailyStatistic: [],\n    cardsInProgressFrequency: {},\n    cardsInDone: {}\n}","import {Channel} from \"../../../MyTools/channel-conception/Channel\";\nimport {IStatistic} from \"../../common/types/IStatistic\";\nimport {StorageService} from \"../../common/services/StorageService\";\nimport {map} from \"rxjs/operators\";\nimport {getRowsFromStatistic} from \"./logic/getRowsFromStatistic\";\nimport {IRow} from \"./types/IRow\";\nimport {defaultStatistic} from \"../../common/defaults/defaultStatistic\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class StatisticService {\n    public statisticChannel: Channel<IEmpty, IRow[]>;\n    public removeStatisticChannel: Channel<IEmpty, IStatistic>;\n\n    constructor(private storageService: StorageService) {\n        this.statisticChannel = new Channel(\n            () => storageService.getStatistic().pipe(\n                map((statistic: IStatistic) => {\n                    return getRowsFromStatistic(statistic);\n                })\n            )\n        )\n        this.removeStatisticChannel = new Channel(\n            () => storageService.setStatistic(defaultStatistic)\n        )\n    }\n}\n","import {IStatistic} from \"../../../common/types/IStatistic\";\nimport {IRow} from \"../types/IRow\";\n\nexport const getRowsFromStatistic = (statistic: IStatistic): IRow[] => {\n    return statistic.dailyStatistic.reverse().map((\n        {date, done, inProgress, year, month}\n    ) => {\n        let dateAsString = date > 0 && date < 10 ? '0' + date : date;\n        month = month + 1;\n        let monthAsString = month > 0 && month < 10 ? '0' + month : month;\n        let inProgressSum: number = 0;\n        Object.keys(inProgress).forEach((k) => {\n            inProgressSum = inProgressSum + inProgress[Number(k)]\n        })\n        let doneSum: number = 0;\n        Object.keys(done).forEach((k) => {\n            doneSum = doneSum + done[Number(k)]\n        })\n        return {\n            date: `${dateAsString}-${monthAsString}-${year}`,\n            inProgress: inProgressSum,\n            done: doneSum\n        }\n    })\n}","import {StatisticComponent} from \"./StatisticComponent\";\nimport {FC, useCallback} from \"react\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {StatisticCallbackSettings} from \"./types/StatisticCallbackSettings\";\nimport {initialState} from \"./defaults/initialState\";\nimport {useChannel} from \"../../../MyTools/channel-conception/react-hooks/useChannel\";\nimport {onStatisticChannel} from \"./channels-callbacks/onStatisticChannel\";\nimport {useConstructor} from \"../../../MyTools/react-hooks/useConstructor\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onRemoveStatistic} from \"./ui-callbacks/onRemoveStatistic\";\nimport {onRemoveStatisticChannel} from \"./channels-callbacks/onRemoveStatisticChannel\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {StatisticService} from \"./StatisticService\";\nimport {ConfirmDialogService} from \"../../parts/confirm-dialog/ConfirmDialogService\";\n\nexport const StatisticContainer: FC = () => {\n\n    const statisticService = useDependency(StatisticService);\n    const confirmDialogService = useDependency(ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<StatisticCallbackSettings>(\n        initialState,\n        {statisticService, confirmDialogService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings;\n\n    useChannel(statisticService.statisticChannel, callbackFactory(onStatisticChannel));\n    useChannel(statisticService.removeStatisticChannel, callbackFactory(onRemoveStatisticChannel));\n\n    useConstructor(callbackFactory(onConstructor))\n\n    const removeStatistic = useCallback(callbackFactory(onRemoveStatistic), [])\n\n    return <StatisticComponent rows={state.rows} onRemoveStatistic={removeStatistic}/>\n}","import * as React from \"react\";\nimport {FC} from \"react\";\n\nimport {ISelectingGroupListItem} from \"./types/ISelectingGroupListItem\";\nimport ListItemText from \"@mui/material/ListItemText/ListItemText\";\nimport ListItemIcon from \"@mui/material/ListItemIcon/ListItemIcon\";\nimport {Checkbox, ListItem} from \"@mui/material\";\n\nexport const SelectingGroupListItem: FC<ISelectingGroupListItem> = (\n    {cardsGroup, onSelect, isSelected}\n) => {\n    return <ListItem key={cardsGroup.id} button>\n        <ListItemText\n            primary={<div>{cardsGroup.nameCardsGroup}</div>}\n        />\n        <ListItemIcon onClick={() => onSelect(cardsGroup.id)}>\n            <Checkbox\n                edge=\"start\"\n                checked={isSelected}\n                tabIndex={-1}\n                disableRipple\n            />\n        </ListItemIcon>\n    </ListItem>\n}","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {Button, TextField} from '@mui/material';\nimport {FixedSizeList as List} from 'react-window';\n\nimport './RepeaterEditorComponent.css'\nimport {IRepeaterEditorComponent} from './types/IRepeaterEditorComponent';\nimport {SelectingGroupListItem} from './elements/selecting-group-list-element/SelectingGroupListItem';\n\nexport const RepeaterEditorComponent: FC<IRepeaterEditorComponent> = (\n    {\n        onSaveRepeater,\n        cardsGroups,\n        height,\n        onSelect,\n        selectedGroups,\n        onChangeName,\n        repeaterName\n    }\n) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeName(event.target.value);\n    };\n\n    return <>\n        <TextField\n            className=\"repeater-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Repeater name\"\n            onChange={onChange}\n            value={repeaterName}\n            variant=\"filled\"\n        />\n        <List\n            className=\"repeater-editor_list\"\n            itemData={cardsGroups}\n            itemSize={55}\n            itemCount={cardsGroups.length}\n            overscanCount={5}\n            height={height - 500}\n            width=\"100%\"\n        >\n            {({index, style}: any) => {\n                return <div style={style}><SelectingGroupListItem\n                    cardsGroup={cardsGroups[index]}\n                    onSelect={onSelect}\n                    isSelected={selectedGroups[cardsGroups[index].id]}\n                /></div>\n            }}\n        </List>\n        <Button variant=\"outlined\" className=\"repeater-editor_button\" size=\"small\" onClick={onSaveRepeater}>\n            Save\n        </Button>\n    </>\n}","import {IRepeater} from \"../types/IRepeater\";\n\nexport const defaultRepeater: IRepeater = {\n    id: -1,\n    cardsGroupsIDs: [],\n    name: ''\n}","import {RepeaterEditorState} from \"../types/RepeaterEditorState\";\nimport {defaultRepeater} from \"../../../common/defaults/defaultRepeater\";\n\nexport const initialState: RepeaterEditorState = {\n    cardsGroups: [],\n    selectedGroups: {},\n    repeater: defaultRepeater\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupsListChannel: ICallback<RepeaterEditorCallbackSettings, ICardsGroup[]> = (\n    {setState},\n    cardsGroups = []\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            cardsGroups\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const onSaveRepeaterChannel: ICallback<RepeaterEditorCallbackSettings, IRepeater[]> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {RepeaterEditorCallbackSettings} from '../types/RepeaterEditorCallbackSettings';\nimport {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const onSaveRepeater: ICallback<RepeaterEditorCallbackSettings, ICardsGroup[]> = (\n    {setState, services: {repeaterEditorService, errorService}}\n) => {\n    setState((prevState) => {\n        if (prevState.repeater.name) {\n            repeaterEditorService.saveRepeaterChannel.next(prevState.repeater);\n        } else {\n            errorService.errorChannel.next('You cannot save repeater that does not have the name');\n        }\n\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\nimport {defaultRepeater} from \"../../../common/defaults/defaultRepeater\";\n\nexport const onUpdateGroupsIDsChannel: ICallback<RepeaterEditorCallbackSettings, IRepeater> = (\n    {setState},\n    repeater = defaultRepeater\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeater\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\n\nexport const onSelect: ICallback<RepeaterEditorCallbackSettings, number> = (\n    {setState, services: {repeaterEditorService}},\n    cardID = -1\n) => {\n    setState((prevState) => {\n        prevState.selectedGroups[cardID] = !prevState.selectedGroups[cardID];\n        repeaterEditorService.updateGroupsIDsChannel.next({\n            selectedGroups: prevState.selectedGroups,\n            repeater: prevState.repeater\n        })\n\n        return {\n            ...prevState\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\nimport {defaultRepeater} from \"../../../common/defaults/defaultRepeater\";\n\nexport const onRepeaterChannel: ICallback<RepeaterEditorCallbackSettings, IRepeater> = (\n    {setState, services: {repeaterEditorService}},\n    repeater = defaultRepeater\n) => {\n    repeaterEditorService.selectedGroupsChannel.next(repeater);\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeater\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\n\nexport const onChangeName: ICallback<RepeaterEditorCallbackSettings, string> = (\n    {setState},\n    name = ''\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeater: {\n                ...prevState.repeater,\n                name\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<RepeaterEditorCallbackSettings, void> = (\n    {services: {repeaterEditorService}, location}\n) => {\n    const repeaterID = location.state && location.state.repeaterID;\n    if (repeaterID) {\n        repeaterEditorService.repeaterChannel.next(repeaterID);\n    }\n    repeaterEditorService.groupsListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\n\nexport const onSelectedGroupsChannel: ICallback<RepeaterEditorCallbackSettings, {\n    [key: number]: boolean;\n}> = (\n    {setState},\n    selectedGroups = {}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            selectedGroups\n        }\n    })\n}","import {map, switchMap} from \"rxjs/operators\";\n\nimport {Channel} from \"../../../MyTools/channel-conception/Channel\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\nimport {ICardsGroup} from \"../../common/types/ICardsGroup\";\nimport {StorageService} from \"../../common/services/StorageService\";\nimport {IRepeater} from \"../../common/types/IRepeater\";\nimport {updateExistRepeater} from \"./logic/updateExistRepeater\";\nimport {of} from \"rxjs\";\nimport {updateGroupsIDs} from \"./logic/updateGroupsIDs\";\nimport {getRepeaterByID} from \"./logic/getRepeaterByID\";\nimport {getSelectedGroups} from \"./logic/getSelectedGroups\";\n\nexport class RepeaterEditorService {\n    public groupsListChannel: Channel<IEmpty, ICardsGroup[]>;\n    public saveRepeaterChannel: Channel<IRepeater, IRepeater[]>;\n    public updateGroupsIDsChannel: Channel<{ selectedGroups: { [key: number]: boolean }; repeater: IRepeater },\n        IRepeater>;\n    public repeaterChannel: Channel<number, IRepeater>;\n    public selectedGroupsChannel: Channel<IRepeater, {\n        [key: number]: boolean;\n    }>;\n\n    constructor(private storageService: StorageService) {\n        this.groupsListChannel = new Channel(\n            () => storageService.getBackup()\n        );\n\n        this.saveRepeaterChannel = new Channel(\n            (repeater) => storageService.getRepeaters().pipe(\n                map((repeaters) => {\n                    if (repeater.id === -1) {\n                        repeater.id = new Date().getTime();\n                        repeaters.push(repeater);\n                    } else {\n                        updateExistRepeater(repeaters, repeater);\n                    }\n                    return repeaters;\n                }),\n                switchMap((repeaters) => storageService.setRepeaters(repeaters))\n            )\n        )\n\n        this.updateGroupsIDsChannel = new Channel(\n            ({repeater, selectedGroups}) => of(repeater).pipe(\n                map(() => updateGroupsIDs(selectedGroups, repeater))\n            )\n        )\n\n        this.repeaterChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters) => {\n                    return getRepeaterByID(repeaters, repeaterID);\n                })\n            )\n        )\n        this.selectedGroupsChannel = new Channel(\n            (repeater: IRepeater) => of(repeater).pipe(\n                map(() => getSelectedGroups(repeater))\n            )\n        )\n    }\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const updateExistRepeater = (\n    repeaters: IRepeater[],\n    repeater: IRepeater\n) => {\n    const repeaterIndex = repeaters.findIndex((item) => item.id === repeater.id);\n    repeaters[repeaterIndex] = {\n        ...repeaters[repeaterIndex],\n        cardsGroupsIDs: repeater.cardsGroupsIDs,\n        name: repeater.name\n    }\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const updateGroupsIDs = (selectedGroups: { [key: number]: boolean }, repeater: IRepeater): IRepeater => {\n    const cardsGroupsIDs: number[] = [];\n    Object.keys(selectedGroups).forEach((groupID) => {\n        const id = Number(groupID);\n        if (selectedGroups[id]) {\n            cardsGroupsIDs.push(id);\n        }\n    });\n    return {\n        ...repeater,\n        cardsGroupsIDs\n    }\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const getRepeaterByID = (repeaters: IRepeater[], id: number) => {\n    const repeaterIndex = repeaters.findIndex((item) => item.id === id);\n    return repeaters[repeaterIndex]\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const getSelectedGroups = (repeater: IRepeater) => {\n    const selectedGroups: {\n        [key: number]: boolean;\n    } = {};\n    repeater.cardsGroupsIDs.forEach((id) => {\n        selectedGroups[id] = true;\n    })\n    return selectedGroups;\n}","import {FC, useCallback} from 'react';\n\nimport {RepeaterEditorComponent} from './RepeaterEditorComponent';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {initialState} from './defaults/inititalState';\nimport {RepeaterEditorCallbackSettings} from './types/RepeaterEditorCallbackSettings';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {onGroupsListChannel} from './channels-callbacks/onGroupsListChannel';\nimport {onSaveRepeaterChannel} from './channels-callbacks/onSaveRepeaterChannel';\nimport {onSaveRepeater} from './ui-callbacks/onSaveRepeater';\nimport {onUpdateGroupsIDsChannel} from './channels-callbacks/onUpdateGroupsIDsChannel';\nimport {onSelect} from './ui-callbacks/onSelect';\nimport {onRepeaterChannel} from './channels-callbacks/onRepeaterChannel';\nimport {onChangeName} from './ui-callbacks/onChangeName';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onSelectedGroupsChannel} from './channels-callbacks/onSelectedGroupsChannel';\nimport {useDependency} from '../../../MyTools/react-di/hooks/useDependency';\nimport {RepeaterEditorService} from './RepeaterEditorService';\nimport {ErrorService} from '../../parts/error-dialog/ErrorService';\n\nexport const RepeaterEditorContainer: FC = () => {\n\n    const repeaterEditorService = useDependency(RepeaterEditorService);\n    const errorService = useDependency(ErrorService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<RepeaterEditorCallbackSettings>(\n        initialState,\n        {repeaterEditorService, errorService},\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings;\n\n    useChannel(repeaterEditorService.groupsListChannel, callbackFactory(onGroupsListChannel));\n    useChannel(repeaterEditorService.saveRepeaterChannel, callbackFactory(onSaveRepeaterChannel));\n    useChannel(repeaterEditorService.updateGroupsIDsChannel, callbackFactory(onUpdateGroupsIDsChannel));\n    useChannel(repeaterEditorService.repeaterChannel, callbackFactory(onRepeaterChannel));\n    useChannel(repeaterEditorService.selectedGroupsChannel, callbackFactory(onSelectedGroupsChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const saveRepeater = useCallback(callbackFactory(onSaveRepeater), []);\n    const select = useCallback(callbackFactory(onSelect), []);\n    const changeName = useCallback(callbackFactory(onChangeName), []);\n\n    return <RepeaterEditorComponent\n        onSaveRepeater={saveRepeater}\n        cardsGroups={state.cardsGroups}\n        height={context.height}\n        selectedGroups={state.selectedGroups}\n        onSelect={select}\n        onChangeName={changeName}\n        repeaterName={state.repeater.name}\n    />\n}","const colors: string[] = ['red', 'blue', 'orange', 'grey', 'green'];\nlet chosenColors: string[] = []\n\nexport const getRandomColor = () => {\n    let color = colors[0];\n    let isChosenColor = true;\n    do {\n        color = colors[Math.floor(Math.random() * colors.length)];\n        isChosenColor = chosenColors.indexOf(color) > -1;\n        if (chosenColors.length === colors.length) {\n            chosenColors = [];\n        }\n    } while (isChosenColor)\n    chosenColors.push(color);\n    return color;\n}","import React, {FC} from 'react';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport ListItem from '@mui/material/ListItem';\n\nimport {IRepeaterListItem} from './types/IRepeaterListItem';\nimport './RepeaterListItem.css';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport {\n    CircularProgressComponent\n} from '../../../cards-groups-list/elements/circular-progress/CircularProgressComponent';\nimport {IMenuSetupItem} from '../../../../common/elements/list-item-menu/types/IMenuSetupItem';\nimport {Chip, Stack} from '@mui/material';\nimport {getRandomColor} from '../../../../common/logic/getRandomColor';\n\nexport const RepeaterListItem: FC<IRepeaterListItem> = (\n    {\n        repeater,\n        onStartRepeating,\n        onDeleteRepeater,\n        onResetProgress,\n        onEditItem\n    }\n) => {\n\n    const menuSetup: IMenuSetupItem[] = [\n        {\n            fieldName: 'Edit',\n            handler: () => {\n                onEditItem(repeater.id);\n            }\n        },\n        {\n            fieldName: 'Delete',\n            handler: () => {\n                onDeleteRepeater(repeater.id);\n            }\n        },\n        {\n            fieldName: 'Reset progress',\n            handler: () => {\n                onResetProgress(repeater.id);\n            }\n        }\n    ];\n\n    return <ListItem key={repeater.id} button component=\"div\">\n        <ListItemIcon onClick={() => onStartRepeating(repeater.id)}>\n            <CircularProgressComponent percent={repeater.percentRepeatedCards || 0}/>\n        </ListItemIcon>\n        <ListItemText\n            className=\"repeater-list-item_content\"\n            primary={repeater.name}\n            secondary={<Stack className=\"repeater-list-item_tag-container\" direction=\"row\">\n                {repeater.groupsNames?.map((groupName) => {\n                    const color = getRandomColor();\n                    return <Chip\n                        className=\"repeater-list-item_tag\"\n                        label={groupName}\n                        size=\"small\"\n                        variant=\"outlined\"\n                        style={{color, borderColor: color}}\n                    />\n                })}\n            </Stack>}\n            onClick={() => onStartRepeating(repeater.id)}\n        />\n        <ListItemIcon>\n            <ListItemMenuComponent menuSetup={menuSetup}/>\n        </ListItemIcon>\n    </ListItem>\n}","import React, {FC} from \"react\";\nimport {FixedSizeList as List} from \"react-window\";\n\nimport './RepeaterListComponent.css'\nimport {AddButtonComponent} from \"../../common/elements/add-button/AddButtonComponent\";\nimport {IRepeaterListComponent} from \"./types/IRepeaterListComponent\";\nimport {RepeaterListItem} from \"./elements/repeater-list-item/RepeaterListItem\";\n\nexport const RepeaterListComponent: FC<IRepeaterListComponent> = (\n    {\n        repeaters,\n        height,\n        onOpenEditor,\n        onStartRepeating,\n        onDeleteRepeater,\n        onEditRepeater,\n        onResetProgress\n    }\n) => {\n    return <>\n        <List\n            className=\"repeater-list\"\n            itemData={repeaters}\n            itemSize={55}\n            itemCount={repeaters.length}\n            overscanCount={5}\n            height={height}\n            width=\"100%\"\n        >\n            {({index, style}: any) => {\n                return <div style={style}>\n                    <RepeaterListItem\n                        repeater={repeaters[index]}\n                        onStartRepeating={onStartRepeating}\n                        onDeleteRepeater={onDeleteRepeater}\n                        onEditItem={onEditRepeater}\n                        onResetProgress={onResetProgress}\n                    />\n                </div>\n            }}\n        </List>\n        <AddButtonComponent onClick={onOpenEditor}/>\n    </>\n}","import {RepeaterListState} from \"../types/RepeaterListState\";\n\nexport const initialState: RepeaterListState = {\n    repeaters: []\n}","import {Routs} from \"../../../common/Routs\";\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\n\nexport const onOpenEditor: ICallback<RepeaterListCallbackSettings, void> = (\n    {history, location}\n) => {\n    history.push({\n        pathname: Routs.repeaterEditor.path\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const onRepeaterListChannel: ICallback<RepeaterListCallbackSettings, IRepeater[]> = (\n    {setState, services: {repeaterListService}},\n    repeaters = []\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeaters\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<RepeaterListCallbackSettings, void> = (\n    {services: {repeaterListService}}\n) => {\n    repeaterListService.repeaterListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onStartRepeatingChannel: ICallback<RepeaterListCallbackSettings, number[]> = (\n    {setState, history, location},\n    cardsIDs = []\n) => {\n    history.push({\n        pathname: Routs.cardsRepeater.path,\n        state: {\n            ...location.state,\n            cardsIDsForRepeating: cardsIDs\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\n\nexport const onStartRepeating: ICallback<RepeaterListCallbackSettings, number> = (\n    {services: {repeaterListService}},\n    repeaterID = -1\n) => {\n    repeaterListService.startRepeatingChannel.next(repeaterID);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nexport const onRemoveRepeater: ICallback<RepeaterListCallbackSettings, number> = (\n    {\n        setSubscription,\n        services: {\n            repeaterListService,\n            confirmDialogService\n        }\n    },\n    repeaterID = -1\n) => {\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            repeaterListService.removingRepeaterChannel.next(repeaterID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this repeater?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onResetProgressChannel: ICallback<RepeaterListCallbackSettings, ICardsGroup[]> = (\n    {services: {repeaterListService}}\n) => {\n    repeaterListService.repeaterListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\n\nexport const onResetProgress: ICallback<RepeaterListCallbackSettings, number> = (\n    {services: {repeaterListService}},\n    repeaterID = -1\n) => {\n    repeaterListService.resetProgressChannel.next(repeaterID);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditRepeater: ICallback<RepeaterListCallbackSettings, number> = (\n    {history, location},\n    repeaterID = -1\n) => {\n    history.push({\n        pathname: Routs.repeaterEditor.path,\n        state: {\n            ...location.state,\n            repeaterID\n        }\n    })\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const getRepeaterByID = (repeaters: IRepeater[], repeaterID: number) => {\n    const repeaterIndex = repeaters.findIndex((repeater) => {\n        return repeater.id === repeaterID;\n    })\n    return repeaters[repeaterIndex];\n}","import {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {IEmpty} from '../../../MyTools/channel-conception/defaults/IEmpty';\nimport {IRepeater} from '../../common/types/IRepeater';\nimport {StorageService} from '../../common/services/StorageService';\nimport {map, switchMap, tap} from 'rxjs/operators';\nimport {getRepeaterByID} from './logic/getRepeaterByID';\nimport {getCardsIDsFromRepeater} from './logic/getCardsIDsFromRepeater';\nimport {removeRepeater} from './logic/removeRepeater';\nimport {updateRepeatersProgress} from './logic/updateRepeatersProgress';\nimport {resetRepeatingProgress} from './logic/resetRepeatingProgress';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {of} from 'rxjs';\nimport {mapGroupsNameToRepeater} from './logic/mapGroupsNameToRepeater';\n\nexport class RepeaterListService {\n    public repeaterListChannel: Channel<IEmpty, IRepeater[]>;\n    public startRepeatingChannel: Channel<number, number[]>;\n    public removingRepeaterChannel: Channel<number, IRepeater[]>;\n    public resetProgressChannel: Channel<number, ICardsGroup[]>;\n\n    constructor(storageService: StorageService) {\n        this.repeaterListChannel = new Channel(\n            () => storageService.getRepeaters().pipe(\n                switchMap((repeaters) => {\n                    return storageService.getBackup().pipe(\n                        switchMap((cardsGroups) => {\n                            return of(cardsGroups).pipe(\n                                map(() => mapGroupsNameToRepeater(cardsGroups, repeaters)),\n                                map((mappedRepeaters) => updateRepeatersProgress(\n                                    cardsGroups,\n                                    mappedRepeaters\n                                ))\n                            )\n                        }),\n                    )\n                })\n            )\n        )\n        this.startRepeatingChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters: IRepeater[]) => {\n                    return getRepeaterByID(repeaters, repeaterID);\n                }),\n                switchMap((repeater: IRepeater) => storageService.getBackup().pipe(\n                    map((cardsGroups) => {\n                        return getCardsIDsFromRepeater(cardsGroups, repeater);\n                    })\n                ))\n            )\n        )\n        this.removingRepeaterChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters) => removeRepeater(repeaters, repeaterID)),\n                tap((repeaters) => storageService.setRepeaters(repeaters))\n            )\n        )\n        this.resetProgressChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters: IRepeater[]) => {\n                    return getRepeaterByID(repeaters, repeaterID);\n                }),\n                switchMap((repeater) => storageService.getBackup().pipe(\n                    map((cardsGroups) => resetRepeatingProgress(cardsGroups, repeater)),\n                    switchMap((cardsGroups) => storageService.setBackup(cardsGroups))\n                ))\n            )\n        )\n    }\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {IRepeater} from '../../../common/types/IRepeater';\n\nexport const mapGroupsNameToRepeater = (\n    cardsGroups: ICardsGroup[],\n    repeaters: IRepeater[]\n) => {\n    return repeaters.map((repeater) => {\n        const groupsNames: string[] = []\n        cardsGroups.forEach((cardsGroup) => {\n            const isCardsGroupInRepeater = repeater.cardsGroupsIDs.findIndex((cardsGroupId) => {\n                return cardsGroupId === cardsGroup.id;\n            }) > -1;\n            if (isCardsGroupInRepeater) {\n                groupsNames.push(cardsGroup.nameCardsGroup);\n            }\n        })\n        return {\n            ...repeater,\n            groupsNames\n        }\n    })\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const updateRepeatersProgress = (\n    cardsGroups: ICardsGroup[],\n    repeaters: IRepeater[]\n) => {\n    repeaters.forEach((repeater) => {\n        let cardsCount = 0;\n        let repeatedCardsCount = 0;\n\n        cardsGroups.forEach((cardsGroup) => {\n            const isCardsGroupInRepeater = repeater.cardsGroupsIDs.findIndex(\n                (id) => cardsGroup.id === id\n            ) > -1\n\n            if (isCardsGroupInRepeater) {\n                cardsCount = cardsCount + cardsGroup.cards.length;\n                cardsGroup.cards.forEach((card) => {\n                    if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n                        repeatedCardsCount++;\n                    }\n                })\n            }\n        });\n\n        repeater.percentRepeatedCards = repeatedCardsCount / cardsCount * 100;\n    })\n    return repeaters;\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const getCardsIDsFromRepeater = (cardsGroups: ICardsGroup[], repeater: IRepeater) => {\n    const idsForRepeating: number[] = [];\n\n    cardsGroups.forEach((cardsGroup) => {\n        const cardsGroupIndex = repeater.cardsGroupsIDs.findIndex((id) => id === cardsGroup.id);\n        if (cardsGroupIndex >= 0) {\n            idsForRepeating.push(...cardsGroup.cards.map((card) => card.id));\n        }\n    })\n\n    return idsForRepeating;\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const removeRepeater = (repeaters: IRepeater[], repeaterID: number) => {\n    const repeaterIndex = repeaters.findIndex((repeater) => repeater.id === repeaterID);\n\n    return repeaters.filter((repeater) => repeater.id !== repeaters[repeaterIndex].id);\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const resetRepeatingProgress = (\n    cardsGroups: ICardsGroup[],\n    repeater: IRepeater\n) => {\n    cardsGroups.forEach((cardsGroup) => {\n        const isCardsGroupInRepeater = repeater.cardsGroupsIDs.findIndex(\n            (id) => cardsGroup.id === id\n        ) > -1\n\n        if (isCardsGroupInRepeater) {\n            cardsGroup.cards.forEach((card) => {\n                if (card.rangeOfKnowledge !== IRangeOfKnowledge.TO_DO) {\n                    card.rangeOfKnowledge = IRangeOfKnowledge.TO_DO\n                }\n            })\n        }\n    })\n    return cardsGroups;\n}","import {FC, useCallback} from \"react\";\n\nimport {RepeaterListComponent} from \"./RepeaterListComponent\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {RepeaterListCallbackSettings} from \"./types/RepeaterListCallbackSettings\";\nimport {initialState} from \"./defaults/initialState\";\nimport {onOpenEditor} from \"./ui-callbacks/onOpenEditor\";\nimport {useChannel} from \"../../../MyTools/channel-conception/react-hooks/useChannel\";\nimport {onRepeaterListChannel} from \"./channels-callbacks/onRepeaterListChannel\";\nimport {useConstructor} from \"../../../MyTools/react-hooks/useConstructor\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onStartRepeatingChannel} from \"./channels-callbacks/onStartRepeatingChannel\";\nimport {onStartRepeating} from \"./ui-callbacks/onStartRepeating\";\nimport {onRemoveRepeater} from \"./ui-callbacks/onRemoveRepeater\";\nimport {onResetProgressChannel} from \"./channels-callbacks/onResetProgressChannel\";\nimport {onResetProgress} from \"./ui-callbacks/onResetProgress\";\nimport {onEditRepeater} from \"./ui-callbacks/onEditRepeater\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {RepeaterListService} from \"./RepeaterListService\";\nimport {ConfirmDialogService} from \"../../parts/confirm-dialog/ConfirmDialogService\";\n\nexport const RepeaterListContainer: FC = () => {\n\n    const repeaterListService = useDependency(RepeaterListService);\n    const confirmDialogService = useDependency(ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<RepeaterListCallbackSettings>(\n        initialState,\n        {repeaterListService, confirmDialogService},\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings\n\n    useChannel(repeaterListService.repeaterListChannel, callbackFactory(onRepeaterListChannel));\n    useChannel(repeaterListService.startRepeatingChannel, callbackFactory(onStartRepeatingChannel));\n    useChannel(repeaterListService.removingRepeaterChannel, callbackFactory(onRepeaterListChannel));\n    useChannel(repeaterListService.resetProgressChannel, callbackFactory(onResetProgressChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const startRepeating = useCallback(callbackFactory(onStartRepeating), []);\n    const removeRepeater = useCallback(callbackFactory(onRemoveRepeater), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const editRepeater = useCallback(callbackFactory(onEditRepeater), []);\n\n    return <RepeaterListComponent\n        repeaters={state.repeaters}\n        height={context.height}\n        onOpenEditor={openEditor}\n        onDeleteRepeater={removeRepeater}\n        onStartRepeating={startRepeating}\n        onResetProgress={resetProgress}\n        onEditRepeater={editRepeater}\n    />\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {Redirect, Route, Switch} from 'react-router';\n\nimport {Routs} from '../../common/Routs';\nimport {CardsGroupsListContainer} from '../../pages/cards-groups-list/CardsGroupsListContainer';\nimport {GoogleAuthContainer} from '../../pages/google-auth/GoogleAuthContainer';\nimport {GoogleBackupsContainer} from '../../pages/google-backups/GoogleBackupsContainer';\nimport {CardsContainer} from '../../pages/cards/CardsContainer';\nimport {CardRepeaterContainer} from '../../pages/cards-repeater/CardsRepeaterContainer';\nimport {LocalBackupsContainer} from '../../pages/local-backup/LocalBackupsContainer';\nimport {CardsGroupsEditorContainer} from '../../pages/cards-groups-editor/CardsGroupsEditorContainer';\nimport {CardsEditorContainer} from '../../pages/cards-editor/CardsEditorContainer';\nimport {SettingsContainer} from '../../pages/settings/SettingsContainer';\nimport {CardViewerContainer} from \"../../pages/card-viewer/CardViewerContainer\";\nimport {StatisticContainer} from \"../../pages/statistic/StatisticContainer\";\nimport {RepeaterEditorContainer} from \"../../pages/repeater-editor/RepeaterEditorContainer\";\nimport {RepeaterListContainer} from \"../../pages/repeater-list/RepeaterListContainer\";\n\n\nexport const NavigationContainer: FC = () => {\n\n    return <Switch>\n        <Redirect exact from=\"/MyCardsWeb\" to={Routs.cardsGroups.path}/>\n        <Redirect exact from=\"/\" to={Routs.cardsGroups.path}/>\n        <Route path={Routs.cardsGroups.path}>\n            <CardsGroupsListContainer/>\n        </Route>\n        <Route path={Routs.googleAuth.path}>\n            <GoogleAuthContainer/>\n        </Route>\n        <Route path={Routs.googleBackups.path}>\n            <GoogleBackupsContainer/>\n        </Route>\n        <Route path={Routs.cards.path}>\n            <CardsContainer/>\n        </Route>\n        <Route path={Routs.cardsRepeater.path}>\n            <CardRepeaterContainer/>\n        </Route>\n        <Route path={Routs.localBackups.path}>\n            <LocalBackupsContainer/>\n        </Route>\n        <Route path={Routs.cardsGroupEditor.path}>\n            <CardsGroupsEditorContainer/>\n        </Route>\n        <Route path={Routs.cardsEditor.path}>\n            <CardsEditorContainer/>\n        </Route>\n        <Route path={Routs.settings.path}>\n            <SettingsContainer/>\n        </Route>\n        <Route path={Routs.cardViewer.path}>\n            <CardViewerContainer/>\n        </Route>\n        <Route path={Routs.statistic.path}>\n            <StatisticContainer/>\n        </Route>\n        <Route path={Routs.repeaterEditor.path}>\n            <RepeaterEditorContainer/>\n        </Route>\n        <Route path={Routs.repeaterList.path}>\n            <RepeaterListContainer/>\n        </Route>\n    </Switch>\n};\n","import React, {FC} from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport {List, ListItem, ListItemText} from \"@mui/material\";\nimport {ISelectionDialogComponent} from \"./types/ISelectionDialogComponent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\n\nexport const SelectionDialogComponent: FC<ISelectionDialogComponent> = (\n    {\n        isOpen,\n        onClose,\n        onClickItem,\n        selectionItems,\n        title\n    }\n) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitle>{title}</DialogTitle>\n                <DialogContent>\n                    <List>\n                        {\n                            selectionItems.map((item) => {\n                                return <ListItem key={item.id} onClick={() => onClickItem(item.id)}>\n                                    <ListItemText primary={item.label}/>\n                                </ListItem>\n                            })\n                        }\n                    </List>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n};\n","export const initialState = {\n    isOpen: false,\n    title: '',\n    selectionItems: []\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SelectionDialogCallbackSettings} from \"../types/SelectionDialogCallbackSettings\";\nimport {SelectionDialogContainerState} from \"../types/SelectionDialogContainerState\";\nimport {initialState} from \"../defaults/initialState\";\n\nexport const onOpenDialogChannel: ICallback<SelectionDialogCallbackSettings, SelectionDialogContainerState> = (\n    {setState},\n    value = initialState\n) => {\n    setState(() => {\n        return {...value}\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SelectionDialogCallbackSettings} from \"../types/SelectionDialogCallbackSettings\";\nimport {initialState} from \"../defaults/initialState\";\n\nexport const onClose: ICallback<SelectionDialogCallbackSettings, void> = (\n    {setState, services: {selectionDialogService}}\n) => {\n    setState(() => initialState);\n    selectionDialogService.selectionChannel.unsubscribe();\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SelectionDialogCallbackSettings} from \"../types/SelectionDialogCallbackSettings\";\n\nexport const onClickItem: ICallback<SelectionDialogCallbackSettings, number> = (\n    {setState, services: {selectionDialogService}},\n    itemID = -1\n) => {\n    selectionDialogService.selectionChannel.next(itemID);\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {SelectionDialogComponent} from './SelectionDialogComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {initialState} from \"./defaults/initialState\";\nimport {SelectionDialogCallbackSettings} from \"./types/SelectionDialogCallbackSettings\";\nimport {onOpenDialogChannel} from \"./channels-callbacks/onOpenDialogChannel\";\nimport {onClose} from \"./ui-callbacks/onClose\";\nimport {onClickItem} from \"./ui-callbacks/onClickItem\";\nimport {useDependency} from \"../../../MyTools/react-di/hooks/useDependency\";\nimport {SelectionDialogService} from \"./SelectionDialogService\";\n\nexport const SelectionDialogContainer: FC = () => {\n\n    const selectionDialogService = useDependency(SelectionDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<SelectionDialogCallbackSettings>(\n        initialState,\n        {selectionDialogService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel(selectionDialogService.openDialogChannel, callbackFactory(onOpenDialogChannel));\n\n    const close = useCallback(callbackFactory(onClose), [])\n    const clickItem = useCallback(callbackFactory(onClickItem), [])\n\n    return <SelectionDialogComponent\n        isOpen={state.isOpen}\n        onClickItem={clickItem}\n        onClose={close}\n        title={state.title}\n        selectionItems={state.selectionItems}\n    />\n};\n","export const defaultAppState = {\n    height: 0,\n    width: 0\n};","import {from, Observable} from 'rxjs';\nimport {ICardsGroup} from '../types/ICardsGroup';\nimport {DataBaseService} from './DataBaseService';\nimport {ISettings} from '../types/ISettings';\nimport {IStoredFilters} from '../types/IStoredFilters';\nimport {defaultFilter} from '../defaults/defaultFilter';\nimport {IStatistic} from '../types/IStatistic';\nimport {defaultStatistic} from '../defaults/defaultStatistic';\nimport {defaultSettings} from '../defaults/defaultSettings';\nimport {IRepeater} from '../types/IRepeater';\nimport {Dependency} from '../../../MyTools/react-di/Dependency';\n\nexport class StorageService extends Dependency {\n\n    private cardsStorageID = 'cards-local-storage';\n    private authTokenLocalStorageID = 'auth-token';\n    private settingsID = 'settings';\n    private filterID = 'filter'\n    private statisticID = 'statistic'\n    private repeatersID = 'repeaters'\n\n    constructor(private dataBaseService: DataBaseService) {\n        super();\n    }\n\n    public getBackup = () : Observable<ICardsGroup[]> => {\n        return from(this.getBackupFromDataBase());\n    };\n\n    private getBackupFromDataBase = async () => {\n        let backup = null;\n\n        try {\n            backup = await this.dataBaseService.get<ICardsGroup[]>(this.cardsStorageID);\n        } catch (e) {\n            console.error(e);\n            return backup;\n        }\n        if(backup) {\n            return backup;\n        } else {\n            return [];\n        }\n    };\n\n    public setBackup(cardsGroups: ICardsGroup[]): Observable<ICardsGroup[]> {\n        return from(this.setBackupToDataBase(cardsGroups));\n    }\n\n    private setBackupToDataBase = async (cardsGroups: ICardsGroup[]) => {\n        try {\n            await this.dataBaseService.set(this.cardsStorageID, cardsGroups);\n        } catch (e) {\n            console.error(e);\n        }\n        return cardsGroups;\n    };\n\n    public getAuthToken(): Observable<string> {\n        return from(new Promise<string>((resolve, reject) => {\n            const authToken = localStorage.getItem(this.authTokenLocalStorageID);\n            if(authToken) {\n                resolve(authToken);\n            } else {\n                reject('Auth token is empty')\n            }\n        }));\n    }\n\n    public setAuthToken(authToken: string): Observable<string> {\n        return from(new Promise<string>((resolve) => {\n            localStorage.setItem(this.authTokenLocalStorageID, authToken);\n            resolve(authToken);\n        }));\n    }\n\n    public getSettings(): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve, reject) => {\n            const settings = localStorage.getItem(this.settingsID);\n            if(settings) {\n                resolve(JSON.parse(settings) as ISettings);\n            } else {\n                resolve(defaultSettings)\n            }\n        }));\n    }\n\n    public setSettings(settings: ISettings): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve) => {\n            localStorage.setItem(this.settingsID, JSON.stringify(settings));\n            resolve(settings);\n        }));\n    }\n\n    public getFilter(): Observable<IStoredFilters> {\n        return from(new Promise<IStoredFilters>((resolve) => {\n            const settings = localStorage.getItem(this.filterID);\n            if (settings) {\n                resolve(JSON.parse(settings) as IStoredFilters);\n            } else {\n                resolve({\n                    cards: defaultFilter,\n                    cardsGroups: defaultFilter\n                })\n            }\n        }));\n    }\n\n    public setFilter(settings: IStoredFilters): Observable<IStoredFilters> {\n        return from(new Promise<IStoredFilters>((resolve) => {\n            localStorage.setItem(this.filterID, JSON.stringify(settings));\n            resolve(settings);\n        }));\n    }\n\n    public getStatistic(): Observable<IStatistic> {\n        return from(new Promise<IStatistic>((resolve) => {\n            const statistic = localStorage.getItem(this.statisticID);\n            if (statistic) {\n                resolve(JSON.parse(statistic) as IStatistic);\n            } else {\n                resolve(defaultStatistic)\n            }\n        }));\n    }\n\n    public setStatistic(statistic: IStatistic): Observable<IStatistic> {\n        return from(new Promise<IStatistic>((resolve) => {\n            localStorage.setItem(this.statisticID, JSON.stringify(statistic));\n            resolve(statistic);\n        }));\n    }\n\n    public getRepeaters(): Observable<IRepeater[]> {\n        return from(new Promise<IRepeater[]>((resolve) => {\n            const repeaters = localStorage.getItem(this.repeatersID);\n            if (repeaters) {\n                resolve(JSON.parse(repeaters) as IRepeater[]);\n            } else {\n                resolve([])\n            }\n        }));\n    }\n\n    public setRepeaters(repeaters: IRepeater[]): Observable<IRepeater[]> {\n        return from(new Promise<IRepeater[]>((resolve) => {\n            localStorage.setItem(this.repeatersID, JSON.stringify(repeaters));\n            resolve(repeaters);\n        }));\n    }\n}\n","export const STORE_NAME = \"cards-store\";","import {GoogleAuthService} from './app/pages/google-auth/GoogleAuthService';\nimport {ErrorService} from './app/parts/error-dialog/ErrorService';\nimport {CardsEditorService} from './app/pages/cards-editor/CardsEditorService';\nimport {LocalBackupsService} from './app/pages/local-backup/LocalBackupsService';\nimport {SpinnerService} from './app/parts/spinner/SpinnerService';\nimport {ConfirmDialogService} from './app/parts/confirm-dialog/ConfirmDialogService';\nimport {StorageService} from './app/common/services/StorageService';\nimport {DataBaseService} from './app/common/services/DataBaseService';\nimport {SelectionDialogService} from './app/parts/selection-dialog/SelectionDialogService';\nimport {NavigationPanelService} from './app/parts/navigation-panel/NavigationPanelService';\nimport {ToolbarService} from './app/parts/toolbar/ToolbarService';\nimport {VoiceService} from './app/common/services/VoiceService';\nimport {CardsGroupsEditorService} from './app/pages/cards-groups-editor/CardsGroupsEditorService';\nimport {CardsGroupsListService} from './app/pages/cards-groups-list/CardsGroupsListService';\nimport {GoogleBackupsService} from './app/pages/google-backups/GoogleBackupsService';\nimport {CardsService} from './app/pages/cards/CardsService';\nimport {CardsRepeaterService} from './app/pages/cards-repeater/CardsRepeaterService';\nimport {SettingsService} from './app/pages/settings/SettingsService';\nimport {CardViewerService} from './app/pages/card-viewer/CardViewerService';\nimport {StatisticService} from './app/pages/statistic/StatisticService';\nimport {RepeaterListService} from './app/pages/repeater-list/RepeaterListService';\nimport {RepeaterEditorService} from './app/pages/repeater-editor/RepeaterEditorService';\n\nexport const Dependencies = [\n    GoogleAuthService,\n    ErrorService,\n    CardsEditorService,\n    LocalBackupsService,\n    SpinnerService,\n    ConfirmDialogService,\n    StorageService,\n    DataBaseService,\n    SelectionDialogService,\n    NavigationPanelService,\n    ToolbarService,\n    VoiceService,\n    CardsGroupsEditorService,\n    CardsGroupsListService,\n    GoogleBackupsService,\n    CardsService,\n    CardsRepeaterService,\n    SettingsService,\n    CardViewerService,\n    StatisticService,\n    RepeaterListService,\n    RepeaterEditorService\n];","import {IDBPDatabase, openDB} from 'idb';\nimport {STORE_NAME} from \"../constants/STORE_NAME\";\n\nexport class DataBaseService {\n\n    private dataBase: Promise<IDBPDatabase>;\n\n    private DATA_BASE_NAME = \"my-cards-data-base\";\n\n    constructor() {\n        this.dataBase = openDB(this.DATA_BASE_NAME, 1, {\n            upgrade(db) {\n                db.createObjectStore(STORE_NAME);\n            },\n        });\n    }\n\n    get = async <T>(key: string) => {\n        return (await this.dataBase).get(STORE_NAME, key);\n    };\n\n    set = async <T>(key: string, value: T) => {\n        return (await this.dataBase).put(STORE_NAME, value, key);\n    };\n}\n","export class VoiceService {\n\n    private voices: SpeechSynthesisVoice[] = [];\n\n    constructor() {\n        speechSynthesis.addEventListener(\"voiceschanged\", () => {\n            this.voices = speechSynthesis.getVoices().filter((voice) => {\n                return voice.lang === 'en-US';\n            });\n        })\n    }\n\n    public getRandomVoice(): SpeechSynthesisVoice {\n        return this.voices[Math.floor(Math.random() * this.voices.length)]\n    }\n}","import React, {useEffect, useState} from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nimport './App.css';\nimport {IAppContext} from './app/common/types/IAppContext';\nimport {ToolbarContainer} from './app/parts/toolbar/ToolbarContainer';\nimport {NavigationPanelContainer} from './app/parts/navigation-panel/NavigationPanelContainer';\nimport {ErrorContainer} from './app/parts/error-dialog/ErrorContainer';\nimport {SpinnerContainer} from './app/parts/spinner/SpinnerContainer';\nimport {ConfirmDialogContainer} from './app/parts/confirm-dialog/ConfirmDialogContainer';\nimport {NavigationContainer} from './app/parts/navigation/NavigationContainer';\nimport {SelectionDialogContainer} from './app/parts/selection-dialog/SelectionDialogContainer';\nimport {Channel} from './MyTools/channel-conception/Channel';\nimport {defaultAppState} from './app/common/defaults/defaultAppState';\nimport {DependenciesProvider} from './MyTools/react-di/DependenciesProvider';\nimport {Dependencies} from './Dependencies';\n\nexport const AppContext = React.createContext<IAppContext>(defaultAppState);\n\nChannel.setGlobalErrorHandler((error) => {\n    console.error(error);\n})\n\nfunction App() {\n\n    const [appState, setAppState] = useState<IAppContext>(defaultAppState);\n\n    useEffect(() => {\n        const height = window.screen.height;\n        if (appState.height !== height) {\n            setAppState({...appState, height});\n        }\n    }, [appState]);\n\n    return (\n        <>\n            <DependenciesProvider functions={Dependencies}>\n                <AppContext.Provider value={appState}>\n                    <Router>\n                        <div>\n                            <ErrorContainer/>\n                            <ToolbarContainer/>\n                            <NavigationPanelContainer/>\n                            <ConfirmDialogContainer/>\n                            <SelectionDialogContainer/>\n                            <div className=\"page-container\" style={{height: appState.height - 110, width: '100%'}}>\n                                <SpinnerContainer/>\n                                <NavigationContainer/>\n                            </div>\n                        </div>\n                    </Router>\n                </AppContext.Provider>\n            </DependenciesProvider>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://cra.link/PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}