{"version":3,"sources":["app/types/IRangeOfKnowledge.ts","app/common/Routs.ts","app/parts/toolbar/ToolbarService.tsx","app/parts/toolbar/ToolbarComponent.tsx","app/common/Channel.ts","app/parts/navigation-panel/NavigationPanelService.ts","app/parts/toolbar/ToolbarContainer.tsx","app/parts/navigation-panel/elements/navigation-link-component/NavigationLinkComponent.tsx","app/parts/navigation-panel/NavigationPanelComponent.tsx","app/common/hooks/useChannel.ts","app/parts/navigation-panel/NavigationPanelContainer.tsx","app/parts/error-container/ErrorComponent.tsx","app/parts/error-container/ErrorContainer.tsx","app/parts/spinner/SpinnerComponent.tsx","app/parts/spinner/SpinnerContainer.tsx","app/common/Constants.ts","app/parts/confirm-dialog/ConfirmDialogComponent.tsx","app/parts/confirm-dialog/ConfirmDialogContainer.tsx","app/common/elements/add-button/AddButton.tsx","app/pages/cards-groups-list/elements/circular-progress/CircularProgressComponent.tsx","app/common/elements/list-item-menu/ListItemMenuComponent.tsx","app/pages/cards-groups-list/elements/cards-groups-list-item/CardsGroupsListItemComponent.tsx","app/pages/cards-groups-list/CardsGroupsListComponent.tsx","app/common/hooks/useConstructor.ts","app/common/hooks/useUnsubscribe.ts","app/pages/cards-groups-list/CardsGroupsListContainer.tsx","app/pages/google-auth/GoogleAuthComponent.tsx","app/pages/google-auth/GoogleAuthContainer.tsx","app/pages/google-backups/elements/backup-menu-component/BackupMenuComponent.tsx","app/pages/google-backups/elements/backups-list-item-component/BackupsListItemComponent.tsx","app/pages/google-backups/BackupsListComponent.tsx","app/pages/google-backups/GoogleBackupsContainer.tsx","app/types/ISortVariants.ts","app/pages/cards-list/elements/cards-list-item/CardsListItemComponent.tsx","app/pages/cards-list/elements/filter/FilterComponent.tsx","app/pages/cards-list/elements/cards-list-actions/CardsListActions.tsx","app/pages/cards-list/CardsListComponent.tsx","app/pages/cards-list/CardsListContainer.tsx","app/pages/cards-repeater/elements/statistic/StatisticComponent.tsx","app/common/elements/answer-card-footer/AnswerCardFooterComponent.tsx","app/common/elements/text-editor/TextEditorComponent.tsx","app/common/elements/answer-card/AnswerCardComponent.tsx","app/common/elements/cards-header/CardsHeaderComponent.tsx","app/pages/cards-repeater/elements/all-cards-repeated/AllCardsRepeatedComponent.tsx","app/common/elements/question-card/QuestionCardComponent.tsx","app/pages/cards-repeater/CardsRepeaterComponent.tsx","app/common/logic/initDefaultCard.ts","app/pages/cards-repeater/CardsRepeaterContainer.tsx","app/pages/local-backup/LocalBackupsContainer.tsx","app/pages/cards-groups-editor/CardsGroupsEditorComponent.tsx","app/pages/cards-groups-editor/CardsGroupsEditorContainer.tsx","app/pages/cards-editor/CardsEditorComponent.tsx","app/pages/cards-editor/CardsEditorContainer.tsx","app/pages/settings/SettingsComponent.tsx","app/pages/settings/SettingsContainer.tsx","app/pages/card-viewer/CardViewerComponent.tsx","app/pages/card-viewer/CardViewerContainer.tsx","app/parts/navigation/NavigationContainer.tsx","app/pages/google-backups/GoogleBackupsService.ts","app/pages/google-backups/logic/formatCreatedDate.ts","app/common/services/StorageService.ts","app/pages/cards-repeater/logic/getCardsByGroupID.ts","app/common/logic/changeRangeOfKnowledge.ts","app/pages/cards-repeater/logic/getCardForRepeating.ts","app/pages/cards-repeater/logic/getStatistic.ts","app/pages/cards-repeater/logic/shuffleCards.ts","app/pages/cards-repeater/logic/getFirstCard.ts","app/pages/card-viewer/logic/getCardForViewing.ts","App.tsx","app/parts/error-container/ErrorService.ts","app/parts/spinner/SpinnerService.ts","app/parts/confirm-dialog/ConfirmDialogService.ts","app/common/services/DataBaseService.ts","app/pages/cards-groups-editor/CardsGroupsEditorService.ts","app/pages/cards-groups-editor/logic/saveCardsGroup.ts","app/pages/cards-groups-editor/logic/getEditingCardsGroup.ts","app/pages/cards-groups-list/CardsGroupsListService.ts","app/pages/cards-groups-list/logic/updateRepeatingDate.ts","app/pages/cards-groups-list/logic/sortByRepeatingDate.ts","app/pages/cards-groups-list/logic/countRepeatedCardsPercent.ts","app/pages/cards-groups-list/logic/deleteGroup.ts","app/pages/cards-groups-list/logic/resetRepeatingProgress.ts","app/pages/google-auth/GoogleAuthService.ts","app/pages/cards-editor/CardsEditorService.ts","app/pages/cards-editor/logic/saveCard.ts","app/pages/cards-editor/logic/getEditingCard.ts","app/pages/cards-editor/logic/getSimplifiedGroup.ts","app/pages/cards-editor/logic/addCurrentGroupToSimplifiedGroup.ts","app/pages/cards-list/CardsListService.ts","app/pages/cards-list/logic/getCardsByGroup.ts","app/pages/cards-list/logic/filterCards.ts","app/pages/cards-list/logic/resetCardProgress.ts","app/pages/cards-list/logic/deleteCard.ts","app/pages/cards-repeater/CardsRepeaterService.ts","app/pages/local-backup/LocalBackupsService.ts","app/pages/local-backup/logic/saveBackupFile.ts","app/pages/settings/SettingsService.ts","app/pages/card-viewer/CardViewerService.tsx","reportWebVitals.ts","index.tsx"],"names":["IRangeOfKnowledge","Routs","path","name","toolbarManager","ToolbarComponent","pageLabel","onClick","history","useHistory","location","useLocation","AppBar","position","Toolbar","className","IconButton","edge","color","Typography","variant","push","pathname","state","Channel","observableCreator","outputSubject","subscriptions","this","Subject","value","subscribe","next","errorHandler","outputSubjectSubscription","data","error","console","forEach","subscribtion","closed","unsubscribe","navigationPanelService","navigationPanelOpenChannel","of","ToolbarContainer","useState","setPageLabel","useEffect","newPageLabel","getPageLabel","NavigationLinkComponent","toggleDrawer","ListItem","button","to","NavigationPanelComponent","isOpen","SwipeableDrawer","anchor","open","onClose","onOpen","List","useChannel","channel","additionalErrorHandler","subscription","setState","NavigationPanelContainer","event","type","nativeEvent","key","ErrorComponent","errorMessage","handleClose","Dialog","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","ErrorContainer","errorService","errorChannel","SpinnerComponent","isShow","LinearProgress","SpinnerContainer","spinnerService","setShowing","spinnerCounterChannel","spinnerCounter","defaultAppState","height","width","updateContext","DATE_FORMAT","ConfirmDialogComponent","onClickAgree","onClickDisagree","message","autoFocus","ConfirmDialogContainer","confirmDialogService","React","openDialogChannel","confirmationChannel","AddButton","Fab","size","CircularProgressComponent","percent","Box","display","CircularProgress","top","left","bottom","right","alignItems","justifyContent","component","Math","round","ListItemMenuComponent","onEdit","onDelete","onResetProgress","anchorEl","setAnchorEl","keepMounted","Boolean","MenuItem","currentTarget","CardsGroupsListItemComponent","cardsGroup","onClickItem","onEditItem","onDeleteItem","ListItemIcon","percentRepeatedCards","ListItemText","primary","nameCardsGroup","secondary","format","repeatingDate","Date","CardsGroupsListComponent","cardsGroups","onOpenEditor","itemData","itemSize","itemCount","length","overscanCount","index","style","cardGroup","useConstructor","callback","useRef","isFirstRun","current","useUnsubscribe","setSubscription","CardsGroupsListContainer","cardsGroupsListService","context","useContext","AppContext","groupsListChannel","groupDeleteChannel","resetProgressChannel","cardsGroupID","isConfirm","GoogleAuthComponent","onSuccess","onFailure","clientId","buttonText","scope","GoogleAuthContainer","googleAuthService","loginChannel","replace","response","accessToken","BackupMenuComponent","backupID","onLoad","BackupsListItemComponent","backupName","BackupsListComponent","backupsFiles","onCreate","map","backup","createdTime","GoogleBackupsContainer","googleBackupsService","backupsNameLoadChannel","backupLoadChannel","backupDeleteChannel","backupUploadChannel","ISortVariants","CardsListItemComponent","card","isEnabledSelecting","onSelect","isSelected","rangeOfKnowledge","DONE","IN_PROGRESS","getIconColor","question","dateRepeating","Checkbox","checked","tabIndex","disableRipple","FilterComponent","onChangeSearchableText","filter","onChangeSorting","Accordion","AccordionSummary","expandIcon","TextField","required","placeholder","onChange","target","marginRight","stopPropagation","preventDefault","AccordionDetails","Select","sort","label","NONE","QUESTION_ASK","QUESTION_DESK","STATUS_ASK","STATUS_DESK","CardsListActions","CardsListComponent","cards","CardsListContainer","cardsListService","searchableText","cardsChannel","prevState","resetCardProgressChannel","deleteCardChannel","sortVariant","newFilter","cardID","StatisticComponent","statistic","todo","inProgress","done","AnswerCardFooterComponent","CardActions","TextEditorComponent","onChangeText","changeableText","multiline","AnswerCardComponent","cardHeight","onClickText","isEditable","onChangeAnswer","getText","answer","Card","CardContent","paddingTop","overflow","whiteSpace","gutterBottom","CardsHeaderComponent","isQuestionSide","onSwitchEditing","Check","Edit","AllCardsRepeatedComponent","onBackClick","QuestionCardComponent","onClickCard","onChangeQuestion","CardsRepeaterComponent","initDefaultCard","getTime","CardRepeaterContainer","cardsRepeaterService","cardsEditorService","undefined","setStatistic","cardChannel","statisticChannel","cardEditingChannel","currentCardChannel","repeatingResultChannel","isKnown","editableCard","LocalBackupsContainer","localBackupsService","fileBuffer","localBackupChannel","loadBackupChannel","file","files","reader","FileReader","onload","readerEvent","games","result","readAsText","ref","CardsGroupsEditorComponent","groupName","onChangeGroupName","onSaveGroup","CardsGroupsEditorContainer","cardsGroupsEditorService","groupEditingChannel","goBack","groupChannel","CardsEditorComponent","onSaveCard","currentCardsGroup","onChangeCardsGroup","labelId","toString","Number","autoWidth","CardsEditorContainer","simplifiedCardsGroupsChannel","newState","SettingsComponent","settings","FormGroup","FormControlLabel","control","Switch","isRandomRepeating","SettingsContainer","settingsService","changeSettingsChannel","settingsChannel","CardViewerComponent","CardViewerContainer","cardViewerService","NavigationContainer","exact","from","GoogleBackupsService","storageService","backupFileName","backupFolderName","googleDriveFilesAPI","googleDriveUploadAPI","searchFilesURI","searchFolderURI","getFilesAdditionalPartURI","googleDriveFolderType","pipe","switchMap","getAuthToken","authToken","getBackupFiles","googleDriveFiles","googleDriveFile","slice","formatCreatedDate","loadBackupFile","createNewBackup","fileID","deleteBackupFile","tap","getBackupFolder","folders","foundedFolder","find","mimeType","createBackupFolder","folderId","createNewBackupFile","fileId","uploadBackupFile","token","ajax","url","headers","method","setBackup","body","parents","getBackup","JSON","stringify","responseType","StorageService","dataBaseService","cardsStorageID","authTokenLocalStorageID","settingsID","getBackupFromDataBase","a","get","setBackupToDataBase","set","Promise","resolve","reject","localStorage","getItem","setItem","parse","getCardsByGroupID","foundCardsGroup","foundCards","changeRangeOfKnowledge","args","TO_DO","getCardForRepeating","foundCard","getStatistic","statisticValue","shuffleCards","array","randomIndex","copy","floor","random","getFirstCard","getCardForViewing","i","findIndex","createContext","difference","storeName","dataBase","DATA_BASE_NAME","put","openDB","upgrade","db","createObjectStore","editedCardGroup","cardGroupIndex","saveCardsGroup","cardGroupID","getEditingCardsGroup","updateRepeatingDate","firstCardGroup","secondCardsGroup","sortByRepeatingDate","statusDone","countRepeatedCardsPercent","groupID","deleteGroup","resetRepeatingProgress","setAuthToken","cardIndex","item","saveCard","getEditingCard","getSimplifiedGroup","addCurrentGroupToSimplifiedGroup","getCardsByGroup","foundByTextCards","toLowerCase","indexOf","card1","card2","filterCards","resetCardProgress","deleteCard","getSettings","isRundomRepeating","fileData","blob","Blob","window","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","saveBackupFile","backupFile","settingService","setSettings","App","appState","setAppState","screen","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eb5a362a.chunk.js","sourcesContent":["export enum IRangeOfKnowledge {\n    TO_DO,\n    IN_PROGRESS,\n    DONE\n}\n","export const Routs = {\n    googleAuth: {\n        path: '/google-auth',\n        name: 'Auth Google'\n    },\n\n    googleBackups: {\n        path: '/google-backups',\n        name: 'Google Backups'\n    },\n\n    cardsGroups: {\n        path: '/cards-groups',\n        name: 'Cards Groups'\n    },\n\n    cards: {\n        path: '/cards-list',\n        name: 'Cards'\n    },\n\n    cardsRepeater: {\n        path: '/cards-repeater',\n        name: 'Repeat Card'\n    },\n\n    cardsEditor: {\n        path: '/cards-editor',\n        name: 'Edit Card'\n    },\n\n    localBackups: {\n        path: '/local-backups',\n        name: 'Local Backups'\n    },\n\n    cardsGroupEditor: {\n        path: '/cards-group-editor',\n        name: 'Edit Group'\n    },\n\n    settings: {\n        path: '/settings',\n        name: 'Settings'\n    },\n\n    cardViewer: {\n        path: '/card-viewer',\n        name: 'Card Preview'\n    }\n};\n","import {Routs} from '../../common/Routs';\n\nclass ToolbarService {\n\n    public getPageLabel(path: string) {\n        if(path === Routs.googleAuth.path) {\n            return Routs.googleAuth.name;\n        }\n\n        if(path === Routs.googleBackups.path) {\n            return Routs.googleBackups.name;\n        }\n\n        if(path === Routs.cardsGroups.path) {\n            return Routs.cardsGroups.name;\n        }\n\n        if(path === Routs.cards.path) {\n            return Routs.cards.name;\n        }\n\n        if(path === Routs.cardsRepeater.path) {\n            return Routs.cardsRepeater.name;\n        }\n\n        if(path === Routs.localBackups.path) {\n            return Routs.localBackups.name;\n        }\n\n        if(path === Routs.settings.path) {\n            return Routs.settings.name;\n        }\n\n        if(path === Routs.cardViewer.path) {\n            return Routs.settings.name;\n        }\n\n        return 'My Cards'\n    }\n}\n\nexport const toolbarManager = new ToolbarService();\n","import {FC, MouseEventHandler} from 'react';\nimport {AppBar, IconButton, Toolbar, Typography} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\n\nimport './ToolbarComponent.css'\nimport {useHistory, useLocation} from 'react-router';\nimport {Routs} from '../../common/Routs';\n\nexport const ToolbarComponent: FC<IToolbarComponent> = ({pageLabel, onClick}) => {\n\n    const history = useHistory();\n    const location = useLocation();\n\n    const onOpenRepeater = () => {\n\n        if (pageLabel === Routs.cards.name) {\n            history.push({\n                pathname: Routs.cardsRepeater.path,\n                state: location.state\n            })\n        } else {\n            history.push({\n                pathname: Routs.cardsRepeater.path,\n                state: null\n            })\n        }\n\n    };\n\n    return (\n        <AppBar position=\"fixed\">\n            <Toolbar className=\"toolbar\">\n                <IconButton className=\"toolbar_menu-icon\" edge=\"start\" color=\"inherit\" aria-label=\"menu\"\n                            onClick={onClick}>\n                    <MenuIcon/>\n                </IconButton>\n                <Typography className=\"toolbar_label\" variant=\"h6\">\n                    {pageLabel}\n                </Typography>\n                {pageLabel === Routs.cards.name || pageLabel === Routs.cardsGroups.name ?\n                    <IconButton color=\"inherit\" onClick={onOpenRepeater}>\n                        <PlayArrowIcon/>\n                    </IconButton> : null}\n            </Toolbar>\n        </AppBar>\n    )\n};\n\ninterface IToolbarComponent {\n    pageLabel: string;\n    onClick: MouseEventHandler\n}\n","import {Observable, Subject, Subscription} from 'rxjs';\n\nexport class Channel<A, D> {\n\n    private readonly outputSubject: Subject<D>;\n    private observableCreator: (arg: A) => Observable<D>;\n    private subscriptions: Subscription[] = [];\n\n    constructor(observableCreator: (arg: A) => Observable<D>) {\n        this.outputSubject = new Subject<D>();\n        this.observableCreator = observableCreator;\n    }\n\n    next(value: A) {\n        this.subscriptions.push(this.observableCreator(value).subscribe((value) => {\n            this.outputSubject.next(value);\n        }));\n    }\n\n    subscribe(next?: (data: D) => void, errorHandler?: (error: Error) => void): Subscription {\n\n\n        const outputSubjectSubscription = this.outputSubject.subscribe(\n            (data: D) => {\n                if(next) {\n                    next(data)\n                }\n            },\n            (error: Error) => {\n                if(errorHandler) {\n                    errorHandler(error);\n                }\n                console.error(error)\n            }\n        );\n        this.subscriptions.push(outputSubjectSubscription);\n        return outputSubjectSubscription;\n    }\n\n    unsubscribe() {\n        this.subscriptions.forEach((subscribtion: Subscription) => {\n            if(!subscribtion.closed) {\n                subscribtion.unsubscribe();\n            }\n        });\n        this.subscriptions = [];\n    }\n}\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../common/Channel';\n\nclass NavigationPanelService {\n\n    public navigationPanelOpenChannel: Channel<string, string>;\n\n    constructor() {\n        this.navigationPanelOpenChannel = new Channel<string, string>((value: string) => of(value))\n    }\n}\n\nexport const navigationPanelService = new NavigationPanelService();\n","import React, {ReactElement, useEffect, useState} from 'react';\nimport * as H from 'history';\nimport {useLocation} from 'react-router-dom';\n\nimport {toolbarManager} from './ToolbarService';\nimport {ToolbarComponent} from './ToolbarComponent';\nimport {navigationPanelService} from '../navigation-panel/NavigationPanelService';\n\nexport const ToolbarContainer = (): ReactElement => {\n\n    const location: H.Location = useLocation();\n    const [pageLabel, setPageLabel] = useState('');\n\n    useEffect(() => {\n        const newPageLabel = toolbarManager.getPageLabel(location.pathname);\n        setPageLabel(newPageLabel);\n    }, [location.pathname]);\n\n    const onClick = () => {\n        navigationPanelService.navigationPanelOpenChannel.next('');\n    };\n\n    return (\n        <ToolbarComponent pageLabel={pageLabel} onClick={onClick}/>\n    )\n};\n","import {Link} from 'react-router-dom';\nimport {ListItem} from '@mui/material';\nimport * as React from 'react';\nimport {FC, ReactEventHandler} from 'react';\n\nexport const NavigationLinkComponent: FC<INavigationLinkComponent> = ({path, name, toggleDrawer}: INavigationLinkComponent) => {\n\n    return (\n        <ListItem button>\n            <Link to={path} onClick={toggleDrawer(false)}>\n                {name}\n            </Link>\n        </ListItem>\n    )\n};\n\ninterface INavigationLinkComponent {\n    path: string;\n    name: string;\n    toggleDrawer: (isOpen: boolean) => ReactEventHandler\n}\n","import * as React from 'react';\nimport {FC, ReactEventHandler} from 'react';\nimport {List, SwipeableDrawer} from '@mui/material';\n\nimport {Routs} from '../../common/Routs';\nimport {NavigationLinkComponent} from './elements/navigation-link-component/NavigationLinkComponent';\n\nexport const NavigationPanelComponent: FC<INavigationPanelComponent> = ({isOpen, toggleDrawer}) => {\n\n    return (\n        <SwipeableDrawer\n            anchor=\"left\"\n            open={isOpen}\n            onClose={toggleDrawer(false)}\n            onOpen={toggleDrawer(true)}\n        >\n            <List>\n                <NavigationLinkComponent path={Routs.cardsGroups.path} name={Routs.cardsGroups.name} toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.googleAuth.path} name={Routs.googleAuth.name} toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.localBackups.path} name={Routs.localBackups.name} toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.settings.path} name={Routs.settings.name} toggleDrawer={toggleDrawer}/>\n            </List>\n        </SwipeableDrawer>\n    )\n};\n\ninterface INavigationPanelComponent {\n    isOpen: boolean\n    toggleDrawer: (isOpen: boolean) => ReactEventHandler\n}\n\n\n","import {useEffect, useState} from 'react';\nimport {Subscription} from 'rxjs';\n\nimport {Channel} from '../Channel';\n\nexport const useChannel = <A, D>(channel: Channel<A, D>, next?: (value: D) => void, additionalErrorHandler?: (error: Error) => void) => {\n    const [state, setState] = useState<{ subscription: Subscription | null }>({\n        subscription: null\n    });\n\n    useEffect(() => {\n\n        if (!state.subscription || state.subscription.closed) {\n            const subscription = channel.subscribe(next, additionalErrorHandler);\n\n            setState({...state, subscription});\n        }\n\n        return () => {\n            channel.unsubscribe();\n        }\n    }, []);\n};\n","import * as React from 'react';\nimport {ReactEventHandler, SyntheticEvent, useState} from 'react';\n\nimport {navigationPanelService} from './NavigationPanelService';\nimport {NavigationPanelComponent} from './NavigationPanelComponent';\nimport {useChannel} from '../../common/hooks/useChannel';\n\nexport const NavigationPanelContainer = () => {\n\n    const [state, setState] = useState<INavigationPanelState>({\n        isOpen: false\n    });\n\n    useChannel<string, string>(navigationPanelService.navigationPanelOpenChannel, () => {\n        setState({...state, isOpen: true});\n    });\n\n    const toggleDrawer = (isOpen: boolean): ReactEventHandler => (event: SyntheticEvent<Element, KeyboardEvent>) => {\n        if (event && event.type === 'keydown' && (event.nativeEvent.key === 'Tab' || event.nativeEvent.key === 'Shift')) {\n            return;\n        }\n\n        setState({...state, isOpen});\n    };\n\n    return (\n        <NavigationPanelComponent isOpen={state.isOpen} toggleDrawer={toggleDrawer}/>\n    )\n};\n\ninterface INavigationPanelState {\n    isOpen: boolean;\n}\n","import {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nexport const ErrorComponent: FC<IErrorComponent> = ({isOpen, errorMessage, handleClose}) => {\n\n    return (\n        <Dialog\n            open={isOpen}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n            onClose={handleClose}\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"Something went wrong\"}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {errorMessage}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button color=\"primary\" onClick={handleClose}>\n                    Ok\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\ninterface IErrorComponent {\n    isOpen: boolean;\n    errorMessage: string;\n    handleClose: () => void;\n}\n","import React, {FC, useState} from 'react';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {ErrorComponent} from './ErrorComponent';\nimport {ErrorService} from './ErrorService';\n\nexport const ErrorContainer: FC<IErrorContainer> = ({errorService}) => {\n\n    const [state, setState] = useState<ErrorContainerState>({isOpen: false, errorMessage: ''});\n\n    useChannel<string, string>(errorService.errorChannel, (errorMessage: string) => {\n        setState({\n            isOpen: true,\n            errorMessage\n        })\n    });\n\n    const onClose = () => {\n        setState({\n            isOpen: false,\n            errorMessage: ''\n        })\n    };\n\n    return <ErrorComponent isOpen={state.isOpen} errorMessage={state.errorMessage} handleClose={onClose}/>\n};\n\ninterface IErrorContainer {\n    errorService: ErrorService;\n}\n\ninterface ErrorContainerState {\n    isOpen: boolean;\n    errorMessage: string;\n}\n","import {LinearProgress} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nexport const SpinnerComponent: FC<ISpinnerComponent> = ({isShow}) => {\n    return (\n        isShow ? <LinearProgress color=\"secondary\" /> : null\n    )\n};\n\ninterface ISpinnerComponent {\n   isShow: boolean;\n}\n","import * as React from 'react';\nimport {FC, useState} from 'react';\n\nimport {SpinnerComponent} from './SpinnerComponent';\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {SpinnerService} from './SpinnerService';\n\nexport const SpinnerContainer: FC<ISpinnerContainer> = ({spinnerService}) => {\n\n    const [isShow, setShowing] = useState(false);\n\n    useChannel<number, number>(spinnerService.spinnerCounterChannel, (spinnerCounter) => {\n        setShowing(spinnerCounter !== 0);\n    });\n\n    return <SpinnerComponent isShow={isShow}/>\n};\n\ninterface ISpinnerContainer {\n    spinnerService: SpinnerService;\n}\n","import {IRangeOfKnowledge} from '../types/IRangeOfKnowledge';\n\nexport const defaultAppState = {\n    height: 0,\n    width: 0,\n    updateContext: () => {\n    }\n};\n\nexport const DATE_FORMAT = \"dd-MM-yyyy\";\nexport const STORE_NAME = \"cards-store\";\n","import React, {FC} from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nexport const ConfirmDialogComponent: FC<IConfirmDialogComponent> = ({onClickAgree, onClickDisagree, isOpen, message, onClose}) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitle id=\"alert-dialog-title\">Warning</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClickDisagree} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={onClickAgree} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n\ninterface IConfirmDialogComponent {\n    onClickAgree: () => void;\n    onClickDisagree: () => void;\n    onClose: () => void;\n    isOpen: boolean;\n    message: string;\n}\n","import * as React from 'react';\nimport {FC} from 'react';\n\nimport {ConfirmDialogComponent} from './ConfirmDialogComponent';\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {ConfirmDialogService} from './ConfirmDialogService';\n\nexport const ConfirmDialogContainer: FC<IConfirmDialogContainer> = ({confirmDialogService}) => {\n\n    const [state, setState] = React.useState<ConfirmDialogContainerState>({\n        isOpen: false,\n        message: ''\n    });\n\n    useChannel<ConfirmDialogContainerState, ConfirmDialogContainerState>(\n        confirmDialogService.openDialogChannel,\n        (state: ConfirmDialogContainerState) => {\n            setState({...state});\n        }\n    );\n\n    const onClose = () => {\n        setState({isOpen: false, message: ''});\n        confirmDialogService.confirmationChannel.unsubscribe();\n    };\n\n    const onClickAgree = () => {\n        confirmDialogService.confirmationChannel.next(true);\n    };\n\n    const onClickDisagree = () => {\n        confirmDialogService.confirmationChannel.next(false);\n    };\n\n    return <ConfirmDialogComponent\n        isOpen={state.isOpen}\n        onClickAgree={onClickAgree}\n        onClickDisagree={onClickDisagree}\n        onClose={onClose}\n        message={state.message}\n    />\n};\n\nexport interface IConfirmDialogContainer {\n    confirmDialogService: ConfirmDialogService;\n}\n\nexport interface ConfirmDialogContainerState {\n    isOpen: boolean;\n    message: string;\n}\n","import * as React from 'react';\nimport {FC} from 'react';\nimport Fab from '@mui/material/Fab';\nimport AddIcon from '@mui/icons-material/Add';\nimport './AddButton.css'\n\nexport const AddButton: FC<IAddButton> = ({onClick}) => {\n    return <Fab size=\"medium\" color=\"secondary\" aria-label=\"add\" className=\"add-button\" onClick={onClick}>\n        <AddIcon/>\n    </Fab>\n};\n\ninterface IAddButton {\n    onClick: () => void;\n}\n","import React, {FC} from 'react';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nexport const CircularProgressComponent: FC<ICircularProgressComponent> = ({percent}) => {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" value={percent}/>\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                    percent,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n};\n\ninterface ICircularProgressComponent {\n    percent: number\n}\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nexport const ListItemMenuComponent: FC<IListItemMenuComponent> = ({onEdit, onDelete, onResetProgress}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const editClick = () => {\n        onEdit();\n        handleClose();\n    };\n\n    const resetClick = () => {\n        onResetProgress();\n        handleClose();\n    };\n\n    const deleteClick = () => {\n        onDelete();\n        handleClose();\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={editClick}>Edit</MenuItem>\n                <MenuItem onClick={resetClick}>Reset progress</MenuItem>\n                <MenuItem onClick={deleteClick}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n\ninterface IListItemMenuComponent {\n    onEdit: () => void;\n    onDelete: () => void;\n    onResetProgress: () => void;\n}\n","import React, {FC} from \"react\"\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\n\nimport {DATE_FORMAT} from '../../../../common/Constants';\nimport {ICardsGroup} from '../../../../types/ICardsGroup';\nimport {CircularProgressComponent} from '../circular-progress/CircularProgressComponent';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport './CardsGroupsListItemComponent.css'\n\nexport const CardsGroupsListItemComponent: FC<ICardsGroupsListItemComponent> = (\n    {\n        cardsGroup,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress\n    }\n) => {\n\n    return <>\n        <ListItem key={cardsGroup.id} button component=\"div\">\n            <ListItemIcon onClick={() => onClickItem(cardsGroup.id)}>\n                <CircularProgressComponent percent={cardsGroup.percentRepeatedCards || 0}/>\n            </ListItemIcon>\n            <ListItemText\n                className=\"cards-groups-list-item_card-name\"\n                onClick={() => onClickItem(cardsGroup.id)}\n                primary={cardsGroup.nameCardsGroup}\n                secondary={'Last repeating date: ' + format(cardsGroup.repeatingDate ? cardsGroup.repeatingDate : new Date(), DATE_FORMAT)}\n            />\n            <ListItemIcon>\n                <ListItemMenuComponent\n                    onEdit={() => onEditItem(cardsGroup.id)}\n                    onDelete={() => onDeleteItem(cardsGroup.id)}\n                    onResetProgress={() => onResetProgress(cardsGroup.id)}\n                />\n            </ListItemIcon>\n        </ListItem>\n    </>\n};\n\ninterface ICardsGroupsListItemComponent {\n    cardsGroup: ICardsGroup;\n    onClickItem: (id: number) => void;\n    onEditItem: (id: number) => void;\n    onDeleteItem: (id: number) => void;\n    onResetProgress: (id: number) => void;\n}\n","import React, {FC} from \"react\";\nimport {FixedSizeList as List} from 'react-window';\n\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport './CardsGroupsListComponent.css'\nimport {AddButton} from '../../common/elements/add-button/AddButton';\nimport {CardsGroupsListItemComponent} from './elements/cards-groups-list-item/CardsGroupsListItemComponent';\n\nexport const CardsGroupsListComponent: FC<ICardsGroupsListComponent> = (\n    {\n        cardsGroups,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onOpenEditor,\n        onResetProgress,\n        height,\n        width\n    }\n) => {\n\n    return <>\n        <List\n            className=\"cards-groups\"\n            itemData={cardsGroups}\n            itemSize={55}\n            itemCount={cardsGroups.length}\n            overscanCount={5}\n            height={height}\n            width={width}\n        >\n            {({index, style}: any) => {\n                const cardGroup = cardsGroups[index];\n                return <div style={style}><CardsGroupsListItemComponent\n                    key={cardGroup.id}\n                    cardsGroup={cardGroup}\n                    onClickItem={onClickItem}\n                    onEditItem={onEditItem}\n                    onDeleteItem={onDeleteItem}\n                    onResetProgress={onResetProgress}\n                /></div>\n            }}\n        </List>\n        <AddButton onClick={onOpenEditor}/>\n    </>\n};\n\ninterface ICardsGroupsListComponent {\n    cardsGroups: ICardsGroup[];\n    onClickItem: (id: number) => void;\n    onEditItem: (id: number) => void;\n    onDeleteItem: (id: number) => void;\n    onOpenEditor: () => void;\n    onResetProgress: (id: number) => void;\n    height: number;\n    width: number\n}\n","import {useRef} from 'react';\n\nexport const useConstructor = (callback: () => void) => {\n\n    const value = useRef({isFirstRun: false});\n\n    if (!value.current.isFirstRun) {\n        callback();\n        value.current.isFirstRun = true;\n    }\n};\n","import {useEffect, useState} from 'react';\nimport {Subscription} from 'rxjs';\n\nexport const useUnsubscribe = () => {\n\n    const [subscriptions, setSubscription] = useState<Array<Subscription>>([]);\n\n    useEffect(() => {\n        return () => {\n            subscriptions.forEach((subscription: Subscription) => {\n                if( !subscription.closed ) {\n                    subscription.unsubscribe();\n                }\n            });\n            setSubscription([]);\n        }\n    }, []);\n\n    return { setSubscription: (subscribtion: Subscription) => {\n        setSubscription([...subscriptions, subscribtion]);\n    }}\n};\n","import React, {FC, useContext, useState} from \"react\";\n\nimport {CardsGroupsListComponent} from './CardsGroupsListComponent';\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {useConstructor} from '../../common/hooks/useConstructor';\nimport {CardsGroupsListService} from './CardsGroupsListService';\nimport {Routs} from '../../common/Routs';\nimport {useHistory} from 'react-router';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {useUnsubscribe} from '../../common/hooks/useUnsubscribe';\nimport {IAppContext} from '../../types/IAppContext';\nimport {AppContext} from '../../../App';\n\nexport const CardsGroupsListContainer: FC<ICardsGroupsListContainer> = ({cardsGroupsListService, confirmDialogService}) => {\n\n    const [state, setState] = useState<CardsGroupsListContainerState>({cardsGroups: []});\n\n    const history = useHistory();\n\n    const context = useContext<IAppContext>(AppContext);\n\n    useChannel<string, ICardsGroup[]>(cardsGroupsListService.groupsListChannel, (cardsGroups: ICardsGroup[]) => {\n        setState({cardsGroups: cardsGroups})\n    });\n\n    useChannel<number, ICardsGroup[]>(cardsGroupsListService.groupDeleteChannel, () => {\n        cardsGroupsListService.groupsListChannel.next('');\n    });\n\n    useChannel<number, ICardsGroup[]>(cardsGroupsListService.resetProgressChannel, () => {\n        cardsGroupsListService.groupsListChannel.next('');\n    });\n\n    useConstructor(() => {\n        cardsGroupsListService.groupsListChannel.next('');\n    });\n\n    const { setSubscription } = useUnsubscribe();\n\n    const onClickItem = (cardsGroupID: number): void => {\n        history.push({\n            pathname: Routs.cards.path,\n            state: {\n                cardsGroupID: cardsGroupID\n            }\n        })\n    };\n\n    const onOpenEditor = () => {\n        history.push({\n            pathname: Routs.cardsGroupEditor.path\n        })\n    };\n\n    const onDeleteItem = (cardsGroupID: number) => {\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardsGroupsListService.groupDeleteChannel.next(cardsGroupID);\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to remove this group?'\n        })\n    };\n\n    const onEditItem = (cardsGroupID: number) => {\n        history.push({\n            pathname: Routs.cardsGroupEditor.path,\n            state: {\n                cardsGroupID: cardsGroupID\n            }\n        })\n    };\n\n    const onResetProgress = (cardsGroupID: number) => {\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardsGroupsListService.resetProgressChannel.next(cardsGroupID);\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to reset progress of this group?'\n        });\n    };\n\n    return <CardsGroupsListComponent\n        onClickItem={onClickItem}\n        onOpenEditor={onOpenEditor}\n        onDeleteItem={onDeleteItem}\n        onEditItem={onEditItem}\n        onResetProgress={onResetProgress}\n        height={context.height}\n        width={context.width}\n        cardsGroups={state.cardsGroups}/>\n};\n\ninterface CardsGroupsListContainerState {\n    cardsGroups: ICardsGroup[];\n}\n\ninterface ICardsGroupsListContainer {\n    cardsGroupsListService: CardsGroupsListService;\n    confirmDialogService: ConfirmDialogService;\n}\n","import GoogleLogin, {GoogleLoginResponse, GoogleLoginResponseOffline} from 'react-google-login';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport './GoogleAuthComponent.css'\n\nexport const GoogleAuthComponent: FC<IGoogleAuthComponent> = ({onSuccess, onFailure, height, width}) => {\n    return (\n        <div className=\"google-auth\" style={{height, width}}>\n            <GoogleLogin\n                className=\"google-auth_button\"\n                clientId=\"627973926597-tj2la0mnorvm04cqmcosu2nj3b02g6k2.apps.googleusercontent.com\"\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                scope={'profile email https://www.googleapis.com/auth/drive'}\n            />\n        </div>\n    )\n};\n\ninterface IGoogleAuthComponent {\n    onSuccess: (response: GoogleLoginResponse | GoogleLoginResponseOffline) => void\n    onFailure: (response: GoogleLoginResponse | GoogleLoginResponseOffline) => void\n    height: number,\n    width: number\n}\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {GoogleLoginResponse, GoogleLoginResponseOffline} from 'react-google-login';\nimport {useHistory} from 'react-router';\n\nimport {Routs} from '../../common/Routs';\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {GoogleAuthService} from './GoogleAuthService';\nimport {GoogleAuthComponent} from './GoogleAuthComponent';\nimport {IAppContext} from '../../types/IAppContext';\nimport {AppContext} from '../../../App';\nimport {ErrorService} from '../../parts/error-container/ErrorService';\n\nexport const GoogleAuthContainer: FC<IGoogleAuthContainer> = ({googleAuthService, errorService}) => {\n\n    const history = useHistory();\n\n    useChannel(googleAuthService.loginChannel, ()=> {\n        history.replace(Routs.googleBackups.path);\n    });\n\n    const {height, width} = React.useContext<IAppContext>(AppContext);\n\n    const onSuccess = (response: GoogleLoginResponse | GoogleLoginResponseOffline) => {\n        googleAuthService.loginChannel.next((response as GoogleLoginResponse).accessToken);\n    };\n\n    const onFailure = () => {\n        errorService.errorChannel.next('Error of connection');\n    };\n\n    return <GoogleAuthComponent\n        onSuccess={onSuccess}\n        onFailure={onFailure}\n        height={height}\n        width={width}\n    />;\n};\n\ninterface IGoogleAuthContainer {\n    googleAuthService: GoogleAuthService;\n    errorService: ErrorService;\n}\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\n\nexport const BackupMenuComponent: FC<IBackupMenuComponent> = ({backupID, onLoad, onDelete}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const onLoadBackup = () => {\n        setAnchorEl(null);\n        onLoad(backupID);\n    };\n\n    const onDeleteBackup = () => {\n        setAnchorEl(null);\n        onDelete(backupID);\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={onLoadBackup}>Load</MenuItem>\n                <MenuItem onClick={onDeleteBackup}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n\ninterface IBackupMenuComponent {\n    backupID: string;\n    onLoad: (backupID: string)=>void;\n    onDelete: (backupID: string)=>void;\n}\n","import {default as React, FC} from 'react';\nimport {ListItem, ListItemIcon, ListItemText} from '@mui/material';\n\nimport {BackupMenuComponent} from '../backup-menu-component/BackupMenuComponent';\n\nexport const BackupsListItemComponent: FC<IBackupsListItemComponent> = ({backupName, backupID, onLoad, onDelete}) => {\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={backupName}\n            />\n            <ListItemIcon>\n                <BackupMenuComponent backupID={backupID} onLoad={onLoad} onDelete={onDelete}/>\n            </ListItemIcon>\n        </ListItem>\n    );\n};\n\ninterface IBackupsListItemComponent {\n    backupName: string;\n    backupID: string;\n    onLoad: (backupID: string)=>void;\n    onDelete: (backupID: string)=>void;\n}\n","import {IGoogleDriveFile} from '../../types/IGoogleDriveFile';\nimport {BackupsListItemComponent} from './elements/backups-list-item-component/BackupsListItemComponent';\nimport {List} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {AddButton} from '../../common/elements/add-button/AddButton';\n\n\nexport const BackupsListComponent: FC<IBackupsListComponent> = ({backupsFiles, onLoad, onCreate, onDelete}) => {\n    return (\n        <>\n            <List>\n                {\n                    backupsFiles.map((backup: IGoogleDriveFile) => {\n                        return <BackupsListItemComponent\n                            key={backup.id}\n                            backupName={backup.createdTime}\n                            onLoad={onLoad}\n                            onDelete={onDelete}\n                            backupID={backup.id}/>\n                    })\n                }\n            </List>\n            <AddButton onClick={onCreate}/>\n        </>\n    )\n};\n\ninterface IBackupsListComponent {\n    backupsFiles: IGoogleDriveFile[];\n    onLoad: (backupID: string) => void;\n    onCreate: () => void;\n    onDelete: (backupID: string) => void;\n}\n","import * as React from 'react';\nimport {FC, useState} from 'react';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {GoogleBackupsService} from './GoogleBackupsService';\nimport {IGoogleDriveFile} from '../../types/IGoogleDriveFile';\nimport {BackupsListComponent} from './BackupsListComponent';\nimport {useHistory} from 'react-router';\nimport {Routs} from '../../common/Routs';\nimport {useConstructor} from '../../common/hooks/useConstructor';\nimport {SpinnerService} from '../../parts/spinner/SpinnerService';\nimport {useUnsubscribe} from '../../common/hooks/useUnsubscribe';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\n\nexport const GoogleBackupsContainer: FC<IGoogleBackupsContainer> = ({spinnerService, googleBackupsService, confirmDialogService}) => {\n\n    const history = useHistory();\n\n    const [state, setState] = useState<GoogleAuthComponentState>({\n        backupsFiles: []\n    });\n\n    useChannel(\n        googleBackupsService.backupsNameLoadChannel,\n        (backupsFiles: IGoogleDriveFile[]) => {\n            setState({...state, backupsFiles: backupsFiles});\n            spinnerService.spinnerCounterChannel.next(-1);\n        },\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n            history.replace(Routs.googleAuth.path);\n        }\n    );\n\n    useChannel(\n        googleBackupsService.backupLoadChannel,\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n        },\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n            history.replace(Routs.googleAuth.path);\n        }\n    );\n\n    useChannel(googleBackupsService.backupDeleteChannel, () => {\n       spinnerService.spinnerCounterChannel.next(-1);\n    });\n\n    useChannel(googleBackupsService.backupUploadChannel, () => {\n        spinnerService.spinnerCounterChannel.next(-1);\n    });\n\n    useConstructor(() => {\n        googleBackupsService.backupsNameLoadChannel.next('');\n    });\n\n    const { setSubscription } = useUnsubscribe();\n\n    const onLoad = (backupID: string) => {\n        spinnerService.spinnerCounterChannel.next(1);\n        googleBackupsService.backupLoadChannel.next(backupID);\n    };\n\n    const onDelete = (backupID: string) => {\n        googleBackupsService.backupLoadChannel.next(backupID);\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                spinnerService.spinnerCounterChannel.next(1);\n                googleBackupsService.backupDeleteChannel.next(backupID);\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to delete this backup?'\n        });\n    };\n\n    const onCreate = () => {\n        spinnerService.spinnerCounterChannel.next(1);\n        googleBackupsService.backupUploadChannel.next();\n    };\n\n    return <BackupsListComponent backupsFiles={state.backupsFiles} onLoad={onLoad} onDelete={onDelete} onCreate={onCreate}/>;\n};\n\ninterface IGoogleBackupsContainer {\n    spinnerService: SpinnerService;\n    googleBackupsService: GoogleBackupsService;\n    confirmDialogService: ConfirmDialogService;\n}\n\ninterface GoogleAuthComponentState {\n    backupsFiles: IGoogleDriveFile[];\n}\n","export enum ISortVariants {\n    NONE = 'Нет сортировки',\n    QUESTION_ASK = 'По имени по возрастанию',\n    QUESTION_DESK = 'По имени по убыванию',\n    STATUS_ASK = 'По стсатусу сначала пройденные',\n    STATUS_DESK = 'По статусу сначала не пройденные'\n}","import React, {FC} from \"react\"\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport FlagIcon from '@mui/icons-material/Flag';\n\nimport {DATE_FORMAT} from '../../../../common/Constants';\nimport {ICard} from '../../../../types/ICard';\nimport {IRangeOfKnowledge} from '../../../../types/IRangeOfKnowledge';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport \"./CardsListItemComponent.css\";\nimport {Checkbox, ListItemButton} from \"@mui/material\";\n\nexport const CardsListItemComponent: FC<ICardListItemComponent> = (\n    {\n        card,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onSelect,\n        isEnabledSelecting,\n        isSelected\n    }\n) => {\n\n    const getIconColor = (card: ICard): string => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n            return 'green'\n        }\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            return 'yellow'\n        }\n        return 'red'\n    };\n\n    return <ListItem key={card.id} button>\n        <ListItemIcon onClick={() => onClickItem(card.id)}>\n            <FlagIcon style={{color: getIconColor(card)}}/>\n        </ListItemIcon>\n        <ListItemText\n            className=\"cards-list-item_card-name\"\n            onClick={() => isEnabledSelecting ? () => {\n            } : onClickItem(card.id)}\n            primary={card.question}\n            secondary={'Last repeating date: ' + format(card.dateRepeating ? card.dateRepeating : new Date(), DATE_FORMAT)}\n        />\n        {\n            !isEnabledSelecting ?\n                <ListItemIcon>\n                    <ListItemMenuComponent\n                        onEdit={() => onEditItem(card.id)}\n                        onDelete={() => onDeleteItem(card.id)}\n                        onResetProgress={() => onResetProgress(card.id)}\n                    />\n                </ListItemIcon> :\n                <ListItemIcon>\n                    <Checkbox\n                        edge=\"start\"\n                        checked={isSelected}\n                        tabIndex={-1}\n                        disableRipple\n                    />\n                </ListItemIcon>\n        }\n    </ListItem>\n};\n\ninterface ICardListItemComponent {\n    card: ICard;\n    onEditItem: (id: number) => void;\n    onDeleteItem: (id: number) => void;\n    onResetProgress: (id: number) => void;\n    onClickItem: (id: number) => void;\n    onSelect: (id: number) => void;\n    isEnabledSelecting: boolean;\n    isSelected: boolean\n}\n","import {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    TextField,\n} from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport {ChangeEvent, default as React, FC} from \"react\";\nimport {IFilter} from \"../../../../types/IFilter\";\nimport {ISortVariants} from \"../../../../types/ISortVariants\";\n\nexport const FilterComponent: FC<IFilterComponent> = (\n    {\n        onChangeSearchableText,\n        filter,\n        onChangeSorting\n    }\n) => {\n\n    const handleChangingSearchableText = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeSearchableText(event.target.value);\n    };\n\n    const handleChangingSortingVariant = (event: SelectChangeEvent<ISortVariants>) => {\n        onChangeSorting(event.target.value as ISortVariants)\n    }\n\n    return <Accordion>\n        <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n        >\n            <TextField\n                className=\"text-editor\"\n                required\n                id=\"outlined-required\"\n                placeholder=\"Search card\"\n                onChange={handleChangingSearchableText}\n                style={{\n                    marginRight: '20px',\n                }}\n                onClick={(event) => {\n                    event.stopPropagation()\n                    event.preventDefault()\n                }}\n            />\n        </AccordionSummary>\n        <AccordionDetails>\n            <Select\n                value={filter.sort}\n                label=\"Sorting\"\n                onChange={handleChangingSortingVariant}\n            >\n                <MenuItem value={ISortVariants.NONE}>{ISortVariants.NONE}</MenuItem>\n                <MenuItem value={ISortVariants.QUESTION_ASK}>{ISortVariants.QUESTION_ASK}</MenuItem>\n                <MenuItem value={ISortVariants.QUESTION_DESK}>{ISortVariants.QUESTION_DESK}</MenuItem>\n                <MenuItem value={ISortVariants.STATUS_ASK}>{ISortVariants.STATUS_ASK}</MenuItem>\n                <MenuItem value={ISortVariants.STATUS_DESK}>{ISortVariants.STATUS_DESK}</MenuItem>\n            </Select>\n        </AccordionDetails>\n    </Accordion>\n}\n\ninterface IFilterComponent {\n    onChangeSearchableText: (answer: string) => void;\n    onChangeSorting: (sortVariant: ISortVariants) => void;\n    filter: IFilter;\n}","import * as React from \"react\";\nimport {FC} from \"react\";\n\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Fab from \"@mui/material/Fab\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport SelectAllIcon from \"@mui/icons-material/SelectAll\";\nimport './CardsListActions.css'\n\nexport const CardsListActions: FC<ICardsListActions> = ({onOpenEditor}) => {\n\n    return <div className=\"cards-list-actions\">\n        <Fab size=\"medium\" color=\"secondary\" onClick={onOpenEditor}>\n            <SelectAllIcon/>\n        </Fab>\n        <Fab size=\"medium\" color=\"primary\" onClick={onOpenEditor}>\n            <PlayArrowIcon/>\n        </Fab>\n        <Fab size=\"medium\" color=\"secondary\" onClick={onOpenEditor}>\n            <AddIcon/>\n        </Fab>\n    </div>\n}\n\ninterface ICardsListActions {\n    onOpenEditor: () => void;\n}","import {FixedSizeList as List} from 'react-window';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {CardsListItemComponent} from './elements/cards-list-item/CardsListItemComponent';\nimport {ICard} from '../../types/ICard';\nimport './CardsListComponent.css'\nimport {FilterComponent} from \"./elements/filter/FilterComponent\";\nimport {ISortVariants} from \"../../types/ISortVariants\";\nimport {IFilter} from \"../../types/IFilter\";\nimport {CardsListActions} from \"./elements/cards-list-actions/CardsListActions\";\n\n\nexport const CardsListComponent: FC<ICardsListComponent> = (\n    {\n        cards,\n        filter,\n        onOpenEditor,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onChangeSearchableText,\n        onChangeSorting,\n        height,\n        width\n    }\n) => {\n    return (\n        <>\n            <FilterComponent\n                onChangeSearchableText={onChangeSearchableText}\n                onChangeSorting={onChangeSorting}\n                filter={filter}\n            />\n            <List\n                className=\"cards\"\n                itemData={cards}\n                itemSize={55}\n                itemCount={cards.length}\n                overscanCount={5}\n                height={55 * cards.length}\n                width={width}\n            >\n                {\n                    ({index, style}: any) => {\n                        const card = cards[index];\n                        return <div style={style}>\n                            <CardsListItemComponent\n                                key={card.id}\n                                card={card}\n                                onEditItem={onEditItem}\n                                onDeleteItem={onDeleteItem}\n                                onResetProgress={onResetProgress}\n                                onClickItem={onClickItem}\n                                onSelect={() => {\n                                }}\n                                isEnabledSelecting={false}\n                                isSelected={false}\n                            />\n                        </div>\n                    }\n                }\n            </List>\n            <CardsListActions onOpenEditor={onOpenEditor}/>\n        </>\n    )\n};\n\ninterface ICardsListComponent {\n    cards: ICard[];\n    onOpenEditor: () => void;\n    onEditItem: (id: number) => void;\n    onDeleteItem: (id: number) => void;\n    onResetProgress: (id: number) => void;\n    onClickItem: (id: number) => void;\n    onChangeSearchableText: (answer: string) => void;\n    height: number;\n    width: number\n    onChangeSorting: (sortVariant: ISortVariants) => void;\n    filter: IFilter\n}\n","import React, {FC, useContext, useState} from 'react';\n\nimport {ICard} from '../../types/ICard';\nimport {CardsListComponent} from './CardsListComponent';\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {CardsListService} from './CardsListService';\nimport {useHistory, useLocation} from 'react-router';\nimport {useConstructor} from '../../common/hooks/useConstructor';\nimport {INavigationState} from '../../types/INavigationState';\nimport {Routs} from '../../common/Routs';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {useUnsubscribe} from '../../common/hooks/useUnsubscribe';\nimport {IAppContext} from '../../types/IAppContext';\nimport {AppContext} from '../../../App';\nimport {IFilter} from \"../../types/IFilter\";\nimport {ISortVariants} from \"../../types/ISortVariants\";\n\nexport const CardsListContainer: FC<ICardsListContainer> = ({cardsListService, confirmDialogService}) => {\n\n    const location = useLocation<INavigationState>();\n\n    const history = useHistory();\n\n    const [state, setState] = useState<CardsListContainerState>(\n        {\n            cards: [],\n            filter: {\n                searchableText: '',\n                sort: ISortVariants.NONE\n            }\n        }\n    );\n\n    const context = useContext<IAppContext>(AppContext);\n\n    useChannel(cardsListService.cardsChannel, (cards: ICard[]) => {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                cards\n            }\n        });\n    });\n\n    useChannel(cardsListService.resetCardProgressChannel, (cards: ICardsGroup[]) => {\n        cardsListService.cardsChannel.next(\n            {\n                cardsGroupID: location.state.cardsGroupID,\n                filter: state.filter\n            }\n        )\n    });\n\n    useChannel(cardsListService.deleteCardChannel, (cards: ICardsGroup[]) => {\n        cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: state.filter\n        })\n    });\n\n    useConstructor(() => {\n        cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: state.filter\n        })\n    });\n\n    const onOpenEditor = () => {\n        history.push({\n            pathname: Routs.cardsEditor.path,\n            state: {\n                cardsGroupID: location.state.cardsGroupID\n            }\n        })\n    };\n\n    const onEditItem = (cardID: number) => {\n        history.push({\n            pathname: Routs.cardsEditor.path,\n            state: {\n                cardsGroupID: location.state.cardsGroupID,\n                cardID: cardID\n            }\n        })\n    };\n\n    const {setSubscription} = useUnsubscribe();\n\n    const onDeleteItem = (cardID: number) => {\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardsListService.deleteCardChannel.next({cardID, cardsGroupID: location.state.cardsGroupID});\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to remove this card?'\n        })\n    };\n\n    const onResetProgress = (cardID: number) => {\n        cardsListService.resetCardProgressChannel.next(\n            {\n                cardID,\n                cardsGroupID: location.state.cardsGroupID\n            }\n        )\n    };\n\n    const onClickItem = (cardID: number) => {\n        history.push({\n            pathname: Routs.cardViewer.path,\n            state: {\n                cardsGroupID: location.state.cardsGroupID,\n                cardID: cardID\n            }\n        })\n    };\n\n    const onChangeSearchableText = (searchableText: string) => {\n\n        const newFilter = {\n            ...state.filter,\n            searchableText: searchableText\n        }\n\n        setState({\n            ...state,\n            filter: newFilter\n        })\n\n        cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: newFilter\n        })\n    };\n\n    const onChangeSorting = (sortVariant: ISortVariants) => {\n\n        const newFilter = {\n            ...state.filter,\n            sort: sortVariant\n        }\n\n        setState({\n            ...state,\n            filter: newFilter\n        })\n\n        cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: newFilter\n        })\n    };\n\n    return <CardsListComponent\n        filter={state.filter}\n        onChangeSorting={onChangeSorting}\n        onChangeSearchableText={onChangeSearchableText}\n        cards={state.cards}\n        onOpenEditor={onOpenEditor}\n        onEditItem={onEditItem}\n        onDeleteItem={onDeleteItem}\n        onResetProgress={onResetProgress}\n        onClickItem={onClickItem}\n        width={context.width}\n        height={context.height}\n    />\n};\n\ninterface CardsListContainerState {\n    cards: ICard[];\n    filter: IFilter\n}\n\ninterface ICardsListContainer {\n    cardsListService: CardsListService;\n    confirmDialogService: ConfirmDialogService;\n}\n","import React, {FC} from 'react';\n\nimport {Button} from '@mui/material';\nimport {IStatistic} from '../../../../types/IStatistic';\n\nexport const StatisticComponent: FC<IRepeatingStatisticComponent> = ({statistic}) => {\n\n    return <div>\n        <Button size=\"small\">\n            <span style={{color: \"red\"}}>To Do: {statistic.todo}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"orange\"}}>In progress: {statistic.inProgress}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"green\"}}>Completed: {statistic.done}</span>\n        </Button>\n    </div>\n};\n\ninterface IRepeatingStatisticComponent {\n    statistic: IStatistic\n}\n","import React, {FC} from 'react';\nimport {Button, CardActions} from '@mui/material';\n\nimport {IRangeOfKnowledge} from '../../../types/IRangeOfKnowledge';\nimport {ICard} from '../../../types/ICard';\n\nexport const AnswerCardFooterComponent: FC<IAnswerCardFooterComponent> = ({card, onClick}) => {\n\n    return <>\n        {\n            card && card.rangeOfKnowledge !== IRangeOfKnowledge.DONE ?\n                <CardActions className=\"cards-repeater_buttons-container\" style={{height: 10}}>\n                    <Button size=\"small\" color=\"primary\" onClick={() => onClick(true)}>\n                        Yes\n                    </Button>\n                    <Button size=\"small\" color=\"primary\" onClick={() => onClick(false)}>\n                        No\n                    </Button>\n                </CardActions> :\n                <div>Repeated</div>\n        }\n    </>\n};\n\ninterface IAnswerCardFooterComponent {\n    onClick: (isUnderstandable: boolean) => void;\n    card: ICard | undefined;\n}\n","import {ChangeEvent, default as React, FC} from 'react';\nimport {TextField} from '@mui/material';\n\nimport './TextEditorComponent.css'\n\nexport const TextEditorComponent: FC<ITextEditorComponent> = ({onChangeText, changeableText, label}) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeText(event.target.value);\n    };\n\n    return <TextField\n        className=\"text-editor\"\n        required\n        id=\"outlined-required\"\n        label={label || \"\"}\n        multiline\n        onChange={onChange}\n        value={changeableText}\n        variant=\"filled\"\n    />\n};\n\ninterface ITextEditorComponent {\n    onChangeText: (answer: string) => void;\n    changeableText: string\n    label?: string\n}\n","import Typography from '@mui/material/Typography';\nimport React, {FC} from 'react';\nimport {List} from '@mui/material';\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\nimport {ICard} from '../../../types/ICard';\nimport {AnswerCardFooterComponent} from '../answer-card-footer/AnswerCardFooterComponent';\nimport {TextEditorComponent} from '../text-editor/TextEditorComponent';\n\nexport const AnswerCardComponent: FC<IAnswerCardComponent> = (\n    {\n        card,\n        cardHeight,\n        onClickText,\n        onClick,\n        isEditable,\n        onChangeAnswer\n    }\n) => {\n\n    const getText = () => {\n        return card ? card.answer : '';\n    };\n\n    return <Card className=\"cards-repeater\">\n        <CardContent style={{height: cardHeight}}>\n\n            {\n                isEditable ?\n                    <div\n                        style={{paddingTop: 0, height: cardHeight, overflow: 'auto', whiteSpace: 'pre-wrap'}}>\n                        <List style={{paddingTop: 0}}>\n                            <TextEditorComponent onChangeText={onChangeAnswer} changeableText={getText()}/>\n                        </List>\n                    </div>\n                    :\n                    <>\n                        <Typography color=\"textSecondary\" gutterBottom onClick={onClickText}\n                                    style={{\n                                        paddingTop: 0,\n                                        height: cardHeight,\n                                        overflow: 'auto',\n                                        whiteSpace: 'pre-wrap'\n                                    }}>\n                            <List style={{paddingTop: 0}}>\n                                {getText()}\n                            </List>\n                        </Typography>\n                        <AnswerCardFooterComponent onClick={onClick} card={card}/>\n                    </>\n            }\n        </CardContent>\n    </Card>\n};\n\ninterface IAnswerCardComponent {\n    card: ICard | undefined;\n    onClickText: () => void\n    cardHeight: number\n    onClick: (isUnderstandable: boolean) => void;\n    isEditable: boolean;\n    onChangeAnswer: (answer: string) => void;\n}\n","import React, {FC} from 'react';\nimport {IconButton} from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport {Check, Edit} from '@mui/icons-material';\n\nexport const CardsHeaderComponent: FC<ICardsRepeaterHeaderComponent> = (\n    {\n        isQuestionSide,\n        onSwitchEditing,\n        isEditable\n    }\n) => {\n    return <div className=\"cards-repeater_title\">\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {isQuestionSide ? 'Question' : 'Answer'}\n        </Typography>\n        <IconButton color=\"inherit\" onClick={onSwitchEditing}>\n            {isEditable ? <Check/> : <Edit/>}\n        </IconButton>\n    </div>\n};\n\ninterface ICardsRepeaterHeaderComponent {\n    isQuestionSide: boolean\n    onSwitchEditing: () => void;\n    isEditable: boolean\n}\n","import React, {FC} from 'react';\n\nimport {Button} from '@mui/material';\n\nexport const AllCardsRepeatedComponent: FC<IAllCardsRepeatedComponent> = ({onBackClick}) => {\n    return <>\n        <span>All cards repeated</span>\n        <Button size=\"small\" color=\"primary\" onClick={onBackClick}>\n            Go back\n        </Button>\n    </>\n};\n\ninterface IAllCardsRepeatedComponent {\n    onBackClick: () => void;\n}\n","import React, {FC} from 'react';\n\nimport {List} from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\nimport {ICard} from '../../../types/ICard';\nimport {TextEditorComponent} from '../text-editor/TextEditorComponent';\n\nexport const QuestionCardComponent: FC<IQuestionCard> = (\n    {\n        card,\n        onClickCard,\n        cardHeight,\n        isEditable,\n        onChangeQuestion\n    }\n) => {\n\n    const question = card ? card.question : '';\n\n    return <Card>\n        <CardContent onClick={onClickCard} style={{height: cardHeight}}>\n            {\n                isEditable ?\n                    <div style={{paddingTop: 0, height: cardHeight, overflow: 'auto', whiteSpace: 'pre-wrap'}}>\n                        <List style={{paddingTop: 0}}>\n                            <TextEditorComponent onChangeText={onChangeQuestion} changeableText={question}/>\n                        </List>\n                    </div> :\n                    <Typography color=\"textSecondary\" gutterBottom>\n                        {question}\n                    </Typography>\n            }\n        </CardContent>\n    </Card>\n};\n\ninterface IQuestionCard {\n    card: ICard | undefined;\n    onClickCard: () => void;\n    cardHeight: number;\n    isEditable: boolean;\n    onChangeQuestion: (question: string) => void;\n}\n","import React, {FC} from 'react';\n\nimport {ICard} from '../../types/ICard';\nimport {StatisticComponent} from './elements/statistic/StatisticComponent';\nimport {AnswerCardComponent} from '../../common/elements/answer-card/AnswerCardComponent';\nimport \"./CardsRepeaterComponent.css\"\nimport {IStatistic} from '../../types/IStatistic';\nimport {CardsHeaderComponent} from '../../common/elements/cards-header/CardsHeaderComponent';\nimport {AllCardsRepeatedComponent} from './elements/all-cards-repeated/AllCardsRepeatedComponent';\nimport {QuestionCardComponent} from '../../common/elements/question-card/QuestionCardComponent';\n\nexport const CardsRepeaterComponent: FC<ICardsRepeaterComponent> = (\n    {\n        card,\n        cardHeight,\n        isQuestionSide,\n        onClickCard,\n        onClick,\n        statistic,\n        onBackClick,\n        onSwitchEditing,\n        isEditable,\n        onChangeAnswer,\n        onChangeQuestion\n    }\n) => {\n\n    return card ?\n        <div className=\"cards-repeater\">\n            <StatisticComponent statistic={statistic}/>\n            <CardsHeaderComponent\n                isQuestionSide={isQuestionSide}\n                isEditable={isEditable}\n                onSwitchEditing={onSwitchEditing}\n            />\n            {\n                isQuestionSide ?\n                    <QuestionCardComponent\n                        card={card}\n                        onClickCard={onClickCard}\n                        cardHeight={cardHeight}\n                        isEditable={isEditable}\n                        onChangeQuestion={onChangeQuestion}\n                    /> :\n                    <AnswerCardComponent\n                        card={card}\n                        onClickText={onClickCard}\n                        cardHeight={cardHeight}\n                        onClick={onClick}\n                        onChangeAnswer={onChangeAnswer}\n                        isEditable={isEditable}\n                    />\n            }\n        </div> :\n        <AllCardsRepeatedComponent onBackClick={onBackClick}/>\n\n};\n\ninterface ICardsRepeaterComponent {\n    card: ICard | undefined;\n    onClick: (isUnderstandable: boolean) => void;\n    isQuestionSide: boolean;\n    onClickCard: () => void;\n    statistic: IStatistic;\n    cardHeight: number;\n    onBackClick: () => void;\n    onSwitchEditing: () => void;\n    isEditable: boolean;\n    onChangeQuestion: (question: string) => void;\n    onChangeAnswer: (answer: string) => void;\n}\n","import {IRangeOfKnowledge} from \"../../types/IRangeOfKnowledge\";\n\nexport const initDefaultCard = () => {\n    return {\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        answer: '',\n        question: '',\n        dateRepeating: 0,\n        id: new Date().getTime()\n    }\n}","import {useHistory, useLocation} from 'react-router';\nimport React, {FC, useContext, useState} from 'react';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {ICard} from '../../types/ICard';\nimport {useConstructor} from '../../common/hooks/useConstructor';\nimport {CardsRepeaterService} from './CardsRepeaterService';\nimport {CardsRepeaterComponent} from './CardsRepeaterComponent';\nimport {Routs} from '../../common/Routs';\nimport {IRepeatingArgs} from '../../types/IRepeatingArgs';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {IStatistic} from '../../types/IStatistic';\nimport {INavigationState} from '../../types/INavigationState';\nimport {AppContext} from '../../../App';\nimport {IAppContext} from '../../types/IAppContext';\nimport {CardsEditorService} from '../cards-editor/CardsEditorService';\nimport {initDefaultCard} from \"../../common/logic/initDefaultCard\";\n\nexport const CardRepeaterContainer: FC<ICardRepeaterContainer> = ({cardsRepeaterService, cardsEditorService}) => {\n\n    const location = useLocation<INavigationState>();\n\n    const history = useHistory();\n\n    const defaultStatisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    const [state, setState] = useState<CardRepeaterContainerState>({\n        card: undefined,\n        isQuestionSide: true,\n        isEditable: false\n    });\n\n    const [statistic, setStatistic] = useState<IStatistic>(defaultStatisticValue);\n\n    useChannel<number, ICard | undefined>(cardsRepeaterService.cardChannel, (card: ICard | undefined) => {\n        setState({\n            card: card,\n            isQuestionSide: true,\n            isEditable: false\n        });\n        cardsRepeaterService.statisticChannel.next('');\n    });\n\n    useChannel<{ card: ICard, cardsGroupID: number }, ICard>(cardsEditorService.cardEditingChannel, (card: ICard) => {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                card: card\n            }\n        });\n    });\n\n    useChannel<number, ICard | null>(cardsRepeaterService.currentCardChannel, (card: ICard | null) => {\n\n        if(card) {\n            setState({\n                card: card,\n                isQuestionSide: true,\n                isEditable: false\n            });\n        } else {\n            cardsRepeaterService.cardChannel.next(location.state ? location.state.cardsGroupID : -1);\n        }\n    });\n\n    useChannel<string, IStatistic>(cardsRepeaterService.statisticChannel, (statistic: IStatistic) => {\n        setStatistic(() => statistic)\n    });\n\n    useChannel<IRepeatingArgs, ICardsGroup[]>(cardsRepeaterService.repeatingResultChannel, () => {\n\n        cardsRepeaterService.cardChannel.next(location.state.cardsGroupID);\n    });\n\n    useConstructor(() => {\n        if (location.state) {\n            cardsRepeaterService.currentCardChannel.next(location.state.cardsGroupID);\n        } else {\n            cardsRepeaterService.currentCardChannel.next(null);\n        }\n        cardsRepeaterService.statisticChannel.next('');\n    });\n\n    const value = useContext<IAppContext>(AppContext);\n\n    const onClick = (isKnown: boolean) => {\n\n        if (state.card) {\n            cardsRepeaterService.repeatingResultChannel.next({\n                isKnown: isKnown,\n                cardID: state.card.id,\n                cardsGroupID: location.state.cardsGroupID\n            });\n        } else {\n            setState({\n                card: undefined,\n                isQuestionSide: false,\n                isEditable: false\n            });\n        }\n    };\n\n    const onClickCard = () => {\n        if (!state.isEditable) {\n            setState({\n                ...state,\n                isQuestionSide: !state.isQuestionSide\n            })\n        }\n    };\n\n    const onBackClick = () => {\n        history.replace(Routs.cardsGroups.path);\n    };\n\n    const onSwitchEditing = () => {\n        setState({\n            ...state,\n            isEditable: !state.isEditable\n        });\n\n        if (state.isEditable) {\n            cardsEditorService.cardEditingChannel.next({\n                card: state.card || initDefaultCard(),\n                cardsGroupID: location.state.cardsGroupID\n            })\n        }\n    };\n\n    const onChangeQuestion = (question: string) => {\n        if (state.card) {\n            const editableCard = {\n                ...state.card,\n                question\n            };\n\n            setState({...state, card: editableCard});\n        }\n    };\n\n    const onChangeAnswer = (answer: string) => {\n        if (state.card) {\n            const editableCard = {\n                ...state.card,\n                answer\n            };\n\n            setState({...state, card: editableCard});\n        }\n    };\n\n    return <CardsRepeaterComponent\n        cardHeight={value.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={onClickCard}\n        onClick={onClick}\n        card={state.card}\n        statistic={statistic}\n        onBackClick={onBackClick}\n        onSwitchEditing={onSwitchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={onChangeQuestion}\n        onChangeAnswer={onChangeAnswer}\n    />\n};\n\ninterface CardRepeaterContainerState {\n    card: ICard | undefined,\n    isQuestionSide: boolean,\n    isEditable: boolean,\n}\n\ninterface ICardRepeaterContainer {\n    cardsRepeaterService: CardsRepeaterService;\n    cardsEditorService: CardsEditorService;\n}\n","import * as React from 'react';\nimport {FC, useRef} from 'react';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {LocalBackupsService} from './LocalBackupsService';\nimport {Button} from '@mui/material';\nimport {useUnsubscribe} from '../../common/hooks/useUnsubscribe';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {SpinnerService} from '../../parts/spinner/SpinnerService';\n\nexport const LocalBackupsContainer: FC<ILocalBackupsContainer> = ({localBackupsService, confirmDialogService, spinnerService}) => {\n\n    const fileBuffer = useRef(null);\n\n    useChannel(\n        localBackupsService.localBackupChannel\n    );\n\n    useChannel(\n        localBackupsService.loadBackupChannel, () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n        }\n    );\n\n    const { setSubscription } = useUnsubscribe();\n\n    const handleFileSelect = (event: any) => {\n        const file = event.target.files[0];\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = (readerEvent: any) => {\n            const games: string = readerEvent.target.result;\n\n            const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n                if (isConfirm) {\n                    spinnerService.spinnerCounterChannel.next(1);\n                    localBackupsService.loadBackupChannel.next(games);\n                }\n\n                confirmDialogService.openDialogChannel.next({\n                    isOpen: false,\n                    message: ''\n                })\n            });\n\n            setSubscription(subscription);\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: true,\n                message: 'Do you want to load this backup, your current changes could be removed?'\n            });\n        };\n        reader.readAsText(file);\n    };\n\n    return <>\n        <input type=\"file\" onChange={handleFileSelect}/>\n        <a ref={fileBuffer}></a>\n        <Button size=\"small\" onClick={() => localBackupsService.localBackupChannel.next()}>\n            Save\n        </Button>\n    </>\n};\n\ninterface ILocalBackupsContainer {\n    localBackupsService: LocalBackupsService;\n    confirmDialogService: ConfirmDialogService;\n    spinnerService: SpinnerService;\n}\n","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {Button, TextField} from '@mui/material';\nimport './CardsGroupsEditorComponent.css'\n\nexport const CardsGroupsEditorComponent: FC<ICardsGroupsEditorComponent> = ({groupName, onChangeGroupName, onSaveGroup}) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeGroupName(event.target.value);\n    };\n\n    return <div className=\"group-editor\">\n        <TextField\n            className=\"group-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Group name\"\n            onChange={onChange}\n            value={groupName}\n            variant=\"filled\"\n        />\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveGroup()}>\n            Save\n        </Button>\n    </div>\n};\n\ninterface ICardsGroupsEditorComponent {\n    groupName: string;\n    onChangeGroupName: (groupName: string) => void;\n    onSaveGroup: () => void;\n}\n","import * as React from 'react';\nimport {FC, useState} from 'react';\nimport {useHistory, useLocation} from 'react-router';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {CardsGroupsEditorService} from './CardsGroupsEditorService';\nimport {CardsGroupsEditorComponent} from './CardsGroupsEditorComponent';\nimport {INavigationState} from '../../types/INavigationState';\nimport {useConstructor} from '../../common/hooks/useConstructor';\n\nexport const CardsGroupsEditorContainer: FC<ICardsGroupsEditorContainer> = ({cardsGroupsEditorService}) => {\n\n    const location = useLocation<INavigationState>();\n\n    const history = useHistory();\n\n    const [state, setState] = useState<CardsGroupsEditorState>({\n        cardsGroup: {\n            cards: [],\n            nameCardsGroup: '',\n            repeatingDate: new Date().getTime(),\n            id: new Date().getTime(),\n            percentRepeatedCards: 0\n        }\n    });\n\n    useChannel<ICardsGroup, ICardsGroup[]>(cardsGroupsEditorService.groupEditingChannel, () => {\n        history.goBack();\n    });\n\n    useChannel<number, ICardsGroup>(cardsGroupsEditorService.groupChannel, (cardsGroup: ICardsGroup) => {\n        setState({\n            cardsGroup\n        })\n    });\n\n    useConstructor(() => {\n        let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n        cardsGroupsEditorService.groupChannel.next(cardsGroupID);\n    });\n\n    const onChangeGroupName = (groupName: string) => {\n        setState({\n            cardsGroup: {\n                ...state.cardsGroup,\n                nameCardsGroup: groupName\n            }\n        })\n    };\n\n    const onSaveGroup = () => {\n        cardsGroupsEditorService.groupEditingChannel.next(state.cardsGroup);\n    };\n\n    return <CardsGroupsEditorComponent\n        groupName={state.cardsGroup.nameCardsGroup}\n        onChangeGroupName={onChangeGroupName}\n        onSaveGroup={onSaveGroup}\n    />\n};\n\ninterface CardsGroupsEditorState {\n    cardsGroup: ICardsGroup\n}\n\ninterface ICardsGroupsEditorContainer {\n    cardsGroupsEditorService: CardsGroupsEditorService\n}\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {Button, MenuItem, Select, SelectChangeEvent} from '@mui/material';\nimport './CardsEditorComponent.css'\nimport {ISimplifiedCardsGroup} from '../../types/ISimplifiedCardsGroup';\nimport {TextEditorComponent} from '../../common/elements/text-editor/TextEditorComponent';\n\nexport const CardsEditorComponent: FC<ICardsGroupsEditorComponent> = (\n    {\n        answer,\n        question,\n        onChangeAnswer,\n        onChangeQuestion,\n        onSaveCard,\n        cardsGroups,\n        currentCardsGroup,\n        onChangeCardsGroup\n    }\n) => {\n\n    const changeGroup = (event: SelectChangeEvent) => {\n        onChangeCardsGroup(Number(event.target.value));\n    };\n\n    return <div className=\"cards-editor\">\n        <TextEditorComponent onChangeText={onChangeQuestion} changeableText={question} label=\"Question\"/>\n        <TextEditorComponent onChangeText={onChangeAnswer} changeableText={answer} label=\"Answer\"/>\n        <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            className=\"cards-editor_text\"\n            value={currentCardsGroup.id.toString()}\n            label={currentCardsGroup.nameCardsGroup}\n            onChange={changeGroup}\n            autoWidth\n        >\n            {cardsGroups.map((cardsGroup: ISimplifiedCardsGroup) => (\n                <MenuItem\n                    key={cardsGroup.id}\n                    value={cardsGroup.id.toString()}\n                >\n                    {cardsGroup.nameCardsGroup}\n                </MenuItem>\n            ))}\n        </Select>\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveCard()}>\n            Save\n        </Button>\n    </div>\n};\n\ninterface ICardsGroupsEditorComponent {\n    answer: string;\n    question: string;\n    onChangeAnswer: (answer: string) => void;\n    onChangeQuestion: (question: string) => void;\n    onSaveCard: () => void;\n    currentCardsGroup: ISimplifiedCardsGroup;\n    cardsGroups: ISimplifiedCardsGroup[];\n    onChangeCardsGroup: (cardsGroupID: number) => void;\n}\n","import * as React from 'react';\nimport {FC, useState} from 'react';\nimport {useHistory, useLocation} from 'react-router';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {CardsEditorService} from './CardsEditorService';\nimport {CardsEditorComponent} from './CardsEditorComponent';\nimport {INavigationState} from '../../types/INavigationState';\nimport {useConstructor} from '../../common/hooks/useConstructor';\nimport {ICard} from '../../types/ICard';\nimport {ISimplifiedCardsGroup} from '../../types/ISimplifiedCardsGroup';\nimport {initDefaultCard} from \"../../common/logic/initDefaultCard\";\n\nexport const CardsEditorContainer: FC<ICardsGroupsEditorContainer> = ({cardsEditorService}) => {\n\n    const location = useLocation<INavigationState>();\n\n    const history = useHistory();\n\n    const [state, setState] = useState<CardsGroupsEditorState>({\n        card: initDefaultCard(),\n        currentCardsGroup: {\n            id: 0,\n            nameCardsGroup: ''\n        },\n        cardsGroups: []\n    });\n\n    useChannel<{ card: ICard, cardsGroupID: number }, ICard>(cardsEditorService.cardEditingChannel, () => {\n        history.goBack();\n    });\n\n    useChannel<number, { currentCardsGroup: ISimplifiedCardsGroup | undefined, cardsGroups: ISimplifiedCardsGroup[] }>(\n        cardsEditorService.simplifiedCardsGroupsChannel,\n        ({currentCardsGroup, cardsGroups}) => {\n            if (currentCardsGroup) {\n                setState((prevState) => { return  {\n                    ...prevState,\n                    cardsGroups,\n                    currentCardsGroup\n                }})\n            } else {\n                setState((newState) =>{ return  {\n                    ...newState,\n                    currentCardsGroup: state.currentCardsGroup,\n                    cardsGroups\n                }})\n            }\n        }\n    );\n\n    useChannel<{ cardID: number, cardsGroupID: number }, ICard | undefined>(cardsEditorService.cardChannel, (card: ICard | undefined) => {\n        if (card) {\n            setState({\n                ...state,\n                card\n            })\n        }\n    });\n\n    useConstructor(() => {\n        let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n        let cardID = location.state ? location.state.cardID : -1;\n        cardsEditorService.cardChannel.next({cardID, cardsGroupID});\n\n        cardsEditorService.simplifiedCardsGroupsChannel.next(cardsGroupID);\n    });\n\n    const onChangeQuestion = (question: string) => {\n        setState({\n            card: {\n                ...state.card,\n                question\n            },\n            currentCardsGroup: state.currentCardsGroup,\n            cardsGroups: state.cardsGroups\n        })\n    };\n\n    const onChangeAnswer = (answer: string) => {\n        setState({\n            card: {\n                ...state.card,\n                answer\n            },\n            currentCardsGroup: state.currentCardsGroup,\n            cardsGroups: state.cardsGroups\n        })\n    };\n\n    const onChangeCardsGroup = (cardsGroupID: number) => {\n        cardsEditorService.simplifiedCardsGroupsChannel.next(cardsGroupID);\n    };\n\n    const onSaveCard = () => {\n        cardsEditorService.cardEditingChannel.next({card: state.card, cardsGroupID: state.currentCardsGroup.id});\n    };\n\n    return <CardsEditorComponent\n        question={state.card.question}\n        answer={state.card.answer}\n        onChangeQuestion={onChangeQuestion}\n        onChangeAnswer={onChangeAnswer}\n        onSaveCard={onSaveCard}\n        currentCardsGroup={state.currentCardsGroup}\n        cardsGroups={state.cardsGroups}\n        onChangeCardsGroup={onChangeCardsGroup}\n    />\n};\n\ninterface CardsGroupsEditorState {\n    card: ICard;\n    currentCardsGroup: ISimplifiedCardsGroup;\n    cardsGroups: ISimplifiedCardsGroup[];\n}\n\ninterface ICardsGroupsEditorContainer {\n    cardsEditorService: CardsEditorService\n}\n","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport './SettingsComponent.css'\nimport {ISettings} from '../../types/ISettings';\nimport {FormControlLabel, FormGroup, Switch} from '@mui/material';\n\nexport const SettingsComponent: FC<ISettingsComponent> = ({settings, onChange}) => {\n\n    const onChangeAlgorithm = (event: ChangeEvent<HTMLInputElement>) => {\n         onChange({...settings, isRandomRepeating: event.target.checked})\n    };\n\n    return <FormGroup className=\"settings-form\">\n        <FormControlLabel\n            control={\n                <Switch\n                    checked={settings.isRandomRepeating}\n                    onChange={onChangeAlgorithm}\n                />\n            }\n            label=\"Random repeating algorithm\"\n        />\n    </FormGroup>\n};\n\ninterface ISettingsComponent {\n    settings: ISettings\n    onChange: (settings: ISettings) => void\n}\n","import * as React from 'react';\nimport {FC, useState} from 'react';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {SettingsService} from './SettingsService';\nimport {SettingsComponent} from './SettingsComponent';\nimport {useConstructor} from '../../common/hooks/useConstructor';\nimport {ISettings} from '../../types/ISettings';\n\nexport const SettingsContainer: FC<ISettingsContainer> = ({settingsService}) => {\n\n    const [state, setState] = useState<ISettings>({\n        isRandomRepeating: false\n    });\n\n    useChannel<ISettings, ISettings>(\n        settingsService.changeSettingsChannel,\n        () => {\n            settingsService.settingsChannel.next('');\n        }\n    );\n\n    useChannel<string, ISettings>(\n        settingsService.settingsChannel,\n        (settings: ISettings) => {\n            setState((prevState) => {\n                return {...prevState, ...settings}\n            });\n        }\n    );\n\n    useConstructor(() => {\n        settingsService.settingsChannel.next('');\n    });\n\n    const onChangeSettings = (settings: ISettings) => {\n        settingsService.changeSettingsChannel.next(settings)\n    };\n\n    return <SettingsComponent settings={state} onChange={onChangeSettings}/>\n};\n\ninterface ISettingsContainer {\n    settingsService: SettingsService\n}\n","import React, {FC} from \"react\";\n\nimport {\n    CardsHeaderComponent\n} from \"../../common/elements/cards-header/CardsHeaderComponent\";\nimport {QuestionCardComponent} from \"../../common/elements/question-card/QuestionCardComponent\";\nimport {AnswerCardComponent} from \"../../common/elements/answer-card/AnswerCardComponent\";\nimport {ICard} from \"../../types/ICard\";\n\nexport const CardViewerComponent: FC<ICardViewerComponent> = (\n    {\n        card,\n        cardHeight,\n        isQuestionSide,\n        onClickCard,\n        onClick,\n        onSwitchEditing,\n        isEditable,\n        onChangeAnswer,\n        onChangeQuestion\n    }\n) => {\n\n    return <div className=\"cards-repeater\">\n        <CardsHeaderComponent\n            isQuestionSide={isQuestionSide}\n            isEditable={isEditable}\n            onSwitchEditing={onSwitchEditing}\n        />\n        {\n            isQuestionSide ?\n                <QuestionCardComponent\n                    card={card}\n                    onClickCard={onClickCard}\n                    cardHeight={cardHeight}\n                    isEditable={isEditable}\n                    onChangeQuestion={onChangeQuestion}\n                /> :\n                <AnswerCardComponent\n                    card={card}\n                    onClickText={onClickCard}\n                    cardHeight={cardHeight}\n                    onClick={onClick}\n                    onChangeAnswer={onChangeAnswer}\n                    isEditable={isEditable}\n                />\n        }\n    </div>\n};\n\ninterface ICardViewerComponent {\n    card: ICard | undefined;\n    onClick: (isUnderstandable: boolean) => void;\n    isQuestionSide: boolean;\n    onClickCard: () => void;\n    cardHeight: number;\n    onBackClick: () => void;\n    onSwitchEditing: () => void;\n    isEditable: boolean;\n    onChangeQuestion: (question: string) => void;\n    onChangeAnswer: (answer: string) => void;\n}","import React, {FC, useContext, useState} from \"react\";\n\nimport {CardViewerService} from \"./CardViewerService\";\nimport {ICard} from \"../../types/ICard\";\nimport {useHistory, useLocation} from \"react-router\";\nimport {INavigationState} from \"../../types/INavigationState\";\nimport {useChannel} from \"../../common/hooks/useChannel\";\nimport {IRepeatingArgs} from \"../../types/IRepeatingArgs\";\nimport {ICardsGroup} from \"../../types/ICardsGroup\";\nimport {IAppContext} from \"../../types/IAppContext\";\nimport {AppContext} from \"../../../App\";\nimport {Routs} from \"../../common/Routs\";\nimport {CardsEditorService} from \"../cards-editor/CardsEditorService\";\nimport {CardViewerComponent} from \"./CardViewerComponent\";\nimport {useConstructor} from \"../../common/hooks/useConstructor\";\nimport {initDefaultCard} from \"../../common/logic/initDefaultCard\";\n\nexport const CardViewerContainer: FC<ICardViewerContainer> = (\n    {\n        cardViewerService,\n        cardsEditorService\n    }\n) => {\n\n    const location = useLocation<INavigationState>();\n\n    const history = useHistory();\n\n    const [state, setState] = useState<CardViewerContainerState>({\n        card: undefined,\n        isQuestionSide: true,\n        isEditable: false\n    });\n\n    useChannel<number, ICard | undefined>(cardViewerService.cardChannel, (card: ICard | undefined) => {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                card: card\n            }\n        });\n    });\n\n    useChannel<{ card: ICard, cardsGroupID: number }, ICard>(cardsEditorService.cardEditingChannel, (card: ICard) => {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                card: card\n            }\n        });\n    });\n\n    useChannel<IRepeatingArgs, ICardsGroup[]>(cardViewerService.repeatingResultChannel, () => {\n        cardViewerService.cardChannel.next(location.state.cardID);\n    });\n\n    useConstructor(() => {\n        cardViewerService.cardChannel.next(location.state.cardID);\n    })\n\n    const value = useContext<IAppContext>(AppContext);\n\n    const onClick = (isKnown: boolean) => {\n\n        if (state.card) {\n            cardViewerService.repeatingResultChannel.next({\n                isKnown: isKnown,\n                cardID: state.card.id,\n                cardsGroupID: location.state.cardsGroupID\n            });\n        } else {\n            setState({\n                card: undefined,\n                isQuestionSide: false,\n                isEditable: false\n            });\n        }\n    };\n\n    const onClickCard = () => {\n        if (!state.isEditable) {\n            setState({\n                ...state,\n                isQuestionSide: !state.isQuestionSide\n            })\n        }\n    };\n\n    const onBackClick = () => {\n        history.replace(Routs.cardsGroups.path);\n    };\n\n    const onSwitchEditing = () => {\n        setState({\n            ...state,\n            isEditable: !state.isEditable\n        });\n\n        if (state.isEditable) {\n            cardsEditorService.cardEditingChannel.next({\n                card: state.card || initDefaultCard(),\n                cardsGroupID: location.state.cardsGroupID\n            })\n        }\n    };\n\n    const onChangeQuestion = (question: string) => {\n        if (state.card) {\n            const editableCard = {\n                ...state.card,\n                question\n            };\n\n            setState({...state, card: editableCard});\n        }\n    };\n\n    const onChangeAnswer = (answer: string) => {\n        if (state.card) {\n            const editableCard = {\n                ...state.card,\n                answer\n            };\n\n            setState({...state, card: editableCard});\n        }\n    };\n\n    return <CardViewerComponent\n        cardHeight={value.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={onClickCard}\n        onClick={onClick}\n        card={state.card}\n        onBackClick={onBackClick}\n        onSwitchEditing={onSwitchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={onChangeQuestion}\n        onChangeAnswer={onChangeAnswer}\n    />\n}\n\ninterface ICardViewerContainer {\n    cardViewerService: CardViewerService;\n    cardsEditorService: CardsEditorService;\n}\n\ninterface CardViewerContainerState {\n    card: ICard | undefined,\n    isQuestionSide: boolean,\n    isEditable: boolean,\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {Redirect, Route, Switch} from 'react-router';\n\nimport {Routs} from '../../common/Routs';\nimport {CardsGroupsListContainer} from '../../pages/cards-groups-list/CardsGroupsListContainer';\nimport {GoogleAuthContainer} from '../../pages/google-auth/GoogleAuthContainer';\nimport {GoogleBackupsContainer} from '../../pages/google-backups/GoogleBackupsContainer';\nimport {CardsListContainer} from '../../pages/cards-list/CardsListContainer';\nimport {CardRepeaterContainer} from '../../pages/cards-repeater/CardsRepeaterContainer';\nimport {LocalBackupsContainer} from '../../pages/local-backup/LocalBackupsContainer';\nimport {CardsGroupsEditorContainer} from '../../pages/cards-groups-editor/CardsGroupsEditorContainer';\nimport {CardsGroupsListService} from '../../pages/cards-groups-list/CardsGroupsListService';\nimport {CardsGroupsEditorService} from '../../pages/cards-groups-editor/CardsGroupsEditorService';\nimport {ErrorService} from '../error-container/ErrorService';\nimport {GoogleAuthService} from '../../pages/google-auth/GoogleAuthService';\nimport {GoogleBackupsService} from '../../pages/google-backups/GoogleBackupsService';\nimport {SpinnerService} from '../spinner/SpinnerService';\nimport {ConfirmDialogService} from '../confirm-dialog/ConfirmDialogService';\nimport {CardsEditorContainer} from '../../pages/cards-editor/CardsEditorContainer';\nimport {CardsEditorService} from '../../pages/cards-editor/CardsEditorService';\nimport {CardsListService} from '../../pages/cards-list/CardsListService';\nimport {CardsRepeaterService} from '../../pages/cards-repeater/CardsRepeaterService';\nimport {LocalBackupsService} from '../../pages/local-backup/LocalBackupsService';\nimport {SettingsContainer} from '../../pages/settings/SettingsContainer';\nimport {SettingsService} from '../../pages/settings/SettingsService';\nimport {CardViewerContainer} from \"../../pages/card-viewer/CardViewerContainer\";\nimport {CardViewerService} from \"../../pages/card-viewer/CardViewerService\";\n\n\nexport const NavigationContainer: FC<INavigationContainer> = (\n    {\n        cardsGroupsListService,\n        cardsGroupsEditorService,\n        errorService,\n        googleAuthService,\n        googleBackupsService,\n        spinnerService,\n        confirmDialogService,\n        cardsEditorService,\n        cardsListService,\n        cardsRepeaterService,\n        settingsService,\n        localBackupsService,\n        cardViewerService\n    }\n) => {\n\n    return <Switch>\n        <Redirect exact from=\"/MyCardsWeb\" to={Routs.cardsGroups.path}/>\n        <Redirect exact from=\"/\" to={Routs.cardsGroups.path}/>\n        <Route path={Routs.cardsGroups.path}>\n            <CardsGroupsListContainer cardsGroupsListService={cardsGroupsListService}\n                                      confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.googleAuth.path}>\n            <GoogleAuthContainer googleAuthService={googleAuthService} errorService={errorService}/>\n        </Route>\n        <Route path={Routs.googleBackups.path}>\n            <GoogleBackupsContainer googleBackupsService={googleBackupsService} spinnerService={spinnerService}\n                                    confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.cards.path}>\n            <CardsListContainer cardsListService={cardsListService} confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.cardsRepeater.path}>\n            <CardRepeaterContainer cardsRepeaterService={cardsRepeaterService} cardsEditorService={cardsEditorService}/>\n        </Route>\n        <Route path={Routs.localBackups.path}>\n            <LocalBackupsContainer localBackupsService={localBackupsService} confirmDialogService={confirmDialogService}\n                                   spinnerService={spinnerService}/>\n        </Route>\n        <Route path={Routs.cardsGroupEditor.path}>\n            <CardsGroupsEditorContainer cardsGroupsEditorService={cardsGroupsEditorService}/>\n        </Route>\n        <Route path={Routs.cardsEditor.path}>\n            <CardsEditorContainer cardsEditorService={cardsEditorService}/>\n        </Route>\n        <Route path={Routs.settings.path}>\n            <SettingsContainer settingsService={settingsService}/>\n        </Route>\n        <Route path={Routs.cardViewer.path}>\n            <CardViewerContainer\n                cardViewerService={cardViewerService}\n                cardsEditorService={cardsEditorService}\n            />\n        </Route>\n    </Switch>\n};\n\ninterface INavigationContainer {\n    cardsGroupsListService: CardsGroupsListService;\n    cardsGroupsEditorService: CardsGroupsEditorService;\n    errorService: ErrorService;\n    googleAuthService: GoogleAuthService;\n    googleBackupsService: GoogleBackupsService;\n    spinnerService: SpinnerService;\n    confirmDialogService: ConfirmDialogService;\n    cardsEditorService: CardsEditorService;\n    cardsListService: CardsListService;\n    cardsRepeaterService: CardsRepeaterService;\n    localBackupsService: LocalBackupsService;\n    settingsService: SettingsService;\n    cardViewerService: CardViewerService;\n}\n","import {Observable, of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\nimport {ajax, AjaxResponse} from 'rxjs/ajax';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {IGoogleDriveFile} from '../../types/IGoogleDriveFile';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {Channel} from '../../common/Channel';\nimport {formatCreatedDate} from './logic/formatCreatedDate';\n\nexport class GoogleBackupsService {\n\n    public backupsNameLoadChannel: Channel<string, IGoogleDriveFile[]>;\n    public backupLoadChannel: Channel<string, ICardsGroup[]>;\n    public backupUploadChannel: Channel<void, string>;\n    public backupDeleteChannel: Channel<string, AjaxResponse<string>>;\n\n    private backupFileName = 'my-cards.json';\n    private backupFolderName = 'my-cards';\n    private googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    private googleDriveUploadAPI = \"https://www.googleapis.com/upload/drive/v3/files/\";\n    private searchFilesURI = this.googleDriveFilesAPI + '?fields=files(id,createdTime)&q=name%20contains%20';\n    private searchFolderURI = this.googleDriveFilesAPI + '?q=name%20contains%20';\n    private getFilesAdditionalPartURI = '?alt=media';\n    private googleDriveFolderType = 'application/vnd.google-apps.folder';\n\n    constructor(private storageService: StorageService) {\n\n        this.backupsNameLoadChannel = new Channel(() => of('').pipe(\n            switchMap(() => storageService.getAuthToken()),\n            switchMap(\n                (authToken: string): Observable<IGoogleDriveFile[]> => this.getBackupFiles(authToken)\n            ),\n            map((googleDriveFiles: IGoogleDriveFile[]) => formatCreatedDate(googleDriveFiles))\n        ));\n\n        this.backupLoadChannel = new Channel((backupID: string) => of('').pipe(\n            switchMap((): Observable<ICardsGroup[]> => this.loadBackupFile(backupID))\n        ));\n\n        this.backupUploadChannel = new Channel(() => of('').pipe(\n            switchMap(() => storageService.getAuthToken()),\n            switchMap((authToken: string) => this.createNewBackup(authToken))\n        ));\n\n        this.backupDeleteChannel = new Channel((fileID: string) => of(\"\").pipe(\n            switchMap(() => this.deleteBackupFile(fileID)),\n            tap(() => {\n                this.backupsNameLoadChannel.next('')\n            })\n        ));\n    }\n\n    public createNewBackup(authToken: string): Observable<string> {\n        return this.getBackupFolder(authToken)\n            .pipe(\n                switchMap((folders: IGoogleDriveFile[]) => {\n                    if (folders) {\n                        let foundedFolder = folders.find((file) => {\n                            return file.mimeType === this.googleDriveFolderType\n                        });\n                        if (foundedFolder) {\n                            return of(foundedFolder.id);\n                        } else {\n                            return this.createBackupFolder(authToken);\n                        }\n                    } else {\n                        return this.createBackupFolder(authToken);\n                    }\n                }),\n                switchMap((folderId: string) => {\n                    return this.createNewBackupFile(\n                        authToken,\n                        folderId\n                    );\n                }),\n                switchMap((fileId: string) => {\n                    return this.uploadBackupFile(\n                        authToken,\n                        fileId\n                    )\n                }),\n                tap(() => {\n                    this.backupsNameLoadChannel.next('');\n                })\n            );\n    }\n\n    public getBackupFiles(token: string): Observable<IGoogleDriveFile[]> {\n        return ajax<{files: IGoogleDriveFile[]}>(\n            {\n                url: `${this.searchFilesURI}'${this.backupFileName}'`,\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                },\n                method: 'GET'\n            }\n        ).pipe(\n            map((result: AjaxResponse<{files: IGoogleDriveFile[]}>) => {\n                return result.response.files;\n            })\n        );\n    }\n\n    public loadBackupFile(fileId: string): Observable<ICardsGroup[]> {\n        return this.storageService.getAuthToken().pipe(\n            switchMap((authToken: string) => ajax<ICardsGroup[]>(\n                {\n                    url: this.googleDriveFilesAPI + fileId + this.getFilesAdditionalPartURI,\n                    headers: {\n                        \"Authorization\": \"Bearer \" + authToken\n                    },\n                    method: \"GET\"\n                }\n            )),\n            map((result: AjaxResponse<ICardsGroup[]>) => {\n                this.storageService.setBackup(result.response);\n                return result.response;\n            })\n        );\n    }\n\n\n    public getBackupFolder(token: string): Observable<IGoogleDriveFile[]> {\n        return ajax<{files:IGoogleDriveFile[]}>(\n            {\n                url: `${this.searchFolderURI}'${this.backupFolderName}'`,\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                },\n                method: 'GET'\n            }\n        ).pipe(\n            map((result: AjaxResponse<{files:IGoogleDriveFile[]}>) => {\n                return result.response.files;\n            })\n        );\n    }\n\n    public deleteBackupFile(fileId: string): Observable<AjaxResponse<string>> {\n        return this.storageService.getAuthToken().pipe(\n            switchMap((authToken: string) => ajax<string>(\n                {\n                    url: this.googleDriveFilesAPI + fileId,\n                    headers: {\n                        'Authorization': 'Bearer ' + authToken,\n                        'Content-Type': 'application/json'\n                    },\n                    method: 'DELETE'\n                }\n            ))\n        );\n    }\n\n    public createNewBackupFile(token: string, id: string): Observable<string> {\n        return ajax<{id:string}>(\n            {\n                url: this.googleDriveFilesAPI,\n                headers: {\n                    'Authorization': 'Bearer ' + token,\n                    'Content-Type': 'application/json'\n                },\n                body: {\n                    parents: [id],\n                    name: this.backupFileName\n                },\n                method: 'POST'\n            }\n        ).pipe(\n            map((result: AjaxResponse<{id:string}>) => {\n                return result.response.id;\n            })\n        );\n    }\n\n    public createBackupFolder(token: string): Observable<string> {\n        return ajax<{id:string}>(\n            {\n                url: this.googleDriveFilesAPI,\n                headers: {\n                    'Authorization': 'Bearer ' + token,\n                    'Content-Type': 'application/json'\n                },\n                body: {\n                    name: this.backupFolderName,\n                    mimeType: 'application/vnd.google-apps.folder'\n                },\n                method: 'POST'\n            }\n        ).pipe(\n            map((result: AjaxResponse<{id:string}>) => {\n                return result.response.id;\n            })\n        );\n    }\n\n    public uploadBackupFile(token: string, fileId: string): Observable<string> {\n        return this.storageService.getBackup().pipe(\n            switchMap((cardsGroups: ICardsGroup[]) => ajax(\n                {\n                    url: this.googleDriveUploadAPI + fileId,\n                    headers: {\n                        'Authorization': 'Bearer ' + token\n                    },\n                    body: JSON.stringify(cardsGroups, null, 4),\n                    responseType: 'text',\n                    method: 'PATCH'\n                }\n            ).pipe(\n                map(() => {\n                    return fileId;\n                })\n            ))\n        )\n    }\n\n}\n","import {IGoogleDriveFile} from '../../../types/IGoogleDriveFile';\n\nexport const formatCreatedDate = (googleDriveFiles: IGoogleDriveFile[]) => {\n    return googleDriveFiles.map((googleDriveFile: IGoogleDriveFile) => {\n        return {...googleDriveFile, createdTime: googleDriveFile.createdTime.slice(0, 10)};\n    });\n};\n","import {from, Observable} from 'rxjs';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {DataBaseService} from './DataBaseService';\nimport {ISettings} from '../../types/ISettings';\n\nexport class StorageService {\n\n    private cardsStorageID = 'cards-local-storage';\n    private authTokenLocalStorageID = 'auth-token';\n    private settingsID = 'settings';\n\n    constructor(private dataBaseService: DataBaseService) {\n    }\n\n    public getBackup = () : Observable<ICardsGroup[]> => {\n        return from(this.getBackupFromDataBase());\n    };\n\n    private getBackupFromDataBase = async () => {\n        let backup = null;\n\n        try {\n            backup = await this.dataBaseService.get<ICardsGroup[]>(this.cardsStorageID);\n        } catch (e) {\n            console.error(e);\n            return backup;\n        }\n        if(backup) {\n            return backup;\n        } else {\n            return [];\n        }\n    };\n\n    public setBackup(cardsGroups: ICardsGroup[]): Observable<ICardsGroup[]> {\n        return from(this.setBackupToDataBase(cardsGroups));\n    }\n\n    private setBackupToDataBase = async (cardsGroups: ICardsGroup[]) => {\n        try {\n            await this.dataBaseService.set(this.cardsStorageID, cardsGroups);\n        } catch (e) {\n            console.error(e);\n        }\n        return cardsGroups;\n    };\n\n    public getAuthToken(): Observable<string> {\n        return from(new Promise<string>((resolve, reject) => {\n            const authToken = localStorage.getItem(this.authTokenLocalStorageID);\n            if(authToken) {\n                resolve(authToken);\n            } else {\n                reject('Auth token is empty')\n            }\n        }));\n    }\n\n    public setAuthToken(authToken: string): Observable<string> {\n        return from(new Promise<string>((resolve) => {\n            localStorage.setItem(this.authTokenLocalStorageID, authToken);\n            resolve(authToken);\n        }));\n    }\n\n    public getSettings(): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve, reject) => {\n            const settings = localStorage.getItem(this.settingsID);\n            if(settings) {\n                resolve(JSON.parse(settings) as ISettings);\n            } else {\n                reject({\n                    isRandomRepeating: false\n                })\n            }\n        }));\n    }\n\n    public setSettings(settings: ISettings): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve) => {\n            localStorage.setItem(this.settingsID, JSON.stringify(settings));\n            resolve(settings);\n        }));\n    }\n}\n","import {ICardsGroup} from '../../../types/ICardsGroup';\nimport {ICard} from '../../../types/ICard';\n\nexport const getCardsByGroupID = (cardsGroups: ICardsGroup[], cardsGroupID: number | null) => {\n\n    const foundCardsGroup = cardsGroups.find((cardsGroup: ICardsGroup) => {\n        return !cardsGroupID || cardsGroup.id === cardsGroupID;\n    });\n\n    let foundCards: Array<ICard> = [];\n\n    if (foundCardsGroup) {\n        foundCards = foundCardsGroup.cards;\n    }\n\n    return foundCards;\n};\n","import {IRepeatingArgs} from '../../types/IRepeatingArgs';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {ICard} from '../../types/ICard';\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\n\nexport const changeRangeOfKnowledge = (args: IRepeatingArgs, cardsGroups: ICardsGroup[]) => {\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (!args.cardID || card.id === args.cardID) {\n                    if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (!args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n                    }\n                }\n            });\n        }\n    });\n\n\n    return cardsGroups;\n};\n","import {ICard} from '../../../types/ICard';\nimport {IRangeOfKnowledge} from '../../../types/IRangeOfKnowledge';\n\nexport const getCardForRepeating = (cards: ICard[], isRandomRepeating: boolean) => {\n\n    let foundCard\n\n    if(!isRandomRepeating) {\n        foundCard = cards.find((card: ICard) => {\n            return card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO;\n        });\n\n        if (!foundCard) {\n            foundCard = cards.find((card: ICard) => {\n                return card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS;\n            });\n        }\n\n        if (cards.length === 1) {\n            foundCard = cards[0]\n        }\n    } else {\n        const cardsWithoutDone = cards.filter((card: ICard) => {\n            return card.rangeOfKnowledge !== IRangeOfKnowledge.DONE\n        })\n        foundCard = cardsWithoutDone[0];\n    }\n\n    return foundCard\n};\n","import {ICard} from '../../../types/ICard';\nimport {IRangeOfKnowledge} from '../../../types/IRangeOfKnowledge';\nimport {IStatistic} from '../../../types/IStatistic';\n\nexport const getStatistic = (cards: ICard[]): IStatistic => {\n\n    const statisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    cards.forEach((card: ICard) => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            statisticValue.inProgress = statisticValue.inProgress + 1\n        } else if (card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n            statisticValue.todo = statisticValue.todo + 1\n        } else {\n            statisticValue.done = statisticValue.done + 1\n        }\n    });\n\n    return statisticValue;\n};\n","import {ICard} from '../../../types/ICard';\n\nexport const shuffleCards = (array: ICard[]) => {\n    const copy = [];\n    let length = array.length;\n    let randomIndex;\n\n    while (length) {\n        randomIndex = Math.floor(Math.random() * array.length);\n        if (randomIndex in array) {\n            copy.push(array[randomIndex]);\n            delete array[randomIndex];\n            length--;\n        }\n    }\n\n    return copy;\n};\n","import {ICard} from '../../../types/ICard';\n\nexport const getFirstCard = (cards: ICard[]): ICard | null => {\n    if (cards.length === 1) {\n        return cards[0];\n    } else {\n        return null;\n    }\n};\n","import {ICardsGroup} from \"../../../types/ICardsGroup\";\nimport {ICard} from \"../../../types/ICard\";\n\nexport const getCardForViewing = (cardsGroups: ICardsGroup[], cardID: number): ICard | undefined => {\n    let card;\n\n    for (let i = 0; i < cardsGroups.length; i++) {\n        const index = cardsGroups[i].cards.findIndex((card: ICard) => {\n            return card.id === cardID\n        })\n\n        if (index > -1) {\n            card = cardsGroups[i].cards[index];\n            return card;\n        }\n    }\n\n    return card;\n}","import React, {useEffect, useState} from 'react';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport './App.css';\nimport {IAppContext} from './app/types/IAppContext';\nimport {ToolbarContainer} from './app/parts/toolbar/ToolbarContainer';\nimport {NavigationPanelContainer} from './app/parts/navigation-panel/NavigationPanelContainer';\nimport {ErrorContainer} from './app/parts/error-container/ErrorContainer';\nimport {SpinnerContainer} from './app/parts/spinner/SpinnerContainer';\nimport {defaultAppState, STORE_NAME} from './app/common/Constants';\nimport {ConfirmDialogContainer} from './app/parts/confirm-dialog/ConfirmDialogContainer';\nimport {SpinnerService} from './app/parts/spinner/SpinnerService';\nimport {ErrorService} from './app/parts/error-container/ErrorService';\nimport {NavigationContainer} from './app/parts/navigation/NavigationContainer';\nimport {CardsGroupsEditorService} from './app/pages/cards-groups-editor/CardsGroupsEditorService';\nimport {CardsGroupsListService} from './app/pages/cards-groups-list/CardsGroupsListService';\nimport {ConfirmDialogService} from './app/parts/confirm-dialog/ConfirmDialogService';\nimport {GoogleAuthService} from './app/pages/google-auth/GoogleAuthService';\nimport {GoogleBackupsService} from './app/pages/google-backups/GoogleBackupsService';\nimport {CardsEditorService} from './app/pages/cards-editor/CardsEditorService';\nimport {StorageService} from './app/common/services/StorageService';\nimport {CardsListService} from './app/pages/cards-list/CardsListService';\nimport {CardsRepeaterService} from './app/pages/cards-repeater/CardsRepeaterService';\nimport {LocalBackupsService} from './app/pages/local-backup/LocalBackupsService';\nimport {DataBaseService} from './app/common/services/DataBaseService';\nimport {SettingsService} from './app/pages/settings/SettingsService';\nimport {CardViewerService} from \"./app/pages/card-viewer/CardViewerService\";\n\nexport const AppContext = React.createContext<IAppContext>(defaultAppState);\n\nconst errorService = new ErrorService();\nconst spinnerService = new SpinnerService();\n\nconst confirmDialogService= new ConfirmDialogService();\n\nconst dataBaseService = new DataBaseService(STORE_NAME);\nconst storageService = new StorageService(dataBaseService);\nconst cardsGroupsEditorService = new CardsGroupsEditorService(storageService);\nconst cardsGroupsListService = new CardsGroupsListService(storageService);\nconst googleAuthService = new GoogleAuthService(storageService);\nconst googleBackupsService = new GoogleBackupsService(storageService);\nconst cardsEditorService = new CardsEditorService(storageService);\nconst cardsListService = new CardsListService(storageService);\nconst cardsRepeaterService = new CardsRepeaterService(storageService);\nconst localBackupsService = new  LocalBackupsService(storageService);\nconst settingService = new SettingsService(storageService);\nconst cardViewerService = new CardViewerService(storageService);\n\nfunction App() {\n\n    const [appState, setAppState] = useState<IAppContext>(defaultAppState);\n\n    useEffect(() => {\n        const height = window.screen.height;\n        const width = window.screen.width;\n        if (appState.height !== height || appState.width !== width) {\n            setAppState({...appState, height: height, width: width});\n        }\n    });\n\n    return (\n        <>\n            <AppContext.Provider value={appState}>\n                <Router>\n                    <div>\n\n                        <ErrorContainer errorService={errorService}/>\n\n                        <ToolbarContainer/>\n\n                        <NavigationPanelContainer/>\n\n                        <ConfirmDialogContainer confirmDialogService={confirmDialogService}/>\n\n                        <div className=\"page-container\" style={{height: appState.height - 110, width: appState.width}}>\n                            <SpinnerContainer spinnerService={spinnerService}/>\n                            <NavigationContainer\n                                cardsGroupsListService={cardsGroupsListService}\n                                cardsGroupsEditorService={cardsGroupsEditorService}\n                                googleAuthService={googleAuthService}\n                                googleBackupsService={googleBackupsService}\n                                errorService={errorService}\n                                spinnerService={spinnerService}\n                                confirmDialogService={confirmDialogService}\n                                cardsEditorService={cardsEditorService}\n                                cardsListService={cardsListService}\n                                cardsRepeaterService={cardsRepeaterService}\n                                localBackupsService={localBackupsService}\n                                settingsService={settingService}\n                                cardViewerService={cardViewerService}\n                            />\n                        </div>\n                    </div>\n                </Router>\n            </AppContext.Provider>\n        </>\n    );\n}\n\nexport default App;\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../common/Channel';\n\nexport class ErrorService {\n    public errorChannel: Channel<string, string>;\n\n\n    constructor() {\n        this.errorChannel = new Channel<string, string>((error: string)=> of(error));\n    }\n\n}\n","import {of} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Channel} from '../../common/Channel';\n\nexport class SpinnerService {\n\n    public spinnerCounterChannel: Channel<number, number>;\n\n    private spinnerCounter = 0;\n\n    constructor() {\n        this.spinnerCounterChannel = new Channel((difference: number) => of('').pipe(map(() => {\n            if(this.spinnerCounter + difference >= 0) {\n                this.spinnerCounter = this.spinnerCounter + difference;\n            }\n            return this.spinnerCounter;\n        })))\n    }\n}\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {ConfirmDialogContainerState} from './ConfirmDialogContainer';\nimport {Channel} from '../../common/Channel';\n\nexport class ConfirmDialogService {\n\n    public openDialogChannel = new Channel<ConfirmDialogContainerState, ConfirmDialogContainerState>(\n        (state: ConfirmDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.confirmationChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public confirmationChannel = new Channel<boolean, boolean>((value: boolean) => of(value));\n}\n\n","import {IDBPDatabase, openDB} from 'idb';\n\nexport class DataBaseService {\n\n    private dataBase: Promise<IDBPDatabase>;\n\n    private DATA_BASE_NAME = \"app-data-base\";\n\n    constructor(private storeName: string) {\n        this.dataBase = openDB(this.DATA_BASE_NAME, 1, {\n            upgrade(db) {\n                db.createObjectStore(storeName);\n            },\n        });\n    }\n\n    get = async <T>(key: string) => {\n        return (await this.dataBase).get(this.storeName, key);\n    };\n\n    set = async <T>(key: string, value: T) => {\n        return (await this.dataBase).put(this.storeName, value, key);\n    };\n}\n","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {Channel} from '../../common/Channel';\nimport {saveCardsGroup} from './logic/saveCardsGroup';\nimport {getEditingCardsGroup} from './logic/getEditingCardsGroup';\n\nexport class CardsGroupsEditorService {\n\n    public groupEditingChannel: Channel<ICardsGroup, ICardsGroup[]>;\n    public groupChannel: Channel<number, ICardsGroup>;\n\n    constructor(storageService: StorageService) {\n        this.groupEditingChannel = new Channel((editedCardGroup: ICardsGroup) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCardsGroup(editedCardGroup, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            })\n        ));\n\n        this.groupChannel = new Channel((cardGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCardsGroup(cardGroupID, cardsGroups))\n        ))\n    }\n}\n","import {ICardsGroup} from '../../../types/ICardsGroup';\n\nexport const saveCardsGroup = (editedCardGroup: ICardsGroup, cardsGroups: ICardsGroup[]) => {\n        const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => editedCardGroup.id === cardGroup.id);\n\n        if (cardGroupIndex < 0) {\n            cardsGroups.push(editedCardGroup);\n        } else {\n            cardsGroups[cardGroupIndex] = editedCardGroup;\n        }\n\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../types/ICardsGroup';\n\nexport const getEditingCardsGroup = (cardGroupID: number, cardsGroups: ICardsGroup[]): ICardsGroup => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardGroupID === cardGroup.id);\n\n        if (!cardsGroup) {\n            cardsGroup = {\n                cards: [],\n                nameCardsGroup: '',\n                repeatingDate: new Date().getTime(),\n                id: new Date().getTime(),\n                percentRepeatedCards: 0\n            }\n        }\n        return cardsGroup;\n};\n","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {Channel} from '../../common/Channel';\nimport {updateRepeatingDate} from './logic/updateRepeatingDate';\nimport {sortByRepeatingDate} from './logic/sortByRepeatingDate';\nimport {countRepeatedCardsPercent} from './logic/countRepeatedCardsPercent';\nimport {deleteGroup} from './logic/deleteGroup';\nimport {resetRepeatingProgress} from './logic/resetRepeatingProgress';\n\nexport class CardsGroupsListService {\n    public groupsListChannel: Channel<string, ICardsGroup[]>;\n    public groupDeleteChannel: Channel<number, ICardsGroup[]>;\n    public resetProgressChannel: Channel<number, ICardsGroup[]>;\n\n\n    constructor(storageService: StorageService) {\n        this.groupsListChannel = new Channel(() => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => updateRepeatingDate(cardsGroups)),\n            map((cardsGroups: ICardsGroup[]) => sortByRepeatingDate(cardsGroups)),\n            map((cardsGroups: ICardsGroup[]) => countRepeatedCardsPercent(cardsGroups))\n        ));\n\n        this.groupDeleteChannel = new Channel((groupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => deleteGroup(groupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ));\n\n        this.resetProgressChannel = new Channel((cardsGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => resetRepeatingProgress(cardsGroupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ))\n    }\n}\n","import {ICardsGroup} from '../../../types/ICardsGroup';\nimport {ICard} from '../../../types/ICard';\n\nexport const updateRepeatingDate = (cardsGroups: ICardsGroup[]) => {\n        cardsGroups.map((cardsGroup: ICardsGroup) => {\n            let dateRepeating = 0;\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (card.dateRepeating > dateRepeating) {\n                    dateRepeating = card.dateRepeating\n                }\n            });\n            cardsGroup.repeatingDate = dateRepeating;\n            return cardsGroup;\n        });\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../types/ICardsGroup';\n\nexport const sortByRepeatingDate = (cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n        if (firstCardGroup.repeatingDate && secondCardsGroup.repeatingDate) {\n            return secondCardsGroup.repeatingDate - firstCardGroup.repeatingDate;\n        } else {\n            return 0;\n        }\n    })\n};\n","import {ICardsGroup} from '../../../types/ICardsGroup';\nimport {ICard} from '../../../types/ICard';\nimport {IRangeOfKnowledge} from '../../../types/IRangeOfKnowledge';\n\nexport const countRepeatedCardsPercent = (cardsGroups: ICardsGroup[]) => {\n    cardsGroups.map((cardsGroup: ICardsGroup) => {\n        let statusDone = 0;\n        cardsGroup.cards.forEach((card: ICard) => {\n            if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n                statusDone++\n            }\n        });\n        cardsGroup.percentRepeatedCards = statusDone / cardsGroup.cards.length * 100;\n        return cardsGroup;\n    });\n    return cardsGroups;\n};\n","import {ICardsGroup} from '../../../types/ICardsGroup';\n\nexport const deleteGroup = (groupID: number, cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.filter((cardGroup) => {\n        return cardGroup.id !== groupID;\n    });\n};\n","import {ICardsGroup} from '../../../types/ICardsGroup';\nimport {ICard} from '../../../types/ICard';\nimport {IRangeOfKnowledge} from '../../../types/IRangeOfKnowledge';\n\nexport const resetRepeatingProgress = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n\n    if (cardGroupIndex < 0) {\n        return cardsGroups;\n    }\n\n    cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.map((card: ICard) => {\n        return {\n            ...card,\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO\n        }\n    });\n\n    return cardsGroups;\n};\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../common/Channel';\n\nexport class GoogleAuthService {\n    public loginChannel: Channel<string, string>;\n\n\n    constructor(storageService: StorageService) {\n\n        this.loginChannel = new Channel((authToken: string) => of('').pipe(\n            tap(() => {\n                storageService.setAuthToken(authToken)\n            })\n        ));\n    }\n}\n","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {Channel} from '../../common/Channel';\nimport {ICard} from '../../types/ICard';\nimport {ISimplifiedCardsGroup} from '../../types/ISimplifiedCardsGroup';\nimport {saveCard} from './logic/saveCard';\nimport {getEditingCard} from './logic/getEditingCard';\nimport {getSimplifiedGroup} from './logic/getSimplifiedGroup';\nimport {addCurrentGroupToSimplifiedGroup} from './logic/addCurrentGroupToSimplifiedGroup';\n\nexport class CardsEditorService {\n\n    public cardEditingChannel: Channel<{ card: ICard, cardsGroupID: number }, ICard>;\n    public simplifiedCardsGroupsChannel: Channel<number, { currentCardsGroup: ISimplifiedCardsGroup | undefined, cardsGroups: ISimplifiedCardsGroup[] }>;\n    public cardChannel: Channel<{ cardID: number, cardsGroupID: number }, ICard | undefined>;\n\n    constructor(storageService: StorageService) {\n        this.cardEditingChannel = new Channel(({card, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCard(cardsGroupID, card, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            }),\n            map(() => card)\n        ));\n\n        this.cardChannel = new Channel(({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCard(cardsGroupID, cardID, cardsGroups))\n        ));\n\n        this.simplifiedCardsGroupsChannel = new Channel((cardsGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getSimplifiedGroup(cardsGroups)),\n            map((cardsGroups: ISimplifiedCardsGroup[]) => addCurrentGroupToSimplifiedGroup(cardsGroupID, cardsGroups))\n        ))\n    }\n}\n","import {ICard} from '../../../types/ICard';\nimport {ICardsGroup} from '../../../types/ICardsGroup';\n\nexport const saveCard = (cardsGroupID: number, card: ICard, cardsGroups: ICardsGroup[]) => {\n        const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n        let cardIndex = -1;\n\n        if (cardGroupIndex >= 0) {\n            cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => card.id === item.id)\n        }\n\n        if (cardGroupIndex >= 0 && cardIndex < 0) {\n            cardsGroups[cardGroupIndex].cards.push(card);\n        } else if (cardGroupIndex >= 0 && cardIndex >= 0) {\n            cardsGroups[cardGroupIndex].cards[cardIndex] = card;\n        }\n\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../types/ICardsGroup';\nimport {ICard} from '../../../types/ICard';\nimport {IRangeOfKnowledge} from '../../../types/IRangeOfKnowledge';\n\nexport const getEditingCard = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n        let card: ICard | undefined = {\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO,\n            answer: '',\n            question: '',\n            dateRepeating: 0,\n            id: new Date().getTime()\n        };\n\n        if (cardsGroup) {\n            card = cardsGroup.cards.find((card: ICard) => card.id === cardID)\n        }\n\n        return card;\n};\n","import {ICardsGroup} from '../../../types/ICardsGroup';\nimport {ISimplifiedCardsGroup} from '../../../types/ISimplifiedCardsGroup';\n\nexport const getSimplifiedGroup = (cardsGroups: ICardsGroup[]): ISimplifiedCardsGroup[] => {\n\n        return cardsGroups.map((cardsGroup: ICardsGroup): ISimplifiedCardsGroup => {\n            return {\n                id: cardsGroup.id,\n                nameCardsGroup: cardsGroup.nameCardsGroup\n            }\n        });\n};\n","import {ISimplifiedCardsGroup} from '../../../types/ISimplifiedCardsGroup';\n\nexport const addCurrentGroupToSimplifiedGroup = (cardsGroupID: number, cardsGroups: ISimplifiedCardsGroup[]) => {\n    let currentCardsGroup = cardsGroups.find((cardGroup: ISimplifiedCardsGroup) => cardsGroupID === cardGroup.id);\n\n    return {\n        currentCardsGroup,\n        cardsGroups\n    }\n};\n","import {map, tap} from 'rxjs/operators';\nimport {of} from \"rxjs\";\n\nimport {ICard} from '../../types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {Channel} from '../../common/Channel';\nimport {getCardsByGroup} from './logic/getCardsByGroup';\nimport {resetCardProgress} from './logic/resetCardProgress';\nimport {deleteCard} from './logic/deleteCard';\nimport {filterCards} from \"./logic/filterCards\";\nimport {IFilter} from \"../../types/IFilter\";\n\nexport class CardsListService {\n    public cardsChannel: Channel<{cardsGroupID: number, filter: IFilter}, ICard[]>;\n    public resetCardProgressChannel: Channel<{cardID: number, cardsGroupID: number}, ICardsGroup[]>;\n    public deleteCardChannel: Channel<{cardID: number, cardsGroupID: number}, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.cardsChannel = new Channel(({ cardsGroupID, filter}) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardsByGroup(cardsGroupID, cardsGroups)),\n            map((cards: ICard[]) => filterCards(cards, filter)))\n        );\n\n        this.resetCardProgressChannel = new Channel(({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => resetCardProgress(cardsGroupID, cardID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            })\n        ));\n\n        this.deleteCardChannel = new Channel(({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => deleteCard(cardsGroupID, cardID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            })\n        ));\n    }\n}\n","import {ICardsGroup} from '../../../types/ICardsGroup';\n\nexport const getCardsByGroup = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n    const foundCardsGroup = cardsGroups.find((cardsGroup: ICardsGroup) => {\n        return cardsGroup.id === cardsGroupID;\n    });\n\n    return foundCardsGroup ? foundCardsGroup.cards : [];\n};\n","import {ICard} from \"../../../types/ICard\";\nimport {IFilter} from \"../../../types/IFilter\";\nimport {ISortVariants} from \"../../../types/ISortVariants\";\n\nexport const filterCards = (cards: ICard[], filter: IFilter) => {\n    const foundByTextCards = cards.filter((card: ICard) => {\n        return card.question.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1 ||\n            card.answer.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1\n    })\n\n    let sortedCards = []\n\n    if(filter.sort === ISortVariants.QUESTION_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if(card1.question === card2.question) {\n                return 0\n            } else if(card1.question > card2.question) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n\n        return sortedCards;\n    } else if(filter.sort === ISortVariants.QUESTION_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if(card1.question === card2.question) {\n                return 0\n            } else if(card1.question > card2.question) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if(filter.sort === ISortVariants.STATUS_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if(card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if(card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if(filter.sort === ISortVariants.STATUS_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if(card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if(card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    }\n\n    return foundByTextCards\n}","import {ICardsGroup} from '../../../types/ICardsGroup';\nimport {ICard} from '../../../types/ICard';\nimport {IRangeOfKnowledge} from '../../../types/IRangeOfKnowledge';\n\nexport const resetCardProgress = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards[cardIndex].rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n    }\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from '../../../types/ICardsGroup';\nimport {ICard} from '../../../types/ICard';\n\nexport const deleteCard = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.filter((card: ICard) => card.id !== cardID);\n    }\n\n    return cardsGroups;\n};\n","import {of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {IRepeatingArgs} from '../../types/IRepeatingArgs';\nimport {Channel} from '../../common/Channel';\nimport {IStatistic} from '../../types/IStatistic';\nimport {ISettings} from '../../types/ISettings';\nimport {getCardsByGroupID} from './logic/getCardsByGroupID';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForRepeating} from './logic/getCardForRepeating';\nimport {getStatistic} from './logic/getStatistic';\nimport {shuffleCards} from './logic/shuffleCards';\nimport {getFirstCard} from './logic/getFirstCard';\n\nexport class CardsRepeaterService {\n    public currentCardChannel: Channel<number | null, ICard | null>;\n    public cardChannel: Channel<number, ICard | undefined>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public statisticChannel: Channel<string, IStatistic>;\n\n    private statisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    constructor(private storageService: StorageService) {\n        this.cardChannel = new Channel((cardsGroupID = -1) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardsByGroupID(cardsGroups, cardsGroupID)),\n            switchMap((cards: ICard[]) => this.storageService.getSettings().pipe(\n                map((settings: ISettings) => {\n                    if (settings.isRandomRepeating) {\n                        cards = shuffleCards(cards);\n                    }\n                    return {\n                        cards,\n                        isRundomRepeating: settings.isRandomRepeating\n                    };\n                })\n            )),\n            tap(({cards, isRundomRepeating}) => {\n                this.statisticValue = getStatistic(cards);\n            }),\n            map(({cards, isRundomRepeating}) => {\n                return getCardForRepeating(cards, isRundomRepeating)\n            })\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups))\n            );\n        });\n\n        this.currentCardChannel = new Channel((cardsGroupID = null) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardsByGroupID(cardsGroups, cardsGroupID)),\n            map((cardsGroups: ICard[]) => getFirstCard(cardsGroups))\n        ));\n\n        this.statisticChannel = new Channel(() => of(this.statisticValue));\n    }\n}\n","import {of} from 'rxjs';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {Channel} from '../../common/Channel';\nimport {switchMap, tap} from 'rxjs/operators';\nimport {saveBackupFile} from './logic/saveBackupFile';\n\nexport class LocalBackupsService {\n\n    public localBackupChannel: Channel<void, ICardsGroup[]>;\n    public loadBackupChannel: Channel<string, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.localBackupChannel = new Channel(() => this.storageService.getBackup().pipe(\n            tap((backup: ICardsGroup[]) => saveBackupFile(backup))\n        ));\n\n        this.loadBackupChannel = new Channel((backupFile: string) => of('').pipe(\n            switchMap(() => {\n                return this.storageService.setBackup(JSON.parse(backupFile));\n            })\n        ));\n    }\n}\n","import {ICardsGroup} from '../../../types/ICardsGroup';\n\nexport const saveBackupFile = (backup: ICardsGroup[]) => {\n    const fileData: string = JSON.stringify(backup, null, 4);\n    const blob = new Blob([fileData], {type: \"octet/stream\"});\n    const url = window.URL.createObjectURL(blob);\n\n    const fileBuffer = document.createElement('a');\n\n    if (fileBuffer) {\n        fileBuffer.href = url;\n        fileBuffer.download = 'My Cards.txt';\n        fileBuffer.click();\n    }\n    window.URL.revokeObjectURL(url);\n};\n","import {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../common/Channel';\nimport {ISettings} from '../../types/ISettings';\n\nexport class SettingsService {\n\n    public settingsChannel: Channel<string, ISettings>;\n\n    public changeSettingsChannel: Channel<ISettings, ISettings>;\n\n    constructor(storageService: StorageService) {\n\n        this.settingsChannel = new Channel(() => storageService.getSettings());\n\n        this.changeSettingsChannel = new Channel(\n            (settings: ISettings) => storageService.setSettings(settings)\n        );\n    }\n}\n","import {map, switchMap} from 'rxjs/operators';\n\nimport {ICard} from '../../types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {IRepeatingArgs} from '../../types/IRepeatingArgs';\nimport {Channel} from '../../common/Channel';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForViewing} from \"./logic/getCardForViewing\";\n\nexport class CardViewerService {\n    public cardChannel: Channel<number, ICard | undefined>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.cardChannel = new Channel((cardID = -1) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardForViewing(cardsGroups, cardID))\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups))\n            );\n        });\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}