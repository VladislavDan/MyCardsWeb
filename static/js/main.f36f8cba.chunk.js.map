{"version":3,"sources":["app/parts/toolbar/ToolbarComponent.tsx","MyTools/channel-conception/react-hooks/useChannel.ts","app/parts/toolbar/ToolbarContainer.tsx","app/common/Routs.ts","app/parts/navigation-panel/elements/navigation-link-component/NavigationLinkComponent.tsx","app/parts/navigation-panel/NavigationPanelComponent.tsx","app/parts/navigation-panel/NavigationPanelContainer.tsx","app/parts/error-container/ErrorComponent.tsx","app/parts/error-container/ErrorContainer.tsx","app/parts/spinner/SpinnerComponent.tsx","app/parts/spinner/SpinnerContainer.tsx","app/parts/confirm-dialog/elements/dialog-title/DialogTitleComponent.tsx","app/parts/confirm-dialog/ConfirmDialogComponent.tsx","app/common/defaults/defaultConfirmDialogState.ts","app/parts/confirm-dialog/ConfirmDialogContainer.tsx","MyTools/channel-conception/logic/jsonEqual.ts","MyTools/worker-observable/operators/fromThread.ts","MyTools/worker-observable/logic/functionToThread.ts","MyTools/channel-conception/Channel.ts","app/parts/spinner/SpinnerService.ts","app/common/types/ISortVariant.ts","app/common/elements/add-button/AddButtonComponent.tsx","app/pages/cards-groups-list/elements/circular-progress/CircularProgressComponent.tsx","app/common/elements/list-item-menu/ListItemMenuComponent.tsx","app/common/constants/DATE_FORMAT.ts","app/pages/cards-groups-list/elements/cards-groups-list-item/CardsGroupsListItemComponent.tsx","app/common/elements/filter/FilterComponent.tsx","app/pages/cards-groups-list/CardsGroupsListComponent.tsx","app/common/types/IRangeOfKnowledge.ts","MyTools/react-hooks/useConstructor.ts","MyTools/react-hooks/useUnsubscribe.ts","MyTools/react-hooks/useCallbackFactory.ts","MyTools/react-utils/CallbackFactory.ts","app/pages/cards-groups-list/ui-callbacks/onResetProgress.tsx","app/pages/cards-groups-list/ui-callbacks/onEditItem.ts","app/pages/cards-groups-list/ui-callbacks/onDeleteItem.tsx","app/pages/cards-groups-list/ui-callbacks/onOpenEditor.ts","app/pages/cards-groups-list/ui-callbacks/onClickItem.ts","app/pages/cards-groups-list/ui-callbacks/onConstructor.ts","app/pages/cards-groups-list/channels-callbacks/onResetProgressChannel.ts","app/pages/cards-groups-list/channels-callbacks/onGroupDeleteChannel.ts","app/pages/cards-groups-list/channels-callbacks/onGroupsListChannel.ts","app/pages/cards-groups-list/ui-callbacks/onChangeSorting.ts","app/pages/cards-groups-list/channels-callbacks/onChangeFilterChannel.ts","app/common/defaults/defaultFilterValue.ts","app/pages/cards-groups-list/channels-callbacks/onFilterChannel.ts","app/pages/cards-groups-list/ui-callbacks/onChangeSearchableText.ts","app/pages/cards-groups-list/defaults/initialState.ts","app/pages/cards-groups-list/CardsGroupsListContainer.tsx","app/pages/google-auth/GoogleAuthComponent.tsx","app/pages/google-auth/ui-callbacks/onSuccess.ts","app/pages/google-auth/ui-callbacks/onFailure.ts","app/pages/google-auth/channels-callbacks/onLoginChannel.ts","app/pages/google-auth/GoogleAuthContainer.tsx","app/pages/google-backups/elements/backup-menu-component/BackupMenuComponent.tsx","app/pages/google-backups/elements/backups-list-item-component/BackupsListItemComponent.tsx","app/pages/google-backups/GoogleBackupsComponent.tsx","app/pages/google-backups/GoogleBackupsContainer.tsx","app/pages/cards/elements/cards-list-actions/CardsListActions.tsx","app/pages/cards/elements/card-primary-text/CardPrimaryTextComponent.tsx","app/pages/cards/elements/cards-list-item/CardsListItemComponent.tsx","app/pages/cards/elements/cards-list/CardsListComponent.tsx","app/pages/cards/CardsComponent.tsx","app/pages/cards/ui-callbacks/onDeleteSelectedCards.tsx","app/pages/cards/ui-callbacks/onCopySelectedCards.tsx","app/pages/cards/ui-callbacks/onMovingSelectedCards.tsx","app/pages/cards/ui-callbacks/onSelectItem.ts","app/pages/cards/ui-callbacks/onStartSelecting.ts","app/pages/cards/ui-callbacks/onOpenRepeater.ts","app/pages/cards/ui-callbacks/onChangeSorting.ts","app/pages/cards/ui-callbacks/onChangeSearchableText.ts","app/pages/cards/channels-callbacks/onCardsChannel.ts","app/pages/cards/channels-callbacks/onCardsIDsByGroupIDsChannel.ts","app/pages/cards/channels-callbacks/onCardsIDsBySelectedItemsChannel.ts","app/pages/cards/channels-callbacks/onFilterChannel.ts","app/pages/cards/ui-callbacks/onConstructor.ts","app/pages/cards/channels-callbacks/onChangeFilter.ts","app/pages/cards/channels-callbacks/onResetCardProgressChannel.ts","app/pages/cards/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/cards/channels-callbacks/onMovingCardsChannel.ts","app/pages/cards/channels-callbacks/onCopyCardsChannel.ts","app/pages/cards/channels-callbacks/onDeleteCardsChannel.ts","app/pages/cards/channels-callbacks/onExistedGroupsIDsChannel.ts","app/pages/cards/ui-callbacks/onOpenEditor.ts","app/pages/cards/ui-callbacks/onEditItem.ts","app/pages/cards/ui-callbacks/onDeleteItem.tsx","app/pages/cards/ui-callbacks/onResetProgress.ts","app/pages/cards/ui-callbacks/onClickItem.ts","app/pages/cards/defaults/initialState.ts","app/pages/cards/CardsContainer.tsx","app/pages/cards-repeater/elements/statistic/StatisticComponent.tsx","app/pages/cards-repeater/elements/all-cards-repeated/AllCardsRepeatedComponent.tsx","app/common/elements/cards-header/CardsHeaderComponent.tsx","app/common/elements/long-text-viewer/LongTextViewerComponent.tsx","app/common/elements/text-editor/TextEditorComponent.tsx","app/common/elements/long-text-editor/LongTextEditorComponent.tsx","app/common/elements/delete-button-footer/DeleteButtonFooterComponent.tsx","app/common/elements/question-card/QuestionCardComponent.tsx","app/common/elements/answer-card-footer/AnswerCardFooterComponent.tsx","app/common/elements/answer-card/AnswerCardComponent.tsx","app/common/elements/cards-content/CardsContentComponent.tsx","app/pages/cards-repeater/CardsRepeaterComponent.tsx","app/pages/cards-repeater/ui-callbacks/onDeleteCard.tsx","app/pages/cards-repeater/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/cards-repeater/channels-callbacks/onCardGroupNameChannel.ts","app/common/defaults/defaultCardValue.ts","app/pages/cards-repeater/channels-callbacks/onCardChannel.ts","app/pages/cards-repeater/channels-callbacks/onCardEditingChannel.ts","app/common/defaults/defaultStatisticValue.ts","app/pages/cards-repeater/channels-callbacks/onStatisticChannel.ts","app/pages/cards-repeater/channels-callbacks/onRepeatingResultChannel.ts","app/pages/cards-repeater/ui-callbacks/onConstructor.ts","app/pages/cards-repeater/ui-callbacks/onClick.ts","app/pages/cards-repeater/ui-callbacks/onClickCard.ts","app/pages/cards-repeater/ui-callbacks/onBackClick.ts","app/common/logic/initDefaultCard.ts","app/pages/cards-repeater/ui-callbacks/onSwitchEditing.ts","app/pages/cards-repeater/ui-callbacks/onChangeQuestion.ts","app/pages/cards-repeater/ui-callbacks/onChangeAnswer.ts","app/pages/cards-repeater/defaults/initialState.ts","app/pages/cards-repeater/CardsRepeaterContainer.tsx","app/pages/local-backup/LocalBackupsContainer.tsx","app/pages/cards-groups-editor/CardsGroupsEditorComponent.tsx","app/pages/cards-groups-editor/ui-callbacks/onChangeGroupName.ts","app/pages/cards-groups-editor/ui-callbacks/onSaveGroup.ts","app/pages/cards-groups-editor/ui-callbacks/onConstructor.ts","app/pages/cards-groups-editor/channels-callbacks/onGroupEditingChannel.ts","app/common/defaults/defaultCardsGroupValue.ts","app/pages/cards-groups-editor/channels-callbacks/onGroupChannel.ts","app/pages/cards-groups-editor/defaults/initialState.ts","app/pages/cards-groups-editor/CardsGroupsEditorContainer.tsx","app/pages/cards-editor/CardsEditorComponent.tsx","app/pages/cards-editor/channels-callbacks/onCardEditingChannel.ts","app/pages/cards-editor/channels-callbacks/onCardChannel.ts","app/pages/cards-editor/ui-callbacks/onConstructor.ts","app/pages/cards-editor/ui-callbacks/onChangeQuestion.ts","app/pages/cards-editor/ui-callbacks/onChangeAnswer.ts","app/pages/cards-editor/ui-callbacks/onSaveCard.ts","app/pages/cards-editor/defaults/initialState.ts","app/pages/cards-editor/CardsEditorContainer.tsx","app/pages/settings/elements/settings-switcher/SettingsSwitcherComponent.tsx","app/pages/settings/elements/settings-number-input/SettingsNumberInputComponent.tsx","app/pages/settings/SettingsComponent.tsx","app/pages/settings/SettingsContainer.tsx","app/pages/card-viewer/CardViewerComponent.tsx","app/pages/card-viewer/ui-callbacks/onDeleteCard.tsx","app/pages/card-viewer/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/card-viewer/channels-callbacks/onCardGroupNameChannel.ts","app/pages/card-viewer/ui-callbacks/onChangeAnswer.ts","app/pages/card-viewer/ui-callbacks/onChangeQuestion.ts","app/pages/card-viewer/ui-callbacks/onSwitchEditing.ts","app/pages/card-viewer/ui-callbacks/onClickYesNoButton.ts","app/pages/card-viewer/ui-callbacks/onClickCard.ts","app/pages/card-viewer/channels-callbacks/onCardChannel.ts","app/pages/card-viewer/channels-callbacks/onCardEditingChannel.ts","app/pages/card-viewer/channels-callbacks/onRepeatingResultChannel.ts","app/pages/card-viewer/ui-callbacks/onConstructor.ts","app/pages/card-viewer/defaults/initialState.ts","app/pages/card-viewer/CardViewerContainer.tsx","app/parts/navigation/NavigationContainer.tsx","app/pages/google-backups/logic/getBackupFolder.ts","app/common/services/StorageService.ts","app/pages/cards/logic/getCardsByGroup.ts","app/common/logic/deleteSingleCard.ts","app/pages/cards/logic/selectedItemsObjectToArray.ts","app/pages/cards/logic/getExistedCardsGroups.ts","app/common/logic/changeRangeOfKnowledge.ts","app/common/logic/refreshCardRepeatingDate.ts","app/pages/card-viewer/logic/getCardGroupName.ts","app/pages/card-viewer/logic/getCardForViewing.ts","app/parts/selection-dialog/SelectionDialogComponent.tsx","app/parts/selection-dialog/SelectionDialogContainer.tsx","app/parts/toolbar/ToolbarService.tsx","app/common/defaults/defaultAppState.ts","App.tsx","app/parts/error-container/ErrorService.ts","app/parts/confirm-dialog/ConfirmDialogService.ts","app/parts/selection-dialog/SelectionDialogService.ts","app/parts/navigation-panel/NavigationPanelService.ts","app/common/services/DataBaseService.ts","app/common/constants/STORE_NAME.ts","app/pages/cards-groups-editor/CardsGroupsEditorService.ts","app/pages/cards-groups-editor/logic/saveCardsGroup.ts","app/pages/cards-groups-editor/logic/getEditingCardsGroup.ts","app/pages/cards-groups-list/CardsGroupsListService.ts","app/pages/cards-groups-list/logic/updateObsoleteStatus.ts","app/pages/cards-groups-list/logic/updateRepeatingDate.ts","app/pages/cards-groups-list/logic/countRepeatedCardsPercent.ts","app/pages/cards-groups-list/logic/sortByFilter.ts","app/pages/cards-groups-list/logic/deleteGroup.ts","app/pages/cards-groups-list/logic/resetRepeatingProgress.ts","app/pages/google-auth/GoogleAuthService.ts","app/pages/google-backups/GoogleBackupsService.ts","app/pages/google-backups/logic/getBackupFiles.ts","app/pages/google-backups/logic/formatCreatedDate.ts","app/pages/google-backups/logic/loadBackupFile.ts","app/pages/google-backups/logic/createBackupFolder.ts","app/pages/google-backups/logic/createBackupName.ts","app/pages/google-backups/logic/createEmptyBackupFile.ts","app/pages/google-backups/logic/uploadBackupFile.ts","app/pages/google-backups/logic/deleteBackupFile.ts","app/pages/cards-editor/CardsEditorService.ts","app/pages/cards-editor/logic/saveCard.ts","app/pages/cards-editor/logic/getEditingCard.ts","app/pages/cards/CardsService.ts","app/pages/cards/logic/filterCards.ts","app/pages/cards/logic/resetCardProgress.ts","app/pages/cards/logic/changeCardsGroup.ts","app/pages/cards/logic/copyCardsInGroup.ts","app/pages/cards/logic/deleteCards.ts","app/pages/cards/logic/cardsToIDS.ts","app/pages/cards/logic/selectedItemsToIDs.ts","app/pages/cards-repeater/CardsRepeaterService.ts","app/pages/cards-repeater/logic/getCardsByIDs.ts","app/pages/cards-repeater/logic/shuffleCards.ts","app/pages/cards-repeater/logic/getStatistic.ts","app/pages/cards-repeater/logic/getCardForRepeating.ts","app/pages/local-backup/LocalBackupsService.ts","app/pages/local-backup/logic/saveBackupFile.ts","app/pages/settings/SettingsService.ts","app/pages/card-viewer/CardViewerService.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["ToolbarComponent","pageLabel","onClick","AppBar","position","Toolbar","className","IconButton","edge","color","Typography","variant","useChannel","channel","next","additionalErrorHandler","deepEqual","value","useRef","subscription","current","closed","subscribe","useEffect","unsubscribe","ToolbarContainer","toolbarService","navigationPanelService","location","useLocation","useState","setPageLabel","toolbarExternalLabelChannel","label","newPageLabel","getPageLabel","pathname","navigationPanelOpenChannel","Routs","path","name","NavigationLinkComponent","toggleDrawer","ListItem","button","to","NavigationPanelComponent","isOpen","SwipeableDrawer","anchor","open","onClose","onOpen","List","NavigationPanelContainer","state","setState","event","type","nativeEvent","key","ErrorComponent","errorMessage","handleClose","Dialog","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","ErrorContainer","errorService","errorChannel","SpinnerComponent","isShow","LinearProgress","SpinnerContainer","spinnerService","setShowing","spinnerCounterChannel","spinnerCounter","DialogTitleComponent","titleBackgroundColor","icon","style","backgroundColor","ConfirmDialogComponent","onClickAgree","onClickDisagree","message","autoFocus","defaultConfirmDialogState","ConfirmDialogContainer","confirmDialogService","React","openDialogChannel","confirmationChannel","prevState","jsonEqual","args","other","Array","length","console","log","JSON","stringify","fromThread","arg","workerFunction","thread","functionString","toString","functionBlob","Blob","Worker","URL","createObjectURL","functionToThread","Observable","observer","postMessage","onmessage","data","complete","terminate","onerror","err","error","Channel","observableCreator","outputSubject","subscriptions","previousEmittedValue","this","Subject","push","customErrorHandler","outputSubjectSubscription","globalNextHandler","globalErrorHandler","result","equalityError","forEach","subscribtion","setGlobalErrorHandler","setGlobalNextHandler","ISortVariant","AddButtonComponent","Fab","size","CircularProgressComponent","percent","Box","display","CircularProgress","top","left","bottom","right","alignItems","justifyContent","component","Math","round","ListItemMenuComponent","onEdit","onDelete","onResetProgress","anchorEl","setAnchorEl","keepMounted","Boolean","MenuItem","currentTarget","DATE_FORMAT","CardsGroupsListItemComponent","cardsGroup","onClickItem","onEditItem","onDeleteItem","ListItemIcon","percentRepeatedCards","ListItemText","primary","nameCardsGroup","secondary","format","repeatingDate","Date","FilterComponent","onChangeSearchableText","filter","onChangeSorting","sortVariants","Accordion","AccordionSummary","expandIcon","TextField","required","placeholder","onChange","target","searchableText","marginRight","stopPropagation","preventDefault","AccordionDetails","Select","sort","map","IRangeOfKnowledge","CardsGroupsListComponent","cardsGroups","onOpenEditor","height","NONE","DATE_ASK","DATE_DESK","NAME_ASK","NAME_DESK","PROGRESS_ASK","PROGRESS_DESC","itemData","itemSize","itemCount","overscanCount","width","index","cardGroup","useConstructor","callback","isFirstRun","useUnsubscribe","setSubscription","useCallbackFactory","initialState","services","context","settings","history","useHistory","callbackSettings","useContext","callbackFactory","cardsGroupID","cardsGroupsListService","isConfirm","resetProgressChannel","groupDeleteChannel","onConstructor","groupsListChannel","filterChannel","onResetProgressChannel","onGroupDeleteChannel","onGroupsListChannel","sortVariant","newFilter","changeFilterChannel","onChangeFilterChannel","defaultFilterValue","onFilterChannel","CardsGroupsListContainer","AppContext","clickItem","useCallback","openEditor","deleteItem","editItem","resetProgress","changeSorting","changeSearchableText","GoogleAuthComponent","onSuccess","onFailure","clientId","buttonText","scope","response","googleAuthService","loginChannel","accessToken","onLoginChannel","replace","GoogleAuthContainer","success","failure","BackupMenuComponent","backupID","onLoad","BackupsListItemComponent","backupName","backupDate","GoogleBackupsComponent","backupsFiles","onCreate","backup","createdTime","GoogleBackupsContainer","googleBackupsService","backupsNameLoadChannel","backupLoadChannel","backupDeleteChannel","backupUploadChannel","CardsListActions","onOpenRepeater","onStartSelecting","onMovingSelectedCards","onDeleteSelectedCards","onCopySelectedCards","hideOpenRepeaterButton","hideOpenEditorButton","hideMovingSelectedCardsButton","hideDeleteSelectedCardsButton","hideCopySelectedCardButton","CardPrimaryTextComponent","card","question","answer","CardsListItemComponent","onSelect","isEnabledSelecting","isSelected","dateText","dateRepeating","rangeOfKnowledge","DONE","IN_PROGRESS","getIconColor","Checkbox","checked","tabIndex","disableRipple","CardsListComponent","cards","onSelectItem","selectedItems","CardsComponent","QUESTION_ASK","QUESTION_DESK","STATUS_ASK","STATUS_DESK","ANSWER_ASK","ANSWER_DESK","cardsListService","deleteCardsChannel","selectionDialogService","selectionChannel","groupID","copyCardsChannel","destinationGroupID","title","selectionItems","existedGroupsIDs","movingCardsChannel","cardID","cardsIDsBySelectedItemsChannel","cardsIDsByGroupIDsChannel","onCardsChannel","onCardsIDsByGroupIDsChannel","cardsIDsForRepeating","onCardsIDsBySelectedItemsChannel","cardsChannel","existedGroupsIDsChannel","onChangeFilter","onResetCardProgressChannel","onDeleteSingleCardChannel","onMovingCardsChannel","onCopyCardsChannel","onDeleteCardsChannel","onExistedGroupsIDsChannel","deleteSingleCardChannel","resetCardProgressChannel","CardsContainer","startSelecting","multiSelectingDependencies","openRepeater","selectItem","movingSelectedCards","copySelectedCards","deleteSelectedCards","StatisticComponent","statistic","todo","inProgress","done","AllCardsRepeatedComponent","onBackClick","CardsHeaderComponent","isQuestionSide","onSwitchEditing","isEditable","gutterBottom","Check","Edit","LongTextViewerComponent","viewHeight","text","onClickText","paddingTop","TextEditorComponent","onChangeText","changeableText","multiline","LongTextEditorComponent","DeleteButtonFooterComponent","CardActions","QuestionCardComponent","onClickCard","cardHeight","onDeleteCard","onChangeQuestion","Card","CardContent","AnswerCardFooterComponent","onClickYesNoButton","AnswerCardComponent","onChangeAnswer","getText","CardsContentComponent","CardsRepeaterComponent","cardsRepeaterService","cardChannel","onCardGroupNameChannel","defaultCardValue","onCardChannel","cardGroupNameChannel","statisticChannel","onCardEditingChannel","defaultStatisticValue","onStatisticChannel","onRepeatingResultChannel","isKnown","repeatingResultChannel","initDefaultCard","getTime","cardsEditorService","cardEditingChannel","editableCard","CardRepeaterContainer","click","clickCard","backClick","switchEditing","changeQuestion","changeAnswer","deleteCard","LocalBackupsContainer","localBackupsService","fileBuffer","localBackupChannel","loadBackupChannel","file","files","reader","FileReader","onload","readerEvent","games","readAsText","ref","CardsGroupsEditorComponent","groupName","onChangeGroupName","onSaveGroup","cardsGroupsEditorService","groupEditingChannel","groupChannel","onGroupEditingChannel","goBack","defaultCardsGroupValue","onGroupChannel","CardsGroupsEditorContainer","changeGroupName","saveGroup","CardsEditorComponent","onSaveCard","CardsEditorContainer","saveCard","SettingsSwitcherComponent","FormControlLabel","control","Switch","SettingsNumberInputComponent","Input","Number","SettingsComponent","onChangeAlgorithm","onChangeAutoObsolete","onChangeTimeInDone","onChangeTimeInProgress","FormGroup","isRandomRepeating","autoObsolete","isEnable","timeInDone","timeInProgress","SettingsContainer","settingsService","changeSettingsChannel","settingsChannel","CardViewerComponent","props","cardViewerService","CardViewerContainer","clickYesNoButton","NavigationContainer","exact","from","getBackupFolder","token","url","googleDriveFilesAPI","fetch","headers","method","then","json","find","mimeType","StorageService","dataBaseService","cardsStorageID","authTokenLocalStorageID","settingsID","filterID","getBackup","getBackupFromDataBase","a","get","setBackupToDataBase","set","Promise","resolve","reject","authToken","localStorage","getItem","setItem","parse","getCardsByGroup","foundCardsGroup","deleteSingleCard","cardGroupIndex","findIndex","cardIndex","item","selectedItemsObjectToArray","selectedItemsObject","array","getExistedCardsGroups","changeRangeOfKnowledge","TO_DO","refreshCardRepeatingDate","getCardGroupName","foundIndex","getCardForViewing","i","SelectionDialogComponent","SelectionDialogContainer","itemID","ToolbarService","of","defaultAppState","createContext","difference","pipe","tap","storageService","storeName","dataBase","DATA_BASE_NAME","put","openDB","upgrade","db","createObjectStore","editedCardGroup","saveCardsGroup","setBackup","cardGroupID","getEditingCardsGroup","switchMap","getSettings","defer","millisecondsInDay","currentDate","timeInProgressMilliseconds","timeInDoneMilliseconds","differences","updateObsoleteStatus","updateRepeatingDate","statusDone","countRepeatedCardsPercent","mergeMap","getFilter","storedFilter","sortedCards","toLowerCase","indexOf","firstCardGroup","secondCardsGroup","sortByFilter","deleteGroup","resetRepeatingProgress","storedFilters","setFilter","setAuthToken","getAuthToken","folder","getBackupFiles","googleDriveFiles","googleDriveFile","date","outputFormat","getFullYear","getMonth","getDate","getHours","getMinutes","formatCreatedDate","fileId","loadBackupFile","requestOptions","body","createBackupFolder","folderId","cardsAmount","createBackupName","fileName","parents","createEmptyBackupFile","responseType","uploadBackupFile","fileID","deleteBackupFile","getEditingCard","foundByTextCards","card1","card2","filterCards","resetCardProgress","selectedCardsIDs","selectedCards","foundCardIndex","changeCardsGroup","foundedCard","copyCardsInGroup","deleteCards","cardsToIDS","ids","selectedItemsToIDs","statisticValue","cardsIDs","foundCards","getCardsByIDs","randomIndex","copy","floor","random","shuffleCards","getStatistic","foundCard","getCardForRepeating","fileData","blob","window","document","createElement","href","download","revokeObjectURL","saveBackupFile","backupFile","settingService","setSettings","App","appState","setAppState","screen","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","catch","ReactDOM","render","getElementById","process","origin","addEventListener","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f36f8cba.chunk.js","sourcesContent":["import {FC} from 'react';\nimport {AppBar, IconButton, Toolbar, Typography} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nimport './ToolbarComponent.css'\nimport {IToolbarComponent} from \"./types/IToolbarComponent\";\n\nexport const ToolbarComponent: FC<IToolbarComponent> = ({pageLabel, onClick}) => {\n\n    return (\n        <AppBar position=\"fixed\">\n            <Toolbar className=\"toolbar\">\n                <IconButton className=\"toolbar_menu-icon\" edge=\"start\" color=\"inherit\" aria-label=\"menu\"\n                            onClick={onClick}>\n                    <MenuIcon/>\n                </IconButton>\n                <Typography className=\"toolbar_label\" variant=\"h6\">\n                    {pageLabel}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n};\n","import {useEffect, useRef} from 'react';\nimport {Subscription} from 'rxjs';\n\nimport {Channel} from '../Channel';\n\nexport const useChannel = <A, D>(\n    channel: Channel<A, D>,\n    next?: (value: D) => void,\n    additionalErrorHandler?: (error: Error) => void,\n    deepEqual: boolean = false\n) => {\n\n    const value = useRef<{ subscription: Subscription | null }>({\n        subscription: null\n    });\n\n    if (!value.current.subscription || value.current.subscription.closed) {\n        const subscription = channel.subscribe(next, additionalErrorHandler, deepEqual);\n        value.current.subscription = subscription;\n    }\n\n    useEffect(() => {\n        return () => {\n            channel.unsubscribe();\n        }\n    }, [channel]);\n};\n","import React, {FC, useEffect, useState} from 'react';\nimport * as H from 'history';\nimport {useLocation} from 'react-router-dom';\n\nimport {ToolbarComponent} from './ToolbarComponent';\nimport {useChannel} from \"../../../MyTools/channel-conception/react-hooks/useChannel\";\nimport {IToolbarContainer} from \"./types/IToolbarContainer\";\n\nexport const ToolbarContainer: FC<IToolbarContainer> = (\n    {\n        toolbarService,\n        navigationPanelService\n    }\n) => {\n\n    const location: H.Location = useLocation();\n    const [pageLabel, setPageLabel] = useState('');\n\n    useChannel(toolbarService.toolbarExternalLabelChannel, (label: string) => {\n        setPageLabel(label)\n    })\n\n    useEffect(() => {\n        const newPageLabel = toolbarService.getPageLabel(location.pathname);\n        setPageLabel(newPageLabel);\n    }, [location.pathname]);\n\n    const onClick = () => {\n        navigationPanelService.navigationPanelOpenChannel.next('');\n    };\n\n    return (\n        <ToolbarComponent pageLabel={pageLabel} onClick={onClick}/>\n    )\n};\n","export const Routs = {\n    googleAuth: {\n        path: '/google-auth',\n        name: 'Auth Google'\n    },\n\n    googleBackups: {\n        path: '/google-backups',\n        name: 'Google Backups'\n    },\n\n    cardsGroups: {\n        path: '/cards-groups',\n        name: 'Cards Groups'\n    },\n\n    cards: {\n        path: '/cards-list',\n        name: 'Cards'\n    },\n\n    cardsRepeater: {\n        path: '/cards-repeater',\n        name: 'Repeat Card'\n    },\n\n    cardsEditor: {\n        path: '/cards-editor',\n        name: 'Edit Card'\n    },\n\n    localBackups: {\n        path: '/local-backups',\n        name: 'Local Backups'\n    },\n\n    cardsGroupEditor: {\n        path: '/cards-group-editor',\n        name: 'Edit Group'\n    },\n\n    settings: {\n        path: '/settings',\n        name: 'Settings'\n    },\n\n    cardViewer: {\n        path: '/card-viewer',\n        name: 'Card Preview'\n    }\n};\n","import {Link} from 'react-router-dom';\nimport {ListItem} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {INavigationLinkComponent} from \"./types/INavigationLinkComponent\";\n\nexport const NavigationLinkComponent: FC<INavigationLinkComponent> = ({\n                                                                          path,\n                                                                          name,\n                                                                          toggleDrawer\n                                                                      }: INavigationLinkComponent) => {\n\n    return (\n        <ListItem button>\n            <Link to={path} onClick={toggleDrawer(false)}>\n                {name}\n            </Link>\n        </ListItem>\n    )\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {List, SwipeableDrawer} from '@mui/material';\n\nimport {Routs} from '../../common/Routs';\nimport {NavigationLinkComponent} from './elements/navigation-link-component/NavigationLinkComponent';\nimport {INavigationPanelComponent} from \"./types/INavigationPanelComponent\";\n\nexport const NavigationPanelComponent: FC<INavigationPanelComponent> = ({isOpen, toggleDrawer}) => {\n\n    return (\n        <SwipeableDrawer\n            anchor=\"left\"\n            open={isOpen}\n            onClose={toggleDrawer(false)}\n            onOpen={toggleDrawer(true)}\n        >\n            <List>\n                <NavigationLinkComponent path={Routs.cardsGroups.path} name={Routs.cardsGroups.name} toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.googleAuth.path} name={Routs.googleAuth.name} toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.localBackups.path} name={Routs.localBackups.name} toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.settings.path} name={Routs.settings.name} toggleDrawer={toggleDrawer}/>\n            </List>\n        </SwipeableDrawer>\n    )\n};\n\n\n","import * as React from 'react';\nimport {FC, ReactEventHandler, SyntheticEvent, useState} from 'react';\n\nimport {NavigationPanelComponent} from './NavigationPanelComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {INavigationPanelContainer} from \"./types/INavigationPanelContainer\";\nimport {NavigationPanelState} from \"./types/NavigationPanelState\";\n\nexport const NavigationPanelContainer: FC<INavigationPanelContainer> = (\n    {\n        navigationPanelService\n    }\n) => {\n\n    const [state, setState] = useState<NavigationPanelState>({\n        isOpen: false\n    });\n\n    useChannel<string, string>(navigationPanelService.navigationPanelOpenChannel, () => {\n        setState({...state, isOpen: true});\n    });\n\n    const toggleDrawer = (isOpen: boolean): ReactEventHandler => (event: SyntheticEvent<Element, KeyboardEvent>) => {\n        if (event && event.type === 'keydown' && (event.nativeEvent.key === 'Tab' || event.nativeEvent.key === 'Shift')) {\n            return;\n        }\n\n        setState({...state, isOpen});\n    };\n\n    return (\n        <NavigationPanelComponent isOpen={state.isOpen} toggleDrawer={toggleDrawer}/>\n    )\n};\n","import {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {IErrorComponent} from \"./types/IErrorComponent\";\n\nexport const ErrorComponent: FC<IErrorComponent> = ({isOpen, errorMessage, handleClose}) => {\n\n    return (\n        <Dialog\n            open={isOpen}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n            onClose={handleClose}\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"Something went wrong\"}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {errorMessage}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button color=\"primary\" onClick={handleClose}>\n                    Ok\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n","import React, {FC, useState} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ErrorComponent} from './ErrorComponent';\nimport {IErrorContainer} from \"./types/IErrorContainer\";\nimport {ErrorContainerState} from \"./types/ErrorContainerState\";\n\nexport const ErrorContainer: FC<IErrorContainer> = ({errorService}) => {\n\n    const [state, setState] = useState<ErrorContainerState>({isOpen: false, errorMessage: ''});\n\n    useChannel<string, string>(errorService.errorChannel, (errorMessage: string) => {\n        setState({\n            isOpen: true,\n            errorMessage\n        })\n    });\n\n    const onClose = () => {\n        setState({\n            isOpen: false,\n            errorMessage: ''\n        })\n    };\n\n    return <ErrorComponent isOpen={state.isOpen} errorMessage={state.errorMessage} handleClose={onClose}/>\n};\n","import {LinearProgress} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {ISpinnerComponent} from \"./types/ISpinnerComponent\";\n\nexport const SpinnerComponent: FC<ISpinnerComponent> = ({isShow}) => {\n    return (\n        isShow ? <LinearProgress color=\"secondary\" /> : null\n    )\n};\n","import * as React from 'react';\nimport {FC, useState} from 'react';\n\nimport {SpinnerComponent} from './SpinnerComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ISpinnerContainer} from \"./types/ISpinnerContainer\";\n\nexport const SpinnerContainer: FC<ISpinnerContainer> = ({spinnerService}) => {\n\n    const [isShow, setShowing] = useState(false);\n\n    useChannel<number, number>(spinnerService.spinnerCounterChannel, (spinnerCounter) => {\n        setShowing(spinnerCounter !== 0);\n    });\n\n    return <SpinnerComponent isShow={isShow}/>\n};\n","import DialogTitle from \"@mui/material/DialogTitle\";\nimport React, {FC} from \"react\";\n\nimport {IDialogTitleComponent} from \"./types/IDialogTitleComponent\";\nimport './DialogTitleComponent.css'\n\nexport const DialogTitleComponent: FC<IDialogTitleComponent> = (\n    {\n        titleBackgroundColor = 'grey',\n        icon = null\n    }\n) => {\n    return <DialogTitle\n        id=\"alert-dialog-title\"\n        style={\n            {\n                backgroundColor: titleBackgroundColor,\n                color: 'white'\n            }\n        }\n    >\n        <div className=\"dialog-title_value\">\n            Warning {icon}\n        </div>\n    </DialogTitle>\n}","import React, {FC} from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\nimport {IConfirmDialogComponent} from \"./types/IConfirmDialogComponent\";\nimport {DialogTitleComponent} from \"./elements/dialog-title/DialogTitleComponent\";\n\nexport const ConfirmDialogComponent: FC<IConfirmDialogComponent> = (\n    {\n        onClickAgree,\n        onClickDisagree,\n        isOpen,\n        message,\n        onClose,\n        titleBackgroundColor = 'grey',\n        icon = null\n    }\n) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitleComponent\n                    titleBackgroundColor={titleBackgroundColor}\n                    icon={icon}\n                />\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClickDisagree} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={onClickAgree} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n","import {ConfirmDialogContainerState} from \"../../parts/confirm-dialog/types/ConfirmDialogContainerState\";\n\nexport const defaultConfirmDialogState: ConfirmDialogContainerState = {\n    isOpen: false,\n    message: '',\n    icon: null,\n    titleBackgroundColor: 'grey'\n}","import * as React from 'react';\nimport {FC} from 'react';\n\nimport {ConfirmDialogComponent} from './ConfirmDialogComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {IConfirmDialogContainer} from \"./types/IConfirmDialogContainer\";\nimport {ConfirmDialogContainerState} from \"./types/ConfirmDialogContainerState\";\nimport {defaultConfirmDialogState} from \"../../common/defaults/defaultConfirmDialogState\";\n\nexport const ConfirmDialogContainer: FC<IConfirmDialogContainer> = ({confirmDialogService}) => {\n\n    const [state, setState] = React.useState<ConfirmDialogContainerState>(defaultConfirmDialogState);\n\n    useChannel<ConfirmDialogContainerState, ConfirmDialogContainerState>(\n        confirmDialogService.openDialogChannel,\n        (state: ConfirmDialogContainerState) => {\n            setState(() => {\n                return {...state}\n            })\n        }\n    );\n\n    const onClose = () => {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                isOpen: false, message: ''\n            }\n        });\n        confirmDialogService.confirmationChannel.unsubscribe();\n    };\n\n    const onClickAgree = () => {\n        confirmDialogService.confirmationChannel.next(true);\n    };\n\n    const onClickDisagree = () => {\n        confirmDialogService.confirmationChannel.next(false);\n    };\n\n    return <ConfirmDialogComponent\n        isOpen={state.isOpen}\n        onClickAgree={onClickAgree}\n        onClickDisagree={onClickDisagree}\n        onClose={onClose}\n        message={state.message}\n        titleBackgroundColor={state.titleBackgroundColor}\n        icon={state.icon}\n    />\n};\n","export const jsonEqual = <T>(args: { value: T, other: T }) => {\n    const {value, other} = args;\n\n    if(typeof value !== 'object') {\n        return value === other;\n    }\n\n    if(value instanceof Array && other instanceof Array) {\n       if(value.length !== other.length) {\n           return false;\n       }\n    }\n    console.log('checked')\n\n    return JSON.stringify(value) === JSON.stringify(other);\n}","import {Observable} from 'rxjs';\n\nimport {functionToThread} from \"../logic/functionToThread\";\n\nexport const fromThread = <A, R>(arg: A, workerFunction: (arg: A) => R): Observable<R> => {\n\n    const thread = functionToThread(workerFunction)\n\n    return new Observable(observer => {\n        thread.postMessage(arg);\n        thread.onmessage = (event: MessageEvent) => {\n            observer.next(event.data);\n            observer.complete();\n            thread.terminate();\n        }\n        thread.onerror = (err) => {\n            observer.error(err);\n        }\n    })\n}","export const functionToThread = <A, R>(workerFunction: (arg: A) => R) => {\n\n    const functionString = `(function worker() {\n            var self = this;\n            self.onmessage = function(e) {\n                const result = (${workerFunction.toString()})(e.data)\n                self.postMessage(result);\n            }\n        })()`;\n\n    const functionBlob = new Blob([functionString], {type: 'text/javascript'});\n\n    return new Worker(URL.createObjectURL(functionBlob));\n}","import {Observable, Subject, Subscription} from 'rxjs';\n\nimport {jsonEqual} from \"./logic/jsonEqual\";\nimport {fromThread} from \"../worker-observable/operators/fromThread\";\n\nexport class Channel<A, D> {\n\n    private readonly outputSubject: Subject<D>;\n    private observableCreator: (arg: A) => Observable<D>;\n    private subscriptions: Subscription[] = [];\n    private previousEmittedValue: D | null = null;\n    private static globalErrorHandler = (error: Error) => {};\n    private static globalNextHandler = () => {};\n\n    constructor(\n        observableCreator: (arg: A) => Observable<D>\n    ) {\n        this.outputSubject = new Subject<D>();\n        this.observableCreator = observableCreator;\n    }\n\n    next(value: A) {\n        //Don't make implement complete method because it can affect on subject behaviour in app\n        this.subscriptions.push(this.observableCreator(value).subscribe(\n            (value) => {\n                this.outputSubject.next(value);\n            },\n            (error) => {\n                this.outputSubject.error(error);\n            }\n        ));\n    }\n\n    subscribe(\n        next?: (data: D) => void,\n        customErrorHandler?: (error: Error) => void,\n        deepEqual = false\n    ): Subscription {\n        const outputSubjectSubscription = this.outputSubject.subscribe(\n            (data: D) => {\n                if (next) {\n                    if (deepEqual) {\n                        this.deepEqual(next, data);\n                    } else {\n                        next(data)\n                        Channel.globalNextHandler()\n                    }\n                }\n            },\n            (error: Error) => {\n                if (customErrorHandler) {\n                    customErrorHandler(error);\n                }\n                Channel.globalErrorHandler(error)\n            }\n        );\n        this.subscriptions.push(outputSubjectSubscription);\n        return outputSubjectSubscription;\n    }\n\n    private deepEqual(next: (data: D) => void, data: D): void {\n        if (!this.previousEmittedValue) {\n            next(data)\n            Channel.globalNextHandler()\n            this.previousEmittedValue = data;\n        }\n\n        const subscription = fromThread(\n            {value: data, other: this.previousEmittedValue},\n            jsonEqual\n        ).subscribe(\n            (result) => {\n                if (!result) {\n                    next(data)\n                    Channel.globalNextHandler()\n                    this.previousEmittedValue = data;\n                }\n            },\n            (equalityError) => {\n                console.error(equalityError)\n            }\n        )\n        this.subscriptions.push(subscription)\n    }\n\n    unsubscribe() {\n        this.subscriptions.forEach((subscribtion: Subscription) => {\n            if (!subscribtion.closed) {\n                subscribtion.unsubscribe();\n            }\n        });\n        this.subscriptions = [];\n        this.previousEmittedValue = null;\n    }\n\n    static setGlobalErrorHandler = (globalErrorHandler: (error: Error) => void) => {\n        Channel.globalErrorHandler = globalErrorHandler;\n    }\n\n    static setGlobalNextHandler = (globalNextHandler: () => void) => {\n        Channel.globalNextHandler = globalNextHandler;\n    }\n}\n","import {of} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class SpinnerService {\n\n    public spinnerCounterChannel: Channel<number, number>;\n\n    private spinnerCounter = 0;\n\n    constructor() {\n        this.spinnerCounterChannel = new Channel((difference: number) => of('').pipe(map(() => {\n            if(this.spinnerCounter + difference >= 0) {\n                this.spinnerCounter = this.spinnerCounter + difference;\n            }\n            return this.spinnerCounter;\n        })))\n    }\n}\n","export enum ISortVariant {\n    NONE = 'Нет сортировки',\n    QUESTION_ASK = 'По вопросу по возрастанию',\n    QUESTION_DESK = 'По вопросу по убыванию',\n    ANSWER_ASK = 'По ответу по возрастанию',\n    ANSWER_DESK = 'По ответу по убыванию',\n    NAME_ASK = 'По имени по возрастанию',\n    NAME_DESK = 'По имени по убыванию',\n    STATUS_ASK = 'По стсатусу сначала пройденные',\n    STATUS_DESK = 'По статусу сначала не пройденные',\n    DATE_ASK = 'По дате повторения сначала устаревшие',\n    DATE_DESK = 'По дате повторения сначала новые',\n    PROGRESS_ASK = 'Прогресс повторения повышение',\n    PROGRESS_DESC = 'Прогресс повторения понижение',\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport Fab from '@mui/material/Fab';\nimport AddIcon from '@mui/icons-material/Add';\n\nimport {IAddButton} from \"./types/IAddButton\";\nimport './AddButtonComponent.css'\n\nexport const AddButtonComponent: FC<IAddButton> = ({onClick}) => {\n    return <Fab size=\"medium\" color=\"secondary\" aria-label=\"add\" className=\"add-button\" onClick={onClick}>\n        <AddIcon/>\n    </Fab>\n};\n","import React, {FC} from 'react';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nimport {ICircularProgressComponent} from \"./types/ICircularProgressComponent\";\n\nexport const CircularProgressComponent: FC<ICircularProgressComponent> = ({percent}) => {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" value={percent}/>\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                    percent,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n};\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nimport {IListItemMenuComponent} from \"./types/IListItemMenuComponent\";\n\nexport const ListItemMenuComponent: FC<IListItemMenuComponent> = ({onEdit, onDelete, onResetProgress}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const editClick = () => {\n        onEdit();\n        handleClose();\n    };\n\n    const resetClick = () => {\n        onResetProgress();\n        handleClose();\n    };\n\n    const deleteClick = () => {\n        onDelete();\n        handleClose();\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={editClick}>Edit</MenuItem>\n                <MenuItem onClick={resetClick}>Reset progress</MenuItem>\n                <MenuItem onClick={deleteClick}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n","export const DATE_FORMAT = \"dd-MM-yyyy\";","import React, {FC} from \"react\"\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\n\nimport {CircularProgressComponent} from '../circular-progress/CircularProgressComponent';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport './CardsGroupsListItemComponent.css'\nimport {ICardsGroupsListItemComponent} from \"./types/ICardsGroupsListItemComponent\";\nimport {DATE_FORMAT} from \"../../../../common/constants/DATE_FORMAT\";\n\nexport const CardsGroupsListItemComponent: FC<ICardsGroupsListItemComponent> = (\n    {\n        cardsGroup,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress\n    }\n) => {\n\n    return <>\n        <ListItem key={cardsGroup.id} button component=\"div\">\n            <ListItemIcon onClick={() => onClickItem(cardsGroup.id)}>\n                <CircularProgressComponent percent={cardsGroup.percentRepeatedCards || 0}/>\n            </ListItemIcon>\n            <ListItemText\n                className=\"cards-groups-list-item_card-name\"\n                onClick={() => onClickItem(cardsGroup.id)}\n                primary={cardsGroup.nameCardsGroup}\n                secondary={'Last repeating date: ' + format(cardsGroup.repeatingDate ? cardsGroup.repeatingDate : new Date(), DATE_FORMAT)}\n            />\n            <ListItemIcon>\n                <ListItemMenuComponent\n                    onEdit={() => onEditItem(cardsGroup.id)}\n                    onDelete={() => onDeleteItem(cardsGroup.id)}\n                    onResetProgress={() => onResetProgress(cardsGroup.id)}\n                />\n            </ListItemIcon>\n        </ListItem>\n    </>\n};\n","import {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    TextField,\n} from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport {ChangeEvent, default as React, FC} from \"react\";\n\nimport {ISortVariant} from \"../../types/ISortVariant\";\nimport {IFilterComponent} from \"./types/IFilterComponent\";\n\nexport const FilterComponent: FC<IFilterComponent> = (\n    {\n        onChangeSearchableText,\n        filter,\n        onChangeSorting,\n        sortVariants\n    }\n) => {\n\n    const handleChangingSearchableText = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeSearchableText(event.target.value);\n    };\n\n    const handleChangingSortingVariant = (event: SelectChangeEvent<ISortVariant>) => {\n        onChangeSorting(event.target.value as ISortVariant)\n    }\n\n    return <Accordion>\n        <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n        >\n            <TextField\n                className=\"text-editor\"\n                required\n                id=\"outlined-required\"\n                placeholder=\"Search text\"\n                onChange={handleChangingSearchableText}\n                value={filter.searchableText}\n                style={{\n                    marginRight: '20px',\n                }}\n                onClick={(event) => {\n                    event.stopPropagation()\n                    event.preventDefault()\n                }}\n            />\n        </AccordionSummary>\n        <AccordionDetails>\n            <Select\n                value={filter.sort}\n                label=\"Sorting\"\n                onChange={handleChangingSortingVariant}\n            >\n                {\n                    sortVariants.map((variant: ISortVariant) => {\n                        return <MenuItem key={variant} value={variant}>{variant}</MenuItem>\n                    })\n                }\n            </Select>\n        </AccordionDetails>\n    </Accordion>\n}","import React, {FC} from \"react\";\nimport {FixedSizeList as List} from 'react-window';\n\nimport './CardsGroupsListComponent.css'\nimport {AddButtonComponent} from '../../common/elements/add-button/AddButtonComponent';\nimport {CardsGroupsListItemComponent} from './elements/cards-groups-list-item/CardsGroupsListItemComponent';\nimport {ICardsGroupsListComponent} from \"./types/ICardsGroupsListComponent\";\nimport {FilterComponent} from \"../../common/elements/filter/FilterComponent\";\nimport {ISortVariant} from \"../../common/types/ISortVariant\";\n\nexport const CardsGroupsListComponent: FC<ICardsGroupsListComponent> = (\n    {\n        cardsGroups,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onOpenEditor,\n        onResetProgress,\n        onChangeSearchableText,\n        onChangeSorting,\n        filter,\n        height,\n    }\n) => {\n\n    return <>\n        <FilterComponent\n            filter={filter}\n            onChangeSearchableText={onChangeSearchableText}\n            onChangeSorting={onChangeSorting}\n            sortVariants={[\n                ISortVariant.NONE,\n                ISortVariant.DATE_ASK,\n                ISortVariant.DATE_DESK,\n                ISortVariant.NAME_ASK,\n                ISortVariant.NAME_DESK,\n                ISortVariant.PROGRESS_ASK,\n                ISortVariant.PROGRESS_DESC\n            ]}\n        />\n        <List\n            className=\"cards-groups\"\n            itemData={cardsGroups}\n            itemSize={55}\n            itemCount={cardsGroups.length}\n            overscanCount={5}\n            height={height}\n            width=\"100%\"\n        >\n            {({index, style}: any) => {\n                const cardGroup = cardsGroups[index];\n                return <div style={style}><CardsGroupsListItemComponent\n                    key={cardGroup.id}\n                    cardsGroup={cardGroup}\n                    onClickItem={onClickItem}\n                    onEditItem={onEditItem}\n                    onDeleteItem={onDeleteItem}\n                    onResetProgress={onResetProgress}\n                /></div>\n            }}\n        </List>\n        <AddButtonComponent onClick={onOpenEditor}/>\n    </>\n};\n","export enum IRangeOfKnowledge {\n    TO_DO,\n    IN_PROGRESS,\n    DONE\n}\n","import {useRef} from 'react';\n\nexport const useConstructor = (callback: () => void) => {\n\n    const value = useRef({isFirstRun: true});\n\n    if (value.current.isFirstRun) {\n        callback();\n        value.current.isFirstRun = false;\n    }\n};\n","import {useEffect, useRef} from 'react';\nimport {Subscription} from 'rxjs';\n\nexport const useUnsubscribe = () => {\n\n    const subscriptions = useRef<Array<Subscription>>([]);\n\n    useEffect(() => {\n        return () => {\n            subscriptions.current.forEach((subscription: Subscription) => {\n                if( !subscription.closed ) {\n                    subscription.unsubscribe();\n                }\n            });\n            subscriptions.current = [];\n        }\n    }, []);\n\n    return { setSubscription: (subscribtion: Subscription) => {\n        subscriptions.current.push(subscribtion);\n    }}\n};\n","import {useHistory, useLocation} from \"react-router\";\nimport {Context, useContext, useState} from \"react\";\nimport {useUnsubscribe} from \"./useUnsubscribe\";\nimport {ICallbackSettings} from \"./types/ICallbackSettings\";\nimport {CallbackFactory} from \"../react-utils/CallbackFactory\";\n\nexport const useCallbackFactory = <NS, CS, PS, CX>(\n    initialState: CS,\n    services: PS,\n    context: Context<CX>\n) => {\n    const location = useLocation<NS>();\n\n    const history = useHistory<NS>();\n\n    const [state, setState] = useState<CS>(initialState);\n\n    const {setSubscription} = useUnsubscribe();\n\n    const value = useContext<CX>(context);\n\n    const callbackSettings: ICallbackSettings<CS, PS, NS, CX> = {\n        location,\n        history,\n        services,\n        state,\n        setState,\n        context: value,\n        setSubscription\n    }\n\n    return {\n        callbackFactory: CallbackFactory(callbackSettings),\n        callbackSettings\n    };\n}","export type ICallback<S, A> = (settings: S, args?: A) => void\n\nexport const CallbackFactory = <S>(settings: S) => <A>(callback: ICallback<S, A>) => {\n    return (args?: A) => callback(settings, args)\n}","import RefreshIcon from '@mui/icons-material/Refresh';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onResetProgress: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {services, setSubscription},\n    cardsGroupID = -1\n) => {\n    const {confirmDialogService, cardsGroupsListService} = services;\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsGroupsListService.resetProgressChannel.next(cardsGroupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to reset progress of this group?',\n        titleBackgroundColor: 'green',\n        icon: <RefreshIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {history, location},\n    cardsGroupID = -1\n) => {\n    history.push({\n        pathname: Routs.cardsGroupEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: cardsGroupID\n        }\n    })\n}","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {\n        history,\n        location,\n        services: {\n            confirmDialogService,\n            cardsGroupsListService\n        },\n        setSubscription\n    },\n    cardsGroupID = -1\n) => {\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsGroupsListService.groupDeleteChannel.next(cardsGroupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this group?',\n        icon: <DeleteIcon/>,\n        titleBackgroundColor: 'red'\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onOpenEditor: ICallback<ICardsGroupsCallbackSettings, void> = (\n    {history}\n) => {\n    history.push({\n        pathname: Routs.cardsGroupEditor.path\n    })\n}","import {Routs} from \"../../../common/Routs\";\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onClickItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {history, location},\n    cardsGroupID = -1\n) => {\n    history.push({\n        pathname: Routs.cards.path,\n        state: {\n            ...location.state,\n            cardsGroupID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onConstructor: ICallback<ICardsGroupsCallbackSettings, void> = (\n    {services}\n) => {\n    services.cardsGroupsListService.groupsListChannel.next('');\n    services.cardsGroupsListService.filterChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onResetProgressChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {\n        services: {\n            cardsGroupsListService\n        },\n    }\n) => {\n    cardsGroupsListService.groupsListChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupDeleteChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {\n        services: {\n            cardsGroupsListService\n        }\n    }\n) => {\n    cardsGroupsListService.groupsListChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupsListChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {setState, state},\n    cardsGroups = []\n) => {\n    setState((prevState) => {\n        return {...prevState, cardsGroups}\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const onChangeSorting: ICallback<ICardsGroupsCallbackSettings, ISortVariant> = (\n    {services: {cardsGroupsListService}, state},\n    sortVariant = ISortVariant.NONE\n) => {\n    const newFilter = {\n        ...state.filter,\n        sort: sortVariant\n    }\n    cardsGroupsListService.changeFilterChannel.next(newFilter);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {IStoredFilters} from \"../../../common/types/IStoredFilters\";\n\nexport const onChangeFilterChannel: ICallback<ICardsGroupsCallbackSettings, IStoredFilters> = (\n    {\n        services: {\n            cardsGroupsListService\n        }\n    }\n) => {\n    cardsGroupsListService.filterChannel.next('');\n    cardsGroupsListService.groupsListChannel.next('');\n}","import {ISortVariant} from \"../types/ISortVariant\";\n\nexport const defaultFilterValue = {\n    searchableText: '',\n    sort: ISortVariant.NONE\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {defaultFilterValue} from \"../../../common/defaults/defaultFilterValue\";\n\nexport const onFilterChannel: ICallback<ICardsGroupsCallbackSettings, IFilter> = (\n    {state, setState, services},\n    filter = defaultFilterValue\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            filter\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onChangeSearchableText: ICallback<ICardsGroupsCallbackSettings, string> = (\n    {\n        state,\n        services: {\n            cardsGroupsListService\n        }\n    },\n    searchableText = ''\n) => {\n    cardsGroupsListService.changeFilterChannel.next({\n        ...state.filter,\n        searchableText\n    })\n}","import {defaultFilterValue} from \"../../../common/defaults/defaultFilterValue\";\n\nexport const initialState = {\n    cardsGroups: [],\n    filter: defaultFilterValue\n}","import React, {FC, useCallback} from \"react\";\n\nimport {CardsGroupsListComponent} from './CardsGroupsListComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {IAppContext} from '../../common/types/IAppContext';\nimport {AppContext} from '../../../App';\nimport {ICardsGroupsListContainer} from \"./types/ICardsGroupsListContainer\";\nimport {CardsGroupsListContainerState} from \"./types/CardsGroupsListContainerState\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {INavigationState} from \"../../common/types/INavigationState\";\nimport {onResetProgress} from \"./ui-callbacks/onResetProgress\";\nimport {onEditItem} from \"./ui-callbacks/onEditItem\";\nimport {onDeleteItem} from \"./ui-callbacks/onDeleteItem\";\nimport {onOpenEditor} from \"./ui-callbacks/onOpenEditor\";\nimport {onClickItem} from \"./ui-callbacks/onClickItem\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onResetProgressChannel} from \"./channels-callbacks/onResetProgressChannel\";\nimport {onGroupDeleteChannel} from \"./channels-callbacks/onGroupDeleteChannel\";\nimport {onGroupsListChannel} from \"./channels-callbacks/onGroupsListChannel\";\nimport {onChangeSorting} from \"./ui-callbacks/onChangeSorting\";\nimport {onChangeFilterChannel} from \"./channels-callbacks/onChangeFilterChannel\";\nimport {onFilterChannel} from \"./channels-callbacks/onFilterChannel\";\nimport {onChangeSearchableText} from \"./ui-callbacks/onChangeSearchableText\";\nimport {initialState} from \"./defaults/initialState\";\n\nexport const CardsGroupsListContainer: FC<ICardsGroupsListContainer> = (\n    services\n) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardsGroupsListContainerState, ICardsGroupsListContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, context, services: {cardsGroupsListService}} = callbackSettings\n\n    useChannel(cardsGroupsListService.groupsListChannel, callbackFactory(onGroupsListChannel));\n    useChannel(cardsGroupsListService.groupDeleteChannel, callbackFactory(onGroupDeleteChannel));\n    useChannel(cardsGroupsListService.resetProgressChannel, callbackFactory(onResetProgressChannel));\n    useChannel(cardsGroupsListService.changeFilterChannel, callbackFactory(onChangeFilterChannel));\n    useChannel(cardsGroupsListService.filterChannel, callbackFactory(onFilterChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const clickItem = useCallback(callbackFactory(onClickItem), []);\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const deleteItem = useCallback(callbackFactory(onDeleteItem), []);\n    const editItem = useCallback(callbackFactory(onEditItem), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const changeSorting = useCallback(callbackFactory(onChangeSorting), [state.filter]);\n    const changeSearchableText = useCallback(callbackFactory(onChangeSearchableText), [state.filter]);\n\n    return <CardsGroupsListComponent\n        onClickItem={clickItem}\n        onOpenEditor={openEditor}\n        onDeleteItem={deleteItem}\n        onEditItem={editItem}\n        onResetProgress={resetProgress}\n        onChangeSorting={changeSorting}\n        filter={state.filter}\n        onChangeSearchableText={changeSearchableText}\n        height={context.height}\n        cardsGroups={state.cardsGroups}/>\n};\n","import GoogleLogin from 'react-google-login';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport './GoogleAuthComponent.css'\nimport {IGoogleAuthComponent} from \"./types/IGoogleAuthComponent\";\n\nexport const GoogleAuthComponent: FC<IGoogleAuthComponent> = ({onSuccess, onFailure, height}) => {\n    return (\n        <div className=\"google-auth\" style={{height}}>\n            <GoogleLogin\n                className=\"google-auth_button\"\n                clientId=\"627973926597-tj2la0mnorvm04cqmcosu2nj3b02g6k2.apps.googleusercontent.com\"\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                scope={'profile email https://www.googleapis.com/auth/drive'}\n            />\n        </div>\n    )\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleLoginResponse, GoogleLoginResponseOffline} from \"react-google-login\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\n\nexport const onSuccess: ICallback<GoogleAuthCallbackSettings, GoogleLoginResponse | GoogleLoginResponseOffline> = (\n    {services: {googleAuthService}},\n    response\n) => {\n    googleAuthService.loginChannel.next((response as GoogleLoginResponse).accessToken);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\nimport {GoogleLoginResponse, GoogleLoginResponseOffline} from \"react-google-login\";\n\nexport const onFailure: ICallback<GoogleAuthCallbackSettings, GoogleLoginResponse | GoogleLoginResponseOffline> = (\n    {services: {errorService}}\n) => {\n    errorService.errorChannel.next('Error of connection');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onLoginChannel: ICallback<GoogleAuthCallbackSettings, string> = (\n    {history}\n) => {\n    history.replace(Routs.googleBackups.path);\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {GoogleAuthComponent} from './GoogleAuthComponent';\nimport {IAppContext} from '../../common/types/IAppContext';\nimport {AppContext} from '../../../App';\nimport {IGoogleAuthContainer} from \"./types/IGoogleAuthContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {INavigationState} from \"../../common/types/INavigationState\";\nimport {onSuccess} from \"./ui-callbacks/onSuccess\";\nimport {onFailure} from \"./ui-callbacks/onFailure\";\nimport {onLoginChannel} from \"./channels-callbacks/onLoginChannel\";\n\nexport const GoogleAuthContainer: FC<IGoogleAuthContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, null, IGoogleAuthContainer, IAppContext>(\n        null,\n        services,\n        AppContext\n    );\n\n    const {context, services: {googleAuthService}} = callbackSettings\n\n    useChannel(googleAuthService.loginChannel, callbackFactory(onLoginChannel));\n\n    const success = useCallback(callbackFactory(onSuccess), []);\n    const failure = useCallback(callbackFactory(onFailure), []);\n\n    return <GoogleAuthComponent\n        onSuccess={success}\n        onFailure={failure}\n        height={context.height}\n    />;\n};\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nimport {IBackupMenuComponent} from \"./types/IBackupMenuComponent\";\n\n\nexport const BackupMenuComponent: FC<IBackupMenuComponent> = ({backupID, onLoad, onDelete}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const onLoadBackup = () => {\n        setAnchorEl(null);\n        onLoad(backupID);\n    };\n\n    const onDeleteBackup = () => {\n        setAnchorEl(null);\n        onDelete(backupID);\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={onLoadBackup}>Load</MenuItem>\n                <MenuItem onClick={onDeleteBackup}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n","import {default as React, FC} from 'react';\nimport {ListItem, ListItemIcon, ListItemText} from '@mui/material';\n\nimport {BackupMenuComponent} from '../backup-menu-component/BackupMenuComponent';\nimport {IBackupsListItemComponent} from \"./types/IBackupsListItemComponent\";\n\nexport const BackupsListItemComponent: FC<IBackupsListItemComponent> = (\n    {\n        backupName,\n        backupDate,\n        backupID,\n        onLoad,\n        onDelete\n    }\n) => {\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={backupName}\n                secondary={backupDate}\n            />\n            <ListItemIcon>\n                <BackupMenuComponent backupID={backupID} onLoad={onLoad} onDelete={onDelete}/>\n            </ListItemIcon>\n        </ListItem>\n    );\n};\n","import {List} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {BackupsListItemComponent} from './elements/backups-list-item-component/BackupsListItemComponent';\nimport {AddButtonComponent} from '../../common/elements/add-button/AddButtonComponent';\nimport {IBackupsListComponent} from \"../local-backup/types/IBackupsListComponent\";\n\n\nexport const GoogleBackupsComponent: FC<IBackupsListComponent> = ({backupsFiles, onLoad, onCreate, onDelete}) => {\n    return (\n        <>\n            <List>\n                {\n                    backupsFiles.map((backup: IGoogleDriveFile) => {\n                        return <BackupsListItemComponent\n                            key={backup.id}\n                            backupName={backup.name}\n                            backupDate={backup.createdTime}\n                            onLoad={onLoad}\n                            onDelete={onDelete}\n                            backupID={backup.id}/>\n                    })\n                }\n            </List>\n            <AddButtonComponent onClick={onCreate}/>\n        </>\n    )\n};\n","import * as React from 'react';\nimport {FC, useState} from 'react';\nimport UploadIcon from '@mui/icons-material/Upload';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {GoogleBackupsComponent} from './GoogleBackupsComponent';\nimport {useHistory} from 'react-router';\nimport {Routs} from '../../common/Routs';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {useUnsubscribe} from '../../../MyTools/react-hooks/useUnsubscribe';\nimport {IGoogleBackupsContainer} from \"./types/IGoogleBackupsContainer\";\nimport {GoogleAuthComponentState} from \"./types/GoogleAuthComponentState\";\nimport {defaultConfirmDialogState} from \"../../common/defaults/defaultConfirmDialogState\";\n\nexport const GoogleBackupsContainer: FC<IGoogleBackupsContainer> = (\n    {\n        spinnerService,\n        googleBackupsService,\n        confirmDialogService\n    }\n) => {\n\n    const history = useHistory();\n\n    const [state, setState] = useState<GoogleAuthComponentState>({\n        backupsFiles: []\n    });\n\n    useChannel(\n        googleBackupsService.backupsNameLoadChannel,\n        (backupsFiles: IGoogleDriveFile[]) => {\n            setState({...state, backupsFiles: backupsFiles});\n            spinnerService.spinnerCounterChannel.next(-1);\n        },\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n            history.replace(Routs.googleAuth.path);\n        }\n    );\n\n    useChannel(\n        googleBackupsService.backupLoadChannel,\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n        },\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n            history.replace(Routs.googleAuth.path);\n        }\n    );\n\n    useChannel(googleBackupsService.backupDeleteChannel, () => {\n        spinnerService.spinnerCounterChannel.next(-1);\n        googleBackupsService.backupsNameLoadChannel.next('')\n    });\n\n    useChannel(googleBackupsService.backupUploadChannel, () => {\n        googleBackupsService.backupsNameLoadChannel.next('')\n        spinnerService.spinnerCounterChannel.next(-1);\n    });\n\n    useConstructor(() => {\n        googleBackupsService.backupsNameLoadChannel.next('');\n    });\n\n    const {setSubscription} = useUnsubscribe();\n\n    const onLoad = (backupID: string) => {\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                spinnerService.spinnerCounterChannel.next(1);\n                googleBackupsService.backupLoadChannel.next(backupID);\n            }\n\n            confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to load this backup?',\n            titleBackgroundColor: 'red',\n            icon: <UploadIcon/>\n        });\n    };\n\n    const onDelete = (backupID: string) => {\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                spinnerService.spinnerCounterChannel.next(1);\n                googleBackupsService.backupDeleteChannel.next(backupID);\n            }\n\n            confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to delete this backup?',\n            titleBackgroundColor: 'red',\n            icon: <DeleteIcon/>\n        });\n    };\n\n    const onCreate = () => {\n        spinnerService.spinnerCounterChannel.next(1);\n        googleBackupsService.backupUploadChannel.next();\n    };\n\n    return <GoogleBackupsComponent\n        backupsFiles={state.backupsFiles}\n        onLoad={onLoad}\n        onDelete={onDelete}\n        onCreate={onCreate}\n    />;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport CopyIcon from \"@mui/icons-material/CopyAll\";\nimport Fab from \"@mui/material/Fab\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport SelectAllIcon from \"@mui/icons-material/SelectAll\";\nimport DriveFileMoveIcon from \"@mui/icons-material/DriveFileMove\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport {ICardsListActions} from \"./types/ICardsListActions\";\nimport './CardsListActions.css'\n\nexport const CardsListActions: FC<ICardsListActions> = (\n    {\n        onOpenEditor,\n        onOpenRepeater,\n        onStartSelecting,\n        onMovingSelectedCards,\n        onDeleteSelectedCards,\n        onCopySelectedCards,\n        hideOpenRepeaterButton = false,\n        hideOpenEditorButton = false,\n        hideMovingSelectedCardsButton = false,\n        hideDeleteSelectedCardsButton = false,\n        hideCopySelectedCardButton = false\n    }\n) => {\n    return <div className=\"cards-list-actions\">\n        <Fab size=\"medium\" color=\"secondary\" onClick={onStartSelecting}>\n            <SelectAllIcon/>\n        </Fab>\n        <Fab size=\"medium\" color=\"primary\" onClick={onOpenRepeater}>\n            <PlayArrowIcon/>\n        </Fab>\n        {\n            !hideOpenEditorButton && <Fab size=\"medium\" color=\"secondary\" onClick={onOpenEditor}>\n                <AddIcon/>\n            </Fab>\n        }\n        {\n            !hideMovingSelectedCardsButton && <Fab size=\"medium\" color=\"primary\" onClick={onMovingSelectedCards}>\n                <DriveFileMoveIcon/>\n            </Fab>\n        }\n        {\n            !hideCopySelectedCardButton && <Fab size=\"medium\" color=\"secondary\" onClick={onCopySelectedCards}>\n                <CopyIcon/>\n            </Fab>\n        }\n        {\n            !hideDeleteSelectedCardsButton && <Fab size=\"medium\" color=\"secondary\" onClick={onDeleteSelectedCards}>\n                <DeleteIcon/>\n            </Fab>\n        }\n    </div>\n}","import React, {FC} from \"react\";\n\nimport {ICardPrimaryTextComponent} from \"./types/ICardPrimaryTextComponent\";\nimport './CardPrimaryTextComponent.css'\n\nexport const CardPrimaryTextComponent: FC<ICardPrimaryTextComponent> = ({card}) => {\n    return <div className=\"card-primary-text\">\n        <p className=\"card-primary-text_title\">\n            {card.question}\n        </p>\n        <p className=\"card-primary-text_content\">\n            {card.answer}\n        </p>\n    </div>\n}","import React, {FC} from \"react\"\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport FlagIcon from '@mui/icons-material/Flag';\nimport {Checkbox} from \"@mui/material\";\n\nimport {ICard} from '../../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../../common/types/IRangeOfKnowledge';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport {ICardListItemComponent} from \"./types/ICardListItemComponent\";\nimport {CardPrimaryTextComponent} from \"../card-primary-text/CardPrimaryTextComponent\";\nimport {DATE_FORMAT} from \"../../../../common/constants/DATE_FORMAT\";\n\nexport const CardsListItemComponent: FC<ICardListItemComponent> = (\n    {\n        card,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onSelect,\n        isEnabledSelecting,\n        isSelected\n    }\n) => {\n\n    const dateText = 'Last repeating date: ' + format(card.dateRepeating ? card.dateRepeating : new Date(), DATE_FORMAT)\n\n    const getIconColor = (card: ICard): string => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n            return 'green'\n        }\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            return 'yellow'\n        }\n        return 'red'\n    };\n\n    return <ListItem key={card.id} button>\n        <ListItemIcon onClick={() => onClickItem(card.id)}>\n            <FlagIcon style={{color: getIconColor(card)}}/>\n        </ListItemIcon>\n        <ListItemText\n            onClick={() => onClickItem(card.id)}\n            primary={<CardPrimaryTextComponent card={card}/>}\n            secondary={dateText}\n        />\n        {\n            !isEnabledSelecting ?\n                <ListItemIcon>\n                    <ListItemMenuComponent\n                        onEdit={() => onEditItem(card.id)}\n                        onDelete={() => onDeleteItem(card.id)}\n                        onResetProgress={() => onResetProgress(card.id)}\n                    />\n                </ListItemIcon> :\n                <ListItemIcon onClick={() => isEnabledSelecting && onSelect(card.id)}>\n                    <Checkbox\n                        edge=\"start\"\n                        checked={isSelected}\n                        tabIndex={-1}\n                        disableRipple\n                    />\n                </ListItemIcon>\n        }\n    </ListItem>\n};\n","import {FixedSizeList as List} from \"react-window\";\nimport * as React from \"react\";\nimport {FC} from \"react\";\n\nimport {CardsListItemComponent} from \"../cards-list-item/CardsListItemComponent\";\nimport {ICardsListComponent} from \"./types/ICardsListComponent\";\n\nexport const CardsListComponent: FC<ICardsListComponent> = (\n    {\n        cards,\n        height,\n        onEditItem,\n        onDeleteItem,\n        onSelectItem,\n        onResetProgress,\n        onClickItem,\n        isEnabledSelecting,\n        selectedItems\n    }\n) => {\n    return <List\n        className=\"cards\"\n        itemData={cards}\n        itemSize={75}\n        itemCount={cards.length}\n        overscanCount={5}\n        height={height}\n        width=\"100%\"\n    >\n        {\n            ({index, style}: any) => {\n                const card = cards[index];\n                return <div style={style}>\n                    <CardsListItemComponent\n                        key={card.id}\n                        card={card}\n                        onEditItem={onEditItem}\n                        onDeleteItem={onDeleteItem}\n                        onResetProgress={onResetProgress}\n                        onClickItem={onClickItem}\n                        onSelect={onSelectItem}\n                        isEnabledSelecting={isEnabledSelecting}\n                        isSelected={selectedItems[card.id]}\n                    />\n                </div>\n            }\n        }\n    </List>\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {FilterComponent} from \"../../common/elements/filter/FilterComponent\";\nimport {CardsListActions} from \"./elements/cards-list-actions/CardsListActions\";\nimport {ICardsComponent} from \"./types/ICardsComponent\";\nimport './CardsComponent.css';\nimport {CardsListComponent} from \"./elements/cards-list/CardsListComponent\";\nimport {ISortVariant} from \"../../common/types/ISortVariant\";\n\nexport const CardsComponent: FC<ICardsComponent> = (\n    {\n        cards,\n        filter,\n        onOpenEditor,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onChangeSearchableText,\n        onChangeSorting,\n        height,\n        onOpenRepeater,\n        onStartSelecting,\n        onSelectItem,\n        onDeleteSelectedCards,\n        onMovingSelectedCards,\n        onCopySelectedCards,\n        isEnabledSelecting,\n        selectedItems\n    }\n) => {\n    return (\n        <>\n            <FilterComponent\n                onChangeSearchableText={onChangeSearchableText}\n                onChangeSorting={onChangeSorting}\n                filter={filter}\n                sortVariants={[\n                    ISortVariant.NONE,\n                    ISortVariant.DATE_ASK,\n                    ISortVariant.DATE_DESK,\n                    ISortVariant.QUESTION_ASK,\n                    ISortVariant.QUESTION_DESK,\n                    ISortVariant.STATUS_ASK,\n                    ISortVariant.STATUS_DESK,\n                    ISortVariant.ANSWER_ASK,\n                    ISortVariant.ANSWER_DESK,\n                    ISortVariant.PROGRESS_ASK,\n                    ISortVariant.PROGRESS_DESC\n                ]}\n            />\n            <CardsListComponent\n                cards={cards}\n                height={height}\n                onEditItem={onEditItem}\n                onDeleteItem={onDeleteItem}\n                onResetProgress={onResetProgress}\n                onClickItem={onClickItem}\n                onSelectItem={onSelectItem}\n                isEnabledSelecting={isEnabledSelecting}\n                selectedItems={selectedItems}\n            />\n            <CardsListActions\n                onOpenRepeater={onOpenRepeater}\n                onOpenEditor={onOpenEditor}\n                onStartSelecting={onStartSelecting}\n                onCopySelectedCards={onCopySelectedCards}\n                hideOpenEditorButton={isEnabledSelecting}\n                hideOpenRepeaterButton={isEnabledSelecting}\n                hideDeleteSelectedCardsButton={!isEnabledSelecting}\n                hideMovingSelectedCardsButton={!isEnabledSelecting}\n                hideCopySelectedCardButton={!isEnabledSelecting}\n                onDeleteSelectedCards={onDeleteSelectedCards}\n                onMovingSelectedCards={onMovingSelectedCards}\n            />\n        </>\n    )\n};\n","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteSelectedCards: ICallback<CardsContainerCallbackSettings, void> = (\n    settings: CardsContainerCallbackSettings\n) => {\n\n    const {services, state, setSubscription} = settings;\n\n    const {confirmDialogService, cardsListService} = services;\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsListService.deleteCardsChannel.next(state.selectedItems);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import CopyIcon from '@mui/icons-material/CopyAll';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onCopySelectedCards: ICallback<CardsContainerCallbackSettings, void> = (\n    settings: CardsContainerCallbackSettings\n) => {\n\n    const {services, state, setSubscription} = settings;\n\n    const {\n        cardsListService,\n        confirmDialogService,\n        selectionDialogService\n    } = services;\n\n    const subscription = selectionDialogService.selectionChannel.subscribe((groupID) => {\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardsListService.copyCardsChannel.next({\n                    selectedItems: state.selectedItems,\n                    destinationGroupID: groupID\n                });\n\n                selectionDialogService.openDialogChannel.next({\n                    isOpen: false,\n                    title: '',\n                    selectionItems: []\n                });\n            }\n\n            confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to copy this cards?',\n            titleBackgroundColor: 'orange',\n            icon: <CopyIcon/>\n        });\n    });\n\n    setSubscription(subscription);\n\n    selectionDialogService.openDialogChannel.next({\n        isOpen: true,\n        title: 'Select cards group',\n        selectionItems: state.existedGroupsIDs\n    })\n}","import MoveIcon from '@mui/icons-material/MoveToInbox';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onMovingSelectedCards: ICallback<CardsContainerCallbackSettings, void> = (\n    settings\n) => {\n\n    const {services, state, setSubscription} = settings;\n\n    const {\n        cardsListService,\n        confirmDialogService,\n        selectionDialogService\n    } = services;\n\n    const subscription = selectionDialogService.selectionChannel.subscribe((groupID) => {\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardsListService.movingCardsChannel.next({\n                    selectedItems: state.selectedItems,\n                    destinationGroupID: groupID\n                });\n\n                selectionDialogService.openDialogChannel.next({\n                    isOpen: false,\n                    title: '',\n                    selectionItems: []\n                });\n            }\n\n            confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to move this cards?',\n            titleBackgroundColor: 'green',\n            icon: <MoveIcon/>\n        });\n    });\n\n    setSubscription(subscription);\n\n    selectionDialogService.openDialogChannel.next({\n        isOpen: true,\n        title: 'Select cards group',\n        selectionItems: state.existedGroupsIDs\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onSelectItem: ICallback<CardsContainerCallbackSettings, number> = (\n    settings,\n    cardID = -1\n) => {\n\n    const {state, setState} = settings;\n\n    const selectedItems = {\n        ...state.selectedItems\n    };\n\n    if (selectedItems[cardID]) {\n        selectedItems[cardID] = !selectedItems[cardID]\n    } else {\n        selectedItems[cardID] = true\n    }\n\n    setState((prevState) => {\n        return {\n        ...prevState,\n            selectedItems\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onStartSelecting: ICallback<CardsContainerCallbackSettings, void> = (\n    {setState}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            isEnabledSelecting: !prevState.isEnabledSelecting,\n            selectedItems: !prevState.isEnabledSelecting ? {} : prevState.selectedItems\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onOpenRepeater: ICallback<CardsContainerCallbackSettings, void> = (\n    {\n        state,\n        location,\n        services\n    }\n) => {\n    if (state.isEnabledSelecting) {\n        services.cardsListService.cardsIDsBySelectedItemsChannel.next(state.selectedItems);\n    } else {\n        services.cardsListService.cardsIDsByGroupIDsChannel.next(location.state.cardsGroupID);\n    }\n}","import {ISortVariant} from \"../../../common/types/ISortVariant\";\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onChangeSorting: ICallback<CardsContainerCallbackSettings, ISortVariant> = (\n    {state, setState, services, location},\n    sortVariant: ISortVariant = ISortVariant.NONE\n) => {\n    const newFilter = {\n        ...state.filter,\n        sort: sortVariant\n    }\n    services.cardsListService.changeFilterChannel.next(newFilter);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onChangeSearchableText: ICallback<CardsContainerCallbackSettings, string> = (\n    {services, setState, state, location},\n    searchableText = ''\n) => {\n    const newFilter = {\n        ...state.filter,\n        searchableText: searchableText\n    }\n\n    services.cardsListService.changeFilterChannel.next(newFilter)\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {CardsContainerState} from \"../types/CardsContainerState\";\n\nexport const onCardsChannel: ICallback<CardsContainerCallbackSettings, ICard[]> = (\n    {state, setState},\n    cards = []\n) => {\n    setState((prevState: CardsContainerState) => {\n        return {\n            ...prevState,\n            cards\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onCardsIDsByGroupIDsChannel: ICallback<CardsContainerCallbackSettings, number[]> = (\n    {history, location},\n    args\n) => {\n    history.push({\n        pathname: Routs.cardsRepeater.path,\n        state: {\n            ...location.state,\n            cardsIDsForRepeating: args || []\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onCardsIDsBySelectedItemsChannel: ICallback<CardsContainerCallbackSettings, number[]> = (\n    {history, location},\n    args\n) => {\n    if (args && args.length > 1) {\n        history.push({\n            pathname: Routs.cardsRepeater.path,\n            state: {\n                ...location.state,\n                cardsIDsForRepeating: args || []\n            }\n        })\n    } else if (args && args.length === 1) {\n        history.push({\n            pathname: Routs.cardViewer.path,\n            state: {\n                ...location.state,\n                cardsGroupID: location.state.cardsGroupID,\n                cardID: args[0]\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {defaultFilterValue} from \"../../../common/defaults/defaultFilterValue\";\n\nexport const onFilterChannel: ICallback<CardsContainerCallbackSettings, IFilter> = (\n    {state, setState, services, location},\n    filter = defaultFilterValue\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            filter\n        }\n    });\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const onConstructor: ICallback<CardsContainerCallbackSettings, ISortVariant> = (\n    {services, location, state}\n) => {\n    const {cardsListService} = services;\n    cardsListService.filterChannel.next('')\n    cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: state.filter\n    });\n    cardsListService.existedGroupsIDsChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {IStoredFilters} from \"../../../common/types/IStoredFilters\";\nimport {defaultFilterValue} from \"../../../common/defaults/defaultFilterValue\";\n\nexport const onChangeFilter: ICallback<CardsContainerCallbackSettings, IStoredFilters> = (\n    {services, location},\n    storedFilters = {\n        cards: defaultFilterValue,\n        cardsGroups: defaultFilterValue\n    }\n) => {\n    services.cardsListService.filterChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onResetCardProgressChannel: ICallback<CardsContainerCallbackSettings, ICardsGroup[]> = (\n    {state, services, location}\n) => {\n    services.cardsListService.cardsChannel.next(\n        {\n            cardsGroupID: location.state.cardsGroupID,\n            filter: state.filter\n        }\n    )\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardsContainerCallbackSettings, ICardsGroup[]> = (\n    {state, services, location},\n    cards = []\n) => {\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: state.filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onMovingCardsChannel: ICallback<CardsContainerCallbackSettings, ICardsGroup[]> = (\n    {state, services, location}\n) => {\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: state.filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onCopyCardsChannel: ICallback<CardsContainerCallbackSettings, ICardsGroup[]> = (\n    {state, services, location}\n) => {\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: state.filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteCardsChannel: ICallback<CardsContainerCallbackSettings, ICardsGroup[]> = (\n    {state, services, location},\n    cards = []\n) => {\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: state.filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {CardsContainerState} from \"../types/CardsContainerState\";\n\nexport const onExistedGroupsIDsChannel: ICallback<CardsContainerCallbackSettings, { id: number; label: string; }[]> = (\n    {state, setState},\n    existedGroupsIDs = []\n) => {\n    setState((prevState: CardsContainerState) => {\n        return {\n            ...prevState,\n            existedGroupsIDs\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onOpenEditor: ICallback<CardsContainerCallbackSettings, void> = (\n    {\n        location,\n        history\n    }\n) => {\n    history.push({\n        pathname: Routs.cardsEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditItem: ICallback<CardsContainerCallbackSettings, number> = (\n    {\n        state,\n        location,\n        history\n    },\n    cardID = -1\n) => {\n    history.push({\n        pathname: Routs.cardsEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID,\n            cardID: cardID\n        }\n    })\n}","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteItem: ICallback<CardsContainerCallbackSettings, number> = (\n    {\n        setSubscription,\n        services\n    },\n    cardID = -1\n) => {\n    const {confirmDialogService, cardsListService} = services;\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            cardsListService.deleteSingleCardChannel.next(cardID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this card?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onResetProgress: ICallback<CardsContainerCallbackSettings, number> = (\n    {\n        services,\n        location\n    },\n    cardID = -1\n) => {\n    services.cardsListService.resetCardProgressChannel.next(\n        {\n            cardID,\n            cardsGroupID: location.state.cardsGroupID\n        }\n    )\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onClickItem: ICallback<CardsContainerCallbackSettings, number> = (\n    {\n        state,\n        location,\n        history\n    },\n    cardID = -1\n) => {\n    history.push({\n        pathname: Routs.cardViewer.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID,\n            cardID\n        }\n    })\n}","import {defaultFilterValue} from \"../../../common/defaults/defaultFilterValue\";\n\nexport const initialState = {\n    cards: [],\n    filter: defaultFilterValue,\n    isEnabledSelecting: false,\n    selectedItems: {},\n    existedGroupsIDs: []\n}","import React, {FC, useCallback} from 'react';\n\nimport {CardsComponent} from './CardsComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {INavigationState} from '../../common/types/INavigationState';\nimport {IAppContext} from '../../common/types/IAppContext';\nimport {AppContext} from '../../../App';\nimport {ICardsContainer} from \"./types/ICardsContainer\";\nimport {CardsContainerState} from \"./types/CardsContainerState\";\nimport {onDeleteSelectedCards} from \"./ui-callbacks/onDeleteSelectedCards\";\nimport {onCopySelectedCards} from \"./ui-callbacks/onCopySelectedCards\";\nimport {onMovingSelectedCards} from \"./ui-callbacks/onMovingSelectedCards\";\nimport {onSelectItem} from \"./ui-callbacks/onSelectItem\";\nimport {onStartSelecting} from \"./ui-callbacks/onStartSelecting\";\nimport {onOpenRepeater} from \"./ui-callbacks/onOpenRepeater\";\nimport {onChangeSorting} from \"./ui-callbacks/onChangeSorting\";\nimport {onChangeSearchableText} from \"./ui-callbacks/onChangeSearchableText\";\nimport {onCardsChannel} from \"./channels-callbacks/onCardsChannel\";\nimport {onCardsIDsByGroupIDsChannel} from \"./channels-callbacks/onCardsIDsByGroupIDsChannel\";\nimport {onCardsIDsBySelectedItemsChannel} from \"./channels-callbacks/onCardsIDsBySelectedItemsChannel\";\nimport {onFilterChannel} from \"./channels-callbacks/onFilterChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onChangeFilter} from \"./channels-callbacks/onChangeFilter\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {onResetCardProgressChannel} from \"./channels-callbacks/onResetCardProgressChannel\";\nimport {onDeleteSingleCardChannel} from \"./channels-callbacks/onDeleteSingleCardChannel\";\nimport {onMovingCardsChannel} from \"./channels-callbacks/onMovingCardsChannel\";\nimport {onCopyCardsChannel} from \"./channels-callbacks/onCopyCardsChannel\";\nimport {onDeleteCardsChannel} from \"./channels-callbacks/onDeleteCardsChannel\";\nimport {onExistedGroupsIDsChannel} from \"./channels-callbacks/onExistedGroupsIDsChannel\";\nimport {onOpenEditor} from \"./ui-callbacks/onOpenEditor\";\nimport {onEditItem} from \"./ui-callbacks/onEditItem\";\nimport {onDeleteItem} from \"./ui-callbacks/onDeleteItem\";\nimport {onResetProgress} from \"./ui-callbacks/onResetProgress\";\nimport {onClickItem} from \"./ui-callbacks/onClickItem\";\nimport {initialState} from \"./defaults/initialState\";\n\nexport const CardsContainer: FC<ICardsContainer> = (services) => {\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardsContainerState, ICardsContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, context, services: {cardsListService}} = callbackSettings\n\n    useChannel(cardsListService.cardsChannel, callbackFactory(onCardsChannel));\n    useChannel(cardsListService.cardsIDsByGroupIDsChannel, callbackFactory(onCardsIDsByGroupIDsChannel));\n    useChannel(cardsListService.cardsIDsBySelectedItemsChannel, callbackFactory(onCardsIDsBySelectedItemsChannel));\n    useChannel(cardsListService.filterChannel, callbackFactory(onFilterChannel));\n    useChannel(cardsListService.changeFilterChannel, callbackFactory(onChangeFilter))\n    useChannel(cardsListService.resetCardProgressChannel, callbackFactory(onResetCardProgressChannel));\n    useChannel(cardsListService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel));\n    useChannel(cardsListService.movingCardsChannel, callbackFactory(onMovingCardsChannel));\n    useChannel(cardsListService.copyCardsChannel, callbackFactory(onCopyCardsChannel));\n    useChannel(cardsListService.deleteCardsChannel, callbackFactory(onDeleteCardsChannel))\n    useChannel(cardsListService.existedGroupsIDsChannel, callbackFactory(onExistedGroupsIDsChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const editItem = useCallback(callbackFactory(onEditItem), []);\n    const deleteItem = useCallback(callbackFactory(onDeleteItem), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const clickItem = useCallback(callbackFactory(onClickItem), []);\n    const changeSearchableText = useCallback(callbackFactory(onChangeSearchableText), [state.filter]);\n    const changeSorting = useCallback(callbackFactory(onChangeSorting), [state.filter]);\n\n    const startSelecting = callbackFactory(onStartSelecting);\n    const multiSelectingDependencies = [state.isEnabledSelecting, state.selectedItems]\n    const openRepeater = useCallback(callbackFactory(onOpenRepeater), multiSelectingDependencies);\n    const selectItem = useCallback(callbackFactory(onSelectItem), multiSelectingDependencies);\n    const movingSelectedCards = useCallback(callbackFactory(onMovingSelectedCards), multiSelectingDependencies);\n    const copySelectedCards = useCallback(callbackFactory(onCopySelectedCards), multiSelectingDependencies);\n    const deleteSelectedCards = useCallback(callbackFactory(onDeleteSelectedCards), multiSelectingDependencies)\n\n    return <CardsComponent\n        filter={state.filter}\n        onChangeSorting={changeSorting}\n        onChangeSearchableText={changeSearchableText}\n        cards={state.cards}\n        onOpenEditor={openEditor}\n        onEditItem={editItem}\n        onDeleteItem={deleteItem}\n        onResetProgress={resetProgress}\n        onClickItem={clickItem}\n        height={context.height}\n        onOpenRepeater={openRepeater}\n        onStartSelecting={startSelecting}\n        isEnabledSelecting={state.isEnabledSelecting}\n        onSelectItem={selectItem}\n        selectedItems={state.selectedItems}\n        onMovingSelectedCards={movingSelectedCards}\n        onDeleteSelectedCards={deleteSelectedCards}\n        onCopySelectedCards={copySelectedCards}\n    />\n};\n","import React, {FC} from 'react';\n\nimport {Button} from '@mui/material';\nimport {IRepeatingStatisticComponent} from \"./types/IRepeatingStatisticComponent\";\n\nexport const StatisticComponent: FC<IRepeatingStatisticComponent> = ({statistic}) => {\n\n    return <div>\n        <Button size=\"small\">\n            <span style={{color: \"red\"}}>To Do: {statistic.todo}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"orange\"}}>In progress: {statistic.inProgress}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"green\"}}>Completed: {statistic.done}</span>\n        </Button>\n    </div>\n};\n","import React, {FC} from 'react';\nimport {Button} from '@mui/material';\n\nimport {IAllCardsRepeatedComponent} from \"./types/IAllCardsRepeatedComponent\";\n\nexport const AllCardsRepeatedComponent: FC<IAllCardsRepeatedComponent> = ({onBackClick}) => {\n    return <>\n        <span>No cards for repeating</span>\n        <Button size=\"small\" color=\"primary\" onClick={onBackClick}>\n            Go back\n        </Button>\n    </>\n};\n","import React, {FC} from 'react';\nimport {IconButton} from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport {Check, Edit} from '@mui/icons-material';\nimport {ICardsRepeaterHeaderComponent} from \"./types/ICardsRepeaterHeaderComponent\";\n\nexport const CardsHeaderComponent: FC<ICardsRepeaterHeaderComponent> = (\n    {\n        isQuestionSide,\n        onSwitchEditing,\n        isEditable\n    }\n) => {\n    return <div className=\"cards-repeater_title\">\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {isQuestionSide ? 'Question' : 'Answer'}\n        </Typography>\n        <IconButton color=\"inherit\" onClick={onSwitchEditing}>\n            {isEditable ? <Check/> : <Edit/>}\n        </IconButton>\n    </div>\n};\n","import React, {FC} from \"react\";\nimport {List} from \"@mui/material\";\nimport Typography from \"@mui/material/Typography\";\nimport {ILongTextViewerComponent} from \"./types/ILongTextViewerComponent\";\nimport './LongTextViewerComponent.css'\n\nexport const LongTextViewerComponent: FC<ILongTextViewerComponent> = (\n    {\n        viewHeight,\n        text,\n        onClickText = () => {}\n    }\n) => {\n    return <Typography color=\"textSecondary\" gutterBottom onClick={onClickText}\n                       className=\"long-text-viewer\"\n                       style={{height: viewHeight}}>\n        <List style={{paddingTop: 0}}>\n            {text}\n        </List>\n    </Typography>\n}","import {ChangeEvent, default as React, FC} from 'react';\nimport {TextField} from '@mui/material';\n\nimport './TextEditorComponent.css'\nimport {ITextEditorComponent} from \"./types/ITextEditorComponent\";\n\nexport const TextEditorComponent: FC<ITextEditorComponent> = ({onChangeText, changeableText, label}) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeText(event.target.value);\n    };\n\n    return <TextField\n        className=\"text-editor\"\n        required\n        id=\"outlined-required\"\n        label={label || \"\"}\n        multiline\n        onChange={onChange}\n        value={changeableText}\n        variant=\"filled\"\n    />\n};\n","import React, {FC} from \"react\";\n\nimport {TextEditorComponent} from \"../text-editor/TextEditorComponent\";\nimport {ILongTextEditorComponent} from \"./types/ILongTextEditorComponent\";\nimport './LongTextEditorComponent.css'\n\nexport const LongTextEditorComponent: FC<ILongTextEditorComponent> = (\n    {\n        viewHeight,\n        text,\n        onChangeText\n    }\n) => {\n    return <div\n        className=\"long-text-editor\"\n        style={{\n            height: viewHeight\n        }}\n    >\n        <TextEditorComponent onChangeText={onChangeText} changeableText={text}/>\n    </div>\n}","import React, {FC} from 'react';\nimport {Button, CardActions} from '@mui/material';\n\nimport {IDeleteButtonFooterComponent} from \"./types/IDeleteButtonFooterComponent\";\n\nexport const DeleteButtonFooterComponent: FC<IDeleteButtonFooterComponent> = ({onClick}) => {\n\n    return <>\n        {\n            <CardActions className=\"cards-repeater_buttons-container\" style={{height: 10}}>\n                <Button size=\"small\" color=\"primary\" onClick={() => onClick()}>\n                    Remove\n                </Button>\n            </CardActions>\n        }\n    </>\n};\n","import React, {FC} from 'react';\n\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\nimport {LongTextViewerComponent} from \"../long-text-viewer/LongTextViewerComponent\";\nimport {IQuestionCard} from \"./types/IQuestionCard\";\nimport {LongTextEditorComponent} from \"../long-text-editor/LongTextEditorComponent\";\nimport {DeleteButtonFooterComponent} from \"../delete-button-footer/DeleteButtonFooterComponent\";\n\nexport const QuestionCardComponent: FC<IQuestionCard> = (\n    {\n        card,\n        onClickCard,\n        cardHeight,\n        isEditable,\n        onDeleteCard,\n        onChangeQuestion\n    }\n) => {\n\n    const question = card ? card.question : '';\n\n    return <Card>\n        <CardContent onClick={onClickCard} style={{height: cardHeight}}>\n            {\n                isEditable ?\n                    <>\n                        <LongTextEditorComponent\n                            text={question}\n                            viewHeight={cardHeight}\n                            onChangeText={onChangeQuestion}\n                        />\n                        <DeleteButtonFooterComponent onClick={onDeleteCard}/>\n                    </>\n                    :\n                    <LongTextViewerComponent viewHeight={cardHeight} text={question}/>\n            }\n        </CardContent>\n    </Card>\n};\n","import React, {FC} from 'react';\nimport {Button, CardActions} from '@mui/material';\n\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\nimport {IAnswerCardFooterComponent} from \"./types/IAnswerCardFooterComponent\";\n\nexport const AnswerCardFooterComponent: FC<IAnswerCardFooterComponent> = ({card, onClickYesNoButton}) => {\n\n    return <>\n        {\n            card && card.rangeOfKnowledge !== IRangeOfKnowledge.DONE ?\n                <CardActions className=\"cards-repeater_buttons-container\" style={{height: 10}}>\n                    <Button size=\"small\" color=\"primary\" onClick={() => onClickYesNoButton(true)}>\n                        Yes\n                    </Button>\n                    <Button size=\"small\" color=\"primary\" onClick={() => onClickYesNoButton(false)}>\n                        No\n                    </Button>\n                </CardActions> :\n                <div>Repeated</div>\n        }\n    </>\n};\n","import React, {FC} from 'react';\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\n\nimport {AnswerCardFooterComponent} from '../answer-card-footer/AnswerCardFooterComponent';\nimport {IAnswerCardComponent} from \"./types/IAnswerCardComponent\";\nimport {LongTextViewerComponent} from \"../long-text-viewer/LongTextViewerComponent\";\nimport {LongTextEditorComponent} from \"../long-text-editor/LongTextEditorComponent\";\nimport {DeleteButtonFooterComponent} from \"../delete-button-footer/DeleteButtonFooterComponent\";\n\nexport const AnswerCardComponent: FC<IAnswerCardComponent> = (\n    {\n        card,\n        cardHeight,\n        onClickText,\n        onClickYesNoButton,\n        isEditable,\n        onChangeAnswer,\n        onDeleteCard\n    }\n) => {\n\n    const getText = () => {\n        return card ? card.answer : '';\n    };\n\n    return <Card className=\"cards-repeater\">\n        <CardContent style={{height: cardHeight}}>\n            {\n                isEditable ?\n                    <>\n                        <LongTextEditorComponent\n                            text={getText()}\n                            viewHeight={cardHeight}\n                            onChangeText={onChangeAnswer}\n                        />\n                        <DeleteButtonFooterComponent onClick={onDeleteCard}/>\n                    </>\n                    :\n                    <>\n                        <LongTextViewerComponent\n                            viewHeight={cardHeight}\n                            text={getText()}\n                            onClickText={onClickText}\n                        />\n                        <AnswerCardFooterComponent onClickYesNoButton={onClickYesNoButton} card={card}/>\n                    </>\n            }\n        </CardContent>\n    </Card>\n};\n","import React, {FC} from \"react\";\n\nimport {CardsHeaderComponent} from \"../cards-header/CardsHeaderComponent\";\nimport {QuestionCardComponent} from \"../question-card/QuestionCardComponent\";\nimport {AnswerCardComponent} from \"../answer-card/AnswerCardComponent\";\nimport {ICardsContentComponent} from \"./types/ICardsContentComponent\";\n\nexport const CardsContentComponent: FC<ICardsContentComponent> = (\n    {\n        isQuestionSide,\n        isEditable,\n        onSwitchEditing,\n        card,\n        cardHeight,\n        onClickCard,\n        onChangeAnswer,\n        onChangeQuestion,\n        onDeleteCard,\n        onClickYesNoButton\n    }\n) => {\n    return <>\n        <CardsHeaderComponent\n            isQuestionSide={isQuestionSide}\n            isEditable={isEditable}\n            onSwitchEditing={onSwitchEditing}\n        />\n        {\n            isQuestionSide ?\n                <QuestionCardComponent\n                    card={card}\n                    onClickCard={onClickCard}\n                    cardHeight={cardHeight}\n                    isEditable={isEditable}\n                    onChangeQuestion={onChangeQuestion}\n                    onDeleteCard={onDeleteCard}\n                /> :\n                <AnswerCardComponent\n                    card={card}\n                    onClickText={onClickCard}\n                    cardHeight={cardHeight}\n                    onClickYesNoButton={onClickYesNoButton}\n                    onChangeAnswer={onChangeAnswer}\n                    isEditable={isEditable}\n                    onDeleteCard={onDeleteCard}\n                />\n        }\n    </>\n}","import React, {FC} from 'react';\n\nimport {StatisticComponent} from './elements/statistic/StatisticComponent';\nimport \"./CardsRepeaterComponent.css\"\nimport {AllCardsRepeatedComponent} from './elements/all-cards-repeated/AllCardsRepeatedComponent';\nimport {CardsContentComponent} from \"../../common/elements/cards-content/CardsContentComponent\";\nimport {ICardsRepeaterComponent} from \"./types/ICardsRepeaterComponent\";\n\nexport const CardsRepeaterComponent: FC<ICardsRepeaterComponent> = (\n    {\n        card,\n        cardHeight,\n        isQuestionSide,\n        onClickCard,\n        onClickYesNoButton,\n        statistic,\n        onBackClick,\n        onSwitchEditing,\n        isEditable,\n        onChangeAnswer,\n        onChangeQuestion,\n        onDeleteCard\n    }\n) => {\n\n        return card && card.id !== -1 ?\n            <div className=\"cards-repeater\">\n                    <StatisticComponent statistic={statistic}/>\n                    <CardsContentComponent\n                        card={card}\n                        onDeleteCard={onDeleteCard}\n                        onClickYesNoButton={onClickYesNoButton}\n                        isQuestionSide={isQuestionSide}\n                        onClickCard={onClickCard}\n                        cardHeight={cardHeight}\n                        onSwitchEditing={onSwitchEditing}\n                        isEditable={isEditable}\n                        onChangeQuestion={onChangeQuestion}\n                        onChangeAnswer={onChangeAnswer}\n            />\n        </div> :\n        <AllCardsRepeatedComponent onBackClick={onBackClick}/>\n};\n","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteCard: ICallback<CardRepeaterCallbackSettings, void> = (\n    settings\n) => {\n    const {services, state, setSubscription} = settings;\n\n    const {confirmDialogService, cardsRepeaterService} = services;\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            cardsRepeaterService.deleteSingleCardChannel.next(state.card.id);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardRepeaterCallbackSettings, ICardsGroup[]> = (\n    {services, location}\n) => {\n    services.cardsRepeaterService.cardChannel.next(\n        location.state ? location.state.cardsIDsForRepeating : []\n    )\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onCardGroupNameChannel: ICallback<CardRepeaterCallbackSettings, string> = (\n    {services},\n    label\n) => {\n    services.toolbarService.toolbarExternalLabelChannel.next(label as string);\n}","import {IRangeOfKnowledge} from \"../types/IRangeOfKnowledge\";\n\nexport const defaultCardValue = {\n    id: -1,\n    question: '',\n    answer: '',\n    rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n    dateRepeating: 0\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCardValue} from \"../../../common/defaults/defaultCardValue\";\n\nexport const onCardChannel: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {services: {cardsRepeaterService}, setState},\n    card = defaultCardValue\n) => {\n    cardsRepeaterService.cardGroupNameChannel.next(card.id)\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card,\n            isQuestionSide: true,\n            isEditable: false\n        }\n    });\n    cardsRepeaterService.statisticChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCardValue} from \"../../../common/defaults/defaultCardValue\";\n\nexport const onCardEditingChannel: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {setState},\n    card = defaultCardValue\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","export const defaultStatisticValue = {\n    inProgress: 0,\n    todo: 0,\n    done: 0\n};","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {IStatistic} from \"../../../common/types/IStatistic\";\nimport {defaultStatisticValue} from \"../../../common/defaults/defaultStatisticValue\";\n\nexport const onStatisticChannel: ICallback<CardRepeaterCallbackSettings, IStatistic> = (\n    {setState},\n    statistic = defaultStatisticValue\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            statistic\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onRepeatingResultChannel: ICallback<CardRepeaterCallbackSettings, ICardsGroup[]> = (\n    {services: {cardsRepeaterService}, location}\n) => {\n    cardsRepeaterService.cardChannel.next(location.state.cardsIDsForRepeating);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\n\nexport const onConstructor: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {services: {cardsRepeaterService}, location}\n) => {\n    if (location.state) {\n        cardsRepeaterService.cardChannel.next(location.state.cardsIDsForRepeating);\n    }\n    cardsRepeaterService.statisticChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const onClick: ICallback<CardRepeaterCallbackSettings, boolean> = (\n    {\n        setState,\n        location,\n        state,\n        services: {cardsRepeaterService}\n    },\n    isKnown = false\n) => {\n    if (state.card) {\n        cardsRepeaterService.repeatingResultChannel.next({\n            isKnown: isKnown,\n            cardID: state.card.id,\n            cardsGroupID: location.state.cardsGroupID\n        });\n    } else {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                card: {\n                    id: -1,\n                    question: '',\n                    answer: '',\n                    rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n                    dateRepeating: 0\n                },\n                isQuestionSide: false,\n                isEditable: false\n            }\n        });\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onClickCard: ICallback<CardRepeaterCallbackSettings, void> = (\n    {setState, state}\n) => {\n    if (!state.isEditable) {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                isQuestionSide: !prevState.isQuestionSide\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onBackClick: ICallback<CardRepeaterCallbackSettings, void> = (\n    {history}\n) => {\n    history.replace(Routs.cardsGroups.path);\n}","import {IRangeOfKnowledge} from \"../types/IRangeOfKnowledge\";\n\nexport const initDefaultCard = () => {\n    return {\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        answer: '',\n        question: '',\n        dateRepeating: 0,\n        id: new Date().getTime()\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const onSwitchEditing: ICallback<CardRepeaterCallbackSettings, void> = (\n    {setState, location, state, services: {cardsEditorService}}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            isEditable: !prevState.isEditable\n        }\n    });\n\n    if (state.isEditable) {\n        cardsEditorService.cardEditingChannel.next({\n            card: state.card || initDefaultCard(),\n            cardsGroupID: location.state.cardsGroupID\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardRepeaterCallbackSettings, string> = (\n    {setState, state},\n    question = ''\n) => {\n    if (state.card) {\n        const editableCard = {\n            ...state.card,\n            question\n        };\n\n        setState((prevState) => {\n            return {...prevState, card: editableCard}\n        });\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardRepeaterCallbackSettings, string> = (\n    {setState, state},\n    answer = ''\n) => {\n    if (state.card) {\n        const editableCard = {\n            ...state.card,\n            answer\n        };\n\n        setState((prevState) => {\n            return {...prevState, card: editableCard}\n        });\n    }\n}","import {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\nimport {defaultStatisticValue} from \"../../../common/defaults/defaultStatisticValue\";\n\nexport const initialState = {\n    card: {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    },\n    isQuestionSide: true,\n    isEditable: false,\n    statistic: defaultStatisticValue\n}","import React, {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {CardsRepeaterComponent} from './CardsRepeaterComponent';\nimport {INavigationState} from '../../common/types/INavigationState';\nimport {AppContext} from '../../../App';\nimport {IAppContext} from '../../common/types/IAppContext';\nimport {ICardRepeaterContainer} from \"./types/ICardRepeaterContainer\";\nimport {CardRepeaterContainerState} from \"./types/CardRepeaterContainerState\";\nimport {onDeleteCard} from \"./ui-callbacks/onDeleteCard\";\nimport {onDeleteSingleCardChannel} from \"./channels-callbacks/onDeleteSingleCardChannel\";\nimport {onCardGroupNameChannel} from \"./channels-callbacks/onCardGroupNameChannel\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {onCardChannel} from \"./channels-callbacks/onCardChannel\";\nimport {onCardEditingChannel} from \"./channels-callbacks/onCardEditingChannel\";\nimport {onStatisticChannel} from \"./channels-callbacks/onStatisticChannel\";\nimport {onRepeatingResultChannel} from \"./channels-callbacks/onRepeatingResultChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onClick} from \"./ui-callbacks/onClick\";\nimport {onClickCard} from \"./ui-callbacks/onClickCard\";\nimport {onBackClick} from \"./ui-callbacks/onBackClick\";\nimport {onSwitchEditing} from \"./ui-callbacks/onSwitchEditing\";\nimport {onChangeQuestion} from \"./ui-callbacks/onChangeQuestion\";\nimport {onChangeAnswer} from \"./ui-callbacks/onChangeAnswer\";\nimport {initialState} from \"./defaults/initialState\";\n\nexport const CardRepeaterContainer: FC<ICardRepeaterContainer> = (\n    services\n) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardRepeaterContainerState, ICardRepeaterContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {\n        state, context, services: {\n            cardsRepeaterService, cardsEditorService\n        }\n    } = callbackSettings\n\n    useChannel(cardsRepeaterService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel))\n    useChannel(cardsRepeaterService.cardGroupNameChannel, callbackFactory(onCardGroupNameChannel))\n    useChannel(cardsRepeaterService.cardChannel, callbackFactory(onCardChannel));\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardsRepeaterService.statisticChannel, callbackFactory(onStatisticChannel));\n    useChannel(cardsRepeaterService.repeatingResultChannel, callbackFactory(onRepeatingResultChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const click = useCallback(callbackFactory(onClick), [state.card]);\n    const clickCard = callbackFactory(onClickCard);\n    const backClick = useCallback(callbackFactory(onBackClick), []);\n    const switchEditing = callbackFactory(onSwitchEditing);\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), [state.card]);\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), [state.card]);\n    const deleteCard = useCallback(callbackFactory(onDeleteCard), [state.card])\n\n    return <CardsRepeaterComponent\n        onDeleteCard={deleteCard}\n        cardHeight={context.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={clickCard}\n        onClickYesNoButton={click}\n        card={state.card}\n        statistic={state.statistic}\n        onBackClick={backClick}\n        onSwitchEditing={switchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n    />\n};\n","import * as React from 'react';\nimport {FC, useRef} from 'react';\nimport LoadIcon from '@mui/icons-material/Download';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {Button} from '@mui/material';\nimport {useUnsubscribe} from '../../../MyTools/react-hooks/useUnsubscribe';\nimport {ILocalBackupsContainer} from \"./types/ILocalBackupsContainer\";\nimport {defaultConfirmDialogState} from \"../../common/defaults/defaultConfirmDialogState\";\n\nexport const LocalBackupsContainer: FC<ILocalBackupsContainer> = ({localBackupsService, confirmDialogService, spinnerService}) => {\n\n    const fileBuffer = useRef(null);\n\n    useChannel(\n        localBackupsService.localBackupChannel\n    );\n\n    useChannel(\n        localBackupsService.loadBackupChannel, () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n        }\n    );\n\n    const { setSubscription } = useUnsubscribe();\n\n    const handleFileSelect = (event: any) => {\n        const file = event.target.files[0];\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = (readerEvent: any) => {\n            const games: string = readerEvent.target.result;\n\n            const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n                if (isConfirm) {\n                    spinnerService.spinnerCounterChannel.next(1);\n                    localBackupsService.loadBackupChannel.next(games);\n                }\n\n                confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n            });\n\n            setSubscription(subscription);\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: true,\n                message: 'Do you want to load this backup, your current changes could be removed?',\n                titleBackgroundColor: 'red',\n                icon: <LoadIcon/>\n            });\n        };\n        reader.readAsText(file);\n    };\n\n    return <>\n        <input type=\"file\" onChange={handleFileSelect}/>\n        <a ref={fileBuffer}></a>\n        <Button size=\"small\" onClick={() => localBackupsService.localBackupChannel.next()}>\n            Save\n        </Button>\n    </>\n};\n","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {Button, TextField} from '@mui/material';\n\nimport './CardsGroupsEditorComponent.css'\nimport {ICardsGroupsEditorComponent} from \"./types/ICardsGroupsEditorComponent\";\n\nexport const CardsGroupsEditorComponent: FC<ICardsGroupsEditorComponent> = (\n    {groupName, onChangeGroupName, onSaveGroup}\n) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeGroupName(event.target.value);\n    };\n\n    return <div className=\"group-editor\">\n        <TextField\n            className=\"group-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Group name\"\n            onChange={onChange}\n            value={groupName}\n            variant=\"filled\"\n        />\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveGroup()}>\n            Save\n        </Button>\n    </div>\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onChangeGroupName: ICallback<ICardsGroupsEditorCallbackSettings, string> = (\n    {setState, state},\n    groupName = ''\n) => {\n    setState(() => {\n        return {\n            cardsGroup: {\n                ...state.cardsGroup,\n                nameCardsGroup: groupName\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onSaveGroup: ICallback<ICardsGroupsEditorCallbackSettings, void> = (\n    {state, services}\n) => {\n    services.cardsGroupsEditorService.groupEditingChannel.next(state.cardsGroup);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onConstructor: ICallback<ICardsGroupsEditorCallbackSettings, void> = (\n    {services, location}\n) => {\n    let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n    services.cardsGroupsEditorService.groupChannel.next(cardsGroupID)\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupEditingChannel: ICallback<ICardsGroupsEditorCallbackSettings, ICardsGroup[]> = (\n    {history}\n) => {\n    history.goBack();\n}","export const defaultCardsGroupValue = {\n    cards: [],\n    nameCardsGroup: '',\n    repeatingDate: new Date().getTime(),\n    id: new Date().getTime(),\n    percentRepeatedCards: 0\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {defaultCardsGroupValue} from \"../../../common/defaults/defaultCardsGroupValue\";\n\nexport const onGroupChannel: ICallback<ICardsGroupsEditorCallbackSettings, ICardsGroup> = (\n    {setState},\n    cardsGroup = defaultCardsGroupValue\n) => {\n    setState((prevState) => {\n        return {\n            cardsGroup\n        }\n    })\n}","import {defaultCardsGroupValue} from \"../../../common/defaults/defaultCardsGroupValue\";\n\nexport const initialState = {\n    cardsGroup: defaultCardsGroupValue\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {CardsGroupsEditorComponent} from './CardsGroupsEditorComponent';\nimport {INavigationState} from '../../common/types/INavigationState';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {ICardsGroupsEditorContainer} from \"./types/ICardsGroupsEditorContainer\";\nimport {CardsGroupsEditorState} from \"./types/CardsGroupsEditorState\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {IAppContext} from \"../../common/types/IAppContext\";\nimport {AppContext} from \"../../../App\";\nimport {onChangeGroupName} from \"./ui-callbacks/onChangeGroupName\";\nimport {onSaveGroup} from \"./ui-callbacks/onSaveGroup\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onGroupEditingChannel} from \"./channels-callbacks/onGroupEditingChannel\";\nimport {onGroupChannel} from \"./channels-callbacks/onGroupChannel\";\nimport {initialState} from \"./defaults/initialState\";\n\nexport const CardsGroupsEditorContainer: FC<ICardsGroupsEditorContainer> = (\n    services\n) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardsGroupsEditorState, ICardsGroupsEditorContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {cardsGroupsEditorService}} = callbackSettings\n\n    useChannel(cardsGroupsEditorService.groupEditingChannel, callbackFactory(onGroupEditingChannel));\n    useChannel(cardsGroupsEditorService.groupChannel, callbackFactory(onGroupChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeGroupName = useCallback(callbackFactory(onChangeGroupName), [state.cardsGroup]);\n    const saveGroup = callbackFactory(onSaveGroup);\n\n    return <CardsGroupsEditorComponent\n        groupName={state.cardsGroup.nameCardsGroup}\n        onChangeGroupName={changeGroupName}\n        onSaveGroup={saveGroup}\n    />\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {Button} from '@mui/material';\n\nimport './CardsEditorComponent.css'\nimport {TextEditorComponent} from '../../common/elements/text-editor/TextEditorComponent';\nimport {ICardsEditorComponent} from \"./types/ICardsEditorComponent\";\n\nexport const CardsEditorComponent: FC<ICardsEditorComponent> = (\n    {\n        answer,\n        question,\n        onChangeAnswer,\n        onChangeQuestion,\n        onSaveCard\n    }\n) => {\n    return <div className=\"cards-editor\">\n        <TextEditorComponent onChangeText={onChangeQuestion} changeableText={question} label=\"Question\"/>\n        <TextEditorComponent onChangeText={onChangeAnswer} changeableText={answer} label=\"Answer\"/>\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveCard()}>\n            Save\n        </Button>\n    </div>\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onCardEditingChannel: ICallback<CardsEditorCallbackSettings, ICard> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCardValue} from \"../../../common/defaults/defaultCardValue\";\n\nexport const onCardChannel: ICallback<CardsEditorCallbackSettings, ICard> = (\n    {history, setState, state},\n    card = defaultCardValue\n) => {\n    if (card) {\n        setState(() => {\n            return {\n                ...state,\n                card\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onConstructor: ICallback<CardsEditorCallbackSettings, void> = (\n    {\n        location,\n        services\n    }\n) => {\n    let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n    let cardID = location.state ? location.state.cardID : -1;\n    services.cardsEditorService.cardChannel.next({cardID, cardsGroupID});\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardsEditorCallbackSettings, string> = (\n    {history, setState, state},\n    question = ''\n) => {\n    setState((prevState) => {\n        return {\n            card: {\n                ...prevState.card,\n                question\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardsEditorCallbackSettings, string> = (\n    {history, setState, state},\n    answer = ''\n) => {\n    setState((prevState) => {\n        return {\n            card: {\n                ...prevState.card,\n                answer\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onSaveCard: ICallback<CardsEditorCallbackSettings, void> = (\n    {services, state, location}\n) => {\n    services.cardsEditorService.cardEditingChannel.next(\n        {card: state.card, cardsGroupID: location.state.cardsGroupID}\n    );\n}","import {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const initialState = {\n    card: initDefaultCard()\n}","import * as React from 'react';\nimport {FC} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {CardsEditorComponent} from './CardsEditorComponent';\nimport {INavigationState} from '../../common/types/INavigationState';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {ICardsEditorContainer} from \"./types/ICardsEditorContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {IAppContext} from \"../../common/types/IAppContext\";\nimport {AppContext} from \"../../../App\";\nimport {CardsEditorState} from \"./types/CardsEditorState\";\nimport {onCardEditingChannel} from \"./channels-callbacks/onCardEditingChannel\";\nimport {onCardChannel} from \"./channels-callbacks/onCardChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onChangeQuestion} from \"./ui-callbacks/onChangeQuestion\";\nimport {onChangeAnswer} from \"./ui-callbacks/onChangeAnswer\";\nimport {onSaveCard} from \"./ui-callbacks/onSaveCard\";\nimport {initialState} from \"./defaults/initialState\";\n\nexport const CardsEditorContainer: FC<ICardsEditorContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardsEditorState, ICardsEditorContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {cardsEditorService}} = callbackSettings\n\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardsEditorService.cardChannel, callbackFactory(onCardChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeQuestion = callbackFactory(onChangeQuestion);\n    const changeAnswer = callbackFactory(onChangeAnswer);\n    const saveCard = callbackFactory(onSaveCard);\n\n    return <CardsEditorComponent\n        question={state.card.question}\n        answer={state.card.answer}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n        onSaveCard={saveCard}\n    />\n};\n","import * as React from \"react\";\nimport {ChangeEvent, FC} from \"react\";\nimport {FormControlLabel, Switch} from \"@mui/material\";\nimport {ISettingsSwitcherComponent} from \"./types/ISettingsSwitcherComponent\";\n\nexport const SettingsSwitcherComponent: FC<ISettingsSwitcherComponent> = (\n    {\n        checked,\n        label,\n        onChange\n    }\n) => {\n\n    const change = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.checked)\n    };\n\n    return <FormControlLabel\n        control={\n            <Switch\n                checked={checked}\n                onChange={change}\n            />\n        }\n        label={label}\n    />\n}","import * as React from \"react\";\nimport {ChangeEvent, FC} from \"react\";\n\nimport {ISettingsNumberInputComponent} from \"./types/ISettingsNumberInputComponent\";\nimport {FormControlLabel, Input} from \"@mui/material\";\n\nexport const SettingsNumberInputComponent: FC<ISettingsNumberInputComponent> = (\n    {\n        value,\n        label,\n        onChange,\n    }\n) => {\n\n    const change = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange(Number(event.target.value))\n    };\n\n    return <FormControlLabel\n        control={\n            <Input\n                type=\"number\"\n                value={value}\n                onChange={change}\n            />\n        }\n        label={label}\n    />\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {FormGroup} from '@mui/material';\n\nimport {ISettingsComponent} from \"./types/ISettingsComponent\";\nimport {SettingsSwitcherComponent} from \"./elements/settings-switcher/SettingsSwitcherComponent\";\nimport {SettingsNumberInputComponent} from \"./elements/settings-number-input/SettingsNumberInputComponent\";\nimport './SettingsComponent.css'\n\nexport const SettingsComponent: FC<ISettingsComponent> = (\n    {\n        settings,\n        onChangeAlgorithm,\n        onChangeAutoObsolete,\n        onChangeTimeInDone,\n        onChangeTimeInProgress\n    }\n) => {\n\n    return <FormGroup className=\"settings-form\">\n        <SettingsSwitcherComponent\n            checked={settings.isRandomRepeating}\n            label=\"Random repeating algorithm\"\n            onChange={onChangeAlgorithm}\n        />\n        <SettingsSwitcherComponent\n            checked={settings.autoObsolete?.isEnable}\n            label=\"Enable auto obsolete\"\n            onChange={onChangeAutoObsolete}\n        />\n        <SettingsNumberInputComponent\n            value={settings.autoObsolete?.timeInDone}\n            onChange={onChangeTimeInDone}\n            label=\"How long cards exist in done status (days)\"\n        />\n        <SettingsNumberInputComponent\n            value={settings.autoObsolete?.timeInProgress}\n            onChange={onChangeTimeInProgress}\n            label=\"How long cards exist in progress status (days)\"\n        />\n    </FormGroup>\n};\n","import * as React from 'react';\nimport {FC, useState} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {SettingsComponent} from './SettingsComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {ISettings} from '../../common/types/ISettings';\nimport {ISettingsContainer} from \"./types/ISettingsContainer\";\n\nexport const SettingsContainer: FC<ISettingsContainer> = ({settingsService}) => {\n\n    const [state, setState] = useState<ISettings>({\n        isRandomRepeating: false,\n        autoObsolete: {\n            isEnable: false,\n            timeInDone: 7,\n            timeInProgress: 7\n        }\n    });\n\n    useChannel<ISettings, ISettings>(\n        settingsService.changeSettingsChannel,\n        () => {\n            settingsService.settingsChannel.next('');\n        }\n    );\n\n    useChannel<string, ISettings>(\n        settingsService.settingsChannel,\n        (settings: ISettings) => {\n            setState((prevState) => {\n                return {...prevState, ...settings}\n            });\n        }\n    );\n\n    useConstructor(() => {\n        settingsService.settingsChannel.next('');\n    });\n\n    const onChangeSettings = (settings: ISettings) => {\n        settingsService.changeSettingsChannel.next(settings)\n    };\n    const onChangeAlgorithm = (isRandomRepeating: boolean) => {\n        settingsService.changeSettingsChannel.next({\n            ...state,\n            isRandomRepeating\n        })\n    }\n\n    const onChangeAutoObsolete = (isEnable: boolean) => {\n        settingsService.changeSettingsChannel.next({\n            ...state,\n            autoObsolete: {\n                ...state.autoObsolete,\n                isEnable\n            }\n        })\n    }\n\n    const onChangeTimeInDone = (timeInDone: number) => {\n        settingsService.changeSettingsChannel.next({\n            ...state,\n            autoObsolete: {\n                ...state.autoObsolete,\n                timeInDone\n            }\n        })\n    }\n\n    const onChangeTimeInProgress = (timeInProgress: number) => {\n        settingsService.changeSettingsChannel.next({\n            ...state,\n            autoObsolete: {\n                ...state.autoObsolete,\n                timeInProgress\n            }\n        })\n    }\n\n    return <SettingsComponent\n        settings={state}\n        onChangeAlgorithm={onChangeAlgorithm}\n        onChangeAutoObsolete={onChangeAutoObsolete}\n        onChangeTimeInDone={onChangeTimeInDone}\n        onChangeTimeInProgress={onChangeTimeInProgress}\n    />\n};\n","import React, {FC} from \"react\";\n\nimport {CardsContentComponent} from \"../../common/elements/cards-content/CardsContentComponent\";\nimport {ICardsContentComponent} from \"../../common/elements/cards-content/types/ICardsContentComponent\";\n\nexport const CardViewerComponent: FC<ICardsContentComponent> = (props) => {\n\n    return <div className=\"cards-viewer\">\n        {\n            props.card.id === -1 ? <div>No card for viewing</div> : <CardsContentComponent {...props}/>\n        }\n    </div>\n};","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteCard: ICallback<CardViewerCallbackSettings, void> = (\n    settings\n) => {\n    const {services, state, setSubscription} = settings;\n\n    const {confirmDialogService, cardViewerService} = services;\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardViewerService.deleteSingleCardChannel.next(state.card.id);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardViewerCallbackSettings, ICardsGroup[]> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onCardGroupNameChannel: ICallback<CardViewerCallbackSettings, string> = (\n    {services},\n    label\n) => {\n    services.toolbarService.toolbarExternalLabelChannel.next(label as string);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardViewerCallbackSettings, string> = (\n    {state, setState},\n    args = ''\n) => {\n    if (state.card) {\n        const editableCard = {\n            ...state.card,\n            answer: args\n        };\n\n        setState((prevState) => {\n            return {...prevState, card: editableCard}\n        });\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardViewerCallbackSettings, string> = (\n    {state, setState},\n    args = ''\n) => {\n    if (state.card) {\n        const editableCard = {\n            ...state.card,\n            question: args\n        };\n\n        setState((prevState) => {\n            return {...prevState, card: editableCard}\n        });\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const onSwitchEditing: ICallback<CardViewerCallbackSettings, void> = (\n    {\n        state,\n        setState,\n        services,\n        location\n    }\n) => {\n    setState(() => {\n        return {\n            ...state,\n            isEditable: !state.isEditable\n        }\n    });\n\n    if (state.isEditable) {\n        services.cardsEditorService.cardEditingChannel.next({\n            card: state.card || initDefaultCard(),\n            cardsGroupID: location.state.cardsGroupID\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {defaultCardValue} from \"../../../common/defaults/defaultCardValue\";\n\nexport const onClickYesNoButton: ICallback<CardViewerCallbackSettings, boolean> = (\n    {\n        state,\n        setState,\n        services,\n        location\n    },\n    args = false\n) => {\n    if (state.card) {\n        services.cardViewerService.repeatingResultChannel.next({\n            isKnown: args,\n            cardID: state.card.id,\n            cardsGroupID: location.state.cardsGroupID\n        });\n    } else {\n        setState(() => {\n            return {\n                card: defaultCardValue,\n                isQuestionSide: false,\n                isEditable: false\n            }\n        });\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onClickCard: ICallback<CardViewerCallbackSettings, void> = (\n    {\n        state,\n        setState\n    }\n) => {\n    if (!state.isEditable) {\n        setState(() => {\n            return {\n                ...state,\n                isQuestionSide: !state.isQuestionSide\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCardValue} from \"../../../common/defaults/defaultCardValue\";\n\nexport const onCardChannel: ICallback<CardViewerCallbackSettings, ICard> = (\n    {services, setState},\n    card = defaultCardValue\n) => {\n    services.cardViewerService.cardGroupNameChannel.next(card.id)\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCardValue} from \"../../../common/defaults/defaultCardValue\";\n\nexport const onCardEditingChannel: ICallback<CardViewerCallbackSettings, ICard> = (\n    {setState},\n    card = defaultCardValue\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onRepeatingResultChannel: ICallback<CardViewerCallbackSettings, ICardsGroup[]> = (\n    {services, location}\n) => {\n    services.cardViewerService.cardChannel.next(location.state.cardID);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onConstructor: ICallback<CardViewerCallbackSettings, void> = (\n    {services, location}\n) => {\n    services.cardViewerService.cardChannel.next(location.state.cardID);\n}","import {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const initialState = {\n    card: {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    },\n    isQuestionSide: true,\n    isEditable: false\n}","import React, {FC, useCallback} from \"react\";\n\nimport {useChannel} from \"../../../MyTools/channel-conception/react-hooks/useChannel\";\nimport {AppContext} from \"../../../App\";\nimport {CardViewerComponent} from \"./CardViewerComponent\";\nimport {useConstructor} from \"../../../MyTools/react-hooks/useConstructor\";\nimport {ICardViewerContainer} from \"./types/ICardViewerContainer\";\nimport {onDeleteCard} from \"./ui-callbacks/onDeleteCard\";\nimport {onDeleteSingleCardChannel} from \"./channels-callbacks/onDeleteSingleCardChannel\";\nimport {onCardGroupNameChannel} from \"./channels-callbacks/onCardGroupNameChannel\";\nimport {onChangeAnswer} from \"./ui-callbacks/onChangeAnswer\";\nimport {onChangeQuestion} from \"./ui-callbacks/onChangeQuestion\";\nimport {onSwitchEditing} from \"./ui-callbacks/onSwitchEditing\";\nimport {onClickYesNoButton} from \"./ui-callbacks/onClickYesNoButton\";\nimport {onClickCard} from \"./ui-callbacks/onClickCard\";\nimport {onCardChannel} from \"./channels-callbacks/onCardChannel\";\nimport {onCardEditingChannel} from \"./channels-callbacks/onCardEditingChannel\";\nimport {onRepeatingResultChannel} from \"./channels-callbacks/onRepeatingResultChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {INavigationState} from \"../../common/types/INavigationState\";\nimport {CardViewerContainerState} from \"./types/CardViewerContainerState\";\nimport {IAppContext} from \"../../common/types/IAppContext\";\nimport {initialState} from \"./defaults/initialState\";\n\nexport const CardViewerContainer: FC<ICardViewerContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardViewerContainerState, ICardViewerContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, context, services: {cardViewerService, cardsEditorService}} = callbackSettings\n\n    useChannel(cardViewerService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel))\n    useChannel(cardViewerService.cardGroupNameChannel, callbackFactory(onCardGroupNameChannel))\n    useChannel(cardViewerService.cardChannel, callbackFactory(onCardChannel));\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardViewerService.repeatingResultChannel, callbackFactory(onRepeatingResultChannel));\n\n    useConstructor(callbackFactory(onConstructor))\n\n    const clickCard = callbackFactory(onClickCard)\n    const clickYesNoButton = useCallback(callbackFactory(onClickYesNoButton), [state.card])\n    const switchEditing = callbackFactory(onSwitchEditing)\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), [state.card])\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), [state.card])\n    const deleteCard = useCallback(callbackFactory(onDeleteCard), [state.card])\n\n    return <CardViewerComponent\n        cardHeight={context.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={clickCard}\n        onClickYesNoButton={clickYesNoButton}\n        card={state.card}\n        onSwitchEditing={switchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n        onDeleteCard={deleteCard}\n    />\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {Redirect, Route, Switch} from 'react-router';\n\nimport {Routs} from '../../common/Routs';\nimport {CardsGroupsListContainer} from '../../pages/cards-groups-list/CardsGroupsListContainer';\nimport {GoogleAuthContainer} from '../../pages/google-auth/GoogleAuthContainer';\nimport {GoogleBackupsContainer} from '../../pages/google-backups/GoogleBackupsContainer';\nimport {CardsContainer} from '../../pages/cards/CardsContainer';\nimport {CardRepeaterContainer} from '../../pages/cards-repeater/CardsRepeaterContainer';\nimport {LocalBackupsContainer} from '../../pages/local-backup/LocalBackupsContainer';\nimport {CardsGroupsEditorContainer} from '../../pages/cards-groups-editor/CardsGroupsEditorContainer';\nimport {CardsEditorContainer} from '../../pages/cards-editor/CardsEditorContainer';\nimport {SettingsContainer} from '../../pages/settings/SettingsContainer';\nimport {CardViewerContainer} from \"../../pages/card-viewer/CardViewerContainer\";\nimport {INavigationContainer} from \"./types/INavigationContainer\";\n\n\nexport const NavigationContainer: FC<INavigationContainer> = (\n    {\n        cardsGroupsListService,\n        cardsGroupsEditorService,\n        errorService,\n        googleAuthService,\n        googleBackupsService,\n        spinnerService,\n        confirmDialogService,\n        cardsEditorService,\n        cardsListService,\n        cardsRepeaterService,\n        settingsService,\n        localBackupsService,\n        cardViewerService,\n        selectionDialogService,\n        toolbarService\n    }\n) => {\n\n    return <Switch>\n        <Redirect exact from=\"/MyCardsWeb\" to={Routs.cardsGroups.path}/>\n        <Redirect exact from=\"/\" to={Routs.cardsGroups.path}/>\n        <Route path={Routs.cardsGroups.path}>\n            <CardsGroupsListContainer cardsGroupsListService={cardsGroupsListService}\n                                      confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.googleAuth.path}>\n            <GoogleAuthContainer googleAuthService={googleAuthService} errorService={errorService}/>\n        </Route>\n        <Route path={Routs.googleBackups.path}>\n            <GoogleBackupsContainer googleBackupsService={googleBackupsService} spinnerService={spinnerService}\n                                    confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.cards.path}>\n            <CardsContainer\n                cardsListService={cardsListService}\n                confirmDialogService={confirmDialogService}\n                selectionDialogService={selectionDialogService}\n            />\n        </Route>\n        <Route path={Routs.cardsRepeater.path}>\n            <CardRepeaterContainer\n                toolbarService={toolbarService}\n                cardsRepeaterService={cardsRepeaterService}\n                cardsEditorService={cardsEditorService}\n                confirmDialogService={confirmDialogService}\n            />\n        </Route>\n        <Route path={Routs.localBackups.path}>\n            <LocalBackupsContainer localBackupsService={localBackupsService} confirmDialogService={confirmDialogService}\n                                   spinnerService={spinnerService}/>\n        </Route>\n        <Route path={Routs.cardsGroupEditor.path}>\n            <CardsGroupsEditorContainer cardsGroupsEditorService={cardsGroupsEditorService}/>\n        </Route>\n        <Route path={Routs.cardsEditor.path}>\n            <CardsEditorContainer cardsEditorService={cardsEditorService}/>\n        </Route>\n        <Route path={Routs.settings.path}>\n            <SettingsContainer settingsService={settingsService}/>\n        </Route>\n        <Route path={Routs.cardViewer.path}>\n            <CardViewerContainer\n                toolbarService={toolbarService}\n                confirmDialogService={confirmDialogService}\n                cardViewerService={cardViewerService}\n                cardsEditorService={cardsEditorService}\n            />\n        </Route>\n    </Switch>\n};\n","import {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const getBackupFolder = (token: string): Promise<IGoogleDriveFile | null> => {\n\n    const googleDriveFolderType = 'application/vnd.google-apps.folder';\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const backupFolderName = 'my-cards';\n    const searchFolderURI = googleDriveFilesAPI + '?q=name%20contains%20';\n    const url = `${searchFolderURI}'${backupFolderName}'`\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + token\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (result) => result.json()\n    ).then((result: { files: IGoogleDriveFile[] }) => {\n        let foundedFolder = result.files.find((file) => {\n            return file.mimeType === googleDriveFolderType\n        });\n        return foundedFolder || null;\n    })\n}","import {from, Observable} from 'rxjs';\nimport {ICardsGroup} from '../types/ICardsGroup';\nimport {DataBaseService} from './DataBaseService';\nimport {ISettings} from '../types/ISettings';\nimport {IStoredFilters} from \"../types/IStoredFilters\";\nimport {defaultFilterValue} from \"../defaults/defaultFilterValue\";\n\nexport class StorageService {\n\n    private cardsStorageID = 'cards-local-storage';\n    private authTokenLocalStorageID = 'auth-token';\n    private settingsID = 'settings';\n    private filterID = 'filter'\n\n    constructor(private dataBaseService: DataBaseService) {\n    }\n\n    public getBackup = () : Observable<ICardsGroup[]> => {\n        return from(this.getBackupFromDataBase());\n    };\n\n    private getBackupFromDataBase = async () => {\n        let backup = null;\n\n        try {\n            backup = await this.dataBaseService.get<ICardsGroup[]>(this.cardsStorageID);\n        } catch (e) {\n            console.error(e);\n            return backup;\n        }\n        if(backup) {\n            return backup;\n        } else {\n            return [];\n        }\n    };\n\n    public setBackup(cardsGroups: ICardsGroup[]): Observable<ICardsGroup[]> {\n        return from(this.setBackupToDataBase(cardsGroups));\n    }\n\n    private setBackupToDataBase = async (cardsGroups: ICardsGroup[]) => {\n        try {\n            await this.dataBaseService.set(this.cardsStorageID, cardsGroups);\n        } catch (e) {\n            console.error(e);\n        }\n        return cardsGroups;\n    };\n\n    public getAuthToken(): Observable<string> {\n        return from(new Promise<string>((resolve, reject) => {\n            const authToken = localStorage.getItem(this.authTokenLocalStorageID);\n            if(authToken) {\n                resolve(authToken);\n            } else {\n                reject('Auth token is empty')\n            }\n        }));\n    }\n\n    public setAuthToken(authToken: string): Observable<string> {\n        return from(new Promise<string>((resolve) => {\n            localStorage.setItem(this.authTokenLocalStorageID, authToken);\n            resolve(authToken);\n        }));\n    }\n\n    public getSettings(): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve, reject) => {\n            const settings = localStorage.getItem(this.settingsID);\n            if(settings) {\n                resolve(JSON.parse(settings) as ISettings);\n            } else {\n                resolve({\n                    isRandomRepeating: false,\n                    autoObsolete: {\n                        isEnable: false,\n                        timeInProgress: 7,\n                        timeInDone: 7\n                    }\n                })\n            }\n        }));\n    }\n\n    public setSettings(settings: ISettings): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve) => {\n            localStorage.setItem(this.settingsID, JSON.stringify(settings));\n            resolve(settings);\n        }));\n    }\n\n    public getFilter(): Observable<IStoredFilters> {\n        return from(new Promise<IStoredFilters>((resolve) => {\n            const settings = localStorage.getItem(this.filterID);\n            if (settings) {\n                resolve(JSON.parse(settings) as IStoredFilters);\n            } else {\n                resolve({\n                    cards: defaultFilterValue,\n                    cardsGroups: defaultFilterValue\n                })\n            }\n        }));\n    }\n\n    public setFilter(settings: IStoredFilters): Observable<IStoredFilters> {\n        return from(new Promise<IStoredFilters>((resolve) => {\n            localStorage.setItem(this.filterID, JSON.stringify(settings));\n            resolve(settings);\n        }));\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getCardsByGroup = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n    const foundCardsGroup = cardsGroups.find((cardsGroup: ICardsGroup) => {\n        return cardsGroup.id === cardsGroupID;\n    });\n\n    return foundCardsGroup ? foundCardsGroup.cards : [];\n};\n","import {ICardsGroup} from '../types/ICardsGroup';\nimport {ICard} from '../types/ICard';\n\nexport const deleteSingleCard = (cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => {\n        const cardIndex = cardGroup.cards.findIndex((card) => {\n            return card.id === cardID;\n        })\n\n        return cardIndex > -1\n    });\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.filter((card: ICard) => card.id !== cardID);\n    }\n\n    return cardsGroups;\n};\n","export const selectedItemsObjectToArray = (selectedItemsObject: {[key: number]: boolean}): number[] => {\n    const array: number[] = [];\n    for (let item in selectedItemsObject) {\n        array.push(Number(item));\n    }\n    return array\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const getExistedCardsGroups = (cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.map((cardsGroup) => {\n        return {\n            id: cardsGroup.id,\n            label: cardsGroup.nameCardsGroup\n        }\n    })\n}","import {IRepeatingArgs} from '../types/IRepeatingArgs';\nimport {ICardsGroup} from '../types/ICardsGroup';\nimport {ICard} from '../types/ICard';\nimport {IRangeOfKnowledge} from '../types/IRangeOfKnowledge';\n\nexport const changeRangeOfKnowledge = (args: IRepeatingArgs, cardsGroups: ICardsGroup[]) => {\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (!args.cardID || card.id === args.cardID) {\n                    if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (!args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n                    }\n                }\n            });\n        }\n    });\n\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from \"../types/ICardsGroup\";\nimport {IRepeatingArgs} from \"../types/IRepeatingArgs\";\nimport {ICard} from \"../types/ICard\";\n\nexport const refreshCardRepeatingDate = (args: IRepeatingArgs, cardsGroups: ICardsGroup[]) => {\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (!args.cardID || card.id === args.cardID) {\n                    card.dateRepeating = new Date().getTime();\n                }\n            });\n        }\n    });\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const getCardGroupName = (cardsGroups: ICardsGroup[], cardID: number): string => {\n    const foundIndex = cardsGroups.findIndex((cardsGroup) => {\n        const foundCardIndex = cardsGroup.cards.findIndex((card) => {\n            return card.id === cardID;\n        })\n        return foundCardIndex > -1;\n    });\n    return foundIndex > -1 ? cardsGroups[foundIndex].nameCardsGroup : 'No name';\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const getCardForViewing = (cardsGroups: ICardsGroup[], cardID: number): ICard => {\n    let card = {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    };\n\n    for (let i = 0; i < cardsGroups.length; i++) {\n        const index = cardsGroups[i].cards.findIndex((card: ICard) => {\n            return card.id === cardID\n        })\n\n        if (index > -1) {\n            card = cardsGroups[i].cards[index];\n            return card;\n        }\n    }\n\n    return card;\n}","import React, {FC} from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport {List, ListItem, ListItemText} from \"@mui/material\";\nimport {ISelectionDialogComponent} from \"./types/ISelectionDialogComponent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\n\nexport const SelectionDialogComponent: FC<ISelectionDialogComponent> = (\n    {\n        isOpen,\n        onClose,\n        onClickItem,\n        selectionItems,\n        title\n    }\n) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitle>{title}</DialogTitle>\n                <DialogContent>\n                    <List>\n                        {\n                            selectionItems.map((item) => {\n                                return <ListItem key={item.id} onClick={() => onClickItem(item.id)}>\n                                    <ListItemText primary={item.label}/>\n                                </ListItem>\n                            })\n                        }\n                    </List>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport {FC} from 'react';\n\nimport {SelectionDialogComponent} from './SelectionDialogComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ISelectionDialogContainer} from \"./types/ISelectionDialogContainer\";\nimport {SelectionDialogContainerState} from \"./types/SelectionDialogContainerState\";\n\nexport const SelectionDialogContainer: FC<ISelectionDialogContainer> = ({selectionDialogService}) => {\n\n    const [state, setState] = React.useState<SelectionDialogContainerState>({\n        isOpen: false,\n        title: '',\n        selectionItems: []\n    });\n\n    useChannel<SelectionDialogContainerState, SelectionDialogContainerState>(\n        selectionDialogService.openDialogChannel,\n        (state: SelectionDialogContainerState) => {\n            setState({...state});\n        }\n    );\n\n    const onClose = () => {\n        setState({isOpen: false, title: '', selectionItems: []});\n        selectionDialogService.selectionChannel.unsubscribe();\n    };\n\n    const onClickItem = (itemID: number) => {\n        selectionDialogService.selectionChannel.next(itemID);\n    };\n\n    return <SelectionDialogComponent\n        isOpen={state.isOpen}\n        onClickItem={onClickItem}\n        onClose={onClose}\n        title={state.title}\n        selectionItems={state.selectionItems}\n    />\n};\n","import {of} from \"rxjs\";\n\nimport {Routs} from '../../common/Routs';\nimport {Channel} from \"../../../MyTools/channel-conception/Channel\";\n\nexport class ToolbarService {\n\n    public toolbarExternalLabelChannel: Channel<string, string> = new Channel(\n        (name: string) => of(name)\n    )\n\n    public getPageLabel(path: string) {\n        if (path === Routs.googleAuth.path) {\n            return Routs.googleAuth.name;\n        }\n\n        if (path === Routs.googleBackups.path) {\n            return Routs.googleBackups.name;\n        }\n\n        if(path === Routs.cardsGroups.path) {\n            return Routs.cardsGroups.name;\n        }\n\n        if(path === Routs.cards.path) {\n            return Routs.cards.name;\n        }\n\n        if(path === Routs.cardsRepeater.path) {\n            return Routs.cardsRepeater.name;\n        }\n\n        if(path === Routs.localBackups.path) {\n            return Routs.localBackups.name;\n        }\n\n        if(path === Routs.settings.path) {\n            return Routs.settings.name;\n        }\n\n        if(path === Routs.cardViewer.path) {\n            return Routs.cardViewer.name;\n        }\n\n        return 'My Cards'\n    }\n}\n","export const defaultAppState = {\n    height: 0,\n    width: 0\n};","import React, {useEffect, useState} from 'react';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport './App.css';\nimport {IAppContext} from './app/common/types/IAppContext';\nimport {ToolbarContainer} from './app/parts/toolbar/ToolbarContainer';\nimport {NavigationPanelContainer} from './app/parts/navigation-panel/NavigationPanelContainer';\nimport {ErrorContainer} from './app/parts/error-container/ErrorContainer';\nimport {SpinnerContainer} from './app/parts/spinner/SpinnerContainer';\nimport {ConfirmDialogContainer} from './app/parts/confirm-dialog/ConfirmDialogContainer';\nimport {SpinnerService} from './app/parts/spinner/SpinnerService';\nimport {ErrorService} from './app/parts/error-container/ErrorService';\nimport {NavigationContainer} from './app/parts/navigation/NavigationContainer';\nimport {CardsGroupsEditorService} from './app/pages/cards-groups-editor/CardsGroupsEditorService';\nimport {CardsGroupsListService} from './app/pages/cards-groups-list/CardsGroupsListService';\nimport {ConfirmDialogService} from './app/parts/confirm-dialog/ConfirmDialogService';\nimport {GoogleAuthService} from './app/pages/google-auth/GoogleAuthService';\nimport {GoogleBackupsService} from './app/pages/google-backups/GoogleBackupsService';\nimport {CardsEditorService} from './app/pages/cards-editor/CardsEditorService';\nimport {StorageService} from './app/common/services/StorageService';\nimport {CardsService} from './app/pages/cards/CardsService';\nimport {CardsRepeaterService} from './app/pages/cards-repeater/CardsRepeaterService';\nimport {LocalBackupsService} from './app/pages/local-backup/LocalBackupsService';\nimport {DataBaseService} from './app/common/services/DataBaseService';\nimport {SettingsService} from './app/pages/settings/SettingsService';\nimport {CardViewerService} from \"./app/pages/card-viewer/CardViewerService\";\nimport {SelectionDialogContainer} from \"./app/parts/selection-dialog/SelectionDialogContainer\";\nimport {SelectionDialogService} from \"./app/parts/selection-dialog/SelectionDialogService\";\nimport {NavigationPanelService} from \"./app/parts/navigation-panel/NavigationPanelService\";\nimport {ToolbarService} from \"./app/parts/toolbar/ToolbarService\";\nimport {Channel} from \"./MyTools/channel-conception/Channel\";\nimport {defaultAppState} from \"./app/common/defaults/defaultAppState\";\nimport {STORE_NAME} from \"./app/common/constants/STORE_NAME\";\n\nexport const AppContext = React.createContext<IAppContext>(defaultAppState);\n\nconst errorService = new ErrorService();\nconst spinnerService = new SpinnerService();\n\nconst confirmDialogService = new ConfirmDialogService();\nconst selectionDialogService = new SelectionDialogService();\nconst navigationPanelService = new NavigationPanelService();\nconst toolbarService = new ToolbarService();\n\nconst dataBaseService = new DataBaseService(STORE_NAME);\nconst storageService = new StorageService(dataBaseService);\nconst cardsGroupsEditorService = new CardsGroupsEditorService(storageService);\nconst cardsGroupsListService = new CardsGroupsListService(storageService);\nconst googleAuthService = new GoogleAuthService(storageService);\nconst googleBackupsService = new GoogleBackupsService(storageService);\nconst cardsEditorService = new CardsEditorService(storageService);\nconst cardsListService = new CardsService(storageService);\nconst cardsRepeaterService = new CardsRepeaterService(storageService);\nconst localBackupsService = new LocalBackupsService(storageService);\nconst settingService = new SettingsService(storageService);\nconst cardViewerService = new CardViewerService(storageService);\n\nChannel.setGlobalErrorHandler((error) => {\n    console.error(error);\n})\n\nfunction App() {\n\n    const [appState, setAppState] = useState<IAppContext>(defaultAppState);\n\n    useEffect(() => {\n        const height = window.screen.height;\n        if (appState.height !== height) {\n            setAppState({...appState, height});\n        }\n    }, [appState]);\n\n    return (\n        <>\n            <AppContext.Provider value={appState}>\n                <Router>\n                    <div>\n\n                        <ErrorContainer errorService={errorService}/>\n\n                        <ToolbarContainer\n                            toolbarService={toolbarService}\n                            navigationPanelService={navigationPanelService}\n                        />\n\n                        <NavigationPanelContainer navigationPanelService={navigationPanelService}/>\n\n                        <ConfirmDialogContainer confirmDialogService={confirmDialogService}/>\n\n                        <SelectionDialogContainer selectionDialogService={selectionDialogService}/>\n\n                        <div className=\"page-container\" style={{height: appState.height - 110, width: '100%'}}>\n                            <SpinnerContainer spinnerService={spinnerService}/>\n                            <NavigationContainer\n                                toolbarService={toolbarService}\n                                cardsGroupsListService={cardsGroupsListService}\n                                cardsGroupsEditorService={cardsGroupsEditorService}\n                                googleAuthService={googleAuthService}\n                                googleBackupsService={googleBackupsService}\n                                errorService={errorService}\n                                spinnerService={spinnerService}\n                                confirmDialogService={confirmDialogService}\n                                cardsEditorService={cardsEditorService}\n                                cardsListService={cardsListService}\n                                cardsRepeaterService={cardsRepeaterService}\n                                localBackupsService={localBackupsService}\n                                settingsService={settingService}\n                                cardViewerService={cardViewerService}\n                                selectionDialogService={selectionDialogService}\n                            />\n                        </div>\n                    </div>\n                </Router>\n            </AppContext.Provider>\n        </>\n    );\n}\n\nexport default App;\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class ErrorService {\n    public errorChannel: Channel<string, string>;\n\n\n    constructor() {\n        this.errorChannel = new Channel<string, string>((error: string)=> of(error));\n    }\n\n}\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ConfirmDialogContainerState} from \"./types/ConfirmDialogContainerState\";\n\nexport class ConfirmDialogService {\n\n    public openDialogChannel = new Channel<ConfirmDialogContainerState, ConfirmDialogContainerState>(\n        (state: ConfirmDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.confirmationChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public confirmationChannel = new Channel<boolean, boolean>((value: boolean) => of(value));\n}\n\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {SelectionDialogContainerState} from \"./types/SelectionDialogContainerState\";\n\nexport class SelectionDialogService {\n\n    public openDialogChannel = new Channel<SelectionDialogContainerState, SelectionDialogContainerState>(\n        (state: SelectionDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.selectionChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public selectionChannel = new Channel<number, number>((value: number) => of(value));\n}\n\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class NavigationPanelService {\n\n    public navigationPanelOpenChannel: Channel<string, string>;\n\n    constructor() {\n        this.navigationPanelOpenChannel = new Channel<string, string>((value: string) => of(value))\n    }\n}\n","import {IDBPDatabase, openDB} from 'idb';\n\nexport class DataBaseService {\n\n    private dataBase: Promise<IDBPDatabase>;\n\n    private DATA_BASE_NAME = \"my-cards-data-base\";\n\n    constructor(private storeName: string) {\n        this.dataBase = openDB(this.DATA_BASE_NAME, 1, {\n            upgrade(db) {\n                db.createObjectStore(storeName);\n            },\n        });\n    }\n\n    get = async <T>(key: string) => {\n        return (await this.dataBase).get(this.storeName, key);\n    };\n\n    set = async <T>(key: string, value: T) => {\n        return (await this.dataBase).put(this.storeName, value, key);\n    };\n}\n","export const STORE_NAME = \"cards-store\";","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {saveCardsGroup} from './logic/saveCardsGroup';\nimport {getEditingCardsGroup} from './logic/getEditingCardsGroup';\n\nexport class CardsGroupsEditorService {\n\n    public groupEditingChannel: Channel<ICardsGroup, ICardsGroup[]>;\n    public groupChannel: Channel<number, ICardsGroup>;\n\n    constructor(storageService: StorageService) {\n        this.groupEditingChannel = new Channel((editedCardGroup: ICardsGroup) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCardsGroup(editedCardGroup, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            })\n        ));\n\n        this.groupChannel = new Channel((cardGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCardsGroup(cardGroupID, cardsGroups))\n        ))\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveCardsGroup = (editedCardGroup: ICardsGroup, cardsGroups: ICardsGroup[]) => {\n        const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => editedCardGroup.id === cardGroup.id);\n\n        if (cardGroupIndex < 0) {\n            cardsGroups.push(editedCardGroup);\n        } else {\n            cardsGroups[cardGroupIndex] = editedCardGroup;\n        }\n\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getEditingCardsGroup = (cardGroupID: number, cardsGroups: ICardsGroup[]): ICardsGroup => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardGroupID === cardGroup.id);\n\n        if (!cardsGroup) {\n            cardsGroup = {\n                cards: [],\n                nameCardsGroup: '',\n                repeatingDate: new Date().getTime(),\n                id: new Date().getTime(),\n                percentRepeatedCards: 0\n            }\n        }\n        return cardsGroup;\n};\n","import {map, mergeMap, switchMap, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {updateRepeatingDate} from './logic/updateRepeatingDate';\nimport {sortByFilter} from './logic/sortByFilter';\nimport {countRepeatedCardsPercent} from './logic/countRepeatedCardsPercent';\nimport {deleteGroup} from './logic/deleteGroup';\nimport {resetRepeatingProgress} from './logic/resetRepeatingProgress';\nimport {defer, of} from \"rxjs\";\nimport {ISettings} from \"../../common/types/ISettings\";\nimport {updateObsoleteStatus} from \"./logic/updateObsoleteStatus\";\nimport {IFilter} from \"../../common/types/IFilter\";\nimport {IStoredFilters} from \"../../common/types/IStoredFilters\";\n\nexport class CardsGroupsListService {\n    public groupsListChannel: Channel<string, ICardsGroup[]>;\n    public groupDeleteChannel: Channel<number, ICardsGroup[]>;\n    public resetProgressChannel: Channel<number, ICardsGroup[]>;\n    public changeFilterChannel: Channel<IFilter, IStoredFilters>;\n    public filterChannel: Channel<string, IFilter>;\n\n    constructor(storageService: StorageService) {\n\n        this.groupsListChannel = new Channel(() => storageService.getBackup().pipe(\n            switchMap((backup) => {\n                return storageService.getSettings().pipe(\n                    switchMap((settings: ISettings) => {\n                        return defer(() => {\n                            return settings.autoObsolete && settings.autoObsolete.isEnable ?\n                                of(\n                                    updateObsoleteStatus(\n                                        backup,\n                                        settings.autoObsolete.timeInProgress,\n                                        settings.autoObsolete.timeInDone\n                                    )\n                                ).pipe(tap((cardsGroups) => storageService.setBackup(cardsGroups))) :\n                                of(backup)\n                        })\n                    })\n                )\n            }),\n            map((cardsGroups: ICardsGroup[]) => updateRepeatingDate(cardsGroups)),\n            map((cardsGroups: ICardsGroup[]) => countRepeatedCardsPercent(cardsGroups)),\n            mergeMap((cardsGroups: ICardsGroup[]) => {\n                return storageService.getFilter().pipe(\n                    map((storedFilter) => sortByFilter(cardsGroups, storedFilter.cardsGroups))\n                )\n            })\n        ));\n\n        this.groupDeleteChannel = new Channel((groupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => deleteGroup(groupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ));\n\n        this.resetProgressChannel = new Channel((cardsGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => resetRepeatingProgress(cardsGroupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ))\n\n        this.filterChannel = new Channel<string, IFilter>(\n            () => storageService.getFilter().pipe(\n                map((storedFilters) => storedFilters.cardsGroups)\n            )\n        )\n\n        this.changeFilterChannel = new Channel<IFilter, IStoredFilters>(\n            (filter) => storageService.getFilter().pipe(\n                map((storedFilters) => {\n                        return {...storedFilters, cardsGroups: filter}\n                    }\n                ),\n                tap((storedFilters) => {\n                    storageService.setFilter(storedFilters);\n                })\n            )\n        )\n    }\n}\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const updateObsoleteStatus = (\n    cardsGroups: ICardsGroup[],\n    timeInProgress: number,\n    timeInDone: number\n): ICardsGroup[] => {\n\n    if(timeInProgress < 1 && timeInDone < 1) {\n        return cardsGroups;\n    }\n\n    const millisecondsInDay = 86400000;\n    const currentDate = new Date().getTime();\n    const timeInProgressMilliseconds = timeInProgress * millisecondsInDay;\n    const timeInDoneMilliseconds = timeInDone * millisecondsInDay;\n\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        cardsGroup.cards.forEach((card: ICard) => {\n            const differences = currentDate - card.dateRepeating;\n\n            if(card.rangeOfKnowledge === IRangeOfKnowledge.DONE && differences > timeInDoneMilliseconds) {\n                card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n            }\n\n            if(card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS && differences > timeInProgressMilliseconds) {\n                card.rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n            }\n        });\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\n\nexport const updateRepeatingDate = (cardsGroups: ICardsGroup[]) => {\n        cardsGroups.map((cardsGroup: ICardsGroup) => {\n            let dateRepeating = 0;\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (card.dateRepeating > dateRepeating) {\n                    dateRepeating = card.dateRepeating\n                }\n            });\n            cardsGroup.repeatingDate = dateRepeating;\n            return cardsGroup;\n        });\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const countRepeatedCardsPercent = (cardsGroups: ICardsGroup[]) => {\n    cardsGroups.map((cardsGroup: ICardsGroup) => {\n        let statusDone = 0;\n        cardsGroup.cards.forEach((card: ICard) => {\n            if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n                statusDone++\n            }\n        });\n        cardsGroup.percentRepeatedCards = statusDone / cardsGroup.cards.length * 100;\n        return cardsGroup;\n    });\n    return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const sortByFilter = (cardsGroups: ICardsGroup[], filter: IFilter) => {\n    let sortedCards = cardsGroups.filter(\n        (cardsGroup) => cardsGroup.nameCardsGroup.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1\n    );\n    if (filter.sort === ISortVariant.NAME_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.nameCardsGroup > secondCardsGroup.nameCardsGroup) {\n                return 1\n            }\n            if (firstCardGroup.nameCardsGroup < secondCardsGroup.nameCardsGroup) {\n                return -1\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.NAME_DESK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.nameCardsGroup > secondCardsGroup.nameCardsGroup) {\n                return -1\n            }\n            if (firstCardGroup.nameCardsGroup < secondCardsGroup.nameCardsGroup) {\n                return 1\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.DATE_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.repeatingDate && secondCardsGroup.repeatingDate) {\n                if (firstCardGroup.repeatingDate > secondCardsGroup.repeatingDate) {\n                    return 1\n                }\n                if (firstCardGroup.repeatingDate < secondCardsGroup.repeatingDate) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.DATE_DESK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.repeatingDate && secondCardsGroup.repeatingDate) {\n                if (firstCardGroup.repeatingDate < secondCardsGroup.repeatingDate) {\n                    return 1\n                }\n                if (firstCardGroup.repeatingDate > secondCardsGroup.repeatingDate) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.PROGRESS_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.percentRepeatedCards && secondCardsGroup.percentRepeatedCards) {\n                if (firstCardGroup.percentRepeatedCards < secondCardsGroup.percentRepeatedCards) {\n                    return 1\n                }\n                if (firstCardGroup.percentRepeatedCards > secondCardsGroup.percentRepeatedCards) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.PROGRESS_DESC) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.percentRepeatedCards && secondCardsGroup.percentRepeatedCards) {\n                if (firstCardGroup.percentRepeatedCards > secondCardsGroup.percentRepeatedCards) {\n                    return 1\n                }\n                if (firstCardGroup.percentRepeatedCards < secondCardsGroup.percentRepeatedCards) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    }\n\n    return sortedCards;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const deleteGroup = (groupID: number, cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.filter((cardGroup) => {\n        return cardGroup.id !== groupID;\n    });\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const resetRepeatingProgress = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n\n    if (cardGroupIndex < 0) {\n        return cardsGroups;\n    }\n\n    cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.map((card: ICard) => {\n        return {\n            ...card,\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO\n        }\n    });\n\n    return cardsGroups;\n};\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class GoogleAuthService {\n    public loginChannel: Channel<string, string>;\n\n    constructor(storageService: StorageService) {\n\n        this.loginChannel = new Channel((authToken: string) => of('').pipe(\n            tap(() => {\n                storageService.setAuthToken(authToken)\n            })\n        ));\n    }\n}\n","import {defer, from, mergeMap, of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {formatCreatedDate} from './logic/formatCreatedDate';\nimport {getBackupFolder} from \"./logic/getBackupFolder\";\nimport {getBackupFiles} from \"./logic/getBackupFiles\";\nimport {loadBackupFile} from \"./logic/loadBackupFile\";\nimport {createBackupFolder} from \"./logic/createBackupFolder\";\nimport {createEmptyBackupFile} from \"./logic/createEmptyBackupFile\";\nimport {createBackupName} from \"./logic/createBackupName\";\nimport {uploadBackupFile} from \"./logic/uploadBackupFile\";\nimport {deleteBackupFile} from \"./logic/deleteBackupFile\";\n\nexport class GoogleBackupsService {\n\n    public backupsNameLoadChannel: Channel<string, IGoogleDriveFile[]>;\n    public backupLoadChannel: Channel<string, ICardsGroup[]>;\n    public backupUploadChannel: Channel<void, string>;\n    public backupDeleteChannel: Channel<string, string>;\n\n    constructor(private storageService: StorageService) {\n\n        this.backupsNameLoadChannel = new Channel(() => storageService.getAuthToken().pipe(\n            mergeMap(\n                (authToken: string) => of(authToken).pipe(\n                    switchMap(() => from(getBackupFolder(authToken))),\n                    switchMap(\n                        (folder: IGoogleDriveFile | null) => from(getBackupFiles(authToken, folder))\n                    ),\n                    map((googleDriveFiles: IGoogleDriveFile[] | null) => formatCreatedDate(googleDriveFiles))\n                )\n            )\n        ));\n\n        this.backupLoadChannel = new Channel(\n            (backupID: string) => storageService.getAuthToken().pipe(\n                switchMap(\n                    (authToken) => from(loadBackupFile(authToken, backupID))\n                ),\n                tap((cards: ICardsGroup[]) => {\n                    storageService.setBackup(cards);\n                })\n            )\n        );\n\n        this.backupUploadChannel = new Channel(\n            () => storageService.getAuthToken().pipe(\n                mergeMap((authToken: string) => of(authToken).pipe(\n                        switchMap(() => from(getBackupFolder(authToken))),\n                        mergeMap((folder: IGoogleDriveFile | null) => {\n                            return defer(() => {\n                                return folder ? of(folder.id) : from(createBackupFolder(authToken))\n                            })\n                        }),\n                        mergeMap((folderId: string) => {\n                            return storageService.getBackup().pipe(\n                                map(\n                                    (cardsGroups) => createBackupName(cardsGroups)\n                                ),\n                                switchMap((name: string) => {\n                                    return from(createEmptyBackupFile(\n                                        authToken,\n                                        folderId,\n                                        name\n                                    ));\n                                })\n                            )\n                        }),\n                        switchMap((fileId: string) => {\n                            return storageService.getBackup().pipe(\n                                switchMap((cardsGroups) => {\n                                    return uploadBackupFile(\n                                        authToken,\n                                        fileId,\n                                        cardsGroups\n                                    )\n                                })\n                            )\n                        })\n                    )\n                )\n            )\n        );\n\n        this.backupDeleteChannel = new Channel((fileID: string) => storageService.getAuthToken().pipe(\n            switchMap((authToken) => deleteBackupFile(authToken, fileID))\n        ));\n    }\n}\n","import {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const getBackupFiles = (authToken: string, folder: IGoogleDriveFile | null): Promise<IGoogleDriveFile[] | null> => {\n\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const url = `${googleDriveFilesAPI}?q=\"${folder ? folder.id : -1}\"+in+parents&fields=files(id,createdTime,name)`\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.files)\n}","import {IGoogleDriveFile} from '../../../common/types/IGoogleDriveFile';\n\nexport const formatCreatedDate = (googleDriveFiles: IGoogleDriveFile[] | null) => {\n    return googleDriveFiles ? googleDriveFiles.map((googleDriveFile: IGoogleDriveFile) => {\n        const date = new Date(googleDriveFile.createdTime);\n        const outputFormat = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\n        return {\n            ...googleDriveFile, createdTime: outputFormat\n        };\n    }) : [];\n};\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const loadBackupFile = (authToken: string, fileId: string): Promise<ICardsGroup[]> => {\n\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const url = googleDriveFilesAPI + fileId + '?alt=media';\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    )\n}","export const createBackupFolder = (authToken: string): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/';\n    const backupFolderName = 'my-cards';\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            name: backupFolderName,\n            mimeType: 'application/vnd.google-apps.folder'\n        }),\n        method: 'POST'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.id)\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const createBackupName = (backup: ICardsGroup[]) => {\n    let cardsAmount = 0;\n    backup.forEach((cardsGroup) => {\n        cardsAmount = cardsAmount + cardsGroup.cards.length\n    })\n    return `groups(${backup.length})cards(${cardsAmount})`\n}","export const createEmptyBackupFile = (\n    authToken: string,\n    id: string,\n    fileName: string\n): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/';\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            parents: [id],\n            name: fileName\n        }),\n        method: 'POST'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.id)\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const uploadBackupFile = (\n    authToken: string,\n    fileId: string,\n    cardsGroups: ICardsGroup[]\n): Promise<string> => {\n\n    const url = \"https://www.googleapis.com/upload/drive/v3/files/\" + fileId;\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        body: JSON.stringify(cardsGroups, null, 4),\n        responseType: 'text',\n        method: 'PATCH'\n    }\n\n    return fetch(url, requestOptions).then(() => fileId);\n}","export const deleteBackupFile = (\n    authToken: string,\n    fileId: string\n): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/' + fileId;\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'DELETE'\n    }\n\n    return fetch(url, requestOptions).then(() => fileId)\n}","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ICard} from '../../common/types/ICard';\nimport {saveCard} from './logic/saveCard';\nimport {getEditingCard} from './logic/getEditingCard';\n\nexport class CardsEditorService {\n\n    public cardEditingChannel: Channel<{ card: ICard, cardsGroupID: number }, ICard>;\n    public cardChannel: Channel<{ cardID: number, cardsGroupID: number }, ICard | undefined>;\n\n    constructor(storageService: StorageService) {\n        this.cardEditingChannel = new Channel(({card, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCard(cardsGroupID, card, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            }),\n            map(() => card)\n        ));\n\n        this.cardChannel = new Channel(({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCard(cardsGroupID, cardID, cardsGroups))\n        ));\n    }\n}","import {ICard} from '../../../common/types/ICard';\nimport {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveCard = (cardsGroupID: number, card: ICard, cardsGroups: ICardsGroup[]) => {\n\n    if (card.id === -1) {\n        card.id = new Date().getTime();\n    }\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => card.id === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex < 0) {\n        cardsGroups[cardGroupIndex].cards.push(card);\n    } else if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards[cardIndex] = card;\n    }\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const getEditingCard = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n        let card: ICard | undefined = {\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO,\n            answer: '',\n            question: '',\n            dateRepeating: 0,\n            id: new Date().getTime()\n        };\n\n        if (cardsGroup) {\n            card = cardsGroup.cards.find((card: ICard) => card.id === cardID)\n        }\n\n        return card;\n};\n","import {map, mergeMap, tap} from 'rxjs/operators';\nimport {of} from \"rxjs\";\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {getCardsByGroup} from './logic/getCardsByGroup';\nimport {resetCardProgress} from './logic/resetCardProgress';\nimport {deleteSingleCard} from '../../common/logic/deleteSingleCard';\nimport {filterCards} from \"./logic/filterCards\";\nimport {IFilter} from \"../../common/types/IFilter\";\nimport {changeCardsGroup} from \"./logic/changeCardsGroup\";\nimport {selectedItemsObjectToArray} from \"./logic/selectedItemsObjectToArray\";\nimport {getExistedCardsGroups} from \"./logic/getExistedCardsGroups\";\nimport {copyCardsInGroup} from \"./logic/copyCardsInGroup\";\nimport {deleteCards} from \"./logic/deleteCards\";\nimport {cardsToIDS} from \"./logic/cardsToIDS\";\nimport {selectedItemsToIDs} from \"./logic/selectedItemsToIDs\";\nimport {IStoredFilters} from \"../../common/types/IStoredFilters\";\n\nexport class CardsService {\n    public cardsChannel: Channel<{ cardsGroupID: number, filter: IFilter }, ICard[]>;\n    public resetCardProgressChannel: Channel<{ cardID: number, cardsGroupID: number }, ICardsGroup[]>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public movingCardsChannel: Channel<{\n        selectedItems: { [key: number]: boolean };\n        destinationGroupID: number;\n    }, ICardsGroup[]>;\n    public copyCardsChannel: Channel<{\n        selectedItems: { [key: number]: boolean };\n        destinationGroupID: number;\n    }, ICardsGroup[]>;\n    public deleteCardsChannel: Channel<{ [key: number]: boolean }, ICardsGroup[]>;\n    public existedGroupsIDsChannel: Channel<string, Array<{ id: number; label: string }>>;\n    public cardsIDsByGroupIDsChannel: Channel<number, number[]>;\n    public cardsIDsBySelectedItemsChannel: Channel<{ [key: number]: boolean }, number[]>;\n    public filterChannel: Channel<string, IFilter>;\n    public changeFilterChannel: Channel<IFilter, IStoredFilters>;\n\n    constructor(private storageService: StorageService) {\n        this.cardsChannel = new Channel(\n            ({cardsGroupID, filter}) => this.storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => getCardsByGroup(cardsGroupID, cardsGroups)),\n                map((cards: ICard[]) => filterCards(cards, filter)))\n        );\n\n        this.resetCardProgressChannel = new Channel(\n            ({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => resetCardProgress(cardsGroupID, cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n\n        this.movingCardsChannel = new Channel((\n            {\n                selectedItems,\n                destinationGroupID\n            }\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => changeCardsGroup(\n                        cardsGroups,\n                        selectedCardsIDs,\n                        destinationGroupID\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.existedGroupsIDsChannel = new Channel(() => storageService.getBackup().pipe(\n            map(getExistedCardsGroups)\n        ))\n\n        this.copyCardsChannel = new Channel((\n            {\n                selectedItems,\n                destinationGroupID\n            }\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => copyCardsInGroup(\n                        cardsGroups,\n                        selectedCardsIDs,\n                        destinationGroupID\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.deleteCardsChannel = new Channel((\n            selectedItems\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => deleteCards(\n                        cardsGroups,\n                        selectedCardsIDs\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.cardsIDsByGroupIDsChannel = new Channel<number, number[]>(\n            (groupID) => storageService.getBackup().pipe(\n                map((cardsGroups) => getCardsByGroup(groupID, cardsGroups)),\n                map((cards: ICard[]) => cardsToIDS(cards))\n            )\n        )\n\n        this.cardsIDsBySelectedItemsChannel = new Channel<{ [p: number]: boolean }, number[]>(\n            (args) => of(args).pipe(\n                map(() => selectedItemsToIDs(args))\n            )\n        )\n\n        this.filterChannel = new Channel<string, IFilter>(\n            () => storageService.getFilter().pipe(\n                map((storedFilters) => storedFilters.cards)\n            )\n        )\n\n        this.changeFilterChannel = new Channel<IFilter, IStoredFilters>(\n            (filter) => storageService.getFilter().pipe(\n                map((storedFilters) => {\n                        return {...storedFilters, cards: filter}\n                    }\n                ),\n                tap((storedFilters) => {\n                    storageService.setFilter(storedFilters);\n                })\n            )\n        )\n    }\n}\n","import {ICard} from \"../../../common/types/ICard\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const filterCards = (cards: ICard[], filter: IFilter) => {\n    const foundByTextCards = cards.filter((card: ICard) => {\n        return card.question.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1 ||\n            card.answer.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1\n    })\n\n    let sortedCards = []\n\n    if (filter.sort === ISortVariant.QUESTION_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.question === card2.question) {\n                return 0\n            } else if (card1.question > card2.question) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.QUESTION_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.question === card2.question) {\n                return 0\n            } else if (card1.question > card2.question) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.STATUS_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.STATUS_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.DATE_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.dateRepeating === card2.dateRepeating) {\n                return 0\n            } else if (card1.dateRepeating > card2.dateRepeating) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.DATE_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.dateRepeating === card2.dateRepeating) {\n                return 0\n            } else if (card1.dateRepeating < card2.dateRepeating) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.ANSWER_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.answer === card2.answer) {\n                return 0\n            } else if (card1.answer < card2.answer) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.ANSWER_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.answer === card2.answer) {\n                return 0\n            } else if (card1.answer < card2.answer) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.PROGRESS_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge < card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.PROGRESS_DESC) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge < card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    }\n\n    return foundByTextCards\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const resetCardProgress = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards[cardIndex].rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n    }\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\n\nexport const changeCardsGroup = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[],\n    destinationGroupID: number\n) => {\n\n    const selectedCards: ICard[] = []\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id\n            })\n\n            if(foundCardIndex > -1) {\n                selectedCards.push(cardsGroup.cards[foundCardIndex]);\n            }\n        });\n        cardsGroup.cards = cardsGroup.cards.filter((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id;\n            });\n\n            return foundCardIndex < 0;\n        })\n    })\n\n    cardsGroups.forEach((cardsGroup) => {\n        if(cardsGroup.id === destinationGroupID) {\n            cardsGroup.cards.push(...selectedCards)\n        }\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\n\nexport const copyCardsInGroup = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[],\n    destinationGroupID: number\n) => {\n    const selectedCards: ICard[] = []\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card, index) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id\n            })\n\n            if(foundCardIndex > -1) {\n                const foundedCard = cardsGroup.cards[foundCardIndex];\n                selectedCards.push({\n                    ...foundedCard,\n                    id: new Date().getTime() + index * 1000\n                });\n            }\n        });\n    });\n\n    cardsGroups.forEach((cardsGroup) => {\n        if(cardsGroup.id === destinationGroupID) {\n            cardsGroup.cards.push(...selectedCards)\n        }\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const deleteCards = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[]\n) => {\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards = cardsGroup.cards.filter((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id;\n            });\n\n            return foundCardIndex < 0;\n        })\n    })\n\n    return cardsGroups;\n}","import {ICard} from \"../../../common/types/ICard\";\n\nexport const cardsToIDS = (cards: ICard[]) => {\n    return cards.map((card) => card.id)\n}","export const selectedItemsToIDs = (selectedItems: { [p: number]: boolean }): number[] => {\n    const ids = [];\n    for (let a in selectedItems) {\n        if (selectedItems[a]) {\n            ids.push(Number(a));\n        }\n    }\n    return ids;\n}","import {of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {IRepeatingArgs} from '../../common/types/IRepeatingArgs';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {IStatistic} from '../../common/types/IStatistic';\nimport {ISettings} from '../../common/types/ISettings';\nimport {getCardsByIDs} from './logic/getCardsByIDs';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForRepeating} from './logic/getCardForRepeating';\nimport {getStatistic} from './logic/getStatistic';\nimport {shuffleCards} from './logic/shuffleCards';\nimport {refreshCardRepeatingDate} from \"../../common/logic/refreshCardRepeatingDate\";\nimport {deleteSingleCard} from \"../../common/logic/deleteSingleCard\";\nimport {getCardGroupName} from \"../card-viewer/logic/getCardGroupName\";\n\nexport class CardsRepeaterService {\n    public cardChannel: Channel<number[], ICard>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public statisticChannel: Channel<string, IStatistic>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public cardGroupNameChannel: Channel<number, string>;\n\n    private statisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    constructor(private storageService: StorageService) {\n        this.cardChannel = new Channel((cardsIDs) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardsByIDs(cardsGroups, cardsIDs)),\n            switchMap((cards: ICard[]) => this.storageService.getSettings().pipe(\n                map((settings: ISettings) => {\n                    if (settings.isRandomRepeating) {\n                        cards = shuffleCards(cards);\n                    }\n                    return {\n                        cards,\n                        isRandomRepeating: settings.isRandomRepeating\n                    };\n                })\n            )),\n            tap(({cards, isRandomRepeating}) => {\n                this.statisticValue = getStatistic(cards);\n            }),\n            map(({cards, isRandomRepeating}) => {\n                return getCardForRepeating(cards, isRandomRepeating)\n            })\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                map((cardsGroups: ICardsGroup[]) => refreshCardRepeatingDate(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups))\n            );\n        });\n\n        this.statisticChannel = new Channel(() => of(this.statisticValue));\n\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n        this.cardGroupNameChannel = new Channel<number, string>(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => {\n                    return getCardGroupName(cardsGroups, cardID);\n                })\n            )\n        )\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\n\nexport const getCardsByIDs = (cardsGroups: ICardsGroup[], cardsIDs: number[]) => {\n\n    let foundCards: Array<ICard> = [];\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card) => {\n            const foundIndex = cardsIDs.findIndex((value) => value === card.id)\n            if (foundIndex > -1) {\n                foundCards.push(card);\n            }\n        })\n    });\n\n    return foundCards;\n};\n","import {ICard} from '../../../common/types/ICard';\n\nexport const shuffleCards = (array: ICard[]) => {\n    const copy = [];\n    let length = array.length;\n    let randomIndex;\n\n    while (length) {\n        randomIndex = Math.floor(Math.random() * array.length);\n        if (randomIndex in array) {\n            copy.push(array[randomIndex]);\n            delete array[randomIndex];\n            length--;\n        }\n    }\n\n    return copy;\n};\n","import {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\nimport {IStatistic} from '../../../common/types/IStatistic';\n\nexport const getStatistic = (cards: ICard[]): IStatistic => {\n\n    const statisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    cards.forEach((card: ICard) => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            statisticValue.inProgress = statisticValue.inProgress + 1\n        } else if (card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n            statisticValue.todo = statisticValue.todo + 1\n        } else {\n            statisticValue.done = statisticValue.done + 1\n        }\n    });\n\n    return statisticValue;\n};\n","import {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const getCardForRepeating = (cards: ICard[], isRandomRepeating: boolean): ICard => {\n\n    let foundCard\n\n    if (!isRandomRepeating) {\n        foundCard = cards.find((card: ICard) => {\n            return card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO;\n        });\n\n        if (!foundCard) {\n            foundCard = cards.find((card: ICard) => {\n                return card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS;\n            });\n        }\n\n        if (cards.length === 1) {\n            foundCard = cards[0]\n        }\n    } else {\n        const cardsWithoutDone = cards.filter((card: ICard) => {\n            return card.rangeOfKnowledge !== IRangeOfKnowledge.DONE\n        })\n        foundCard = cardsWithoutDone[0];\n    }\n\n    return foundCard || {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    }\n};\n","import {of} from 'rxjs';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {switchMap, tap} from 'rxjs/operators';\nimport {saveBackupFile} from './logic/saveBackupFile';\n\nexport class LocalBackupsService {\n\n    public localBackupChannel: Channel<void, ICardsGroup[]>;\n    public loadBackupChannel: Channel<string, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.localBackupChannel = new Channel(() => this.storageService.getBackup().pipe(\n            tap((backup: ICardsGroup[]) => saveBackupFile(backup))\n        ));\n\n        this.loadBackupChannel = new Channel((backupFile: string) => of('').pipe(\n            switchMap(() => {\n                return this.storageService.setBackup(JSON.parse(backupFile));\n            })\n        ));\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveBackupFile = (backup: ICardsGroup[]) => {\n    const fileData: string = JSON.stringify(backup, null, 4);\n    const blob = new Blob([fileData], {type: \"octet/stream\"});\n    const url = window.URL.createObjectURL(blob);\n\n    const fileBuffer = document.createElement('a');\n\n    if (fileBuffer) {\n        fileBuffer.href = url;\n        fileBuffer.download = 'My Cards.txt';\n        fileBuffer.click();\n    }\n    window.URL.revokeObjectURL(url);\n};\n","import {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ISettings} from '../../common/types/ISettings';\n\nexport class SettingsService {\n\n    public settingsChannel: Channel<string, ISettings>;\n\n    public changeSettingsChannel: Channel<ISettings, ISettings>;\n\n    constructor(storageService: StorageService) {\n\n        this.settingsChannel = new Channel(() => storageService.getSettings());\n\n        this.changeSettingsChannel = new Channel(\n            (settings: ISettings) => storageService.setSettings(settings)\n        );\n    }\n}\n","import {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {IRepeatingArgs} from '../../common/types/IRepeatingArgs';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForViewing} from \"./logic/getCardForViewing\";\nimport {refreshCardRepeatingDate} from \"../../common/logic/refreshCardRepeatingDate\";\nimport {deleteSingleCard} from \"../../common/logic/deleteSingleCard\";\nimport {getCardGroupName} from \"./logic/getCardGroupName\";\n\nexport class CardViewerService {\n    public cardChannel: Channel<number, ICard>;\n    public cardGroupNameChannel: Channel<number, string>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.cardChannel = new Channel((cardID = -1) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardForViewing(cardsGroups, cardID))\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                map((cardsGroups: ICardsGroup[]) => refreshCardRepeatingDate(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups))\n            );\n        });\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n        this.cardGroupNameChannel = new Channel<number, string>(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => {\n                    return getCardGroupName(cardsGroups, cardID);\n                })\n            )\n        )\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://cra.link/PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}