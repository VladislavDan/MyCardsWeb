{"version":3,"sources":["app/common/types/ISortVariant.ts","app/common/types/IRangeOfKnowledge.ts","app/parts/toolbar/ToolbarComponent.tsx","MyTools/channel-conception/react-hooks/useChannel.ts","app/parts/toolbar/ToolbarContainer.tsx","app/common/Routs.ts","app/parts/navigation-panel/elements/navigation-link-component/NavigationLinkComponent.tsx","app/parts/navigation-panel/NavigationPanelComponent.tsx","app/parts/navigation-panel/NavigationPanelContainer.tsx","app/parts/error-container/ErrorComponent.tsx","app/parts/error-container/ErrorContainer.tsx","app/parts/spinner/SpinnerComponent.tsx","app/parts/spinner/SpinnerContainer.tsx","app/common/Constants.ts","app/parts/confirm-dialog/ConfirmDialogComponent.tsx","app/parts/confirm-dialog/ConfirmDialogContainer.tsx","MyTools/channel-conception/logic/jsonEqual.ts","MyTools/worker-observable/operators/fromThread.ts","MyTools/worker-observable/logic/functionToThread.ts","MyTools/channel-conception/Channel.ts","app/parts/spinner/SpinnerService.ts","app/common/elements/add-button/AddButtonComponent.tsx","app/pages/cards-groups-list/elements/circular-progress/CircularProgressComponent.tsx","app/common/elements/list-item-menu/ListItemMenuComponent.tsx","app/pages/cards-groups-list/elements/cards-groups-list-item/CardsGroupsListItemComponent.tsx","app/common/elements/filter/FilterComponent.tsx","app/pages/cards-groups-list/CardsGroupsListComponent.tsx","MyTools/react-hooks/useConstructor.ts","MyTools/react-hooks/useUnsubscribe.ts","MyTools/react-hooks/useCallbackFactory.ts","MyTools/react-utils/CallbackFactory.ts","app/pages/cards-groups-list/Constants.ts","app/pages/cards-groups-list/ui-callbacks/onResetProgress.ts","app/pages/cards-groups-list/ui-callbacks/onEditItem.ts","app/pages/cards-groups-list/ui-callbacks/onDeleteItem.ts","app/pages/cards-groups-list/ui-callbacks/onOpenEditor.ts","app/pages/cards-groups-list/ui-callbacks/onClickItem.ts","app/pages/cards-groups-list/ui-callbacks/onConstructor.ts","app/pages/cards-groups-list/callbackChannels/onResetProgressChannel.ts","app/pages/cards-groups-list/callbackChannels/onGroupDeleteChannel.ts","app/pages/cards-groups-list/callbackChannels/onGroupsListChannel.ts","app/pages/cards-groups-list/ui-callbacks/onChangeSorting.ts","app/pages/cards-groups-list/callbackChannels/onChangeFilterChannel.ts","app/pages/cards-groups-list/callbackChannels/onFilterChannel.ts","app/pages/cards-groups-list/ui-callbacks/onChangeSearchableText.ts","app/pages/cards-groups-list/CardsGroupsListContainer.tsx","app/pages/google-auth/GoogleAuthComponent.tsx","app/pages/google-auth/GoogleAuthContainer.tsx","app/pages/google-backups/elements/backup-menu-component/BackupMenuComponent.tsx","app/pages/google-backups/elements/backups-list-item-component/BackupsListItemComponent.tsx","app/pages/google-backups/GoogleBackupsComponent.tsx","app/pages/google-backups/GoogleBackupsContainer.tsx","app/pages/cards/elements/cards-list-actions/CardsListActions.tsx","app/pages/cards/elements/card-primary-text/CardPrimaryTextComponent.tsx","app/pages/cards/elements/cards-list-item/CardsListItemComponent.tsx","app/pages/cards/elements/cards-list/CardsListComponent.tsx","app/pages/cards/CardsComponent.tsx","app/pages/cards/ui-callbacks/onDeleteSelectedCards.ts","app/pages/cards/ui-callbacks/onCopySelectedCards.ts","app/pages/cards/ui-callbacks/onMovingSelectedCards.ts","app/pages/cards/ui-callbacks/onSelectItem.ts","app/pages/cards/ui-callbacks/onStartSelecting.ts","app/pages/cards/ui-callbacks/onOpenRepeater.ts","app/pages/cards/ui-callbacks/onChangeSorting.ts","app/pages/cards/ui-callbacks/onChangeSearchableText.ts","app/pages/cards/channels-callbacks/onCardsChannel.ts","app/pages/cards/channels-callbacks/onCardsIDsByGroupIDsChannel.ts","app/pages/cards/channels-callbacks/onCardsIDsBySelectedItemsChannel.ts","app/pages/cards/Constants.ts","app/pages/cards/channels-callbacks/onFilterChannel.ts","app/pages/cards/ui-callbacks/onConstructor.ts","app/pages/cards/channels-callbacks/onChangeFilter.ts","app/pages/cards/channels-callbacks/onResetCardProgressChannel.ts","app/pages/cards/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/cards/channels-callbacks/onMovingCardsChannel.ts","app/pages/cards/channels-callbacks/onCopyCardsChannel.ts","app/pages/cards/channels-callbacks/onDeleteCardsChannel.ts","app/pages/cards/channels-callbacks/onExistedGroupsIDsChannel.ts","app/pages/cards/ui-callbacks/onOpenEditor.ts","app/pages/cards/ui-callbacks/onEditItem.ts","app/pages/cards/ui-callbacks/onDeleteItem.ts","app/pages/cards/ui-callbacks/onResetProgress.ts","app/pages/cards/ui-callbacks/onClickItem.ts","app/pages/cards/CardsContainer.tsx","app/pages/cards-repeater/elements/statistic/StatisticComponent.tsx","app/pages/cards-repeater/elements/all-cards-repeated/AllCardsRepeatedComponent.tsx","app/common/elements/cards-header/CardsHeaderComponent.tsx","app/common/elements/long-text-viewer/LongTextViewerComponent.tsx","app/common/elements/text-editor/TextEditorComponent.tsx","app/common/elements/long-text-editor/LongTextEditorComponent.tsx","app/common/elements/delete-button-footer/DeleteButtonFooterComponent.tsx","app/common/elements/question-card/QuestionCardComponent.tsx","app/common/elements/answer-card-footer/AnswerCardFooterComponent.tsx","app/common/elements/answer-card/AnswerCardComponent.tsx","app/common/elements/cards-content/CardsContentComponent.tsx","app/pages/cards-repeater/CardsRepeaterComponent.tsx","app/common/logic/initDefaultCard.ts","app/pages/cards-repeater/ui-callbacks/onDeleteCard.ts","app/pages/cards-repeater/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/cards-repeater/channels-callbacks/onCardGroupNameChannel.ts","app/pages/cards-repeater/Constants.ts","app/pages/cards-repeater/CardsRepeaterContainer.tsx","app/pages/local-backup/LocalBackupsContainer.tsx","app/pages/cards-groups-editor/CardsGroupsEditorComponent.tsx","app/pages/cards-groups-editor/ui-callbacks/onChangeGroupName.ts","app/pages/cards-groups-editor/ui-callbacks/onSaveGroup.ts","app/pages/cards-groups-editor/ui-callbacks/onConstructor.ts","app/pages/cards-groups-editor/channels-callbacks/onGroupEditingChannel.ts","app/pages/cards-groups-editor/channels-callbacks/onGroupChannel.ts","app/pages/cards-groups-editor/Constants.ts","app/pages/cards-groups-editor/CardsGroupsEditorContainer.tsx","app/pages/cards-editor/CardsEditorComponent.tsx","app/pages/cards-editor/Constants.ts","app/pages/cards-editor/channels-callbacks/onCardEditingChannel.ts","app/pages/cards-editor/channels-callbacks/onSimplifiedCardsGroupsChannel.ts","app/pages/cards-editor/channels-callbacks/onCardChannel.ts","app/pages/cards-editor/ui-callbacks/onConstructor.ts","app/pages/cards-editor/ui-callbacks/onChangeQuestion.ts","app/pages/cards-editor/ui-callbacks/onChangeAnswer.ts","app/pages/cards-editor/ui-callbacks/onChangeCardsGroup.ts","app/pages/cards-editor/ui-callbacks/onSaveCard.ts","app/pages/cards-editor/CardsEditorContainer.tsx","app/pages/settings/elements/settings-switcher/SettingsSwitcherComponent.tsx","app/pages/settings/elements/settings-number-input/SettingsNumberInputComponent.tsx","app/pages/settings/SettingsComponent.tsx","app/pages/settings/SettingsContainer.tsx","app/pages/card-viewer/CardViewerComponent.tsx","app/pages/card-viewer/ui-callbacks/onDeleteCard.ts","app/pages/card-viewer/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/card-viewer/channels-callbacks/onCardGroupNameChannel.ts","app/pages/card-viewer/ui-callbacks/onChangeAnswer.ts","app/pages/card-viewer/ui-callbacks/onChangeQuestion.ts","app/pages/card-viewer/ui-callbacks/onSwitchEditing.ts","app/pages/card-viewer/ui-callbacks/onClickYesNoButton.ts","app/pages/card-viewer/ui-callbacks/onClickCard.ts","app/pages/card-viewer/Constants.ts","app/pages/card-viewer/channels-callbacks/onCardChannel.ts","app/pages/card-viewer/channels-callbacks/onCardEditingChannel.ts","app/pages/card-viewer/channels-callbacks/onRepeatingResultChannel.ts","app/pages/card-viewer/ui-callbacks/onConstructor.ts","app/pages/card-viewer/CardViewerContainer.tsx","app/parts/navigation/NavigationContainer.tsx","app/pages/google-backups/logic/getBackupFolder.ts","app/common/services/StorageService.ts","app/pages/cards/logic/getCardsByGroup.ts","app/common/logic/deleteSingleCard.ts","app/pages/cards/logic/selectedItemsObjectToArray.ts","app/pages/cards/logic/getExistedCardsGroups.ts","app/common/logic/changeRangeOfKnowledge.ts","app/common/logic/refreshCardRepeatingDate.ts","app/pages/card-viewer/logic/getCardGroupName.ts","app/pages/card-viewer/logic/getCardForViewing.ts","app/parts/selection-dialog/SelectionDialogComponent.tsx","app/parts/selection-dialog/SelectionDialogContainer.tsx","app/parts/toolbar/ToolbarService.tsx","App.tsx","app/parts/error-container/ErrorService.ts","app/parts/confirm-dialog/ConfirmDialogService.ts","app/parts/selection-dialog/SelectionDialogService.ts","app/parts/navigation-panel/NavigationPanelService.ts","app/common/services/DataBaseService.ts","app/pages/cards-groups-editor/CardsGroupsEditorService.ts","app/pages/cards-groups-editor/logic/saveCardsGroup.ts","app/pages/cards-groups-editor/logic/getEditingCardsGroup.ts","app/pages/cards-groups-list/CardsGroupsListService.ts","app/pages/cards-groups-list/logic/updateObsoleteStatus.ts","app/pages/cards-groups-list/logic/updateRepeatingDate.ts","app/pages/cards-groups-list/logic/sortByFilter.ts","app/pages/cards-groups-list/logic/countRepeatedCardsPercent.ts","app/pages/cards-groups-list/logic/deleteGroup.ts","app/pages/cards-groups-list/logic/resetRepeatingProgress.ts","app/pages/google-auth/GoogleAuthService.ts","app/pages/google-backups/GoogleBackupsService.ts","app/pages/google-backups/logic/getBackupFiles.ts","app/pages/google-backups/logic/formatCreatedDate.ts","app/pages/google-backups/logic/loadBackupFile.ts","app/pages/google-backups/logic/createBackupFolder.ts","app/pages/google-backups/logic/createBackupName.ts","app/pages/google-backups/logic/createEmptyBackupFile.ts","app/pages/google-backups/logic/uploadBackupFile.ts","app/pages/google-backups/logic/deleteBackupFile.ts","app/pages/cards-editor/CardsEditorService.ts","app/pages/cards-editor/logic/saveCard.ts","app/pages/cards-editor/logic/getEditingCard.ts","app/pages/cards-editor/logic/getSimplifiedGroup.ts","app/pages/cards-editor/logic/addCurrentGroupToSimplifiedGroup.ts","app/pages/cards/CardsService.ts","app/pages/cards/logic/filterCards.ts","app/pages/cards/logic/resetCardProgress.ts","app/pages/cards/logic/changeCardsGroup.ts","app/pages/cards/logic/copyCardsInGroup.ts","app/pages/cards/logic/deleteCards.ts","app/pages/cards/logic/cardsToIDS.ts","app/pages/cards/logic/selectedItemsToIDs.ts","app/pages/cards-repeater/CardsRepeaterService.ts","app/pages/cards-repeater/logic/getCardsByIDs.ts","app/pages/cards-repeater/logic/shuffleCards.ts","app/pages/cards-repeater/logic/getStatistic.ts","app/pages/cards-repeater/logic/getCardForRepeating.ts","app/pages/local-backup/LocalBackupsService.ts","app/pages/local-backup/logic/saveBackupFile.ts","app/pages/settings/SettingsService.ts","app/pages/card-viewer/CardViewerService.tsx","reportWebVitals.ts","index.tsx"],"names":["ISortVariant","IRangeOfKnowledge","ToolbarComponent","pageLabel","onClick","AppBar","position","Toolbar","className","IconButton","edge","color","Typography","variant","useChannel","channel","next","additionalErrorHandler","deepEqual","value","useRef","subscription","current","closed","subscribe","useEffect","unsubscribe","ToolbarContainer","toolbarService","navigationPanelService","location","useLocation","useState","setPageLabel","toolbarExternalLabelChannel","label","newPageLabel","getPageLabel","pathname","navigationPanelOpenChannel","Routs","path","name","NavigationLinkComponent","toggleDrawer","ListItem","button","to","NavigationPanelComponent","isOpen","SwipeableDrawer","anchor","open","onClose","onOpen","List","NavigationPanelContainer","state","setState","event","type","nativeEvent","key","ErrorComponent","errorMessage","handleClose","Dialog","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","ErrorContainer","errorService","errorChannel","SpinnerComponent","isShow","LinearProgress","SpinnerContainer","spinnerService","setShowing","spinnerCounterChannel","spinnerCounter","defaultCardsGroupValue","cards","nameCardsGroup","repeatingDate","Date","getTime","percentRepeatedCards","defaultAppState","height","width","defaultFilterValue","searchableText","sort","NONE","defaultCardValue","question","answer","rangeOfKnowledge","IN_PROGRESS","dateRepeating","defaultSimplifiedGroupValue","DATE_FORMAT","ConfirmDialogComponent","onClickAgree","onClickDisagree","message","autoFocus","ConfirmDialogContainer","confirmDialogService","React","openDialogChannel","confirmationChannel","jsonEqual","args","other","Array","length","console","log","JSON","stringify","fromThread","arg","workerFunction","thread","functionString","toString","functionBlob","Blob","Worker","URL","createObjectURL","functionToThread","Observable","observer","postMessage","onmessage","data","complete","terminate","onerror","err","error","Channel","observableCreator","outputSubject","subscriptions","previousEmittedValue","this","Subject","push","customErrorHandler","outputSubjectSubscription","globalNextHandler","globalErrorHandler","result","equalityError","forEach","subscribtion","setGlobalErrorHandler","setGlobalNextHandler","AddButtonComponent","Fab","size","CircularProgressComponent","percent","Box","display","CircularProgress","top","left","bottom","right","alignItems","justifyContent","component","Math","round","ListItemMenuComponent","onEdit","onDelete","onResetProgress","anchorEl","setAnchorEl","keepMounted","Boolean","MenuItem","currentTarget","CardsGroupsListItemComponent","cardsGroup","onClickItem","onEditItem","onDeleteItem","ListItemIcon","ListItemText","primary","secondary","format","FilterComponent","onChangeSearchableText","filter","onChangeSorting","sortVariants","Accordion","AccordionSummary","expandIcon","TextField","required","placeholder","onChange","target","style","marginRight","stopPropagation","preventDefault","AccordionDetails","Select","map","CardsGroupsListComponent","cardsGroups","onOpenEditor","DATE_ASK","DATE_DESK","NAME_ASK","NAME_DESK","itemData","itemSize","itemCount","overscanCount","index","cardGroup","useConstructor","callback","isFirstRun","useUnsubscribe","setSubscription","useCallbackFactory","initialState","services","context","settings","history","useHistory","callbackSettings","useContext","callbackFactory","cardsGroupID","cardsGroupsListService","isConfirm","resetProgressChannel","groupDeleteChannel","onConstructor","groupsListChannel","filterChannel","onResetProgressChannel","onGroupDeleteChannel","onGroupsListChannel","prevState","sortVariant","newFilter","changeFilterChannel","onChangeFilterChannel","onFilterChannel","CardsGroupsListContainer","AppContext","clickItem","useCallback","openEditor","deleteItem","editItem","resetProgress","changeSorting","changeSearchableText","GoogleAuthComponent","onSuccess","onFailure","clientId","buttonText","scope","GoogleAuthContainer","googleAuthService","loginChannel","replace","response","accessToken","BackupMenuComponent","backupID","onLoad","BackupsListItemComponent","backupName","backupDate","GoogleBackupsComponent","backupsFiles","onCreate","backup","createdTime","GoogleBackupsContainer","googleBackupsService","backupsNameLoadChannel","backupLoadChannel","backupDeleteChannel","backupUploadChannel","CardsListActions","onOpenRepeater","onStartSelecting","onMovingSelectedCards","onDeleteSelectedCards","onCopySelectedCards","hideOpenRepeaterButton","hideOpenEditorButton","hideMovingSelectedCardsButton","hideDeleteSelectedCardsButton","hideCopySelectedCardButton","CardPrimaryTextComponent","card","CardsListItemComponent","onSelect","isEnabledSelecting","isSelected","dateText","DONE","getIconColor","Checkbox","checked","tabIndex","disableRipple","CardsListComponent","onSelectItem","selectedItems","CardsComponent","QUESTION_ASK","QUESTION_DESK","STATUS_ASK","STATUS_DESK","ANSWER_ASK","ANSWER_DESK","cardsListService","deleteCardsChannel","selectionDialogService","selectionChannel","groupID","copyCardsChannel","destinationGroupID","title","selectionItems","existedGroupsIDs","movingCardsChannel","cardID","cardsIDsBySelectedItemsChannel","cardsIDsByGroupIDsChannel","onCardsChannel","onCardsIDsByGroupIDsChannel","cardsIDsForRepeating","onCardsIDsBySelectedItemsChannel","cardsChannel","existedGroupsIDsChannel","onChangeFilter","onResetCardProgressChannel","onDeleteSingleCardChannel","onMovingCardsChannel","onCopyCardsChannel","onDeleteCardsChannel","onExistedGroupsIDsChannel","deleteSingleCardChannel","resetCardProgressChannel","CardsContainer","startSelecting","multiSelectingDependencies","openRepeater","selectItem","movingSelectedCards","copySelectedCards","deleteSelectedCards","StatisticComponent","statistic","todo","inProgress","done","AllCardsRepeatedComponent","onBackClick","CardsHeaderComponent","isQuestionSide","onSwitchEditing","isEditable","gutterBottom","Check","Edit","LongTextViewerComponent","viewHeight","text","onClickText","paddingTop","TextEditorComponent","onChangeText","changeableText","multiline","LongTextEditorComponent","DeleteButtonFooterComponent","CardActions","QuestionCardComponent","onClickCard","cardHeight","onDeleteCard","onChangeQuestion","Card","CardContent","AnswerCardFooterComponent","onClickYesNoButton","AnswerCardComponent","onChangeAnswer","getText","CardsContentComponent","CardsRepeaterComponent","initDefaultCard","cardsRepeaterService","cardChannel","onCardGroupNameChannel","CardRepeaterContainer","cardsEditorService","cardGroupNameChannel","statisticChannel","cardEditingChannel","repeatingResultChannel","deleteCard","isKnown","editableCard","LocalBackupsContainer","localBackupsService","fileBuffer","localBackupChannel","loadBackupChannel","file","files","reader","FileReader","onload","readerEvent","games","readAsText","ref","CardsGroupsEditorComponent","groupName","onChangeGroupName","onSaveGroup","cardsGroupsEditorService","groupEditingChannel","groupChannel","onGroupEditingChannel","goBack","onGroupChannel","CardsGroupsEditorContainer","changeGroupName","saveGroup","CardsEditorComponent","onSaveCard","currentCardsGroup","onChangeCardsGroup","labelId","Number","autoWidth","onCardEditingChannel","onSimplifiedCardsGroupsChannel","onCardChannel","simplifiedCardsGroupsChannel","CardsEditorContainer","changeQuestion","changeAnswer","changeCardsGroup","saveCard","SettingsSwitcherComponent","FormControlLabel","control","Switch","SettingsNumberInputComponent","Input","SettingsComponent","onChangeAlgorithm","onChangeAutoObsolete","onChangeTimeInDone","onChangeTimeInProgress","FormGroup","isRandomRepeating","autoObsolete","isEnable","timeInDone","timeInProgress","SettingsContainer","settingsService","changeSettingsChannel","settingsChannel","CardViewerComponent","props","cardViewerService","onRepeatingResultChannel","CardViewerContainer","clickCard","clickYesNoButton","switchEditing","NavigationContainer","exact","from","getBackupFolder","token","url","googleDriveFilesAPI","fetch","headers","method","then","json","find","mimeType","StorageService","dataBaseService","cardsStorageID","authTokenLocalStorageID","settingsID","filterID","getBackup","getBackupFromDataBase","a","get","setBackupToDataBase","set","Promise","resolve","reject","authToken","localStorage","getItem","setItem","parse","getCardsByGroup","foundCardsGroup","deleteSingleCard","cardGroupIndex","findIndex","cardIndex","item","selectedItemsObjectToArray","selectedItemsObject","array","getExistedCardsGroups","changeRangeOfKnowledge","TO_DO","refreshCardRepeatingDate","getCardGroupName","foundIndex","getCardForViewing","i","SelectionDialogComponent","SelectionDialogContainer","itemID","ToolbarService","of","createContext","difference","pipe","tap","storageService","storeName","dataBase","DATA_BASE_NAME","put","openDB","upgrade","db","createObjectStore","editedCardGroup","saveCardsGroup","setBackup","cardGroupID","getEditingCardsGroup","switchMap","getSettings","defer","millisecondsInDay","currentDate","timeInProgressMilliseconds","timeInDoneMilliseconds","differences","updateObsoleteStatus","updateRepeatingDate","mergeMap","getFilter","storedFilter","sortedCards","toLowerCase","indexOf","firstCardGroup","secondCardsGroup","sortByFilter","statusDone","countRepeatedCardsPercent","deleteGroup","resetRepeatingProgress","storedFilters","setFilter","setAuthToken","getAuthToken","folder","getBackupFiles","googleDriveFiles","googleDriveFile","date","outputFormat","getFullYear","getMonth","getDate","getHours","getMinutes","formatCreatedDate","fileId","loadBackupFile","requestOptions","body","createBackupFolder","folderId","cardsAmount","createBackupName","fileName","parents","createEmptyBackupFile","responseType","uploadBackupFile","fileID","deleteBackupFile","getEditingCard","getSimplifiedGroup","addCurrentGroupToSimplifiedGroup","foundByTextCards","card1","card2","filterCards","resetCardProgress","selectedCardsIDs","selectedCards","foundCardIndex","foundedCard","copyCardsInGroup","deleteCards","cardsToIDS","ids","selectedItemsToIDs","statisticValue","cardsIDs","foundCards","getCardsByIDs","randomIndex","copy","floor","random","shuffleCards","getStatistic","foundCard","getCardForRepeating","fileData","blob","window","document","createElement","href","download","click","revokeObjectURL","saveBackupFile","backupFile","settingService","setSettings","App","appState","setAppState","screen","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f9c82bec.chunk.js","sourcesContent":["export enum ISortVariant {\n    NONE = 'Нет сортировки',\n    QUESTION_ASK = 'По вопросу по возрастанию',\n    QUESTION_DESK = 'По вопросу по убыванию',\n    ANSWER_ASK = 'По ответу по возрастанию',\n    ANSWER_DESK = 'По ответу по убыванию',\n    NAME_ASK = 'По имени по возрастанию',\n    NAME_DESK = 'По имени по убыванию',\n    STATUS_ASK = 'По стсатусу сначала пройденные',\n    STATUS_DESK = 'По статусу сначала не пройденные',\n    DATE_ASK = 'По дате повторения сначала устаревшие',\n    DATE_DESK = 'По дате повторения сначала новые'\n}","export enum IRangeOfKnowledge {\n    TO_DO,\n    IN_PROGRESS,\n    DONE\n}\n","import {FC} from 'react';\nimport {AppBar, IconButton, Toolbar, Typography} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nimport './ToolbarComponent.css'\nimport {IToolbarComponent} from \"./types/IToolbarComponent\";\n\nexport const ToolbarComponent: FC<IToolbarComponent> = ({pageLabel, onClick}) => {\n\n    return (\n        <AppBar position=\"fixed\">\n            <Toolbar className=\"toolbar\">\n                <IconButton className=\"toolbar_menu-icon\" edge=\"start\" color=\"inherit\" aria-label=\"menu\"\n                            onClick={onClick}>\n                    <MenuIcon/>\n                </IconButton>\n                <Typography className=\"toolbar_label\" variant=\"h6\">\n                    {pageLabel}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n};\n","import {useEffect, useRef} from 'react';\nimport {Subscription} from 'rxjs';\n\nimport {Channel} from '../Channel';\n\nexport const useChannel = <A, D>(\n    channel: Channel<A, D>,\n    next?: (value: D) => void,\n    additionalErrorHandler?: (error: Error) => void,\n    deepEqual: boolean = false\n) => {\n\n    const value = useRef<{ subscription: Subscription | null }>({\n        subscription: null\n    });\n\n    if (!value.current.subscription || value.current.subscription.closed) {\n        const subscription = channel.subscribe(next, additionalErrorHandler, deepEqual);\n        value.current.subscription = subscription;\n    }\n\n    useEffect(() => {\n        return () => {\n            channel.unsubscribe();\n        }\n    }, [channel]);\n};\n","import React, {FC, useEffect, useState} from 'react';\nimport * as H from 'history';\nimport {useLocation} from 'react-router-dom';\n\nimport {ToolbarComponent} from './ToolbarComponent';\nimport {useChannel} from \"../../../MyTools/channel-conception/react-hooks/useChannel\";\nimport {IToolbarContainer} from \"./types/IToolbarContainer\";\n\nexport const ToolbarContainer: FC<IToolbarContainer> = (\n    {\n        toolbarService,\n        navigationPanelService\n    }\n) => {\n\n    const location: H.Location = useLocation();\n    const [pageLabel, setPageLabel] = useState('');\n\n    useChannel(toolbarService.toolbarExternalLabelChannel, (label: string) => {\n        setPageLabel(label)\n    })\n\n    useEffect(() => {\n        const newPageLabel = toolbarService.getPageLabel(location.pathname);\n        setPageLabel(newPageLabel);\n    }, [location.pathname]);\n\n    const onClick = () => {\n        navigationPanelService.navigationPanelOpenChannel.next('');\n    };\n\n    return (\n        <ToolbarComponent pageLabel={pageLabel} onClick={onClick}/>\n    )\n};\n","export const Routs = {\n    googleAuth: {\n        path: '/google-auth',\n        name: 'Auth Google'\n    },\n\n    googleBackups: {\n        path: '/google-backups',\n        name: 'Google Backups'\n    },\n\n    cardsGroups: {\n        path: '/cards-groups',\n        name: 'Cards Groups'\n    },\n\n    cards: {\n        path: '/cards-list',\n        name: 'Cards'\n    },\n\n    cardsRepeater: {\n        path: '/cards-repeater',\n        name: 'Repeat Card'\n    },\n\n    cardsEditor: {\n        path: '/cards-editor',\n        name: 'Edit Card'\n    },\n\n    localBackups: {\n        path: '/local-backups',\n        name: 'Local Backups'\n    },\n\n    cardsGroupEditor: {\n        path: '/cards-group-editor',\n        name: 'Edit Group'\n    },\n\n    settings: {\n        path: '/settings',\n        name: 'Settings'\n    },\n\n    cardViewer: {\n        path: '/card-viewer',\n        name: 'Card Preview'\n    }\n};\n","import {Link} from 'react-router-dom';\nimport {ListItem} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {INavigationLinkComponent} from \"./types/INavigationLinkComponent\";\n\nexport const NavigationLinkComponent: FC<INavigationLinkComponent> = ({\n                                                                          path,\n                                                                          name,\n                                                                          toggleDrawer\n                                                                      }: INavigationLinkComponent) => {\n\n    return (\n        <ListItem button>\n            <Link to={path} onClick={toggleDrawer(false)}>\n                {name}\n            </Link>\n        </ListItem>\n    )\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {List, SwipeableDrawer} from '@mui/material';\n\nimport {Routs} from '../../common/Routs';\nimport {NavigationLinkComponent} from './elements/navigation-link-component/NavigationLinkComponent';\nimport {INavigationPanelComponent} from \"./types/INavigationPanelComponent\";\n\nexport const NavigationPanelComponent: FC<INavigationPanelComponent> = ({isOpen, toggleDrawer}) => {\n\n    return (\n        <SwipeableDrawer\n            anchor=\"left\"\n            open={isOpen}\n            onClose={toggleDrawer(false)}\n            onOpen={toggleDrawer(true)}\n        >\n            <List>\n                <NavigationLinkComponent path={Routs.cardsGroups.path} name={Routs.cardsGroups.name} toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.googleAuth.path} name={Routs.googleAuth.name} toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.localBackups.path} name={Routs.localBackups.name} toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.settings.path} name={Routs.settings.name} toggleDrawer={toggleDrawer}/>\n            </List>\n        </SwipeableDrawer>\n    )\n};\n\n\n","import * as React from 'react';\nimport {FC, ReactEventHandler, SyntheticEvent, useState} from 'react';\n\nimport {NavigationPanelComponent} from './NavigationPanelComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {INavigationPanelContainer} from \"./types/INavigationPanelContainer\";\nimport {NavigationPanelState} from \"./types/NavigationPanelState\";\n\nexport const NavigationPanelContainer: FC<INavigationPanelContainer> = (\n    {\n        navigationPanelService\n    }\n) => {\n\n    const [state, setState] = useState<NavigationPanelState>({\n        isOpen: false\n    });\n\n    useChannel<string, string>(navigationPanelService.navigationPanelOpenChannel, () => {\n        setState({...state, isOpen: true});\n    });\n\n    const toggleDrawer = (isOpen: boolean): ReactEventHandler => (event: SyntheticEvent<Element, KeyboardEvent>) => {\n        if (event && event.type === 'keydown' && (event.nativeEvent.key === 'Tab' || event.nativeEvent.key === 'Shift')) {\n            return;\n        }\n\n        setState({...state, isOpen});\n    };\n\n    return (\n        <NavigationPanelComponent isOpen={state.isOpen} toggleDrawer={toggleDrawer}/>\n    )\n};\n","import {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {IErrorComponent} from \"./types/IErrorComponent\";\n\nexport const ErrorComponent: FC<IErrorComponent> = ({isOpen, errorMessage, handleClose}) => {\n\n    return (\n        <Dialog\n            open={isOpen}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n            onClose={handleClose}\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"Something went wrong\"}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {errorMessage}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button color=\"primary\" onClick={handleClose}>\n                    Ok\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n","import React, {FC, useState} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ErrorComponent} from './ErrorComponent';\nimport {IErrorContainer} from \"./types/IErrorContainer\";\nimport {ErrorContainerState} from \"./types/ErrorContainerState\";\n\nexport const ErrorContainer: FC<IErrorContainer> = ({errorService}) => {\n\n    const [state, setState] = useState<ErrorContainerState>({isOpen: false, errorMessage: ''});\n\n    useChannel<string, string>(errorService.errorChannel, (errorMessage: string) => {\n        setState({\n            isOpen: true,\n            errorMessage\n        })\n    });\n\n    const onClose = () => {\n        setState({\n            isOpen: false,\n            errorMessage: ''\n        })\n    };\n\n    return <ErrorComponent isOpen={state.isOpen} errorMessage={state.errorMessage} handleClose={onClose}/>\n};\n","import {LinearProgress} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {ISpinnerComponent} from \"./types/ISpinnerComponent\";\n\nexport const SpinnerComponent: FC<ISpinnerComponent> = ({isShow}) => {\n    return (\n        isShow ? <LinearProgress color=\"secondary\" /> : null\n    )\n};\n","import * as React from 'react';\nimport {FC, useState} from 'react';\n\nimport {SpinnerComponent} from './SpinnerComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ISpinnerContainer} from \"./types/ISpinnerContainer\";\n\nexport const SpinnerContainer: FC<ISpinnerContainer> = ({spinnerService}) => {\n\n    const [isShow, setShowing] = useState(false);\n\n    useChannel<number, number>(spinnerService.spinnerCounterChannel, (spinnerCounter) => {\n        setShowing(spinnerCounter !== 0);\n    });\n\n    return <SpinnerComponent isShow={isShow}/>\n};\n","import {ISortVariant} from \"./types/ISortVariant\";\nimport {IRangeOfKnowledge} from \"./types/IRangeOfKnowledge\";\n\nexport const defaultStatisticValue = {\n    inProgress: 0,\n    todo: 0,\n    done: 0\n};\n\nexport const defaultCardsGroupValue = {\n    cards: [],\n    nameCardsGroup: '',\n    repeatingDate: new Date().getTime(),\n    id: new Date().getTime(),\n    percentRepeatedCards: 0\n}\n\nexport const defaultAppState = {\n    height: 0,\n    width: 0\n};\n\nexport const defaultFilterValue = {\n    searchableText: '',\n    sort: ISortVariant.NONE\n}\n\nexport const defaultCardValue = {\n    id: -1,\n    question: '',\n    answer: '',\n    rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n    dateRepeating: 0\n}\n\nexport const defaultSimplifiedGroupValue = {\n    nameCardsGroup: '',\n    id: -1\n}\n\nexport const DATE_FORMAT = \"dd-MM-yyyy\";\nexport const STORE_NAME = \"cards-store\";\n","import React, {FC} from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport {IConfirmDialogComponent} from \"./types/IConfirmDialogComponent\";\n\nexport const ConfirmDialogComponent: FC<IConfirmDialogComponent> = ({\n                                                                        onClickAgree,\n                                                                        onClickDisagree,\n                                                                        isOpen,\n                                                                        message,\n                                                                        onClose\n                                                                    }) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitle id=\"alert-dialog-title\">Warning</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClickDisagree} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={onClickAgree} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport {FC} from 'react';\n\nimport {ConfirmDialogComponent} from './ConfirmDialogComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {IConfirmDialogContainer} from \"./types/IConfirmDialogContainer\";\nimport {ConfirmDialogContainerState} from \"./types/ConfirmDialogContainerState\";\n\nexport const ConfirmDialogContainer: FC<IConfirmDialogContainer> = ({confirmDialogService}) => {\n\n    const [state, setState] = React.useState<ConfirmDialogContainerState>({\n        isOpen: false,\n        message: ''\n    });\n\n    useChannel<ConfirmDialogContainerState, ConfirmDialogContainerState>(\n        confirmDialogService.openDialogChannel,\n        (state: ConfirmDialogContainerState) => {\n            setState({...state});\n        }\n    );\n\n    const onClose = () => {\n        setState({isOpen: false, message: ''});\n        confirmDialogService.confirmationChannel.unsubscribe();\n    };\n\n    const onClickAgree = () => {\n        confirmDialogService.confirmationChannel.next(true);\n    };\n\n    const onClickDisagree = () => {\n        confirmDialogService.confirmationChannel.next(false);\n    };\n\n    return <ConfirmDialogComponent\n        isOpen={state.isOpen}\n        onClickAgree={onClickAgree}\n        onClickDisagree={onClickDisagree}\n        onClose={onClose}\n        message={state.message}\n    />\n};\n","export const jsonEqual = <T>(args: { value: T, other: T }) => {\n    const {value, other} = args;\n\n    if(typeof value !== 'object') {\n        return value === other;\n    }\n\n    if(value instanceof Array && other instanceof Array) {\n       if(value.length !== other.length) {\n           return false;\n       }\n    }\n    console.log('checked')\n\n    return JSON.stringify(value) === JSON.stringify(other);\n}","import {Observable} from 'rxjs';\n\nimport {functionToThread} from \"../logic/functionToThread\";\n\nexport const fromThread = <A, R>(arg: A, workerFunction: (arg: A) => R): Observable<R> => {\n\n    const thread = functionToThread(workerFunction)\n\n    return new Observable(observer => {\n        thread.postMessage(arg);\n        thread.onmessage = (event: MessageEvent) => {\n            observer.next(event.data);\n            observer.complete();\n            thread.terminate();\n        }\n        thread.onerror = (err) => {\n            observer.error(err);\n        }\n    })\n}","export const functionToThread = <A, R>(workerFunction: (arg: A) => R) => {\n\n    const functionString = `(function worker() {\n            var self = this;\n            self.onmessage = function(e) {\n                const result = (${workerFunction.toString()})(e.data)\n                self.postMessage(result);\n            }\n        })()`;\n\n    const functionBlob = new Blob([functionString], {type: 'text/javascript'});\n\n    return new Worker(URL.createObjectURL(functionBlob));\n}","import {Observable, Subject, Subscription} from 'rxjs';\n\nimport {jsonEqual} from \"./logic/jsonEqual\";\nimport {fromThread} from \"../worker-observable/operators/fromThread\";\n\nexport class Channel<A, D> {\n\n    private readonly outputSubject: Subject<D>;\n    private observableCreator: (arg: A) => Observable<D>;\n    private subscriptions: Subscription[] = [];\n    private previousEmittedValue: D | null = null;\n    private static globalErrorHandler = (error: Error) => {};\n    private static globalNextHandler = () => {};\n\n    constructor(\n        observableCreator: (arg: A) => Observable<D>\n    ) {\n        this.outputSubject = new Subject<D>();\n        this.observableCreator = observableCreator;\n    }\n\n    next(value: A) {\n        //Don't make implement complete method because it can affect on subject behaviour in app\n        this.subscriptions.push(this.observableCreator(value).subscribe(\n            (value) => {\n                this.outputSubject.next(value);\n            },\n            (error) => {\n                this.outputSubject.error(error);\n            }\n        ));\n    }\n\n    subscribe(\n        next?: (data: D) => void,\n        customErrorHandler?: (error: Error) => void,\n        deepEqual = false\n    ): Subscription {\n        const outputSubjectSubscription = this.outputSubject.subscribe(\n            (data: D) => {\n                if (next) {\n                    if (deepEqual) {\n                        this.deepEqual(next, data);\n                    } else {\n                        next(data)\n                        Channel.globalNextHandler()\n                    }\n                }\n            },\n            (error: Error) => {\n                if (customErrorHandler) {\n                    customErrorHandler(error);\n                }\n                Channel.globalErrorHandler(error)\n            }\n        );\n        this.subscriptions.push(outputSubjectSubscription);\n        return outputSubjectSubscription;\n    }\n\n    private deepEqual(next: (data: D) => void, data: D): void {\n        if (!this.previousEmittedValue) {\n            next(data)\n            Channel.globalNextHandler()\n            this.previousEmittedValue = data;\n        }\n\n        const subscription = fromThread(\n            {value: data, other: this.previousEmittedValue},\n            jsonEqual\n        ).subscribe(\n            (result) => {\n                if (!result) {\n                    next(data)\n                    Channel.globalNextHandler()\n                    this.previousEmittedValue = data;\n                }\n            },\n            (equalityError) => {\n                console.error(equalityError)\n            }\n        )\n        this.subscriptions.push(subscription)\n    }\n\n    unsubscribe() {\n        this.subscriptions.forEach((subscribtion: Subscription) => {\n            if (!subscribtion.closed) {\n                subscribtion.unsubscribe();\n            }\n        });\n        this.subscriptions = [];\n        this.previousEmittedValue = null;\n    }\n\n    static setGlobalErrorHandler = (globalErrorHandler: (error: Error) => void) => {\n        Channel.globalErrorHandler = globalErrorHandler;\n    }\n\n    static setGlobalNextHandler = (globalNextHandler: () => void) => {\n        Channel.globalNextHandler = globalNextHandler;\n    }\n}\n","import {of} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class SpinnerService {\n\n    public spinnerCounterChannel: Channel<number, number>;\n\n    private spinnerCounter = 0;\n\n    constructor() {\n        this.spinnerCounterChannel = new Channel((difference: number) => of('').pipe(map(() => {\n            if(this.spinnerCounter + difference >= 0) {\n                this.spinnerCounter = this.spinnerCounter + difference;\n            }\n            return this.spinnerCounter;\n        })))\n    }\n}\n","import * as React from 'react';\nimport {FC} from 'react';\nimport Fab from '@mui/material/Fab';\nimport AddIcon from '@mui/icons-material/Add';\n\nimport {IAddButton} from \"./types/IAddButton\";\nimport './AddButtonComponent.css'\n\nexport const AddButtonComponent: FC<IAddButton> = ({onClick}) => {\n    return <Fab size=\"medium\" color=\"secondary\" aria-label=\"add\" className=\"add-button\" onClick={onClick}>\n        <AddIcon/>\n    </Fab>\n};\n","import React, {FC} from 'react';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nimport {ICircularProgressComponent} from \"./types/ICircularProgressComponent\";\n\nexport const CircularProgressComponent: FC<ICircularProgressComponent> = ({percent}) => {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" value={percent}/>\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                    percent,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n};\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nimport {IListItemMenuComponent} from \"./types/IListItemMenuComponent\";\n\nexport const ListItemMenuComponent: FC<IListItemMenuComponent> = ({onEdit, onDelete, onResetProgress}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const editClick = () => {\n        onEdit();\n        handleClose();\n    };\n\n    const resetClick = () => {\n        onResetProgress();\n        handleClose();\n    };\n\n    const deleteClick = () => {\n        onDelete();\n        handleClose();\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={editClick}>Edit</MenuItem>\n                <MenuItem onClick={resetClick}>Reset progress</MenuItem>\n                <MenuItem onClick={deleteClick}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n","import React, {FC} from \"react\"\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\n\nimport {DATE_FORMAT} from '../../../../common/Constants';\nimport {CircularProgressComponent} from '../circular-progress/CircularProgressComponent';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport './CardsGroupsListItemComponent.css'\nimport {ICardsGroupsListItemComponent} from \"./types/ICardsGroupsListItemComponent\";\n\nexport const CardsGroupsListItemComponent: FC<ICardsGroupsListItemComponent> = (\n    {\n        cardsGroup,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress\n    }\n) => {\n\n    return <>\n        <ListItem key={cardsGroup.id} button component=\"div\">\n            <ListItemIcon onClick={() => onClickItem(cardsGroup.id)}>\n                <CircularProgressComponent percent={cardsGroup.percentRepeatedCards || 0}/>\n            </ListItemIcon>\n            <ListItemText\n                className=\"cards-groups-list-item_card-name\"\n                onClick={() => onClickItem(cardsGroup.id)}\n                primary={cardsGroup.nameCardsGroup}\n                secondary={'Last repeating date: ' + format(cardsGroup.repeatingDate ? cardsGroup.repeatingDate : new Date(), DATE_FORMAT)}\n            />\n            <ListItemIcon>\n                <ListItemMenuComponent\n                    onEdit={() => onEditItem(cardsGroup.id)}\n                    onDelete={() => onDeleteItem(cardsGroup.id)}\n                    onResetProgress={() => onResetProgress(cardsGroup.id)}\n                />\n            </ListItemIcon>\n        </ListItem>\n    </>\n};\n","import {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    TextField,\n} from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport {ChangeEvent, default as React, FC} from \"react\";\n\nimport {ISortVariant} from \"../../types/ISortVariant\";\nimport {IFilterComponent} from \"./types/IFilterComponent\";\n\nexport const FilterComponent: FC<IFilterComponent> = (\n    {\n        onChangeSearchableText,\n        filter,\n        onChangeSorting,\n        sortVariants\n    }\n) => {\n\n    const handleChangingSearchableText = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeSearchableText(event.target.value);\n    };\n\n    const handleChangingSortingVariant = (event: SelectChangeEvent<ISortVariant>) => {\n        onChangeSorting(event.target.value as ISortVariant)\n    }\n\n    return <Accordion>\n        <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n        >\n            <TextField\n                className=\"text-editor\"\n                required\n                id=\"outlined-required\"\n                placeholder=\"Search text\"\n                onChange={handleChangingSearchableText}\n                value={filter.searchableText}\n                style={{\n                    marginRight: '20px',\n                }}\n                onClick={(event) => {\n                    event.stopPropagation()\n                    event.preventDefault()\n                }}\n            />\n        </AccordionSummary>\n        <AccordionDetails>\n            <Select\n                value={filter.sort}\n                label=\"Sorting\"\n                onChange={handleChangingSortingVariant}\n            >\n                {\n                    sortVariants.map((variant: ISortVariant) => {\n                        return <MenuItem key={variant} value={variant}>{variant}</MenuItem>\n                    })\n                }\n            </Select>\n        </AccordionDetails>\n    </Accordion>\n}","import React, {FC} from \"react\";\nimport {FixedSizeList as List} from 'react-window';\n\nimport './CardsGroupsListComponent.css'\nimport {AddButtonComponent} from '../../common/elements/add-button/AddButtonComponent';\nimport {CardsGroupsListItemComponent} from './elements/cards-groups-list-item/CardsGroupsListItemComponent';\nimport {ICardsGroupsListComponent} from \"./types/ICardsGroupsListComponent\";\nimport {FilterComponent} from \"../../common/elements/filter/FilterComponent\";\nimport {ISortVariant} from \"../../common/types/ISortVariant\";\n\nexport const CardsGroupsListComponent: FC<ICardsGroupsListComponent> = (\n    {\n        cardsGroups,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onOpenEditor,\n        onResetProgress,\n        onChangeSearchableText,\n        onChangeSorting,\n        filter,\n        height,\n        width\n    }\n) => {\n\n    return <>\n        <FilterComponent\n            filter={filter}\n            onChangeSearchableText={onChangeSearchableText}\n            onChangeSorting={onChangeSorting}\n            sortVariants={[\n                ISortVariant.NONE,\n                ISortVariant.DATE_ASK,\n                ISortVariant.DATE_DESK,\n                ISortVariant.NAME_ASK,\n                ISortVariant.NAME_DESK\n            ]}\n        />\n        <List\n            className=\"cards-groups\"\n            itemData={cardsGroups}\n            itemSize={55}\n            itemCount={cardsGroups.length}\n            overscanCount={5}\n            height={height}\n            width={width}\n        >\n            {({index, style}: any) => {\n                const cardGroup = cardsGroups[index];\n                return <div style={style}><CardsGroupsListItemComponent\n                    key={cardGroup.id}\n                    cardsGroup={cardGroup}\n                    onClickItem={onClickItem}\n                    onEditItem={onEditItem}\n                    onDeleteItem={onDeleteItem}\n                    onResetProgress={onResetProgress}\n                /></div>\n            }}\n        </List>\n        <AddButtonComponent onClick={onOpenEditor}/>\n    </>\n};\n","import {useRef} from 'react';\n\nexport const useConstructor = (callback: () => void) => {\n\n    const value = useRef({isFirstRun: true});\n\n    if (value.current.isFirstRun) {\n        callback();\n        value.current.isFirstRun = false;\n    }\n};\n","import {useEffect, useRef} from 'react';\nimport {Subscription} from 'rxjs';\n\nexport const useUnsubscribe = () => {\n\n    const subscriptions = useRef<Array<Subscription>>([]);\n\n    useEffect(() => {\n        return () => {\n            subscriptions.current.forEach((subscription: Subscription) => {\n                if( !subscription.closed ) {\n                    subscription.unsubscribe();\n                }\n            });\n            subscriptions.current = [];\n        }\n    }, []);\n\n    return { setSubscription: (subscribtion: Subscription) => {\n        subscriptions.current.push(subscribtion);\n    }}\n};\n","import {useHistory, useLocation} from \"react-router\";\nimport {Context, useContext, useState} from \"react\";\nimport {useUnsubscribe} from \"./useUnsubscribe\";\nimport {ICallbackSettings} from \"./types/ICallbackSettings\";\nimport {CallbackFactory} from \"../react-utils/CallbackFactory\";\n\nexport const useCallbackFactory = <NS, CS, PS, CX>(\n    initialState: CS,\n    services: PS,\n    context: Context<CX>\n) => {\n    const location = useLocation<NS>();\n\n    const history = useHistory<NS>();\n\n    const [state, setState] = useState<CS>(initialState);\n\n    const {setSubscription} = useUnsubscribe();\n\n    const value = useContext<CX>(context);\n\n    const callbackSettings: ICallbackSettings<CS, PS, NS, CX> = {\n        location,\n        history,\n        services,\n        state,\n        setState,\n        context: value,\n        setSubscription\n    }\n\n    return {\n        callbackFactory: CallbackFactory(callbackSettings),\n        callbackSettings\n    };\n}","export type ICallback<S, A> = (settings: S, args?: A) => void\n\nexport const CallbackFactory = <S>(settings: S) => <A>(callback: ICallback<S, A>) => {\n    return (args?: A) => callback(settings, args)\n}","import {defaultFilterValue} from \"../../common/Constants\";\n\nexport const initialState = {\n    cardsGroups: [],\n    filter: defaultFilterValue\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onResetProgress: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {services, setSubscription},\n    cardsGroupID = -1\n) => {\n    const {confirmDialogService, cardsGroupsListService} = services;\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsGroupsListService.resetProgressChannel.next(cardsGroupID);\n        }\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: false,\n            message: ''\n        })\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to reset progress of this group?'\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {history, location},\n    cardsGroupID = -1\n) => {\n    history.push({\n        pathname: Routs.cardsGroupEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: cardsGroupID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onDeleteItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {\n        history,\n        location,\n        services: {\n            confirmDialogService,\n            cardsGroupsListService\n        },\n        setSubscription\n    },\n    cardsGroupID = -1\n) => {\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsGroupsListService.groupDeleteChannel.next(cardsGroupID);\n        }\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: false,\n            message: ''\n        })\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this group?'\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onOpenEditor: ICallback<ICardsGroupsCallbackSettings, void> = (\n    {history}\n) => {\n    history.push({\n        pathname: Routs.cardsGroupEditor.path\n    })\n}","import {Routs} from \"../../../common/Routs\";\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onClickItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {history, location},\n    cardsGroupID = -1\n) => {\n    history.push({\n        pathname: Routs.cards.path,\n        state: {\n            ...location.state,\n            cardsGroupID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onConstructor: ICallback<ICardsGroupsCallbackSettings, void> = (\n    {services}\n) => {\n    services.cardsGroupsListService.groupsListChannel.next('');\n    services.cardsGroupsListService.filterChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onResetProgressChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {\n        services: {\n            cardsGroupsListService\n        },\n    }\n) => {\n    cardsGroupsListService.groupsListChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupDeleteChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {\n        services: {\n            cardsGroupsListService\n        }\n    }\n) => {\n    cardsGroupsListService.groupsListChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupsListChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {setState, state},\n    cardsGroups = []\n) => {\n    setState((prevState) => {\n        return {...prevState, cardsGroups}\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const onChangeSorting: ICallback<ICardsGroupsCallbackSettings, ISortVariant> = (\n    {services: {cardsGroupsListService}, state},\n    sortVariant = ISortVariant.NONE\n) => {\n    const newFilter = {\n        ...state.filter,\n        sort: sortVariant\n    }\n    cardsGroupsListService.changeFilterChannel.next(newFilter);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {IStoredFilters} from \"../../../common/types/IStoredFilters\";\n\nexport const onChangeFilterChannel: ICallback<ICardsGroupsCallbackSettings, IStoredFilters> = (\n    {\n        services: {\n            cardsGroupsListService\n        }\n    }\n) => {\n    cardsGroupsListService.filterChannel.next('');\n    cardsGroupsListService.groupsListChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {defaultFilterValue} from \"../../../common/Constants\";\n\nexport const onFilterChannel: ICallback<ICardsGroupsCallbackSettings, IFilter> = (\n    {state, setState, services},\n    filter = defaultFilterValue\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            filter\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onChangeSearchableText: ICallback<ICardsGroupsCallbackSettings, string> = (\n    {\n        state,\n        services: {\n            cardsGroupsListService\n        }\n    },\n    searchableText = ''\n) => {\n    cardsGroupsListService.changeFilterChannel.next({\n        ...state.filter,\n        searchableText\n    })\n}","import React, {FC, useCallback} from \"react\";\n\nimport {CardsGroupsListComponent} from './CardsGroupsListComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {IAppContext} from '../../common/types/IAppContext';\nimport {AppContext} from '../../../App';\nimport {ICardsGroupsListContainer} from \"./types/ICardsGroupsListContainer\";\nimport {CardsGroupsListContainerState} from \"./types/CardsGroupsListContainerState\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {INavigationState} from \"../../common/types/INavigationState\";\nimport {initialState} from \"./Constants\";\nimport {onResetProgress} from \"./ui-callbacks/onResetProgress\";\nimport {onEditItem} from \"./ui-callbacks/onEditItem\";\nimport {onDeleteItem} from \"./ui-callbacks/onDeleteItem\";\nimport {onOpenEditor} from \"./ui-callbacks/onOpenEditor\";\nimport {onClickItem} from \"./ui-callbacks/onClickItem\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onResetProgressChannel} from \"./callbackChannels/onResetProgressChannel\";\nimport {onGroupDeleteChannel} from \"./callbackChannels/onGroupDeleteChannel\";\nimport {onGroupsListChannel} from \"./callbackChannels/onGroupsListChannel\";\nimport {onChangeSorting} from \"./ui-callbacks/onChangeSorting\";\nimport {onChangeFilterChannel} from \"./callbackChannels/onChangeFilterChannel\";\nimport {onFilterChannel} from \"./callbackChannels/onFilterChannel\";\nimport {onChangeSearchableText} from \"./ui-callbacks/onChangeSearchableText\";\n\nexport const CardsGroupsListContainer: FC<ICardsGroupsListContainer> = (\n    services\n) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardsGroupsListContainerState, ICardsGroupsListContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, context, services: {cardsGroupsListService}} = callbackSettings\n\n    useChannel(cardsGroupsListService.groupsListChannel, callbackFactory(onGroupsListChannel));\n    useChannel(cardsGroupsListService.groupDeleteChannel, callbackFactory(onGroupDeleteChannel));\n    useChannel(cardsGroupsListService.resetProgressChannel, callbackFactory(onResetProgressChannel));\n    useChannel(cardsGroupsListService.changeFilterChannel, callbackFactory(onChangeFilterChannel));\n    useChannel(cardsGroupsListService.filterChannel, callbackFactory(onFilterChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const clickItem = useCallback(callbackFactory(onClickItem), []);\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const deleteItem = useCallback(callbackFactory(onDeleteItem), []);\n    const editItem = useCallback(callbackFactory(onEditItem), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const changeSorting = useCallback(callbackFactory(onChangeSorting), [state.filter]);\n    const changeSearchableText = useCallback(callbackFactory(onChangeSearchableText), [state.filter]);\n\n    return <CardsGroupsListComponent\n        onClickItem={clickItem}\n        onOpenEditor={openEditor}\n        onDeleteItem={deleteItem}\n        onEditItem={editItem}\n        onResetProgress={resetProgress}\n        onChangeSorting={changeSorting}\n        filter={state.filter}\n        onChangeSearchableText={changeSearchableText}\n        height={context.height}\n        width={context.width}\n        cardsGroups={state.cardsGroups}/>\n};\n","import GoogleLogin from 'react-google-login';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport './GoogleAuthComponent.css'\nimport {IGoogleAuthComponent} from \"./types/IGoogleAuthComponent\";\n\nexport const GoogleAuthComponent: FC<IGoogleAuthComponent> = ({onSuccess, onFailure, height, width}) => {\n    return (\n        <div className=\"google-auth\" style={{height, width}}>\n            <GoogleLogin\n                className=\"google-auth_button\"\n                clientId=\"627973926597-tj2la0mnorvm04cqmcosu2nj3b02g6k2.apps.googleusercontent.com\"\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                scope={'profile email https://www.googleapis.com/auth/drive'}\n            />\n        </div>\n    )\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {GoogleLoginResponse, GoogleLoginResponseOffline} from 'react-google-login';\nimport {useHistory} from 'react-router';\n\nimport {Routs} from '../../common/Routs';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {GoogleAuthComponent} from './GoogleAuthComponent';\nimport {IAppContext} from '../../common/types/IAppContext';\nimport {AppContext} from '../../../App';\nimport {IGoogleAuthContainer} from \"./types/IGoogleAuthContainer\";\n\nexport const GoogleAuthContainer: FC<IGoogleAuthContainer> = ({googleAuthService, errorService}) => {\n\n    const history = useHistory();\n\n    useChannel(googleAuthService.loginChannel, ()=> {\n        history.replace(Routs.googleBackups.path);\n    });\n\n    const {height, width} = React.useContext<IAppContext>(AppContext);\n\n    const onSuccess = (response: GoogleLoginResponse | GoogleLoginResponseOffline) => {\n        googleAuthService.loginChannel.next((response as GoogleLoginResponse).accessToken);\n    };\n\n    const onFailure = () => {\n        errorService.errorChannel.next('Error of connection');\n    };\n\n    return <GoogleAuthComponent\n        onSuccess={onSuccess}\n        onFailure={onFailure}\n        height={height}\n        width={width}\n    />;\n};\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nimport {IBackupMenuComponent} from \"./types/IBackupMenuComponent\";\n\n\nexport const BackupMenuComponent: FC<IBackupMenuComponent> = ({backupID, onLoad, onDelete}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const onLoadBackup = () => {\n        setAnchorEl(null);\n        onLoad(backupID);\n    };\n\n    const onDeleteBackup = () => {\n        setAnchorEl(null);\n        onDelete(backupID);\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={onLoadBackup}>Load</MenuItem>\n                <MenuItem onClick={onDeleteBackup}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n","import {default as React, FC} from 'react';\nimport {ListItem, ListItemIcon, ListItemText} from '@mui/material';\n\nimport {BackupMenuComponent} from '../backup-menu-component/BackupMenuComponent';\nimport {IBackupsListItemComponent} from \"./types/IBackupsListItemComponent\";\n\nexport const BackupsListItemComponent: FC<IBackupsListItemComponent> = (\n    {\n        backupName,\n        backupDate,\n        backupID,\n        onLoad,\n        onDelete\n    }\n) => {\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={backupName}\n                secondary={backupDate}\n            />\n            <ListItemIcon>\n                <BackupMenuComponent backupID={backupID} onLoad={onLoad} onDelete={onDelete}/>\n            </ListItemIcon>\n        </ListItem>\n    );\n};\n","import {List} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {BackupsListItemComponent} from './elements/backups-list-item-component/BackupsListItemComponent';\nimport {AddButtonComponent} from '../../common/elements/add-button/AddButtonComponent';\nimport {IBackupsListComponent} from \"../local-backup/types/IBackupsListComponent\";\n\n\nexport const GoogleBackupsComponent: FC<IBackupsListComponent> = ({backupsFiles, onLoad, onCreate, onDelete}) => {\n    return (\n        <>\n            <List>\n                {\n                    backupsFiles.map((backup: IGoogleDriveFile) => {\n                        return <BackupsListItemComponent\n                            key={backup.id}\n                            backupName={backup.name}\n                            backupDate={backup.createdTime}\n                            onLoad={onLoad}\n                            onDelete={onDelete}\n                            backupID={backup.id}/>\n                    })\n                }\n            </List>\n            <AddButtonComponent onClick={onCreate}/>\n        </>\n    )\n};\n","import * as React from 'react';\nimport {FC, useState} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {GoogleBackupsComponent} from './GoogleBackupsComponent';\nimport {useHistory} from 'react-router';\nimport {Routs} from '../../common/Routs';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {useUnsubscribe} from '../../../MyTools/react-hooks/useUnsubscribe';\nimport {IGoogleBackupsContainer} from \"./types/IGoogleBackupsContainer\";\nimport {GoogleAuthComponentState} from \"./types/GoogleAuthComponentState\";\n\nexport const GoogleBackupsContainer: FC<IGoogleBackupsContainer> = ({\n                                                                        spinnerService,\n                                                                        googleBackupsService,\n                                                                        confirmDialogService\n                                                                    }) => {\n\n    const history = useHistory();\n\n    const [state, setState] = useState<GoogleAuthComponentState>({\n        backupsFiles: []\n    });\n\n    useChannel(\n        googleBackupsService.backupsNameLoadChannel,\n        (backupsFiles: IGoogleDriveFile[]) => {\n            setState({...state, backupsFiles: backupsFiles});\n            spinnerService.spinnerCounterChannel.next(-1);\n        },\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n            history.replace(Routs.googleAuth.path);\n        }\n    );\n\n    useChannel(\n        googleBackupsService.backupLoadChannel,\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n        },\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n            history.replace(Routs.googleAuth.path);\n        }\n    );\n\n    useChannel(googleBackupsService.backupDeleteChannel, () => {\n        spinnerService.spinnerCounterChannel.next(-1);\n        googleBackupsService.backupsNameLoadChannel.next('')\n    });\n\n    useChannel(googleBackupsService.backupUploadChannel, () => {\n        googleBackupsService.backupsNameLoadChannel.next('')\n        spinnerService.spinnerCounterChannel.next(-1);\n    });\n\n    useConstructor(() => {\n        googleBackupsService.backupsNameLoadChannel.next('');\n    });\n\n    const {setSubscription} = useUnsubscribe();\n\n    const onLoad = (backupID: string) => {\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                spinnerService.spinnerCounterChannel.next(1);\n                googleBackupsService.backupLoadChannel.next(backupID);\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to upload this backup?'\n        });\n    };\n\n    const onDelete = (backupID: string) => {\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                spinnerService.spinnerCounterChannel.next(1);\n                googleBackupsService.backupDeleteChannel.next(backupID);\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to delete this backup?'\n        });\n    };\n\n    const onCreate = () => {\n        spinnerService.spinnerCounterChannel.next(1);\n        googleBackupsService.backupUploadChannel.next();\n    };\n\n    return <GoogleBackupsComponent\n        backupsFiles={state.backupsFiles}\n        onLoad={onLoad}\n        onDelete={onDelete}\n        onCreate={onCreate}\n    />;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport CopyIcon from \"@mui/icons-material/CopyAll\";\nimport Fab from \"@mui/material/Fab\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport SelectAllIcon from \"@mui/icons-material/SelectAll\";\nimport DriveFileMoveIcon from \"@mui/icons-material/DriveFileMove\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport {ICardsListActions} from \"./types/ICardsListActions\";\nimport './CardsListActions.css'\n\nexport const CardsListActions: FC<ICardsListActions> = (\n    {\n        onOpenEditor,\n        onOpenRepeater,\n        onStartSelecting,\n        onMovingSelectedCards,\n        onDeleteSelectedCards,\n        onCopySelectedCards,\n        hideOpenRepeaterButton = false,\n        hideOpenEditorButton = false,\n        hideMovingSelectedCardsButton = false,\n        hideDeleteSelectedCardsButton = false,\n        hideCopySelectedCardButton = false\n    }\n) => {\n    return <div className=\"cards-list-actions\">\n        <Fab size=\"medium\" color=\"secondary\" onClick={onStartSelecting}>\n            <SelectAllIcon/>\n        </Fab>\n        <Fab size=\"medium\" color=\"primary\" onClick={onOpenRepeater}>\n            <PlayArrowIcon/>\n        </Fab>\n        {\n            !hideOpenEditorButton && <Fab size=\"medium\" color=\"secondary\" onClick={onOpenEditor}>\n                <AddIcon/>\n            </Fab>\n        }\n        {\n            !hideMovingSelectedCardsButton && <Fab size=\"medium\" color=\"primary\" onClick={onMovingSelectedCards}>\n                <DriveFileMoveIcon/>\n            </Fab>\n        }\n        {\n            !hideCopySelectedCardButton && <Fab size=\"medium\" color=\"secondary\" onClick={onCopySelectedCards}>\n                <CopyIcon/>\n            </Fab>\n        }\n        {\n            !hideDeleteSelectedCardsButton && <Fab size=\"medium\" color=\"secondary\" onClick={onDeleteSelectedCards}>\n                <DeleteIcon/>\n            </Fab>\n        }\n    </div>\n}","import React, {FC} from \"react\";\n\nimport {ICardPrimaryTextComponent} from \"./types/ICardPrimaryTextComponent\";\nimport './CardPrimaryTextComponent.css'\n\nexport const CardPrimaryTextComponent: FC<ICardPrimaryTextComponent> = ({card}) => {\n    return <div className=\"card-primary-text\">\n        <p className=\"card-primary-text_title\">\n            {card.question}\n        </p>\n        <p className=\"card-primary-text_content\">\n            {card.answer}\n        </p>\n    </div>\n}","import React, {FC} from \"react\"\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport FlagIcon from '@mui/icons-material/Flag';\nimport {Checkbox} from \"@mui/material\";\n\nimport {DATE_FORMAT} from '../../../../common/Constants';\nimport {ICard} from '../../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../../common/types/IRangeOfKnowledge';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport {ICardListItemComponent} from \"./types/ICardListItemComponent\";\nimport {CardPrimaryTextComponent} from \"../card-primary-text/CardPrimaryTextComponent\";\n\nexport const CardsListItemComponent: FC<ICardListItemComponent> = (\n    {\n        card,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onSelect,\n        isEnabledSelecting,\n        isSelected\n    }\n) => {\n\n    const dateText = 'Last repeating date: ' + format(card.dateRepeating ? card.dateRepeating : new Date(), DATE_FORMAT)\n\n    const getIconColor = (card: ICard): string => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n            return 'green'\n        }\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            return 'yellow'\n        }\n        return 'red'\n    };\n\n    return <ListItem key={card.id} button>\n        <ListItemIcon onClick={() => onClickItem(card.id)}>\n            <FlagIcon style={{color: getIconColor(card)}}/>\n        </ListItemIcon>\n        <ListItemText\n            onClick={() => onClickItem(card.id)}\n            primary={<CardPrimaryTextComponent card={card}/>}\n            secondary={dateText}\n        />\n        {\n            !isEnabledSelecting ?\n                <ListItemIcon>\n                    <ListItemMenuComponent\n                        onEdit={() => onEditItem(card.id)}\n                        onDelete={() => onDeleteItem(card.id)}\n                        onResetProgress={() => onResetProgress(card.id)}\n                    />\n                </ListItemIcon> :\n                <ListItemIcon onClick={() => isEnabledSelecting && onSelect(card.id)}>\n                    <Checkbox\n                        edge=\"start\"\n                        checked={isSelected}\n                        tabIndex={-1}\n                        disableRipple\n                    />\n                </ListItemIcon>\n        }\n    </ListItem>\n};\n","import {FixedSizeList as List} from \"react-window\";\nimport * as React from \"react\";\nimport {FC} from \"react\";\n\nimport {CardsListItemComponent} from \"../cards-list-item/CardsListItemComponent\";\nimport {ICardsListComponent} from \"./types/ICardsListComponent\";\n\nexport const CardsListComponent: FC<ICardsListComponent> = (\n    {\n        cards,\n        width,\n        height,\n        onEditItem,\n        onDeleteItem,\n        onSelectItem,\n        onResetProgress,\n        onClickItem,\n        isEnabledSelecting,\n        selectedItems\n    }\n) => {\n    return <List\n        className=\"cards\"\n        itemData={cards}\n        itemSize={75}\n        itemCount={cards.length}\n        overscanCount={5}\n        height={height}\n        width={width}\n    >\n        {\n            ({index, style}: any) => {\n                const card = cards[index];\n                return <div style={style}>\n                    <CardsListItemComponent\n                        key={card.id}\n                        card={card}\n                        onEditItem={onEditItem}\n                        onDeleteItem={onDeleteItem}\n                        onResetProgress={onResetProgress}\n                        onClickItem={onClickItem}\n                        onSelect={onSelectItem}\n                        isEnabledSelecting={isEnabledSelecting}\n                        isSelected={selectedItems[card.id]}\n                    />\n                </div>\n            }\n        }\n    </List>\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {FilterComponent} from \"../../common/elements/filter/FilterComponent\";\nimport {CardsListActions} from \"./elements/cards-list-actions/CardsListActions\";\nimport {ICardsComponent} from \"./types/ICardsComponent\";\nimport './CardsComponent.css';\nimport {CardsListComponent} from \"./elements/cards-list/CardsListComponent\";\nimport {ISortVariant} from \"../../common/types/ISortVariant\";\n\nexport const CardsComponent: FC<ICardsComponent> = (\n    {\n        cards,\n        filter,\n        onOpenEditor,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onChangeSearchableText,\n        onChangeSorting,\n        width,\n        height,\n        onOpenRepeater,\n        onStartSelecting,\n        onSelectItem,\n        onDeleteSelectedCards,\n        onMovingSelectedCards,\n        onCopySelectedCards,\n        isEnabledSelecting,\n        selectedItems\n    }\n) => {\n    return (\n        <>\n                <FilterComponent\n                    onChangeSearchableText={onChangeSearchableText}\n                    onChangeSorting={onChangeSorting}\n                    filter={filter}\n                    sortVariants={[\n                            ISortVariant.NONE,\n                            ISortVariant.DATE_ASK,\n                            ISortVariant.DATE_DESK,\n                            ISortVariant.QUESTION_ASK,\n                            ISortVariant.QUESTION_DESK,\n                            ISortVariant.STATUS_ASK,\n                            ISortVariant.STATUS_DESK,\n                            ISortVariant.ANSWER_ASK,\n                            ISortVariant.ANSWER_DESK\n                    ]}\n                />\n                <CardsListComponent\n                    cards={cards}\n                    width={width}\n                    height={height}\n                    onEditItem={onEditItem}\n                    onDeleteItem={onDeleteItem}\n                    onResetProgress={onResetProgress}\n                    onClickItem={onClickItem}\n                    onSelectItem={onSelectItem}\n                    isEnabledSelecting={isEnabledSelecting}\n                    selectedItems={selectedItems}\n                />\n                <CardsListActions\n                    onOpenRepeater={onOpenRepeater}\n                    onOpenEditor={onOpenEditor}\n                    onStartSelecting={onStartSelecting}\n                    onCopySelectedCards={onCopySelectedCards}\n                    hideOpenEditorButton={isEnabledSelecting}\n                    hideOpenRepeaterButton={isEnabledSelecting}\n                hideDeleteSelectedCardsButton={!isEnabledSelecting}\n                hideMovingSelectedCardsButton={!isEnabledSelecting}\n                hideCopySelectedCardButton={!isEnabledSelecting}\n                onDeleteSelectedCards={onDeleteSelectedCards}\n                onMovingSelectedCards={onMovingSelectedCards}\n            />\n        </>\n    )\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onDeleteSelectedCards: ICallback<CardsContainerCallbackSettings, void> = (\n    settings: CardsContainerCallbackSettings\n) => {\n\n    const {services, state, setSubscription} = settings;\n\n    const {confirmDialogService, cardsListService} = services;\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsListService.deleteCardsChannel.next(state.selectedItems);\n        }\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: false,\n            message: ''\n        })\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?'\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onCopySelectedCards: ICallback<CardsContainerCallbackSettings, void> = (\n    settings: CardsContainerCallbackSettings\n) => {\n\n    const {services, state, setSubscription} = settings;\n\n    const {\n        cardsListService,\n        confirmDialogService,\n        selectionDialogService\n    } = services;\n\n    const subscription = selectionDialogService.selectionChannel.subscribe((groupID) => {\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardsListService.copyCardsChannel.next({\n                    selectedItems: state.selectedItems,\n                    destinationGroupID: groupID\n                });\n\n                selectionDialogService.openDialogChannel.next({\n                    isOpen: false,\n                    title: '',\n                    selectionItems: []\n                });\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to copy this cards?'\n        });\n    });\n\n    setSubscription(subscription);\n\n    selectionDialogService.openDialogChannel.next({\n        isOpen: true,\n        title: 'Select cards group',\n        selectionItems: state.existedGroupsIDs\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onMovingSelectedCards: ICallback<CardsContainerCallbackSettings, void> = (\n    settings\n) => {\n\n    const {services, state, setSubscription} = settings;\n\n    const {\n        cardsListService,\n        confirmDialogService,\n        selectionDialogService\n    } = services;\n\n    const subscription = selectionDialogService.selectionChannel.subscribe((groupID) => {\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardsListService.movingCardsChannel.next({\n                    selectedItems: state.selectedItems,\n                    destinationGroupID: groupID\n                });\n\n                selectionDialogService.openDialogChannel.next({\n                    isOpen: false,\n                    title: '',\n                    selectionItems: []\n                });\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to move this cards?'\n        });\n    });\n\n    setSubscription(subscription);\n\n    selectionDialogService.openDialogChannel.next({\n        isOpen: true,\n        title: 'Select cards group',\n        selectionItems: state.existedGroupsIDs\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onSelectItem: ICallback<CardsContainerCallbackSettings, number> = (\n    settings,\n    cardID = -1\n) => {\n\n    const {state, setState} = settings;\n\n    const selectedItems = {\n        ...state.selectedItems\n    };\n\n    if (selectedItems[cardID]) {\n        selectedItems[cardID] = !selectedItems[cardID]\n    } else {\n        selectedItems[cardID] = true\n    }\n\n    setState((prevState) => {\n        return {\n        ...prevState,\n            selectedItems\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onStartSelecting: ICallback<CardsContainerCallbackSettings, void> = (\n    {setState}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            isEnabledSelecting: !prevState.isEnabledSelecting,\n            selectedItems: !prevState.isEnabledSelecting ? {} : prevState.selectedItems\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onOpenRepeater: ICallback<CardsContainerCallbackSettings, void> = (\n    {\n        state,\n        location,\n        services\n    }\n) => {\n    if (state.isEnabledSelecting) {\n        services.cardsListService.cardsIDsBySelectedItemsChannel.next(state.selectedItems);\n    } else {\n        services.cardsListService.cardsIDsByGroupIDsChannel.next(location.state.cardsGroupID);\n    }\n}","import {ISortVariant} from \"../../../common/types/ISortVariant\";\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onChangeSorting: ICallback<CardsContainerCallbackSettings, ISortVariant> = (\n    {state, setState, services, location},\n    sortVariant: ISortVariant = ISortVariant.NONE\n) => {\n    const newFilter = {\n        ...state.filter,\n        sort: sortVariant\n    }\n    services.cardsListService.changeFilterChannel.next(newFilter);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onChangeSearchableText: ICallback<CardsContainerCallbackSettings, string> = (\n    {services, setState, state, location},\n    searchableText = ''\n) => {\n    const newFilter = {\n        ...state.filter,\n        searchableText: searchableText\n    }\n\n    services.cardsListService.changeFilterChannel.next(newFilter)\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {CardsContainerState} from \"../types/CardsContainerState\";\n\nexport const onCardsChannel: ICallback<CardsContainerCallbackSettings, ICard[]> = (\n    {state, setState},\n    cards = []\n) => {\n    setState((prevState: CardsContainerState) => {\n        return {\n            ...prevState,\n            cards\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onCardsIDsByGroupIDsChannel: ICallback<CardsContainerCallbackSettings, number[]> = (\n    {history, location},\n    args\n) => {\n    history.push({\n        pathname: Routs.cardsRepeater.path,\n        state: {\n            ...location.state,\n            cardsIDsForRepeating: args || []\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onCardsIDsBySelectedItemsChannel: ICallback<CardsContainerCallbackSettings, number[]> = (\n    {history, location},\n    args\n) => {\n    if (args && args.length > 1) {\n        history.push({\n            pathname: Routs.cardsRepeater.path,\n            state: {\n                ...location.state,\n                cardsIDsForRepeating: args || []\n            }\n        })\n    } else if (args && args.length === 1) {\n        history.push({\n            pathname: Routs.cardViewer.path,\n            state: {\n                ...location.state,\n                cardsGroupID: location.state.cardsGroupID,\n                cardID: args[0]\n            }\n        })\n    }\n}","import {defaultFilterValue} from \"../../common/Constants\";\n\nexport const initialState = {\n    cards: [],\n    filter: defaultFilterValue,\n    isEnabledSelecting: false,\n    selectedItems: {},\n    existedGroupsIDs: []\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {defaultFilterValue} from \"../../../common/Constants\";\n\nexport const onFilterChannel: ICallback<CardsContainerCallbackSettings, IFilter> = (\n    {state, setState, services, location},\n    filter = defaultFilterValue\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            filter\n        }\n    });\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const onConstructor: ICallback<CardsContainerCallbackSettings, ISortVariant> = (\n    {services, location, state}\n) => {\n    const {cardsListService} = services;\n    cardsListService.filterChannel.next('')\n    cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: state.filter\n    });\n    cardsListService.existedGroupsIDsChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {IStoredFilters} from \"../../../common/types/IStoredFilters\";\nimport {defaultFilterValue} from \"../../../common/Constants\";\n\nexport const onChangeFilter: ICallback<CardsContainerCallbackSettings, IStoredFilters> = (\n    {services, location},\n    storedFilters = {\n        cards: defaultFilterValue,\n        cardsGroups: defaultFilterValue\n    }\n) => {\n    services.cardsListService.filterChannel.next('');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onResetCardProgressChannel: ICallback<CardsContainerCallbackSettings, ICardsGroup[]> = (\n    {state, services, location}\n) => {\n    services.cardsListService.cardsChannel.next(\n        {\n            cardsGroupID: location.state.cardsGroupID,\n            filter: state.filter\n        }\n    )\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardsContainerCallbackSettings, ICardsGroup[]> = (\n    {state, services, location},\n    cards = []\n) => {\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: state.filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onMovingCardsChannel: ICallback<CardsContainerCallbackSettings, ICardsGroup[]> = (\n    {state, services, location}\n) => {\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: state.filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onCopyCardsChannel: ICallback<CardsContainerCallbackSettings, ICardsGroup[]> = (\n    {state, services, location}\n) => {\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: state.filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteCardsChannel: ICallback<CardsContainerCallbackSettings, ICardsGroup[]> = (\n    {state, services, location},\n    cards = []\n) => {\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: state.filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {CardsContainerState} from \"../types/CardsContainerState\";\n\nexport const onExistedGroupsIDsChannel: ICallback<CardsContainerCallbackSettings, { id: number; label: string; }[]> = (\n    {state, setState},\n    existedGroupsIDs = []\n) => {\n    setState((prevState: CardsContainerState) => {\n        return {\n            ...prevState,\n            existedGroupsIDs\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onOpenEditor: ICallback<CardsContainerCallbackSettings, void> = (\n    {\n        location,\n        history\n    }\n) => {\n    history.push({\n        pathname: Routs.cardsEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditItem: ICallback<CardsContainerCallbackSettings, number> = (\n    {\n        state,\n        location,\n        history\n    },\n    cardID = -1\n) => {\n    history.push({\n        pathname: Routs.cardsEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID,\n            cardID: cardID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onDeleteItem: ICallback<CardsContainerCallbackSettings, number> = (\n    {\n        setSubscription,\n        services\n    },\n    cardID = -1\n) => {\n    const {confirmDialogService, cardsListService} = services;\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            cardsListService.deleteSingleCardChannel.next(cardID);\n        }\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: false,\n            message: ''\n        })\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this card?'\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\n\nexport const onResetProgress: ICallback<CardsContainerCallbackSettings, number> = (\n    {\n        services,\n        location\n    },\n    cardID = -1\n) => {\n    services.cardsListService.resetCardProgressChannel.next(\n        {\n            cardID,\n            cardsGroupID: location.state.cardsGroupID\n        }\n    )\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsContainerCallbackSettings} from \"../types/CardsContainerCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onClickItem: ICallback<CardsContainerCallbackSettings, number> = (\n    {\n        state,\n        location,\n        history\n    },\n    cardID = -1\n) => {\n    history.push({\n        pathname: Routs.cardViewer.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID,\n            cardID\n        }\n    })\n}","import React, {FC, useCallback} from 'react';\n\nimport {CardsComponent} from './CardsComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {INavigationState} from '../../common/types/INavigationState';\nimport {IAppContext} from '../../common/types/IAppContext';\nimport {AppContext} from '../../../App';\nimport {ICardsContainer} from \"./types/ICardsContainer\";\nimport {CardsContainerState} from \"./types/CardsContainerState\";\nimport {onDeleteSelectedCards} from \"./ui-callbacks/onDeleteSelectedCards\";\nimport {onCopySelectedCards} from \"./ui-callbacks/onCopySelectedCards\";\nimport {onMovingSelectedCards} from \"./ui-callbacks/onMovingSelectedCards\";\nimport {onSelectItem} from \"./ui-callbacks/onSelectItem\";\nimport {onStartSelecting} from \"./ui-callbacks/onStartSelecting\";\nimport {onOpenRepeater} from \"./ui-callbacks/onOpenRepeater\";\nimport {onChangeSorting} from \"./ui-callbacks/onChangeSorting\";\nimport {onChangeSearchableText} from \"./ui-callbacks/onChangeSearchableText\";\nimport {onCardsChannel} from \"./channels-callbacks/onCardsChannel\";\nimport {onCardsIDsByGroupIDsChannel} from \"./channels-callbacks/onCardsIDsByGroupIDsChannel\";\nimport {onCardsIDsBySelectedItemsChannel} from \"./channels-callbacks/onCardsIDsBySelectedItemsChannel\";\nimport {initialState} from \"./Constants\";\nimport {onFilterChannel} from \"./channels-callbacks/onFilterChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onChangeFilter} from \"./channels-callbacks/onChangeFilter\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {onResetCardProgressChannel} from \"./channels-callbacks/onResetCardProgressChannel\";\nimport {onDeleteSingleCardChannel} from \"./channels-callbacks/onDeleteSingleCardChannel\";\nimport {onMovingCardsChannel} from \"./channels-callbacks/onMovingCardsChannel\";\nimport {onCopyCardsChannel} from \"./channels-callbacks/onCopyCardsChannel\";\nimport {onDeleteCardsChannel} from \"./channels-callbacks/onDeleteCardsChannel\";\nimport {onExistedGroupsIDsChannel} from \"./channels-callbacks/onExistedGroupsIDsChannel\";\nimport {onOpenEditor} from \"./ui-callbacks/onOpenEditor\";\nimport {onEditItem} from \"./ui-callbacks/onEditItem\";\nimport {onDeleteItem} from \"./ui-callbacks/onDeleteItem\";\nimport {onResetProgress} from \"./ui-callbacks/onResetProgress\";\nimport {onClickItem} from \"./ui-callbacks/onClickItem\";\n\nexport const CardsContainer: FC<ICardsContainer> = (services) => {\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardsContainerState, ICardsContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, context, services: {cardsListService}} = callbackSettings\n\n    useChannel(cardsListService.cardsChannel, callbackFactory(onCardsChannel));\n    useChannel(cardsListService.cardsIDsByGroupIDsChannel, callbackFactory(onCardsIDsByGroupIDsChannel));\n    useChannel(cardsListService.cardsIDsBySelectedItemsChannel, callbackFactory(onCardsIDsBySelectedItemsChannel));\n    useChannel(cardsListService.filterChannel, callbackFactory(onFilterChannel));\n    useChannel(cardsListService.changeFilterChannel, callbackFactory(onChangeFilter))\n    useChannel(cardsListService.resetCardProgressChannel, callbackFactory(onResetCardProgressChannel));\n    useChannel(cardsListService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel));\n    useChannel(cardsListService.movingCardsChannel, callbackFactory(onMovingCardsChannel));\n    useChannel(cardsListService.copyCardsChannel, callbackFactory(onCopyCardsChannel));\n    useChannel(cardsListService.deleteCardsChannel, callbackFactory(onDeleteCardsChannel))\n    useChannel(cardsListService.existedGroupsIDsChannel, callbackFactory(onExistedGroupsIDsChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const editItem = useCallback(callbackFactory(onEditItem), []);\n    const deleteItem = useCallback(callbackFactory(onDeleteItem), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const clickItem = useCallback(callbackFactory(onClickItem), []);\n    const changeSearchableText = useCallback(callbackFactory(onChangeSearchableText), [state.filter]);\n    const changeSorting = useCallback(callbackFactory(onChangeSorting), [state.filter]);\n\n    const startSelecting = callbackFactory(onStartSelecting);\n    const multiSelectingDependencies = [state.isEnabledSelecting, state.selectedItems]\n    const openRepeater = useCallback(callbackFactory(onOpenRepeater), multiSelectingDependencies);\n    const selectItem = useCallback(callbackFactory(onSelectItem), multiSelectingDependencies);\n    const movingSelectedCards = useCallback(callbackFactory(onMovingSelectedCards), multiSelectingDependencies);\n    const copySelectedCards = useCallback(callbackFactory(onCopySelectedCards), multiSelectingDependencies);\n    const deleteSelectedCards = useCallback(callbackFactory(onDeleteSelectedCards), multiSelectingDependencies)\n\n    return <CardsComponent\n        filter={state.filter}\n        onChangeSorting={changeSorting}\n        onChangeSearchableText={changeSearchableText}\n        cards={state.cards}\n        onOpenEditor={openEditor}\n        onEditItem={editItem}\n        onDeleteItem={deleteItem}\n        onResetProgress={resetProgress}\n        onClickItem={clickItem}\n        width={context.width}\n        height={context.height}\n        onOpenRepeater={openRepeater}\n        onStartSelecting={startSelecting}\n        isEnabledSelecting={state.isEnabledSelecting}\n        onSelectItem={selectItem}\n        selectedItems={state.selectedItems}\n        onMovingSelectedCards={movingSelectedCards}\n        onDeleteSelectedCards={deleteSelectedCards}\n        onCopySelectedCards={copySelectedCards}\n    />\n};\n","import React, {FC} from 'react';\n\nimport {Button} from '@mui/material';\nimport {IRepeatingStatisticComponent} from \"./types/IRepeatingStatisticComponent\";\n\nexport const StatisticComponent: FC<IRepeatingStatisticComponent> = ({statistic}) => {\n\n    return <div>\n        <Button size=\"small\">\n            <span style={{color: \"red\"}}>To Do: {statistic.todo}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"orange\"}}>In progress: {statistic.inProgress}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"green\"}}>Completed: {statistic.done}</span>\n        </Button>\n    </div>\n};\n","import React, {FC} from 'react';\nimport {Button} from '@mui/material';\n\nimport {IAllCardsRepeatedComponent} from \"./types/IAllCardsRepeatedComponent\";\n\nexport const AllCardsRepeatedComponent: FC<IAllCardsRepeatedComponent> = ({onBackClick}) => {\n    return <>\n        <span>No cards for repeating</span>\n        <Button size=\"small\" color=\"primary\" onClick={onBackClick}>\n            Go back\n        </Button>\n    </>\n};\n","import React, {FC} from 'react';\nimport {IconButton} from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport {Check, Edit} from '@mui/icons-material';\nimport {ICardsRepeaterHeaderComponent} from \"./types/ICardsRepeaterHeaderComponent\";\n\nexport const CardsHeaderComponent: FC<ICardsRepeaterHeaderComponent> = (\n    {\n        isQuestionSide,\n        onSwitchEditing,\n        isEditable\n    }\n) => {\n    return <div className=\"cards-repeater_title\">\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {isQuestionSide ? 'Question' : 'Answer'}\n        </Typography>\n        <IconButton color=\"inherit\" onClick={onSwitchEditing}>\n            {isEditable ? <Check/> : <Edit/>}\n        </IconButton>\n    </div>\n};\n","import React, {FC} from \"react\";\nimport {List} from \"@mui/material\";\nimport Typography from \"@mui/material/Typography\";\nimport {ILongTextViewerComponent} from \"./types/ILongTextViewerComponent\";\nimport './LongTextViewerComponent.css'\n\nexport const LongTextViewerComponent: FC<ILongTextViewerComponent> = (\n    {\n        viewHeight,\n        text,\n        onClickText = () => {}\n    }\n) => {\n    return <Typography color=\"textSecondary\" gutterBottom onClick={onClickText}\n                       className=\"long-text-viewer\"\n                       style={{height: viewHeight}}>\n        <List style={{paddingTop: 0}}>\n            {text}\n        </List>\n    </Typography>\n}","import {ChangeEvent, default as React, FC} from 'react';\nimport {TextField} from '@mui/material';\n\nimport './TextEditorComponent.css'\nimport {ITextEditorComponent} from \"./types/ITextEditorComponent\";\n\nexport const TextEditorComponent: FC<ITextEditorComponent> = ({onChangeText, changeableText, label}) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeText(event.target.value);\n    };\n\n    return <TextField\n        className=\"text-editor\"\n        required\n        id=\"outlined-required\"\n        label={label || \"\"}\n        multiline\n        onChange={onChange}\n        value={changeableText}\n        variant=\"filled\"\n    />\n};\n","import React, {FC} from \"react\";\n\nimport {TextEditorComponent} from \"../text-editor/TextEditorComponent\";\nimport {ILongTextEditorComponent} from \"./types/ILongTextEditorComponent\";\nimport './LongTextEditorComponent.css'\n\nexport const LongTextEditorComponent: FC<ILongTextEditorComponent> = (\n    {\n        viewHeight,\n        text,\n        onChangeText\n    }\n) => {\n    return <div\n        className=\"long-text-editor\"\n        style={{\n            height: viewHeight\n        }}\n    >\n        <TextEditorComponent onChangeText={onChangeText} changeableText={text}/>\n    </div>\n}","import React, {FC} from 'react';\nimport {Button, CardActions} from '@mui/material';\n\nimport {IDeleteButtonFooterComponent} from \"./types/IDeleteButtonFooterComponent\";\n\nexport const DeleteButtonFooterComponent: FC<IDeleteButtonFooterComponent> = ({onClick}) => {\n\n    return <>\n        {\n            <CardActions className=\"cards-repeater_buttons-container\" style={{height: 10}}>\n                <Button size=\"small\" color=\"primary\" onClick={() => onClick()}>\n                    Remove\n                </Button>\n            </CardActions>\n        }\n    </>\n};\n","import React, {FC} from 'react';\n\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\nimport {LongTextViewerComponent} from \"../long-text-viewer/LongTextViewerComponent\";\nimport {IQuestionCard} from \"./types/IQuestionCard\";\nimport {LongTextEditorComponent} from \"../long-text-editor/LongTextEditorComponent\";\nimport {DeleteButtonFooterComponent} from \"../delete-button-footer/DeleteButtonFooterComponent\";\n\nexport const QuestionCardComponent: FC<IQuestionCard> = (\n    {\n        card,\n        onClickCard,\n        cardHeight,\n        isEditable,\n        onDeleteCard,\n        onChangeQuestion\n    }\n) => {\n\n    const question = card ? card.question : '';\n\n    return <Card>\n        <CardContent onClick={onClickCard} style={{height: cardHeight}}>\n            {\n                isEditable ?\n                    <>\n                        <LongTextEditorComponent\n                            text={question}\n                            viewHeight={cardHeight}\n                            onChangeText={onChangeQuestion}\n                        />\n                        <DeleteButtonFooterComponent onClick={onDeleteCard}/>\n                    </>\n                    :\n                    <LongTextViewerComponent viewHeight={cardHeight} text={question}/>\n            }\n        </CardContent>\n    </Card>\n};\n","import React, {FC} from 'react';\nimport {Button, CardActions} from '@mui/material';\n\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\nimport {IAnswerCardFooterComponent} from \"./types/IAnswerCardFooterComponent\";\n\nexport const AnswerCardFooterComponent: FC<IAnswerCardFooterComponent> = ({card, onClickYesNoButton}) => {\n\n    return <>\n        {\n            card && card.rangeOfKnowledge !== IRangeOfKnowledge.DONE ?\n                <CardActions className=\"cards-repeater_buttons-container\" style={{height: 10}}>\n                    <Button size=\"small\" color=\"primary\" onClick={() => onClickYesNoButton(true)}>\n                        Yes\n                    </Button>\n                    <Button size=\"small\" color=\"primary\" onClick={() => onClickYesNoButton(false)}>\n                        No\n                    </Button>\n                </CardActions> :\n                <div>Repeated</div>\n        }\n    </>\n};\n","import React, {FC} from 'react';\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\n\nimport {AnswerCardFooterComponent} from '../answer-card-footer/AnswerCardFooterComponent';\nimport {IAnswerCardComponent} from \"./types/IAnswerCardComponent\";\nimport {LongTextViewerComponent} from \"../long-text-viewer/LongTextViewerComponent\";\nimport {LongTextEditorComponent} from \"../long-text-editor/LongTextEditorComponent\";\nimport {DeleteButtonFooterComponent} from \"../delete-button-footer/DeleteButtonFooterComponent\";\n\nexport const AnswerCardComponent: FC<IAnswerCardComponent> = (\n    {\n        card,\n        cardHeight,\n        onClickText,\n        onClickYesNoButton,\n        isEditable,\n        onChangeAnswer,\n        onDeleteCard\n    }\n) => {\n\n    const getText = () => {\n        return card ? card.answer : '';\n    };\n\n    return <Card className=\"cards-repeater\">\n        <CardContent style={{height: cardHeight}}>\n            {\n                isEditable ?\n                    <>\n                        <LongTextEditorComponent\n                            text={getText()}\n                            viewHeight={cardHeight}\n                            onChangeText={onChangeAnswer}\n                        />\n                        <DeleteButtonFooterComponent onClick={onDeleteCard}/>\n                    </>\n                    :\n                    <>\n                        <LongTextViewerComponent\n                            viewHeight={cardHeight}\n                            text={getText()}\n                            onClickText={onClickText}\n                        />\n                        <AnswerCardFooterComponent onClickYesNoButton={onClickYesNoButton} card={card}/>\n                    </>\n            }\n        </CardContent>\n    </Card>\n};\n","import React, {FC} from \"react\";\n\nimport {CardsHeaderComponent} from \"../cards-header/CardsHeaderComponent\";\nimport {QuestionCardComponent} from \"../question-card/QuestionCardComponent\";\nimport {AnswerCardComponent} from \"../answer-card/AnswerCardComponent\";\nimport {ICardsContentComponent} from \"./types/ICardsContentComponent\";\n\nexport const CardsContentComponent: FC<ICardsContentComponent> = (\n    {\n        isQuestionSide,\n        isEditable,\n        onSwitchEditing,\n        card,\n        cardHeight,\n        onClickCard,\n        onChangeAnswer,\n        onChangeQuestion,\n        onDeleteCard,\n        onClickYesNoButton\n    }\n) => {\n    return <>\n        <CardsHeaderComponent\n            isQuestionSide={isQuestionSide}\n            isEditable={isEditable}\n            onSwitchEditing={onSwitchEditing}\n        />\n        {\n            isQuestionSide ?\n                <QuestionCardComponent\n                    card={card}\n                    onClickCard={onClickCard}\n                    cardHeight={cardHeight}\n                    isEditable={isEditable}\n                    onChangeQuestion={onChangeQuestion}\n                    onDeleteCard={onDeleteCard}\n                /> :\n                <AnswerCardComponent\n                    card={card}\n                    onClickText={onClickCard}\n                    cardHeight={cardHeight}\n                    onClickYesNoButton={onClickYesNoButton}\n                    onChangeAnswer={onChangeAnswer}\n                    isEditable={isEditable}\n                    onDeleteCard={onDeleteCard}\n                />\n        }\n    </>\n}","import React, {FC} from 'react';\n\nimport {StatisticComponent} from './elements/statistic/StatisticComponent';\nimport \"./CardsRepeaterComponent.css\"\nimport {AllCardsRepeatedComponent} from './elements/all-cards-repeated/AllCardsRepeatedComponent';\nimport {CardsContentComponent} from \"../../common/elements/cards-content/CardsContentComponent\";\nimport {ICardsRepeaterComponent} from \"./types/ICardsRepeaterComponent\";\n\nexport const CardsRepeaterComponent: FC<ICardsRepeaterComponent> = (\n    {\n        card,\n        cardHeight,\n        isQuestionSide,\n        onClickCard,\n        onClickYesNoButton,\n        statistic,\n        onBackClick,\n        onSwitchEditing,\n        isEditable,\n        onChangeAnswer,\n        onChangeQuestion,\n        onDeleteCard\n    }\n) => {\n\n        return card && card.id !== -1 ?\n            <div className=\"cards-repeater\">\n                    <StatisticComponent statistic={statistic}/>\n                    <CardsContentComponent\n                        card={card}\n                        onDeleteCard={onDeleteCard}\n                        onClickYesNoButton={onClickYesNoButton}\n                        isQuestionSide={isQuestionSide}\n                        onClickCard={onClickCard}\n                        cardHeight={cardHeight}\n                        onSwitchEditing={onSwitchEditing}\n                        isEditable={isEditable}\n                        onChangeQuestion={onChangeQuestion}\n                        onChangeAnswer={onChangeAnswer}\n            />\n        </div> :\n        <AllCardsRepeatedComponent onBackClick={onBackClick}/>\n};\n","import {IRangeOfKnowledge} from \"../types/IRangeOfKnowledge\";\n\nexport const initDefaultCard = () => {\n    return {\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        answer: '',\n        question: '',\n        dateRepeating: 0,\n        id: new Date().getTime()\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onDeleteCard: ICallback<CardRepeaterCallbackSettings, void> = (\n    settings\n) => {\n    const {services, state, setSubscription} = settings;\n\n    const {confirmDialogService, cardsRepeaterService} = services;\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            cardsRepeaterService.deleteSingleCardChannel.next(state.card.id);\n        }\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: false,\n            message: ''\n        })\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?'\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardRepeaterCallbackSettings, ICardsGroup[]> = (\n    {services, location}\n) => {\n    services.cardsRepeaterService.cardChannel.next(\n        location.state ? location.state.cardsIDsForRepeating : []\n    )\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onCardGroupNameChannel: ICallback<CardRepeaterCallbackSettings, string> = (\n    {services},\n    label\n) => {\n    services.toolbarService.toolbarExternalLabelChannel.next(label as string);\n}","import {IRangeOfKnowledge} from \"../../common/types/IRangeOfKnowledge\";\nimport {defaultStatisticValue} from \"../../common/Constants\";\n\nexport const initialState = {\n    card: {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    },\n    isQuestionSide: true,\n    isEditable: false,\n    statistic: defaultStatisticValue\n}","import React, {FC, useCallback, useContext} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ICard} from '../../common/types/ICard';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {CardsRepeaterComponent} from './CardsRepeaterComponent';\nimport {Routs} from '../../common/Routs';\nimport {IRepeatingArgs} from '../../common/types/IRepeatingArgs';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {IStatistic} from '../../common/types/IStatistic';\nimport {INavigationState} from '../../common/types/INavigationState';\nimport {AppContext} from '../../../App';\nimport {IAppContext} from '../../common/types/IAppContext';\nimport {initDefaultCard} from \"../../common/logic/initDefaultCard\";\nimport {IRangeOfKnowledge} from \"../../common/types/IRangeOfKnowledge\";\nimport {ICardRepeaterContainer} from \"./types/ICardRepeaterContainer\";\nimport {CardRepeaterContainerState} from \"./types/CardRepeaterContainerState\";\nimport {onDeleteCard} from \"./ui-callbacks/onDeleteCard\";\nimport {onDeleteSingleCardChannel} from \"./channels-callbacks/onDeleteSingleCardChannel\";\nimport {onCardGroupNameChannel} from \"./channels-callbacks/onCardGroupNameChannel\";\nimport {initialState} from \"./Constants\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\n\nexport const CardRepeaterContainer: FC<ICardRepeaterContainer> = (\n    services\n) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardRepeaterContainerState, ICardRepeaterContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {\n        state, setState, location, history, services: {\n            cardsRepeaterService, cardsEditorService\n        }\n    } = callbackSettings\n\n    useChannel(cardsRepeaterService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel))\n    useChannel(cardsRepeaterService.cardGroupNameChannel, callbackFactory(onCardGroupNameChannel))\n\n    useChannel<number[], ICard>(cardsRepeaterService.cardChannel, (card: ICard) => {\n        cardsRepeaterService.cardGroupNameChannel.next(card.id)\n        setState((prevState) => {\n            return {\n                ...prevState,\n                card: card,\n                isQuestionSide: true,\n                isEditable: false\n            }\n        });\n        cardsRepeaterService.statisticChannel.next('');\n    });\n\n    useChannel<{ card: ICard, cardsGroupID: number }, ICard>(cardsEditorService.cardEditingChannel, (card: ICard) => {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                card: card\n            }\n        });\n    });\n\n    useChannel<string, IStatistic>(cardsRepeaterService.statisticChannel, (statistic: IStatistic) => {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                statistic\n            }\n        })\n    });\n\n    useChannel<IRepeatingArgs, ICardsGroup[]>(cardsRepeaterService.repeatingResultChannel, () => {\n        cardsRepeaterService.cardChannel.next(location.state.cardsIDsForRepeating);\n    });\n\n    useConstructor(() => {\n        if (location.state) {\n            cardsRepeaterService.cardChannel.next(location.state.cardsIDsForRepeating);\n        }\n        cardsRepeaterService.statisticChannel.next('');\n    });\n\n    const value = useContext<IAppContext>(AppContext);\n\n    const onClick = (isKnown: boolean) => {\n\n        if (state.card) {\n            cardsRepeaterService.repeatingResultChannel.next({\n                isKnown: isKnown,\n                cardID: state.card.id,\n                cardsGroupID: location.state.cardsGroupID\n            });\n        } else {\n            setState((prevState) => {\n                return {\n                    ...prevState,\n                    card: {\n                        id: -1,\n                        question: '',\n                        answer: '',\n                        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n                        dateRepeating: 0\n                    },\n                    isQuestionSide: false,\n                    isEditable: false\n                }\n            });\n        }\n    };\n\n    const onClickCard = () => {\n        if (!state.isEditable) {\n            setState((prevState) => {\n                return {\n                    ...prevState,\n                    isQuestionSide: !prevState.isQuestionSide\n                }\n            })\n        }\n    };\n\n    const onBackClick = () => {\n        history.replace(Routs.cardsGroups.path);\n    };\n\n    const onSwitchEditing = () => {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                isEditable: !prevState.isEditable\n            }\n        });\n\n        if (state.isEditable) {\n            cardsEditorService.cardEditingChannel.next({\n                card: state.card || initDefaultCard(),\n                cardsGroupID: location.state.cardsGroupID\n            })\n        }\n    };\n\n    const onChangeQuestion = (question: string) => {\n        if (state.card) {\n            const editableCard = {\n                ...state.card,\n                question\n            };\n\n            setState((prevState) => {\n                return {...prevState, card: editableCard}\n            });\n        }\n    };\n\n    const onChangeAnswer = (answer: string) => {\n        if (state.card) {\n            const editableCard = {\n                ...state.card,\n                answer\n            };\n\n            setState((prevState) => {\n                return {...prevState, card: editableCard}\n            });\n        }\n    };\n\n    const deleteCard = useCallback(callbackFactory(onDeleteCard), [state.card])\n\n    return <CardsRepeaterComponent\n        onDeleteCard={deleteCard}\n        cardHeight={value.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={onClickCard}\n        onClickYesNoButton={onClick}\n        card={state.card}\n        statistic={state.statistic}\n        onBackClick={onBackClick}\n        onSwitchEditing={onSwitchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={onChangeQuestion}\n        onChangeAnswer={onChangeAnswer}\n    />\n};\n","import * as React from 'react';\nimport {FC, useRef} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {Button} from '@mui/material';\nimport {useUnsubscribe} from '../../../MyTools/react-hooks/useUnsubscribe';\nimport {ILocalBackupsContainer} from \"./types/ILocalBackupsContainer\";\n\nexport const LocalBackupsContainer: FC<ILocalBackupsContainer> = ({localBackupsService, confirmDialogService, spinnerService}) => {\n\n    const fileBuffer = useRef(null);\n\n    useChannel(\n        localBackupsService.localBackupChannel\n    );\n\n    useChannel(\n        localBackupsService.loadBackupChannel, () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n        }\n    );\n\n    const { setSubscription } = useUnsubscribe();\n\n    const handleFileSelect = (event: any) => {\n        const file = event.target.files[0];\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = (readerEvent: any) => {\n            const games: string = readerEvent.target.result;\n\n            const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n                if (isConfirm) {\n                    spinnerService.spinnerCounterChannel.next(1);\n                    localBackupsService.loadBackupChannel.next(games);\n                }\n\n                confirmDialogService.openDialogChannel.next({\n                    isOpen: false,\n                    message: ''\n                })\n            });\n\n            setSubscription(subscription);\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: true,\n                message: 'Do you want to load this backup, your current changes could be removed?'\n            });\n        };\n        reader.readAsText(file);\n    };\n\n    return <>\n        <input type=\"file\" onChange={handleFileSelect}/>\n        <a ref={fileBuffer}></a>\n        <Button size=\"small\" onClick={() => localBackupsService.localBackupChannel.next()}>\n            Save\n        </Button>\n    </>\n};\n","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {Button, TextField} from '@mui/material';\n\nimport './CardsGroupsEditorComponent.css'\nimport {ICardsGroupsEditorComponent} from \"./types/ICardsGroupsEditorComponent\";\n\nexport const CardsGroupsEditorComponent: FC<ICardsGroupsEditorComponent> = (\n    {groupName, onChangeGroupName, onSaveGroup}\n) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeGroupName(event.target.value);\n    };\n\n    return <div className=\"group-editor\">\n        <TextField\n            className=\"group-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Group name\"\n            onChange={onChange}\n            value={groupName}\n            variant=\"filled\"\n        />\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveGroup()}>\n            Save\n        </Button>\n    </div>\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onChangeGroupName: ICallback<ICardsGroupsEditorCallbackSettings, string> = (\n    {setState, state},\n    groupName = ''\n) => {\n    setState(() => {\n        return {\n            cardsGroup: {\n                ...state.cardsGroup,\n                nameCardsGroup: groupName\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onSaveGroup: ICallback<ICardsGroupsEditorCallbackSettings, void> = (\n    {state, services}\n) => {\n    services.cardsGroupsEditorService.groupEditingChannel.next(state.cardsGroup);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onConstructor: ICallback<ICardsGroupsEditorCallbackSettings, void> = (\n    {services, location}\n) => {\n    let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n    services.cardsGroupsEditorService.groupChannel.next(cardsGroupID)\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupEditingChannel: ICallback<ICardsGroupsEditorCallbackSettings, ICardsGroup[]> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {defaultCardsGroupValue} from \"../../../common/Constants\";\n\nexport const onGroupChannel: ICallback<ICardsGroupsEditorCallbackSettings, ICardsGroup> = (\n    {setState},\n    cardsGroup = defaultCardsGroupValue\n) => {\n    setState((prevState) => {\n        return {\n            cardsGroup\n        }\n    })\n}","import {defaultCardsGroupValue} from \"../../common/Constants\";\n\nexport const initialState = {\n    cardsGroup: defaultCardsGroupValue\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {CardsGroupsEditorComponent} from './CardsGroupsEditorComponent';\nimport {INavigationState} from '../../common/types/INavigationState';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {ICardsGroupsEditorContainer} from \"./types/ICardsGroupsEditorContainer\";\nimport {CardsGroupsEditorState} from \"./types/CardsGroupsEditorState\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {IAppContext} from \"../../common/types/IAppContext\";\nimport {AppContext} from \"../../../App\";\nimport {onChangeGroupName} from \"./ui-callbacks/onChangeGroupName\";\nimport {onSaveGroup} from \"./ui-callbacks/onSaveGroup\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onGroupEditingChannel} from \"./channels-callbacks/onGroupEditingChannel\";\nimport {onGroupChannel} from \"./channels-callbacks/onGroupChannel\";\nimport {initialState} from './Constants'\n\nexport const CardsGroupsEditorContainer: FC<ICardsGroupsEditorContainer> = (\n    services\n) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardsGroupsEditorState, ICardsGroupsEditorContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {cardsGroupsEditorService}} = callbackSettings\n\n    useChannel(cardsGroupsEditorService.groupEditingChannel, callbackFactory(onGroupEditingChannel));\n    useChannel(cardsGroupsEditorService.groupChannel, callbackFactory(onGroupChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeGroupName = useCallback(callbackFactory(onChangeGroupName), [state.cardsGroup]);\n    const saveGroup = callbackFactory(onSaveGroup);\n\n    return <CardsGroupsEditorComponent\n        groupName={state.cardsGroup.nameCardsGroup}\n        onChangeGroupName={changeGroupName}\n        onSaveGroup={saveGroup}\n    />\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {Button, MenuItem, Select, SelectChangeEvent} from '@mui/material';\n\nimport './CardsEditorComponent.css'\nimport {ISimplifiedCardsGroup} from '../../common/types/ISimplifiedCardsGroup';\nimport {TextEditorComponent} from '../../common/elements/text-editor/TextEditorComponent';\nimport {ICardsEditorComponent} from \"./types/ICardsEditorComponent\";\n\nexport const CardsEditorComponent: FC<ICardsEditorComponent> = (\n    {\n        answer,\n        question,\n        onChangeAnswer,\n        onChangeQuestion,\n        onSaveCard,\n        cardsGroups,\n        currentCardsGroup,\n        onChangeCardsGroup\n    }\n) => {\n\n    const changeGroup = (event: SelectChangeEvent) => {\n        onChangeCardsGroup(Number(event.target.value));\n    };\n\n    return <div className=\"cards-editor\">\n        <TextEditorComponent onChangeText={onChangeQuestion} changeableText={question} label=\"Question\"/>\n        <TextEditorComponent onChangeText={onChangeAnswer} changeableText={answer} label=\"Answer\"/>\n        <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            className=\"cards-editor_text\"\n            value={currentCardsGroup.id.toString()}\n            label={currentCardsGroup.nameCardsGroup}\n            onChange={changeGroup}\n            autoWidth\n        >\n            {cardsGroups.map((cardsGroup: ISimplifiedCardsGroup) => (\n                <MenuItem\n                    key={cardsGroup.id}\n                    value={cardsGroup.id.toString()}\n                >\n                    {cardsGroup.nameCardsGroup}\n                </MenuItem>\n            ))}\n        </Select>\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveCard()}>\n            Save\n        </Button>\n    </div>\n};\n","import {initDefaultCard} from \"../../common/logic/initDefaultCard\";\n\nexport const initialState = {\n    card: initDefaultCard(),\n    currentCardsGroup: {\n        id: 0,\n        nameCardsGroup: ''\n    },\n    cardsGroups: []\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onCardEditingChannel: ICallback<CardsEditorCallbackSettings, ICard> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\nimport {ISimplifiedCardsGroup} from \"../../../common/types/ISimplifiedCardsGroup\";\nimport {defaultSimplifiedGroupValue} from \"../../../common/Constants\";\n\nexport const onSimplifiedCardsGroupsChannel: ICallback<CardsEditorCallbackSettings, {\n    currentCardsGroup: ISimplifiedCardsGroup; cardsGroups: ISimplifiedCardsGroup[]\n}> = (\n    {history, setState, state},\n    args = {\n        currentCardsGroup: defaultSimplifiedGroupValue,\n        cardsGroups: []\n    }\n) => {\n    if (args.currentCardsGroup) {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                ...args\n            }\n        })\n    } else {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                ...args,\n                currentCardsGroup: state.currentCardsGroup\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCardValue} from \"../../../common/Constants\";\n\nexport const onCardChannel: ICallback<CardsEditorCallbackSettings, ICard> = (\n    {history, setState, state},\n    card = defaultCardValue\n) => {\n    if (card) {\n        setState(() => {\n            return {\n                ...state,\n                card\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onConstructor: ICallback<CardsEditorCallbackSettings, void> = (\n    {location, services}\n) => {\n    let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n    let cardID = location.state ? location.state.cardID : -1;\n    services.cardsEditorService.cardChannel.next({cardID, cardsGroupID});\n    services.cardsEditorService.simplifiedCardsGroupsChannel.next(cardsGroupID);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardsEditorCallbackSettings, string> = (\n    {history, setState, state},\n    question = ''\n) => {\n    setState((prevState) => {\n        return {\n            card: {\n                ...prevState.card,\n                question\n            },\n            currentCardsGroup: prevState.currentCardsGroup,\n            cardsGroups: prevState.cardsGroups\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardsEditorCallbackSettings, string> = (\n    {history, setState, state},\n    answer = ''\n) => {\n    setState((prevState) => {\n        return {\n            card: {\n                ...prevState.card,\n                answer\n            },\n            currentCardsGroup: prevState.currentCardsGroup,\n            cardsGroups: prevState.cardsGroups\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onChangeCardsGroup: ICallback<CardsEditorCallbackSettings, number> = (\n    {services},\n    cardsGroupID = -1\n) => {\n    services.cardsEditorService.simplifiedCardsGroupsChannel.next(cardsGroupID);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onSaveCard: ICallback<CardsEditorCallbackSettings, void> = (\n    {services, state}\n) => {\n    services.cardsEditorService.cardEditingChannel.next({card: state.card, cardsGroupID: state.currentCardsGroup.id});\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {CardsEditorComponent} from './CardsEditorComponent';\nimport {INavigationState} from '../../common/types/INavigationState';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {ICardsEditorContainer} from \"./types/ICardsEditorContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {IAppContext} from \"../../common/types/IAppContext\";\nimport {AppContext} from \"../../../App\";\nimport {initialState} from \"./Constants\";\nimport {CardsEditorState} from \"./types/CardsEditorState\";\nimport {onCardEditingChannel} from \"./channels-callbacks/onCardEditingChannel\";\nimport {onSimplifiedCardsGroupsChannel} from \"./channels-callbacks/onSimplifiedCardsGroupsChannel\";\nimport {onCardChannel} from \"./channels-callbacks/onCardChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onChangeQuestion} from \"./ui-callbacks/onChangeQuestion\";\nimport {onChangeAnswer} from \"./ui-callbacks/onChangeAnswer\";\nimport {onChangeCardsGroup} from \"./ui-callbacks/onChangeCardsGroup\";\nimport {onSaveCard} from \"./ui-callbacks/onSaveCard\";\n\nexport const CardsEditorContainer: FC<ICardsEditorContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardsEditorState, ICardsEditorContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {cardsEditorService}} = callbackSettings\n\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardsEditorService.simplifiedCardsGroupsChannel, callbackFactory(onSimplifiedCardsGroupsChannel));\n    useChannel(cardsEditorService.cardChannel, callbackFactory(onCardChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeQuestion = callbackFactory(onChangeQuestion);\n    const changeAnswer = callbackFactory(onChangeAnswer);\n    const changeCardsGroup = useCallback(callbackFactory(onChangeCardsGroup), []);\n    const saveCard = useCallback(callbackFactory(onSaveCard), []);\n\n    return <CardsEditorComponent\n        question={state.card.question}\n        answer={state.card.answer}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n        onSaveCard={saveCard}\n        currentCardsGroup={state.currentCardsGroup}\n        cardsGroups={state.cardsGroups}\n        onChangeCardsGroup={changeCardsGroup}\n    />\n};\n","import * as React from \"react\";\nimport {ChangeEvent, FC} from \"react\";\nimport {FormControlLabel, Switch} from \"@mui/material\";\nimport {ISettingsSwitcherComponent} from \"./types/ISettingsSwitcherComponent\";\n\nexport const SettingsSwitcherComponent: FC<ISettingsSwitcherComponent> = (\n    {\n        checked,\n        label,\n        onChange\n    }\n) => {\n\n    const change = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.checked)\n    };\n\n    return <FormControlLabel\n        control={\n            <Switch\n                checked={checked}\n                onChange={change}\n            />\n        }\n        label={label}\n    />\n}","import * as React from \"react\";\nimport {ChangeEvent, FC} from \"react\";\n\nimport {ISettingsNumberInputComponent} from \"./types/ISettingsNumberInputComponent\";\nimport {FormControlLabel, Input} from \"@mui/material\";\n\nexport const SettingsNumberInputComponent: FC<ISettingsNumberInputComponent> = (\n    {\n        value,\n        label,\n        onChange,\n    }\n) => {\n\n    const change = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange(Number(event.target.value))\n    };\n\n    return <FormControlLabel\n        control={\n            <Input\n                type=\"number\"\n                value={value}\n                onChange={change}\n            />\n        }\n        label={label}\n    />\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {FormGroup} from '@mui/material';\n\nimport {ISettingsComponent} from \"./types/ISettingsComponent\";\nimport {SettingsSwitcherComponent} from \"./elements/settings-switcher/SettingsSwitcherComponent\";\nimport {SettingsNumberInputComponent} from \"./elements/settings-number-input/SettingsNumberInputComponent\";\nimport './SettingsComponent.css'\n\nexport const SettingsComponent: FC<ISettingsComponent> = (\n    {\n        settings,\n        onChangeAlgorithm,\n        onChangeAutoObsolete,\n        onChangeTimeInDone,\n        onChangeTimeInProgress\n    }\n) => {\n\n    return <FormGroup className=\"settings-form\">\n        <SettingsSwitcherComponent\n            checked={settings.isRandomRepeating}\n            label=\"Random repeating algorithm\"\n            onChange={onChangeAlgorithm}\n        />\n        <SettingsSwitcherComponent\n            checked={settings.autoObsolete?.isEnable}\n            label=\"Enable auto obsolete\"\n            onChange={onChangeAutoObsolete}\n        />\n        <SettingsNumberInputComponent\n            value={settings.autoObsolete?.timeInDone}\n            onChange={onChangeTimeInDone}\n            label=\"How long cards exist in done status (days)\"\n        />\n        <SettingsNumberInputComponent\n            value={settings.autoObsolete?.timeInProgress}\n            onChange={onChangeTimeInProgress}\n            label=\"How long cards exist in progress status (days)\"\n        />\n    </FormGroup>\n};\n","import * as React from 'react';\nimport {FC, useState} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {SettingsComponent} from './SettingsComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {ISettings} from '../../common/types/ISettings';\nimport {ISettingsContainer} from \"./types/ISettingsContainer\";\n\nexport const SettingsContainer: FC<ISettingsContainer> = ({settingsService}) => {\n\n    const [state, setState] = useState<ISettings>({\n        isRandomRepeating: false,\n        autoObsolete: {\n            isEnable: false,\n            timeInDone: 7,\n            timeInProgress: 7\n        }\n    });\n\n    useChannel<ISettings, ISettings>(\n        settingsService.changeSettingsChannel,\n        () => {\n            settingsService.settingsChannel.next('');\n        }\n    );\n\n    useChannel<string, ISettings>(\n        settingsService.settingsChannel,\n        (settings: ISettings) => {\n            setState((prevState) => {\n                return {...prevState, ...settings}\n            });\n        }\n    );\n\n    useConstructor(() => {\n        settingsService.settingsChannel.next('');\n    });\n\n    const onChangeSettings = (settings: ISettings) => {\n        settingsService.changeSettingsChannel.next(settings)\n    };\n    const onChangeAlgorithm = (isRandomRepeating: boolean) => {\n        settingsService.changeSettingsChannel.next({\n            ...state,\n            isRandomRepeating\n        })\n    }\n\n    const onChangeAutoObsolete = (isEnable: boolean) => {\n        settingsService.changeSettingsChannel.next({\n            ...state,\n            autoObsolete: {\n                ...state.autoObsolete,\n                isEnable\n            }\n        })\n    }\n\n    const onChangeTimeInDone = (timeInDone: number) => {\n        settingsService.changeSettingsChannel.next({\n            ...state,\n            autoObsolete: {\n                ...state.autoObsolete,\n                timeInDone\n            }\n        })\n    }\n\n    const onChangeTimeInProgress = (timeInProgress: number) => {\n        settingsService.changeSettingsChannel.next({\n            ...state,\n            autoObsolete: {\n                ...state.autoObsolete,\n                timeInProgress\n            }\n        })\n    }\n\n    return <SettingsComponent\n        settings={state}\n        onChangeAlgorithm={onChangeAlgorithm}\n        onChangeAutoObsolete={onChangeAutoObsolete}\n        onChangeTimeInDone={onChangeTimeInDone}\n        onChangeTimeInProgress={onChangeTimeInProgress}\n    />\n};\n","import React, {FC} from \"react\";\n\nimport {CardsContentComponent} from \"../../common/elements/cards-content/CardsContentComponent\";\nimport {ICardsContentComponent} from \"../../common/elements/cards-content/types/ICardsContentComponent\";\n\nexport const CardViewerComponent: FC<ICardsContentComponent> = (props) => {\n\n    return <div className=\"cards-viewer\">\n        {\n            props.card.id === -1 ? <div>No card for viewing</div> : <CardsContentComponent {...props}/>\n        }\n    </div>\n};","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onDeleteCard: ICallback<CardViewerCallbackSettings, void> = (\n    settings\n) => {\n    const {services, state, setSubscription} = settings;\n\n    const {confirmDialogService, cardViewerService} = services;\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardViewerService.deleteSingleCardChannel.next(state.card.id);\n        }\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: false,\n            message: ''\n        })\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?'\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardViewerCallbackSettings, ICardsGroup[]> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onCardGroupNameChannel: ICallback<CardViewerCallbackSettings, string> = (\n    {services},\n    label\n) => {\n    services.toolbarService.toolbarExternalLabelChannel.next(label as string);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardViewerCallbackSettings, string> = (\n    {state, setState},\n    args = ''\n) => {\n    if (state.card) {\n        const editableCard = {\n            ...state.card,\n            answer: args\n        };\n\n        setState((prevState) => {\n            return {...prevState, card: editableCard}\n        });\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardViewerCallbackSettings, string> = (\n    {state, setState},\n    args = ''\n) => {\n    if (state.card) {\n        const editableCard = {\n            ...state.card,\n            question: args\n        };\n\n        setState((prevState) => {\n            return {...prevState, card: editableCard}\n        });\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const onSwitchEditing: ICallback<CardViewerCallbackSettings, void> = (\n    {\n        state,\n        setState,\n        services,\n        location\n    }\n) => {\n    setState(() => {\n        return {\n            ...state,\n            isEditable: !state.isEditable\n        }\n    });\n\n    if (state.isEditable) {\n        services.cardsEditorService.cardEditingChannel.next({\n            card: state.card || initDefaultCard(),\n            cardsGroupID: location.state.cardsGroupID\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {defaultCardValue} from \"../../../common/Constants\";\n\nexport const onClickYesNoButton: ICallback<CardViewerCallbackSettings, boolean> = (\n    {\n        state,\n        setState,\n        services,\n        location\n    },\n    args = false\n) => {\n    if (state.card) {\n        services.cardViewerService.repeatingResultChannel.next({\n            isKnown: args,\n            cardID: state.card.id,\n            cardsGroupID: location.state.cardsGroupID\n        });\n    } else {\n        setState(() => {\n            return {\n                card: defaultCardValue,\n                isQuestionSide: false,\n                isEditable: false\n            }\n        });\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onClickCard: ICallback<CardViewerCallbackSettings, void> = (\n    {\n        state,\n        setState\n    }\n) => {\n    if (!state.isEditable) {\n        setState(() => {\n            return {\n                ...state,\n                isQuestionSide: !state.isQuestionSide\n            }\n        })\n    }\n}","import {IRangeOfKnowledge} from \"../../common/types/IRangeOfKnowledge\";\n\nexport const initialState = {\n    card: {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    },\n    isQuestionSide: true,\n    isEditable: false\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCardValue} from \"../../../common/Constants\";\n\nexport const onCardChannel: ICallback<CardViewerCallbackSettings, ICard> = (\n    {services, setState},\n    card = defaultCardValue\n) => {\n    services.cardViewerService.cardGroupNameChannel.next(card.id)\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCardValue} from \"../../../common/Constants\";\n\nexport const onCardEditingChannel: ICallback<CardViewerCallbackSettings, ICard> = (\n    {setState},\n    card = defaultCardValue\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onRepeatingResultChannel: ICallback<CardViewerCallbackSettings, ICardsGroup[]> = (\n    {services, location}\n) => {\n    services.cardViewerService.cardChannel.next(location.state.cardID);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onConstructor: ICallback<CardViewerCallbackSettings, void> = (\n    {services, location}\n) => {\n    services.cardViewerService.cardChannel.next(location.state.cardID);\n}","import React, {FC, useCallback} from \"react\";\n\nimport {useChannel} from \"../../../MyTools/channel-conception/react-hooks/useChannel\";\nimport {AppContext} from \"../../../App\";\nimport {CardViewerComponent} from \"./CardViewerComponent\";\nimport {useConstructor} from \"../../../MyTools/react-hooks/useConstructor\";\nimport {ICardViewerContainer} from \"./types/ICardViewerContainer\";\nimport {onDeleteCard} from \"./ui-callbacks/onDeleteCard\";\nimport {onDeleteSingleCardChannel} from \"./channels-callbacks/onDeleteSingleCardChannel\";\nimport {onCardGroupNameChannel} from \"./channels-callbacks/onCardGroupNameChannel\";\nimport {onChangeAnswer} from \"./ui-callbacks/onChangeAnswer\";\nimport {onChangeQuestion} from \"./ui-callbacks/onChangeQuestion\";\nimport {onSwitchEditing} from \"./ui-callbacks/onSwitchEditing\";\nimport {onClickYesNoButton} from \"./ui-callbacks/onClickYesNoButton\";\nimport {onClickCard} from \"./ui-callbacks/onClickCard\";\nimport {initialState} from \"./Constants\";\nimport {onCardChannel} from \"./channels-callbacks/onCardChannel\";\nimport {onCardEditingChannel} from \"./channels-callbacks/onCardEditingChannel\";\nimport {onRepeatingResultChannel} from \"./channels-callbacks/onRepeatingResultChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {INavigationState} from \"../../common/types/INavigationState\";\nimport {CardViewerContainerState} from \"./types/CardViewerContainerState\";\nimport {IAppContext} from \"../../common/types/IAppContext\";\n\nexport const CardViewerContainer: FC<ICardViewerContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<INavigationState, CardViewerContainerState, ICardViewerContainer, IAppContext>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, context, services: {cardViewerService, cardsEditorService}} = callbackSettings\n\n    useChannel(cardViewerService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel))\n    useChannel(cardViewerService.cardGroupNameChannel, callbackFactory(onCardGroupNameChannel))\n    useChannel(cardViewerService.cardChannel, callbackFactory(onCardChannel));\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardViewerService.repeatingResultChannel, callbackFactory(onRepeatingResultChannel));\n\n    useConstructor(callbackFactory(onConstructor))\n\n    const clickCard = useCallback(callbackFactory(onClickCard), [state.isEditable, state.isQuestionSide])\n    const clickYesNoButton = useCallback(callbackFactory(onClickYesNoButton), [state.card])\n    const switchEditing = useCallback(callbackFactory(onSwitchEditing), [state.card, state.isEditable])\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), [state.card])\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), [state.card])\n    const deleteCard = useCallback(callbackFactory(onDeleteCard), [state.card])\n\n    return <CardViewerComponent\n        cardHeight={context.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={clickCard}\n        onClickYesNoButton={clickYesNoButton}\n        card={state.card}\n        onSwitchEditing={switchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n        onDeleteCard={deleteCard}\n    />\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {Redirect, Route, Switch} from 'react-router';\n\nimport {Routs} from '../../common/Routs';\nimport {CardsGroupsListContainer} from '../../pages/cards-groups-list/CardsGroupsListContainer';\nimport {GoogleAuthContainer} from '../../pages/google-auth/GoogleAuthContainer';\nimport {GoogleBackupsContainer} from '../../pages/google-backups/GoogleBackupsContainer';\nimport {CardsContainer} from '../../pages/cards/CardsContainer';\nimport {CardRepeaterContainer} from '../../pages/cards-repeater/CardsRepeaterContainer';\nimport {LocalBackupsContainer} from '../../pages/local-backup/LocalBackupsContainer';\nimport {CardsGroupsEditorContainer} from '../../pages/cards-groups-editor/CardsGroupsEditorContainer';\nimport {CardsEditorContainer} from '../../pages/cards-editor/CardsEditorContainer';\nimport {SettingsContainer} from '../../pages/settings/SettingsContainer';\nimport {CardViewerContainer} from \"../../pages/card-viewer/CardViewerContainer\";\nimport {INavigationContainer} from \"./types/INavigationContainer\";\n\n\nexport const NavigationContainer: FC<INavigationContainer> = (\n    {\n        cardsGroupsListService,\n        cardsGroupsEditorService,\n        errorService,\n        googleAuthService,\n        googleBackupsService,\n        spinnerService,\n        confirmDialogService,\n        cardsEditorService,\n        cardsListService,\n        cardsRepeaterService,\n        settingsService,\n        localBackupsService,\n        cardViewerService,\n        selectionDialogService,\n        toolbarService\n    }\n) => {\n\n    return <Switch>\n        <Redirect exact from=\"/MyCardsWeb\" to={Routs.cardsGroups.path}/>\n        <Redirect exact from=\"/\" to={Routs.cardsGroups.path}/>\n        <Route path={Routs.cardsGroups.path}>\n            <CardsGroupsListContainer cardsGroupsListService={cardsGroupsListService}\n                                      confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.googleAuth.path}>\n            <GoogleAuthContainer googleAuthService={googleAuthService} errorService={errorService}/>\n        </Route>\n        <Route path={Routs.googleBackups.path}>\n            <GoogleBackupsContainer googleBackupsService={googleBackupsService} spinnerService={spinnerService}\n                                    confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.cards.path}>\n            <CardsContainer\n                cardsListService={cardsListService}\n                confirmDialogService={confirmDialogService}\n                selectionDialogService={selectionDialogService}\n            />\n        </Route>\n        <Route path={Routs.cardsRepeater.path}>\n            <CardRepeaterContainer\n                toolbarService={toolbarService}\n                cardsRepeaterService={cardsRepeaterService}\n                cardsEditorService={cardsEditorService}\n                confirmDialogService={confirmDialogService}\n            />\n        </Route>\n        <Route path={Routs.localBackups.path}>\n            <LocalBackupsContainer localBackupsService={localBackupsService} confirmDialogService={confirmDialogService}\n                                   spinnerService={spinnerService}/>\n        </Route>\n        <Route path={Routs.cardsGroupEditor.path}>\n            <CardsGroupsEditorContainer cardsGroupsEditorService={cardsGroupsEditorService}/>\n        </Route>\n        <Route path={Routs.cardsEditor.path}>\n            <CardsEditorContainer cardsEditorService={cardsEditorService}/>\n        </Route>\n        <Route path={Routs.settings.path}>\n            <SettingsContainer settingsService={settingsService}/>\n        </Route>\n        <Route path={Routs.cardViewer.path}>\n            <CardViewerContainer\n                toolbarService={toolbarService}\n                confirmDialogService={confirmDialogService}\n                cardViewerService={cardViewerService}\n                cardsEditorService={cardsEditorService}\n            />\n        </Route>\n    </Switch>\n};\n","import {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const getBackupFolder = (token: string): Promise<IGoogleDriveFile | null> => {\n\n    const googleDriveFolderType = 'application/vnd.google-apps.folder';\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const backupFolderName = 'my-cards';\n    const searchFolderURI = googleDriveFilesAPI + '?q=name%20contains%20';\n    const url = `${searchFolderURI}'${backupFolderName}'`\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + token\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (result) => result.json()\n    ).then((result: { files: IGoogleDriveFile[] }) => {\n        let foundedFolder = result.files.find((file) => {\n            return file.mimeType === googleDriveFolderType\n        });\n        return foundedFolder || null;\n    })\n}","import {from, Observable} from 'rxjs';\nimport {ICardsGroup} from '../types/ICardsGroup';\nimport {DataBaseService} from './DataBaseService';\nimport {ISettings} from '../types/ISettings';\nimport {IStoredFilters} from \"../types/IStoredFilters\";\nimport {defaultFilterValue} from \"../Constants\";\n\nexport class StorageService {\n\n    private cardsStorageID = 'cards-local-storage';\n    private authTokenLocalStorageID = 'auth-token';\n    private settingsID = 'settings';\n    private filterID = 'filter'\n\n    constructor(private dataBaseService: DataBaseService) {\n    }\n\n    public getBackup = () : Observable<ICardsGroup[]> => {\n        return from(this.getBackupFromDataBase());\n    };\n\n    private getBackupFromDataBase = async () => {\n        let backup = null;\n\n        try {\n            backup = await this.dataBaseService.get<ICardsGroup[]>(this.cardsStorageID);\n        } catch (e) {\n            console.error(e);\n            return backup;\n        }\n        if(backup) {\n            return backup;\n        } else {\n            return [];\n        }\n    };\n\n    public setBackup(cardsGroups: ICardsGroup[]): Observable<ICardsGroup[]> {\n        return from(this.setBackupToDataBase(cardsGroups));\n    }\n\n    private setBackupToDataBase = async (cardsGroups: ICardsGroup[]) => {\n        try {\n            await this.dataBaseService.set(this.cardsStorageID, cardsGroups);\n        } catch (e) {\n            console.error(e);\n        }\n        return cardsGroups;\n    };\n\n    public getAuthToken(): Observable<string> {\n        return from(new Promise<string>((resolve, reject) => {\n            const authToken = localStorage.getItem(this.authTokenLocalStorageID);\n            if(authToken) {\n                resolve(authToken);\n            } else {\n                reject('Auth token is empty')\n            }\n        }));\n    }\n\n    public setAuthToken(authToken: string): Observable<string> {\n        return from(new Promise<string>((resolve) => {\n            localStorage.setItem(this.authTokenLocalStorageID, authToken);\n            resolve(authToken);\n        }));\n    }\n\n    public getSettings(): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve, reject) => {\n            const settings = localStorage.getItem(this.settingsID);\n            if(settings) {\n                resolve(JSON.parse(settings) as ISettings);\n            } else {\n                resolve({\n                    isRandomRepeating: false,\n                    autoObsolete: {\n                        isEnable: false,\n                        timeInProgress: 7,\n                        timeInDone: 7\n                    }\n                })\n            }\n        }));\n    }\n\n    public setSettings(settings: ISettings): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve) => {\n            localStorage.setItem(this.settingsID, JSON.stringify(settings));\n            resolve(settings);\n        }));\n    }\n\n    public getFilter(): Observable<IStoredFilters> {\n        return from(new Promise<IStoredFilters>((resolve) => {\n            const settings = localStorage.getItem(this.filterID);\n            if (settings) {\n                resolve(JSON.parse(settings) as IStoredFilters);\n            } else {\n                resolve({\n                    cards: defaultFilterValue,\n                    cardsGroups: defaultFilterValue\n                })\n            }\n        }));\n    }\n\n    public setFilter(settings: IStoredFilters): Observable<IStoredFilters> {\n        return from(new Promise<IStoredFilters>((resolve) => {\n            localStorage.setItem(this.filterID, JSON.stringify(settings));\n            resolve(settings);\n        }));\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getCardsByGroup = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n    const foundCardsGroup = cardsGroups.find((cardsGroup: ICardsGroup) => {\n        return cardsGroup.id === cardsGroupID;\n    });\n\n    return foundCardsGroup ? foundCardsGroup.cards : [];\n};\n","import {ICardsGroup} from '../types/ICardsGroup';\nimport {ICard} from '../types/ICard';\n\nexport const deleteSingleCard = (cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => {\n        const cardIndex = cardGroup.cards.findIndex((card) => {\n            return card.id === cardID;\n        })\n\n        return cardIndex > -1\n    });\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.filter((card: ICard) => card.id !== cardID);\n    }\n\n    return cardsGroups;\n};\n","export const selectedItemsObjectToArray = (selectedItemsObject: {[key: number]: boolean}): number[] => {\n    const array: number[] = [];\n    for (let item in selectedItemsObject) {\n        array.push(Number(item));\n    }\n    return array\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const getExistedCardsGroups = (cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.map((cardsGroup) => {\n        return {\n            id: cardsGroup.id,\n            label: cardsGroup.nameCardsGroup\n        }\n    })\n}","import {IRepeatingArgs} from '../types/IRepeatingArgs';\nimport {ICardsGroup} from '../types/ICardsGroup';\nimport {ICard} from '../types/ICard';\nimport {IRangeOfKnowledge} from '../types/IRangeOfKnowledge';\n\nexport const changeRangeOfKnowledge = (args: IRepeatingArgs, cardsGroups: ICardsGroup[]) => {\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (!args.cardID || card.id === args.cardID) {\n                    if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (!args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n                    }\n                }\n            });\n        }\n    });\n\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from \"../types/ICardsGroup\";\nimport {IRepeatingArgs} from \"../types/IRepeatingArgs\";\nimport {ICard} from \"../types/ICard\";\n\nexport const refreshCardRepeatingDate = (args: IRepeatingArgs, cardsGroups: ICardsGroup[]) => {\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (!args.cardID || card.id === args.cardID) {\n                    card.dateRepeating = new Date().getTime();\n                }\n            });\n        }\n    });\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const getCardGroupName = (cardsGroups: ICardsGroup[], cardID: number): string => {\n    const foundIndex = cardsGroups.findIndex((cardsGroup) => {\n        const foundCardIndex = cardsGroup.cards.findIndex((card) => {\n            return card.id === cardID;\n        })\n        return foundCardIndex > -1;\n    });\n    return foundIndex > -1 ? cardsGroups[foundIndex].nameCardsGroup : 'No name';\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const getCardForViewing = (cardsGroups: ICardsGroup[], cardID: number): ICard => {\n    let card = {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    };\n\n    for (let i = 0; i < cardsGroups.length; i++) {\n        const index = cardsGroups[i].cards.findIndex((card: ICard) => {\n            return card.id === cardID\n        })\n\n        if (index > -1) {\n            card = cardsGroups[i].cards[index];\n            return card;\n        }\n    }\n\n    return card;\n}","import React, {FC} from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport {List, ListItem, ListItemText} from \"@mui/material\";\nimport {ISelectionDialogComponent} from \"./types/ISelectionDialogComponent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\n\nexport const SelectionDialogComponent: FC<ISelectionDialogComponent> = (\n    {\n        isOpen,\n        onClose,\n        onClickItem,\n        selectionItems,\n        title\n    }\n) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitle>{title}</DialogTitle>\n                <DialogContent>\n                    <List>\n                        {\n                            selectionItems.map((item) => {\n                                return <ListItem key={item.id} onClick={() => onClickItem(item.id)}>\n                                    <ListItemText primary={item.label}/>\n                                </ListItem>\n                            })\n                        }\n                    </List>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport {FC} from 'react';\n\nimport {SelectionDialogComponent} from './SelectionDialogComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ISelectionDialogContainer} from \"./types/ISelectionDialogContainer\";\nimport {SelectionDialogContainerState} from \"./types/SelectionDialogContainerState\";\n\nexport const SelectionDialogContainer: FC<ISelectionDialogContainer> = ({selectionDialogService}) => {\n\n    const [state, setState] = React.useState<SelectionDialogContainerState>({\n        isOpen: false,\n        title: '',\n        selectionItems: []\n    });\n\n    useChannel<SelectionDialogContainerState, SelectionDialogContainerState>(\n        selectionDialogService.openDialogChannel,\n        (state: SelectionDialogContainerState) => {\n            setState({...state});\n        }\n    );\n\n    const onClose = () => {\n        setState({isOpen: false, title: '', selectionItems: []});\n        selectionDialogService.selectionChannel.unsubscribe();\n    };\n\n    const onClickItem = (itemID: number) => {\n        selectionDialogService.selectionChannel.next(itemID);\n    };\n\n    return <SelectionDialogComponent\n        isOpen={state.isOpen}\n        onClickItem={onClickItem}\n        onClose={onClose}\n        title={state.title}\n        selectionItems={state.selectionItems}\n    />\n};\n","import {of} from \"rxjs\";\n\nimport {Routs} from '../../common/Routs';\nimport {Channel} from \"../../../MyTools/channel-conception/Channel\";\n\nexport class ToolbarService {\n\n    public toolbarExternalLabelChannel: Channel<string, string> = new Channel(\n        (name: string) => of(name)\n    )\n\n    public getPageLabel(path: string) {\n        if (path === Routs.googleAuth.path) {\n            return Routs.googleAuth.name;\n        }\n\n        if (path === Routs.googleBackups.path) {\n            return Routs.googleBackups.name;\n        }\n\n        if(path === Routs.cardsGroups.path) {\n            return Routs.cardsGroups.name;\n        }\n\n        if(path === Routs.cards.path) {\n            return Routs.cards.name;\n        }\n\n        if(path === Routs.cardsRepeater.path) {\n            return Routs.cardsRepeater.name;\n        }\n\n        if(path === Routs.localBackups.path) {\n            return Routs.localBackups.name;\n        }\n\n        if(path === Routs.settings.path) {\n            return Routs.settings.name;\n        }\n\n        if(path === Routs.cardViewer.path) {\n            return Routs.cardViewer.name;\n        }\n\n        return 'My Cards'\n    }\n}\n","import React, {useEffect, useState} from 'react';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport './App.css';\nimport {IAppContext} from './app/common/types/IAppContext';\nimport {ToolbarContainer} from './app/parts/toolbar/ToolbarContainer';\nimport {NavigationPanelContainer} from './app/parts/navigation-panel/NavigationPanelContainer';\nimport {ErrorContainer} from './app/parts/error-container/ErrorContainer';\nimport {SpinnerContainer} from './app/parts/spinner/SpinnerContainer';\nimport {defaultAppState, STORE_NAME} from './app/common/Constants';\nimport {ConfirmDialogContainer} from './app/parts/confirm-dialog/ConfirmDialogContainer';\nimport {SpinnerService} from './app/parts/spinner/SpinnerService';\nimport {ErrorService} from './app/parts/error-container/ErrorService';\nimport {NavigationContainer} from './app/parts/navigation/NavigationContainer';\nimport {CardsGroupsEditorService} from './app/pages/cards-groups-editor/CardsGroupsEditorService';\nimport {CardsGroupsListService} from './app/pages/cards-groups-list/CardsGroupsListService';\nimport {ConfirmDialogService} from './app/parts/confirm-dialog/ConfirmDialogService';\nimport {GoogleAuthService} from './app/pages/google-auth/GoogleAuthService';\nimport {GoogleBackupsService} from './app/pages/google-backups/GoogleBackupsService';\nimport {CardsEditorService} from './app/pages/cards-editor/CardsEditorService';\nimport {StorageService} from './app/common/services/StorageService';\nimport {CardsService} from './app/pages/cards/CardsService';\nimport {CardsRepeaterService} from './app/pages/cards-repeater/CardsRepeaterService';\nimport {LocalBackupsService} from './app/pages/local-backup/LocalBackupsService';\nimport {DataBaseService} from './app/common/services/DataBaseService';\nimport {SettingsService} from './app/pages/settings/SettingsService';\nimport {CardViewerService} from \"./app/pages/card-viewer/CardViewerService\";\nimport {SelectionDialogContainer} from \"./app/parts/selection-dialog/SelectionDialogContainer\";\nimport {SelectionDialogService} from \"./app/parts/selection-dialog/SelectionDialogService\";\nimport {NavigationPanelService} from \"./app/parts/navigation-panel/NavigationPanelService\";\nimport {ToolbarService} from \"./app/parts/toolbar/ToolbarService\";\nimport {Channel} from \"./MyTools/channel-conception/Channel\";\n\nexport const AppContext = React.createContext<IAppContext>(defaultAppState);\n\nconst errorService = new ErrorService();\nconst spinnerService = new SpinnerService();\n\nconst confirmDialogService = new ConfirmDialogService();\nconst selectionDialogService = new SelectionDialogService();\nconst navigationPanelService = new NavigationPanelService();\nconst toolbarService = new ToolbarService();\n\nconst dataBaseService = new DataBaseService(STORE_NAME);\nconst storageService = new StorageService(dataBaseService);\nconst cardsGroupsEditorService = new CardsGroupsEditorService(storageService);\nconst cardsGroupsListService = new CardsGroupsListService(storageService);\nconst googleAuthService = new GoogleAuthService(storageService);\nconst googleBackupsService = new GoogleBackupsService(storageService);\nconst cardsEditorService = new CardsEditorService(storageService);\nconst cardsListService = new CardsService(storageService);\nconst cardsRepeaterService = new CardsRepeaterService(storageService);\nconst localBackupsService = new LocalBackupsService(storageService);\nconst settingService = new SettingsService(storageService);\nconst cardViewerService = new CardViewerService(storageService);\n\nChannel.setGlobalErrorHandler((error) => {\n    console.error(error);\n})\n\nfunction App() {\n\n    const [appState, setAppState] = useState<IAppContext>(defaultAppState);\n\n    useEffect(() => {\n        const height = window.screen.height;\n        const width = window.screen.width;\n        if (appState.height !== height || appState.width !== width) {\n            setAppState({...appState, height: height, width: width});\n        }\n    }, [appState]);\n\n    return (\n        <>\n            <AppContext.Provider value={appState}>\n                <Router>\n                    <div>\n\n                        <ErrorContainer errorService={errorService}/>\n\n                        <ToolbarContainer\n                            toolbarService={toolbarService}\n                            navigationPanelService={navigationPanelService}\n                        />\n\n                        <NavigationPanelContainer navigationPanelService={navigationPanelService}/>\n\n                        <ConfirmDialogContainer confirmDialogService={confirmDialogService}/>\n\n                        <SelectionDialogContainer selectionDialogService={selectionDialogService}/>\n\n                        <div className=\"page-container\" style={{height: appState.height - 110, width: appState.width}}>\n                            <SpinnerContainer spinnerService={spinnerService}/>\n                            <NavigationContainer\n                                toolbarService={toolbarService}\n                                cardsGroupsListService={cardsGroupsListService}\n                                cardsGroupsEditorService={cardsGroupsEditorService}\n                                googleAuthService={googleAuthService}\n                                googleBackupsService={googleBackupsService}\n                                errorService={errorService}\n                                spinnerService={spinnerService}\n                                confirmDialogService={confirmDialogService}\n                                cardsEditorService={cardsEditorService}\n                                cardsListService={cardsListService}\n                                cardsRepeaterService={cardsRepeaterService}\n                                localBackupsService={localBackupsService}\n                                settingsService={settingService}\n                                cardViewerService={cardViewerService}\n                                selectionDialogService={selectionDialogService}\n                            />\n                        </div>\n                    </div>\n                </Router>\n            </AppContext.Provider>\n        </>\n    );\n}\n\nexport default App;\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class ErrorService {\n    public errorChannel: Channel<string, string>;\n\n\n    constructor() {\n        this.errorChannel = new Channel<string, string>((error: string)=> of(error));\n    }\n\n}\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ConfirmDialogContainerState} from \"./types/ConfirmDialogContainerState\";\n\nexport class ConfirmDialogService {\n\n    public openDialogChannel = new Channel<ConfirmDialogContainerState, ConfirmDialogContainerState>(\n        (state: ConfirmDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.confirmationChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public confirmationChannel = new Channel<boolean, boolean>((value: boolean) => of(value));\n}\n\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {SelectionDialogContainerState} from \"./types/SelectionDialogContainerState\";\n\nexport class SelectionDialogService {\n\n    public openDialogChannel = new Channel<SelectionDialogContainerState, SelectionDialogContainerState>(\n        (state: SelectionDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.selectionChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public selectionChannel = new Channel<number, number>((value: number) => of(value));\n}\n\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class NavigationPanelService {\n\n    public navigationPanelOpenChannel: Channel<string, string>;\n\n    constructor() {\n        this.navigationPanelOpenChannel = new Channel<string, string>((value: string) => of(value))\n    }\n}\n","import {IDBPDatabase, openDB} from 'idb';\n\nexport class DataBaseService {\n\n    private dataBase: Promise<IDBPDatabase>;\n\n    private DATA_BASE_NAME = \"my-cards-data-base\";\n\n    constructor(private storeName: string) {\n        this.dataBase = openDB(this.DATA_BASE_NAME, 1, {\n            upgrade(db) {\n                db.createObjectStore(storeName);\n            },\n        });\n    }\n\n    get = async <T>(key: string) => {\n        return (await this.dataBase).get(this.storeName, key);\n    };\n\n    set = async <T>(key: string, value: T) => {\n        return (await this.dataBase).put(this.storeName, value, key);\n    };\n}\n","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {saveCardsGroup} from './logic/saveCardsGroup';\nimport {getEditingCardsGroup} from './logic/getEditingCardsGroup';\n\nexport class CardsGroupsEditorService {\n\n    public groupEditingChannel: Channel<ICardsGroup, ICardsGroup[]>;\n    public groupChannel: Channel<number, ICardsGroup>;\n\n    constructor(storageService: StorageService) {\n        this.groupEditingChannel = new Channel((editedCardGroup: ICardsGroup) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCardsGroup(editedCardGroup, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            })\n        ));\n\n        this.groupChannel = new Channel((cardGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCardsGroup(cardGroupID, cardsGroups))\n        ))\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveCardsGroup = (editedCardGroup: ICardsGroup, cardsGroups: ICardsGroup[]) => {\n        const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => editedCardGroup.id === cardGroup.id);\n\n        if (cardGroupIndex < 0) {\n            cardsGroups.push(editedCardGroup);\n        } else {\n            cardsGroups[cardGroupIndex] = editedCardGroup;\n        }\n\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getEditingCardsGroup = (cardGroupID: number, cardsGroups: ICardsGroup[]): ICardsGroup => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardGroupID === cardGroup.id);\n\n        if (!cardsGroup) {\n            cardsGroup = {\n                cards: [],\n                nameCardsGroup: '',\n                repeatingDate: new Date().getTime(),\n                id: new Date().getTime(),\n                percentRepeatedCards: 0\n            }\n        }\n        return cardsGroup;\n};\n","import {map, mergeMap, switchMap, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {updateRepeatingDate} from './logic/updateRepeatingDate';\nimport {sortByFilter} from './logic/sortByFilter';\nimport {countRepeatedCardsPercent} from './logic/countRepeatedCardsPercent';\nimport {deleteGroup} from './logic/deleteGroup';\nimport {resetRepeatingProgress} from './logic/resetRepeatingProgress';\nimport {defer, of} from \"rxjs\";\nimport {ISettings} from \"../../common/types/ISettings\";\nimport {updateObsoleteStatus} from \"./logic/updateObsoleteStatus\";\nimport {IFilter} from \"../../common/types/IFilter\";\nimport {IStoredFilters} from \"../../common/types/IStoredFilters\";\n\nexport class CardsGroupsListService {\n    public groupsListChannel: Channel<string, ICardsGroup[]>;\n    public groupDeleteChannel: Channel<number, ICardsGroup[]>;\n    public resetProgressChannel: Channel<number, ICardsGroup[]>;\n    public changeFilterChannel: Channel<IFilter, IStoredFilters>;\n    public filterChannel: Channel<string, IFilter>;\n\n    constructor(storageService: StorageService) {\n\n        this.groupsListChannel = new Channel(() => storageService.getBackup().pipe(\n            switchMap((backup) => {\n                return storageService.getSettings().pipe(\n                    switchMap((settings: ISettings) => {\n                        return defer(() => {\n                            return settings.autoObsolete && settings.autoObsolete.isEnable ?\n                                of(\n                                    updateObsoleteStatus(\n                                        backup,\n                                        settings.autoObsolete.timeInProgress,\n                                        settings.autoObsolete.timeInDone\n                                    )\n                                ).pipe(tap((cardsGroups) => storageService.setBackup(cardsGroups))) :\n                                of(backup)\n                        })\n                    })\n                )\n            }),\n            map((cardsGroups: ICardsGroup[]) => updateRepeatingDate(cardsGroups)),\n            mergeMap((cardsGroups: ICardsGroup[]) => {\n                return storageService.getFilter().pipe(\n                    map((storedFilter) => sortByFilter(cardsGroups, storedFilter.cardsGroups))\n                )\n            }),\n            map((cardsGroups: ICardsGroup[]) => countRepeatedCardsPercent(cardsGroups))\n        ));\n\n        this.groupDeleteChannel = new Channel((groupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => deleteGroup(groupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ));\n\n        this.resetProgressChannel = new Channel((cardsGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => resetRepeatingProgress(cardsGroupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ))\n\n        this.filterChannel = new Channel<string, IFilter>(\n            () => storageService.getFilter().pipe(\n                map((storedFilters) => storedFilters.cardsGroups)\n            )\n        )\n\n        this.changeFilterChannel = new Channel<IFilter, IStoredFilters>(\n            (filter) => storageService.getFilter().pipe(\n                map((storedFilters) => {\n                        return {...storedFilters, cardsGroups: filter}\n                    }\n                ),\n                tap((storedFilters) => {\n                    storageService.setFilter(storedFilters);\n                })\n            )\n        )\n    }\n}\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const updateObsoleteStatus = (\n    cardsGroups: ICardsGroup[],\n    timeInProgress: number,\n    timeInDone: number\n): ICardsGroup[] => {\n\n    if(timeInProgress < 1 && timeInDone < 1) {\n        return cardsGroups;\n    }\n\n    const millisecondsInDay = 86400000;\n    const currentDate = new Date().getTime();\n    const timeInProgressMilliseconds = timeInProgress * millisecondsInDay;\n    const timeInDoneMilliseconds = timeInDone * millisecondsInDay;\n\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        cardsGroup.cards.forEach((card: ICard) => {\n            const differences = currentDate - card.dateRepeating;\n\n            if(card.rangeOfKnowledge === IRangeOfKnowledge.DONE && differences > timeInDoneMilliseconds) {\n                card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n            }\n\n            if(card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS && differences > timeInProgressMilliseconds) {\n                card.rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n            }\n        });\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\n\nexport const updateRepeatingDate = (cardsGroups: ICardsGroup[]) => {\n        cardsGroups.map((cardsGroup: ICardsGroup) => {\n            let dateRepeating = 0;\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (card.dateRepeating > dateRepeating) {\n                    dateRepeating = card.dateRepeating\n                }\n            });\n            cardsGroup.repeatingDate = dateRepeating;\n            return cardsGroup;\n        });\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const sortByFilter = (cardsGroups: ICardsGroup[], filter: IFilter) => {\n    let sortedCards = cardsGroups.filter(\n        (cardsGroup) => cardsGroup.nameCardsGroup.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1\n    );\n    if (filter.sort === ISortVariant.NAME_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.nameCardsGroup > secondCardsGroup.nameCardsGroup) {\n                return 1\n            }\n            if (firstCardGroup.nameCardsGroup < secondCardsGroup.nameCardsGroup) {\n                return -1\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.NAME_DESK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.nameCardsGroup > secondCardsGroup.nameCardsGroup) {\n                return -1\n            }\n            if (firstCardGroup.nameCardsGroup < secondCardsGroup.nameCardsGroup) {\n                return 1\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.DATE_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.repeatingDate && secondCardsGroup.repeatingDate) {\n                if (firstCardGroup.repeatingDate > secondCardsGroup.repeatingDate) {\n                    return 1\n                }\n                if (firstCardGroup.repeatingDate < secondCardsGroup.repeatingDate) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.DATE_DESK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.repeatingDate && secondCardsGroup.repeatingDate) {\n                if (firstCardGroup.repeatingDate > secondCardsGroup.repeatingDate) {\n                    return -1\n                }\n                if (firstCardGroup.repeatingDate < secondCardsGroup.repeatingDate) {\n                    return 1\n                }\n            }\n            return 0\n        })\n    }\n\n    return sortedCards;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const countRepeatedCardsPercent = (cardsGroups: ICardsGroup[]) => {\n    cardsGroups.map((cardsGroup: ICardsGroup) => {\n        let statusDone = 0;\n        cardsGroup.cards.forEach((card: ICard) => {\n            if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n                statusDone++\n            }\n        });\n        cardsGroup.percentRepeatedCards = statusDone / cardsGroup.cards.length * 100;\n        return cardsGroup;\n    });\n    return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const deleteGroup = (groupID: number, cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.filter((cardGroup) => {\n        return cardGroup.id !== groupID;\n    });\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const resetRepeatingProgress = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n\n    if (cardGroupIndex < 0) {\n        return cardsGroups;\n    }\n\n    cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.map((card: ICard) => {\n        return {\n            ...card,\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO\n        }\n    });\n\n    return cardsGroups;\n};\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class GoogleAuthService {\n    public loginChannel: Channel<string, string>;\n\n\n    constructor(storageService: StorageService) {\n\n        this.loginChannel = new Channel((authToken: string) => of('').pipe(\n            tap(() => {\n                storageService.setAuthToken(authToken)\n            })\n        ));\n    }\n}\n","import {defer, from, mergeMap, of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {formatCreatedDate} from './logic/formatCreatedDate';\nimport {getBackupFolder} from \"./logic/getBackupFolder\";\nimport {getBackupFiles} from \"./logic/getBackupFiles\";\nimport {loadBackupFile} from \"./logic/loadBackupFile\";\nimport {createBackupFolder} from \"./logic/createBackupFolder\";\nimport {createEmptyBackupFile} from \"./logic/createEmptyBackupFile\";\nimport {createBackupName} from \"./logic/createBackupName\";\nimport {uploadBackupFile} from \"./logic/uploadBackupFile\";\nimport {deleteBackupFile} from \"./logic/deleteBackupFile\";\n\nexport class GoogleBackupsService {\n\n    public backupsNameLoadChannel: Channel<string, IGoogleDriveFile[]>;\n    public backupLoadChannel: Channel<string, ICardsGroup[]>;\n    public backupUploadChannel: Channel<void, string>;\n    public backupDeleteChannel: Channel<string, string>;\n\n    constructor(private storageService: StorageService) {\n\n        this.backupsNameLoadChannel = new Channel(() => storageService.getAuthToken().pipe(\n            mergeMap(\n                (authToken: string) => of(authToken).pipe(\n                    switchMap(() => from(getBackupFolder(authToken))),\n                    switchMap(\n                        (folder: IGoogleDriveFile | null) => from(getBackupFiles(authToken, folder))\n                    ),\n                    map((googleDriveFiles: IGoogleDriveFile[] | null) => formatCreatedDate(googleDriveFiles))\n                )\n            )\n        ));\n\n        this.backupLoadChannel = new Channel(\n            (backupID: string) => storageService.getAuthToken().pipe(\n                switchMap(\n                    (authToken) => from(loadBackupFile(authToken, backupID))\n                ),\n                tap((cards: ICardsGroup[]) => {\n                    storageService.setBackup(cards);\n                })\n            )\n        );\n\n        this.backupUploadChannel = new Channel(\n            () => storageService.getAuthToken().pipe(\n                mergeMap((authToken: string) => of(authToken).pipe(\n                        switchMap(() => from(getBackupFolder(authToken))),\n                        mergeMap((folder: IGoogleDriveFile | null) => {\n                            return defer(() => {\n                                return folder ? of(folder.id) : from(createBackupFolder(authToken))\n                            })\n                        }),\n                        mergeMap((folderId: string) => {\n                            return storageService.getBackup().pipe(\n                                map(\n                                    (cardsGroups) => createBackupName(cardsGroups)\n                                ),\n                                switchMap((name: string) => {\n                                    return from(createEmptyBackupFile(\n                                        authToken,\n                                        folderId,\n                                        name\n                                    ));\n                                })\n                            )\n                        }),\n                        switchMap((fileId: string) => {\n                            return storageService.getBackup().pipe(\n                                switchMap((cardsGroups) => {\n                                    return uploadBackupFile(\n                                        authToken,\n                                        fileId,\n                                        cardsGroups\n                                    )\n                                })\n                            )\n                        })\n                    )\n                )\n            )\n        );\n\n        this.backupDeleteChannel = new Channel((fileID: string) => storageService.getAuthToken().pipe(\n            switchMap((authToken) => deleteBackupFile(authToken, fileID))\n        ));\n    }\n}\n","import {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const getBackupFiles = (authToken: string, folder: IGoogleDriveFile | null): Promise<IGoogleDriveFile[] | null> => {\n\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const url = `${googleDriveFilesAPI}?q=\"${folder ? folder.id : -1}\"+in+parents&fields=files(id,createdTime,name)`\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.files)\n}","import {IGoogleDriveFile} from '../../../common/types/IGoogleDriveFile';\n\nexport const formatCreatedDate = (googleDriveFiles: IGoogleDriveFile[] | null) => {\n    return googleDriveFiles ? googleDriveFiles.map((googleDriveFile: IGoogleDriveFile) => {\n        const date = new Date(googleDriveFile.createdTime);\n        const outputFormat = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\n        return {\n            ...googleDriveFile, createdTime: outputFormat\n        };\n    }) : [];\n};\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const loadBackupFile = (authToken: string, fileId: string): Promise<ICardsGroup[]> => {\n\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const url = googleDriveFilesAPI + fileId + '?alt=media';\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    )\n}","export const createBackupFolder = (authToken: string): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/';\n    const backupFolderName = 'my-cards';\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            name: backupFolderName,\n            mimeType: 'application/vnd.google-apps.folder'\n        }),\n        method: 'POST'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.id)\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const createBackupName = (backup: ICardsGroup[]) => {\n    let cardsAmount = 0;\n    backup.forEach((cardsGroup) => {\n        cardsAmount = cardsAmount + cardsGroup.cards.length\n    })\n    return `groups(${backup.length})cards(${cardsAmount})`\n}","export const createEmptyBackupFile = (\n    authToken: string,\n    id: string,\n    fileName: string\n): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/';\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            parents: [id],\n            name: fileName\n        }),\n        method: 'POST'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.id)\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const uploadBackupFile = (\n    authToken: string,\n    fileId: string,\n    cardsGroups: ICardsGroup[]\n): Promise<string> => {\n\n    const url = \"https://www.googleapis.com/upload/drive/v3/files/\" + fileId;\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        body: JSON.stringify(cardsGroups, null, 4),\n        responseType: 'text',\n        method: 'PATCH'\n    }\n\n    return fetch(url, requestOptions).then(() => fileId);\n}","export const deleteBackupFile = (\n    authToken: string,\n    fileId: string\n): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/' + fileId;\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'DELETE'\n    }\n\n    return fetch(url, requestOptions).then(() => fileId)\n}","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ICard} from '../../common/types/ICard';\nimport {ISimplifiedCardsGroup} from '../../common/types/ISimplifiedCardsGroup';\nimport {saveCard} from './logic/saveCard';\nimport {getEditingCard} from './logic/getEditingCard';\nimport {getSimplifiedGroup} from './logic/getSimplifiedGroup';\nimport {addCurrentGroupToSimplifiedGroup} from './logic/addCurrentGroupToSimplifiedGroup';\n\nexport class CardsEditorService {\n\n    public cardEditingChannel: Channel<{ card: ICard, cardsGroupID: number }, ICard>;\n    public simplifiedCardsGroupsChannel: Channel<number, { currentCardsGroup: ISimplifiedCardsGroup, cardsGroups: ISimplifiedCardsGroup[] }>;\n    public cardChannel: Channel<{ cardID: number, cardsGroupID: number }, ICard | undefined>;\n\n    constructor(storageService: StorageService) {\n        this.cardEditingChannel = new Channel(({card, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCard(cardsGroupID, card, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            }),\n            map(() => card)\n        ));\n\n        this.cardChannel = new Channel(({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCard(cardsGroupID, cardID, cardsGroups))\n        ));\n\n        this.simplifiedCardsGroupsChannel = new Channel((cardsGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getSimplifiedGroup(cardsGroups)),\n            map((cardsGroups: ISimplifiedCardsGroup[]) => addCurrentGroupToSimplifiedGroup(cardsGroupID, cardsGroups))\n        ))\n    }\n}\n","import {ICard} from '../../../common/types/ICard';\nimport {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveCard = (cardsGroupID: number, card: ICard, cardsGroups: ICardsGroup[]) => {\n        const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n        let cardIndex = -1;\n\n        if (cardGroupIndex >= 0) {\n            cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => card.id === item.id)\n        }\n\n        if (cardGroupIndex >= 0 && cardIndex < 0) {\n            cardsGroups[cardGroupIndex].cards.push(card);\n        } else if (cardGroupIndex >= 0 && cardIndex >= 0) {\n            cardsGroups[cardGroupIndex].cards[cardIndex] = card;\n        }\n\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const getEditingCard = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n        let card: ICard | undefined = {\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO,\n            answer: '',\n            question: '',\n            dateRepeating: 0,\n            id: new Date().getTime()\n        };\n\n        if (cardsGroup) {\n            card = cardsGroup.cards.find((card: ICard) => card.id === cardID)\n        }\n\n        return card;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ISimplifiedCardsGroup} from '../../../common/types/ISimplifiedCardsGroup';\n\nexport const getSimplifiedGroup = (cardsGroups: ICardsGroup[]): ISimplifiedCardsGroup[] => {\n\n        return cardsGroups.map((cardsGroup: ICardsGroup): ISimplifiedCardsGroup => {\n            return {\n                id: cardsGroup.id,\n                nameCardsGroup: cardsGroup.nameCardsGroup\n            }\n        });\n};\n","import {ISimplifiedCardsGroup} from '../../../common/types/ISimplifiedCardsGroup';\nimport {defaultSimplifiedGroupValue} from \"../../../common/Constants\";\n\nexport const addCurrentGroupToSimplifiedGroup = (cardsGroupID: number, cardsGroups: ISimplifiedCardsGroup[]) => {\n    let currentCardsGroup = cardsGroups.find((cardGroup: ISimplifiedCardsGroup) => cardsGroupID === cardGroup.id);\n\n    return {\n        currentCardsGroup: currentCardsGroup || defaultSimplifiedGroupValue,\n        cardsGroups\n    }\n};\n","import {map, mergeMap, tap} from 'rxjs/operators';\nimport {of} from \"rxjs\";\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {getCardsByGroup} from './logic/getCardsByGroup';\nimport {resetCardProgress} from './logic/resetCardProgress';\nimport {deleteSingleCard} from '../../common/logic/deleteSingleCard';\nimport {filterCards} from \"./logic/filterCards\";\nimport {IFilter} from \"../../common/types/IFilter\";\nimport {changeCardsGroup} from \"./logic/changeCardsGroup\";\nimport {selectedItemsObjectToArray} from \"./logic/selectedItemsObjectToArray\";\nimport {getExistedCardsGroups} from \"./logic/getExistedCardsGroups\";\nimport {copyCardsInGroup} from \"./logic/copyCardsInGroup\";\nimport {deleteCards} from \"./logic/deleteCards\";\nimport {cardsToIDS} from \"./logic/cardsToIDS\";\nimport {selectedItemsToIDs} from \"./logic/selectedItemsToIDs\";\nimport {IStoredFilters} from \"../../common/types/IStoredFilters\";\n\nexport class CardsService {\n    public cardsChannel: Channel<{ cardsGroupID: number, filter: IFilter }, ICard[]>;\n    public resetCardProgressChannel: Channel<{ cardID: number, cardsGroupID: number }, ICardsGroup[]>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public movingCardsChannel: Channel<{\n        selectedItems: { [key: number]: boolean };\n        destinationGroupID: number;\n    }, ICardsGroup[]>;\n    public copyCardsChannel: Channel<{\n        selectedItems: { [key: number]: boolean };\n        destinationGroupID: number;\n    }, ICardsGroup[]>;\n    public deleteCardsChannel: Channel<{ [key: number]: boolean }, ICardsGroup[]>;\n    public existedGroupsIDsChannel: Channel<string, Array<{ id: number; label: string }>>;\n    public cardsIDsByGroupIDsChannel: Channel<number, number[]>;\n    public cardsIDsBySelectedItemsChannel: Channel<{ [key: number]: boolean }, number[]>;\n    public filterChannel: Channel<string, IFilter>;\n    public changeFilterChannel: Channel<IFilter, IStoredFilters>;\n\n    constructor(private storageService: StorageService) {\n        this.cardsChannel = new Channel(\n            ({cardsGroupID, filter}) => this.storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => getCardsByGroup(cardsGroupID, cardsGroups)),\n                map((cards: ICard[]) => filterCards(cards, filter)))\n        );\n\n        this.resetCardProgressChannel = new Channel(\n            ({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => resetCardProgress(cardsGroupID, cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n\n        this.movingCardsChannel = new Channel((\n            {\n                selectedItems,\n                destinationGroupID\n            }\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => changeCardsGroup(\n                        cardsGroups,\n                        selectedCardsIDs,\n                        destinationGroupID\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.existedGroupsIDsChannel = new Channel(() => storageService.getBackup().pipe(\n            map(getExistedCardsGroups)\n        ))\n\n        this.copyCardsChannel = new Channel((\n            {\n                selectedItems,\n                destinationGroupID\n            }\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => copyCardsInGroup(\n                        cardsGroups,\n                        selectedCardsIDs,\n                        destinationGroupID\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.deleteCardsChannel = new Channel((\n            selectedItems\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => deleteCards(\n                        cardsGroups,\n                        selectedCardsIDs\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.cardsIDsByGroupIDsChannel = new Channel<number, number[]>(\n            (groupID) => storageService.getBackup().pipe(\n                map((cardsGroups) => getCardsByGroup(groupID, cardsGroups)),\n                map((cards: ICard[]) => cardsToIDS(cards))\n            )\n        )\n\n        this.cardsIDsBySelectedItemsChannel = new Channel<{ [p: number]: boolean }, number[]>(\n            (args) => of(args).pipe(\n                map(() => selectedItemsToIDs(args))\n            )\n        )\n\n        this.filterChannel = new Channel<string, IFilter>(\n            () => storageService.getFilter().pipe(\n                map((storedFilters) => storedFilters.cards)\n            )\n        )\n\n        this.changeFilterChannel = new Channel<IFilter, IStoredFilters>(\n            (filter) => storageService.getFilter().pipe(\n                map((storedFilters) => {\n                        return {...storedFilters, cards: filter}\n                    }\n                ),\n                tap((storedFilters) => {\n                    storageService.setFilter(storedFilters);\n                })\n            )\n        )\n    }\n}\n","import {ICard} from \"../../../common/types/ICard\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const filterCards = (cards: ICard[], filter: IFilter) => {\n    const foundByTextCards = cards.filter((card: ICard) => {\n        return card.question.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1 ||\n            card.answer.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1\n    })\n\n    let sortedCards = []\n\n    if (filter.sort === ISortVariant.QUESTION_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.question === card2.question) {\n                return 0\n            } else if (card1.question > card2.question) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.QUESTION_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.question === card2.question) {\n                return 0\n            } else if (card1.question > card2.question) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.STATUS_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.STATUS_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.DATE_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.dateRepeating === card2.dateRepeating) {\n                return 0\n            } else if (card1.dateRepeating > card2.dateRepeating) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.DATE_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.dateRepeating === card2.dateRepeating) {\n                return 0\n            } else if (card1.dateRepeating < card2.dateRepeating) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.ANSWER_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.answer === card2.answer) {\n                return 0\n            } else if (card1.answer < card2.answer) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.ANSWER_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.answer === card2.answer) {\n                return 0\n            } else if (card1.answer < card2.answer) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    }\n\n    return foundByTextCards\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const resetCardProgress = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards[cardIndex].rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n    }\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\n\nexport const changeCardsGroup = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[],\n    destinationGroupID: number\n) => {\n\n    const selectedCards: ICard[] = []\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id\n            })\n\n            if(foundCardIndex > -1) {\n                selectedCards.push(cardsGroup.cards[foundCardIndex]);\n            }\n        });\n        cardsGroup.cards = cardsGroup.cards.filter((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id;\n            });\n\n            return foundCardIndex < 0;\n        })\n    })\n\n    cardsGroups.forEach((cardsGroup) => {\n        if(cardsGroup.id === destinationGroupID) {\n            cardsGroup.cards.push(...selectedCards)\n        }\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\n\nexport const copyCardsInGroup = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[],\n    destinationGroupID: number\n) => {\n    const selectedCards: ICard[] = []\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card, index) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id\n            })\n\n            if(foundCardIndex > -1) {\n                const foundedCard = cardsGroup.cards[foundCardIndex];\n                selectedCards.push({\n                    ...foundedCard,\n                    id: new Date().getTime() + index * 1000\n                });\n            }\n        });\n    });\n\n    cardsGroups.forEach((cardsGroup) => {\n        if(cardsGroup.id === destinationGroupID) {\n            cardsGroup.cards.push(...selectedCards)\n        }\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const deleteCards = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[]\n) => {\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards = cardsGroup.cards.filter((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id;\n            });\n\n            return foundCardIndex < 0;\n        })\n    })\n\n    return cardsGroups;\n}","import {ICard} from \"../../../common/types/ICard\";\n\nexport const cardsToIDS = (cards: ICard[]) => {\n    return cards.map((card) => card.id)\n}","export const selectedItemsToIDs = (selectedItems: { [p: number]: boolean }): number[] => {\n    const ids = [];\n    for (let a in selectedItems) {\n        if (selectedItems[a]) {\n            ids.push(Number(a));\n        }\n    }\n    return ids;\n}","import {of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {IRepeatingArgs} from '../../common/types/IRepeatingArgs';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {IStatistic} from '../../common/types/IStatistic';\nimport {ISettings} from '../../common/types/ISettings';\nimport {getCardsByIDs} from './logic/getCardsByIDs';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForRepeating} from './logic/getCardForRepeating';\nimport {getStatistic} from './logic/getStatistic';\nimport {shuffleCards} from './logic/shuffleCards';\nimport {refreshCardRepeatingDate} from \"../../common/logic/refreshCardRepeatingDate\";\nimport {deleteSingleCard} from \"../../common/logic/deleteSingleCard\";\nimport {getCardGroupName} from \"../card-viewer/logic/getCardGroupName\";\n\nexport class CardsRepeaterService {\n    public cardChannel: Channel<number[], ICard>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public statisticChannel: Channel<string, IStatistic>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public cardGroupNameChannel: Channel<number, string>;\n\n    private statisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    constructor(private storageService: StorageService) {\n        this.cardChannel = new Channel((cardsIDs) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardsByIDs(cardsGroups, cardsIDs)),\n            switchMap((cards: ICard[]) => this.storageService.getSettings().pipe(\n                map((settings: ISettings) => {\n                    if (settings.isRandomRepeating) {\n                        cards = shuffleCards(cards);\n                    }\n                    return {\n                        cards,\n                        isRandomRepeating: settings.isRandomRepeating\n                    };\n                })\n            )),\n            tap(({cards, isRandomRepeating}) => {\n                this.statisticValue = getStatistic(cards);\n            }),\n            map(({cards, isRandomRepeating}) => {\n                return getCardForRepeating(cards, isRandomRepeating)\n            })\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                map((cardsGroups: ICardsGroup[]) => refreshCardRepeatingDate(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups))\n            );\n        });\n\n        this.statisticChannel = new Channel(() => of(this.statisticValue));\n\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n        this.cardGroupNameChannel = new Channel<number, string>(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => {\n                    return getCardGroupName(cardsGroups, cardID);\n                })\n            )\n        )\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\n\nexport const getCardsByIDs = (cardsGroups: ICardsGroup[], cardsIDs: number[]) => {\n\n    let foundCards: Array<ICard> = [];\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card) => {\n            const foundIndex = cardsIDs.findIndex((value) => value === card.id)\n            if (foundIndex > -1) {\n                foundCards.push(card);\n            }\n        })\n    });\n\n    return foundCards;\n};\n","import {ICard} from '../../../common/types/ICard';\n\nexport const shuffleCards = (array: ICard[]) => {\n    const copy = [];\n    let length = array.length;\n    let randomIndex;\n\n    while (length) {\n        randomIndex = Math.floor(Math.random() * array.length);\n        if (randomIndex in array) {\n            copy.push(array[randomIndex]);\n            delete array[randomIndex];\n            length--;\n        }\n    }\n\n    return copy;\n};\n","import {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\nimport {IStatistic} from '../../../common/types/IStatistic';\n\nexport const getStatistic = (cards: ICard[]): IStatistic => {\n\n    const statisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    cards.forEach((card: ICard) => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            statisticValue.inProgress = statisticValue.inProgress + 1\n        } else if (card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n            statisticValue.todo = statisticValue.todo + 1\n        } else {\n            statisticValue.done = statisticValue.done + 1\n        }\n    });\n\n    return statisticValue;\n};\n","import {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const getCardForRepeating = (cards: ICard[], isRandomRepeating: boolean): ICard => {\n\n    let foundCard\n\n    if (!isRandomRepeating) {\n        foundCard = cards.find((card: ICard) => {\n            return card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO;\n        }) || {\n            id: -1,\n            question: '',\n            answer: '',\n            rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n            dateRepeating: 0\n        };\n\n        if (!foundCard) {\n            foundCard = cards.find((card: ICard) => {\n                return card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS;\n            }) || {\n                id: -1,\n                question: '',\n                answer: '',\n                rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n                dateRepeating: 0\n            };\n        }\n\n        if (cards.length === 1) {\n            foundCard = cards[0]\n        }\n    } else {\n        const cardsWithoutDone = cards.filter((card: ICard) => {\n            return card.rangeOfKnowledge !== IRangeOfKnowledge.DONE\n        })\n        foundCard = cardsWithoutDone[0];\n    }\n\n    return foundCard\n};\n","import {of} from 'rxjs';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {switchMap, tap} from 'rxjs/operators';\nimport {saveBackupFile} from './logic/saveBackupFile';\n\nexport class LocalBackupsService {\n\n    public localBackupChannel: Channel<void, ICardsGroup[]>;\n    public loadBackupChannel: Channel<string, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.localBackupChannel = new Channel(() => this.storageService.getBackup().pipe(\n            tap((backup: ICardsGroup[]) => saveBackupFile(backup))\n        ));\n\n        this.loadBackupChannel = new Channel((backupFile: string) => of('').pipe(\n            switchMap(() => {\n                return this.storageService.setBackup(JSON.parse(backupFile));\n            })\n        ));\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveBackupFile = (backup: ICardsGroup[]) => {\n    const fileData: string = JSON.stringify(backup, null, 4);\n    const blob = new Blob([fileData], {type: \"octet/stream\"});\n    const url = window.URL.createObjectURL(blob);\n\n    const fileBuffer = document.createElement('a');\n\n    if (fileBuffer) {\n        fileBuffer.href = url;\n        fileBuffer.download = 'My Cards.txt';\n        fileBuffer.click();\n    }\n    window.URL.revokeObjectURL(url);\n};\n","import {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ISettings} from '../../common/types/ISettings';\n\nexport class SettingsService {\n\n    public settingsChannel: Channel<string, ISettings>;\n\n    public changeSettingsChannel: Channel<ISettings, ISettings>;\n\n    constructor(storageService: StorageService) {\n\n        this.settingsChannel = new Channel(() => storageService.getSettings());\n\n        this.changeSettingsChannel = new Channel(\n            (settings: ISettings) => storageService.setSettings(settings)\n        );\n    }\n}\n","import {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {IRepeatingArgs} from '../../common/types/IRepeatingArgs';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForViewing} from \"./logic/getCardForViewing\";\nimport {refreshCardRepeatingDate} from \"../../common/logic/refreshCardRepeatingDate\";\nimport {deleteSingleCard} from \"../../common/logic/deleteSingleCard\";\nimport {getCardGroupName} from \"./logic/getCardGroupName\";\n\nexport class CardViewerService {\n    public cardChannel: Channel<number, ICard>;\n    public cardGroupNameChannel: Channel<number, string>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.cardChannel = new Channel((cardID = -1) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardForViewing(cardsGroups, cardID))\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                map((cardsGroups: ICardsGroup[]) => refreshCardRepeatingDate(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups))\n            );\n        });\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n        this.cardGroupNameChannel = new Channel<number, string>(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => {\n                    return getCardGroupName(cardsGroups, cardID);\n                })\n            )\n        )\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}