{"version":3,"sources":["app/parts/toolbar/ToolbarComponent.tsx","MyTools/channel-conception/react-hooks/useChannel.ts","MyTools/react-hooks/useCallbackFactory.ts","MyTools/react-utils/CallbackFactory.ts","MyTools/react-hooks/useUnsubscribe.ts","app/parts/toolbar/channels-callbacks/onToolbarExternalLabelChannel.ts","app/parts/toolbar/channels-callbacks/onPageLabelChannel.ts","MyTools/channel-conception/defaults/empty.ts","app/parts/toolbar/ui-callbacks/onClick.ts","app/parts/toolbar/ToolbarContainer.tsx","app/common/Routs.ts","app/parts/navigation-panel/elements/navigation-link-component/NavigationLinkComponent.tsx","app/parts/navigation-panel/NavigationPanelComponent.tsx","app/parts/navigation-panel/defaults/initialState.ts","app/parts/navigation-panel/channels-callbacks/onNavigationPanelOpenChannel.ts","app/parts/navigation-panel/ui-callbacks/onToggleDrawer.ts","app/parts/navigation-panel/NavigationPanelContainer.tsx","app/parts/error-container/ErrorComponent.tsx","app/parts/error-container/defaults/initialState.ts","app/parts/error-container/channels-callbacks/onErrorChannel.ts","app/parts/error-container/ui-callbacks/onClose.ts","app/parts/error-container/ErrorContainer.tsx","app/parts/spinner/SpinnerComponent.tsx","app/parts/spinner/channels-callbacks/onSpinnerCounterChannel.ts","app/parts/spinner/SpinnerContainer.tsx","app/parts/confirm-dialog/elements/dialog-title/DialogTitleComponent.tsx","app/parts/confirm-dialog/ConfirmDialogComponent.tsx","app/common/defaults/defaultConfirmDialogState.ts","app/parts/confirm-dialog/channels-callbacks/onOpenDialogChannel.ts","app/parts/confirm-dialog/ui-callbacks/onClose.ts","app/parts/confirm-dialog/ui-callbacks/onClickAgree.ts","app/parts/confirm-dialog/ui-callbacks/onClickDisagree.ts","app/parts/confirm-dialog/ConfirmDialogContainer.tsx","MyTools/channel-conception/logic/jsonEqual.ts","MyTools/worker-observable/operators/fromThread.ts","MyTools/worker-observable/logic/functionToThread.ts","MyTools/channel-conception/Channel.ts","app/parts/spinner/SpinnerService.ts","app/common/types/ISortVariant.ts","app/common/elements/add-button/AddButtonComponent.tsx","app/pages/cards-groups-list/elements/circular-progress/CircularProgressComponent.tsx","app/common/elements/list-item-menu/ListItemMenuComponent.tsx","app/common/constants/DATE_FORMAT.ts","app/pages/cards-groups-list/elements/cards-groups-list-item/CardsGroupsListItemComponent.tsx","app/common/elements/filter/FilterComponent.tsx","app/pages/cards-groups-list/CardsGroupsListComponent.tsx","app/common/types/IRangeOfKnowledge.ts","MyTools/react-hooks/useConstructor.ts","app/pages/cards-groups-list/ui-callbacks/onResetProgress.tsx","app/pages/cards-groups-list/ui-callbacks/onEditItem.ts","app/pages/cards-groups-list/ui-callbacks/onDeleteItem.tsx","app/pages/cards-groups-list/ui-callbacks/onOpenEditor.ts","app/pages/cards-groups-list/ui-callbacks/onClickItem.ts","app/pages/cards-groups-list/ui-callbacks/onConstructor.ts","app/pages/cards-groups-list/channels-callbacks/onResetProgressChannel.ts","app/pages/cards-groups-list/channels-callbacks/onGroupDeleteChannel.ts","app/pages/cards-groups-list/channels-callbacks/onGroupsListChannel.ts","app/pages/cards-groups-list/ui-callbacks/onChangeSorting.ts","app/pages/cards-groups-list/channels-callbacks/onChangeFilterChannel.ts","app/common/defaults/defaultFilter.ts","app/pages/cards-groups-list/channels-callbacks/onFilterChannel.ts","app/pages/cards-groups-list/ui-callbacks/onChangeSearchableText.ts","app/pages/cards-groups-list/defaults/initialState.ts","app/pages/cards-groups-list/CardsGroupsListContainer.tsx","app/pages/google-auth/GoogleAuthComponent.tsx","app/pages/google-auth/ui-callbacks/onSuccess.ts","app/pages/google-auth/ui-callbacks/onFailure.ts","app/pages/google-auth/channels-callbacks/onLoginChannel.ts","app/pages/google-auth/GoogleAuthContainer.tsx","app/pages/google-backups/elements/backup-menu-component/BackupMenuComponent.tsx","app/pages/google-backups/elements/backups-list-item-component/BackupsListItemComponent.tsx","app/pages/google-backups/GoogleBackupsComponent.tsx","app/pages/google-backups/channels-callback/onBackupsNameLoadChannelError.ts","app/pages/google-backups/channels-callback/onBackupsNameLoadChannel.ts","app/pages/google-backups/channels-callback/onBackupLoadChannelError.ts","app/pages/google-backups/channels-callback/onBackupLoadChannel.ts","app/pages/google-backups/channels-callback/onBackupDeleteChannel.ts","app/pages/google-backups/channels-callback/onBackupUploadChannel.ts","app/pages/google-backups/ui-callbacks/onConstructor.ts","app/pages/google-backups/ui-callbacks/onLoad.tsx","app/pages/google-backups/ui-callbacks/onDelete.tsx","app/pages/google-backups/GoogleBackupsContainer.tsx","app/pages/cards/elements/cards-list-actions/CardsListActions.tsx","app/common/types/IRepeatingType.ts","app/pages/cards/elements/card-primary-text/CardPrimaryTextComponent.tsx","app/pages/cards/elements/cards-list-item/CardsListItemComponent.tsx","app/pages/cards/elements/cards-list/CardsListComponent.tsx","app/pages/cards/CardsComponent.tsx","app/pages/cards/ui-callbacks/onDeleteSelectedCards.tsx","app/pages/cards/ui-callbacks/onCopySelectedCards.tsx","app/pages/cards/ui-callbacks/onMovingSelectedCards.tsx","app/pages/cards/ui-callbacks/onSelectItem.ts","app/pages/cards/ui-callbacks/onStartSelecting.ts","app/pages/cards/ui-callbacks/onOpenRepeater.ts","app/pages/cards/ui-callbacks/onChangeSorting.ts","app/pages/cards/ui-callbacks/onChangeSearchableText.ts","app/pages/cards/channels-callbacks/onCardsChannel.ts","app/pages/cards/channels-callbacks/onCardsIDsByGroupIDsChannel.ts","app/pages/cards/channels-callbacks/onCardsIDsBySelectedItemsChannel.ts","app/pages/cards/channels-callbacks/onFilterChannel.ts","app/pages/cards/ui-callbacks/onConstructor.ts","app/pages/cards/channels-callbacks/onChangeFilter.ts","app/pages/cards/channels-callbacks/onResetCardProgressChannel.ts","app/pages/cards/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/cards/channels-callbacks/onMovingCardsChannel.ts","app/pages/cards/channels-callbacks/onCopyCardsChannel.ts","app/pages/cards/channels-callbacks/onDeleteCardsChannel.ts","app/pages/cards/channels-callbacks/onExistedGroupsIDsChannel.ts","app/pages/cards/ui-callbacks/onOpenEditor.ts","app/pages/cards/ui-callbacks/onEditItem.ts","app/pages/cards/ui-callbacks/onDeleteItem.tsx","app/pages/cards/ui-callbacks/onResetProgress.ts","app/pages/cards/ui-callbacks/onClickItem.ts","app/pages/cards/defaults/initialState.ts","app/pages/cards/CardsContainer.tsx","app/pages/cards-repeater/elements/statistic/StatisticComponent.tsx","app/pages/cards-repeater/elements/all-cards-repeated/AllCardsRepeatedComponent.tsx","app/common/elements/cards-header/CardsHeaderComponent.tsx","app/common/elements/long-text-viewer/LongTextViewerComponent.tsx","app/common/elements/text-editor/TextEditorComponent.tsx","app/common/elements/long-text-editor/LongTextEditorComponent.tsx","app/common/elements/delete-button-footer/DeleteButtonFooterComponent.tsx","app/common/elements/question-card/QuestionCardComponent.tsx","app/common/elements/answer-card-footer/AnswerCardFooterComponent.tsx","app/common/elements/answer-card/AnswerCardComponent.tsx","app/common/elements/cards-content/CardsContentComponent.tsx","app/pages/cards-repeater/CardsRepeaterComponent.tsx","app/pages/cards-repeater/ui-callbacks/onDeleteCard.tsx","app/pages/cards-repeater/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/cards-repeater/channels-callbacks/onCardGroupNameChannel.ts","app/common/defaults/defaultCard.ts","app/pages/cards-repeater/channels-callbacks/onCardChannel.ts","app/pages/cards-repeater/channels-callbacks/onCardEditingChannel.ts","app/common/defaults/defaultRepeatingProgress.ts","app/pages/cards-repeater/channels-callbacks/onStatisticChannel.ts","app/pages/cards-repeater/channels-callbacks/onRepeatingResultChannel.ts","app/pages/cards-repeater/ui-callbacks/onConstructor.ts","app/pages/cards-repeater/ui-callbacks/onClick.ts","app/pages/cards-repeater/ui-callbacks/onClickCard.ts","app/pages/cards-repeater/ui-callbacks/onBackClick.ts","app/common/logic/initDefaultCard.ts","app/pages/cards-repeater/ui-callbacks/onSwitchEditing.ts","app/pages/cards-repeater/ui-callbacks/onChangeQuestion.ts","app/pages/cards-repeater/ui-callbacks/onChangeAnswer.ts","app/pages/cards-repeater/defaults/initialState.ts","app/pages/cards-repeater/ui-callbacks/onReadByVoiceEngine.ts","app/pages/cards-repeater/channels-callbacks/onReadByVoiceEngineChannel.ts","app/pages/cards-repeater/CardsRepeaterContainer.tsx","app/pages/local-backup/channels-callbacks/onLoadBackupChannel.ts","app/pages/local-backup/ui-callbacks/onFileSelect.tsx","app/pages/local-backup/LocalBackupsContainer.tsx","app/pages/cards-groups-editor/CardsGroupsEditorComponent.tsx","app/pages/cards-groups-editor/ui-callbacks/onChangeGroupName.ts","app/pages/cards-groups-editor/ui-callbacks/onSaveGroup.ts","app/pages/cards-groups-editor/ui-callbacks/onConstructor.ts","app/pages/cards-groups-editor/channels-callbacks/onGroupEditingChannel.ts","app/common/defaults/defaultCardsGroup.ts","app/pages/cards-groups-editor/channels-callbacks/onGroupChannel.ts","app/pages/cards-groups-editor/defaults/initialState.ts","app/pages/cards-groups-editor/CardsGroupsEditorContainer.tsx","app/pages/cards-editor/CardsEditorComponent.tsx","app/pages/cards-editor/channels-callbacks/onCardEditingChannel.ts","app/pages/cards-editor/channels-callbacks/onCardChannel.ts","app/pages/cards-editor/ui-callbacks/onConstructor.ts","app/pages/cards-editor/ui-callbacks/onChangeQuestion.ts","app/pages/cards-editor/ui-callbacks/onChangeAnswer.ts","app/pages/cards-editor/ui-callbacks/onSaveCard.ts","app/pages/cards-editor/defaults/initialState.ts","app/pages/cards-editor/CardsEditorContainer.tsx","app/pages/settings/elements/settings-switcher/SettingsSwitcherComponent.tsx","app/pages/settings/elements/settings-number-input/SettingsNumberInputComponent.tsx","app/pages/settings/SettingsComponent.tsx","app/common/defaults/defaultSettings.ts","app/pages/settings/channels-callbacks/onChangeSettingsChannel.ts","app/pages/settings/channels-callbacks/onSettingsChannel.ts","app/pages/settings/ui-callbacks/onConstructor.ts","app/pages/settings/ui-callbacks/onChangeAlgorithm.ts","app/pages/settings/ui-callbacks/onChangeAutoObsolete.ts","app/pages/settings/ui-callbacks/onChangeTimeInDone.ts","app/pages/settings/ui-callbacks/onChangeTimeInProgress.ts","app/pages/settings/SettingsContainer.tsx","app/pages/card-viewer/CardViewerComponent.tsx","app/pages/card-viewer/ui-callbacks/onDeleteCard.tsx","app/pages/card-viewer/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/card-viewer/channels-callbacks/onCardGroupNameChannel.ts","app/pages/card-viewer/ui-callbacks/onChangeAnswer.ts","app/pages/card-viewer/ui-callbacks/onChangeQuestion.ts","app/pages/card-viewer/ui-callbacks/onSwitchEditing.ts","app/pages/card-viewer/ui-callbacks/onClickYesNoButton.ts","app/pages/card-viewer/ui-callbacks/onClickCard.ts","app/pages/card-viewer/channels-callbacks/onCardChannel.ts","app/pages/card-viewer/channels-callbacks/onCardEditingChannel.ts","app/pages/card-viewer/channels-callbacks/onRepeatingResultChannel.ts","app/pages/card-viewer/ui-callbacks/onConstructor.ts","app/pages/card-viewer/defaults/initialState.ts","app/pages/card-viewer/ui-callbacks/onReadByVoiceEngine.ts","app/pages/card-viewer/channels-callbacks/onReadByVoiceEngineChannel.ts","app/pages/card-viewer/CardViewerContainer.tsx","app/pages/statistic/elements/RemoveButtonComponent.tsx","app/pages/statistic/StatisticComponent.tsx","app/pages/statistic/defaults/initialState.ts","app/pages/statistic/channels-callbacks/onStatisticChannel.ts","app/pages/statistic/ui-callbacks/onConstructor.ts","app/pages/statistic/ui-callbacks/onRemoveStatistic.tsx","app/pages/statistic/channels-callbacks/onRemoveStatisticChannel.ts","app/pages/statistic/StatisticContainer.tsx","app/pages/repeater-editor/elements/selecting-group-list-element/SelectingGroupListItem.tsx","app/pages/repeater-editor/RepeaterEditorComponent.tsx","app/common/defaults/defaultRepeater.ts","app/pages/repeater-editor/defaults/inititalState.ts","app/pages/repeater-editor/channels-callbacks/onGroupsListChannel.ts","app/pages/repeater-editor/channels-callbacks/onSaveRepeaterChannel.ts","app/pages/repeater-editor/ui-callbacks/onSaveRepeater.ts","app/pages/repeater-editor/channels-callbacks/onUpdateGroupsIDsChannel.ts","app/pages/repeater-editor/ui-callbacks/onSelect.ts","app/pages/repeater-editor/channels-callbacks/onRepeaterChannel.ts","app/pages/repeater-editor/ui-callbacks/onChangeName.ts","app/pages/repeater-editor/ui-callbacks/onConstructor.ts","app/pages/repeater-editor/channels-callbacks/onSelectedGroupsChannel.ts","app/pages/repeater-editor/RepeaterEditorContainer.tsx","app/pages/repeater-list/elements/repeater-list-item/RepeaterListItem.tsx","app/pages/repeater-list/RepeaterListComponent.tsx","app/pages/repeater-list/defaults/initialState.ts","app/pages/repeater-list/ui-callbacks/onOpenEditor.ts","app/pages/repeater-list/channels-callbacks/onRepeaterListChannel.ts","app/pages/repeater-list/ui-callbacks/onConstructor.ts","app/pages/repeater-list/channels-callbacks/onStartRepeatingChannel.ts","app/pages/repeater-list/ui-callbacks/onStartRepeating.ts","app/pages/repeater-list/ui-callbacks/onRemoveRepeater.tsx","app/pages/repeater-list/channels-callbacks/onResetProgressChannel.ts","app/pages/repeater-list/ui-callbacks/onResetProgress.ts","app/pages/repeater-list/ui-callbacks/onEditRepeater.ts","app/pages/repeater-list/RepeaterListContainer.tsx","app/parts/navigation/NavigationContainer.tsx","app/pages/google-backups/logic/getBackupFolder.ts","app/common/defaults/defaultStatistic.ts","app/common/services/StorageService.ts","app/pages/cards/logic/getCardsByGroup.ts","app/common/logic/deleteSingleCard.ts","app/pages/cards/logic/selectedItemsObjectToArray.ts","app/pages/cards/logic/getExistedCardsGroups.ts","app/common/logic/changeRangeOfKnowledge.ts","app/pages/cards-repeater/logic/getCardForRepeating.ts","app/pages/cards-repeater/logic/shuffleCards.ts","app/common/logic/refreshCardRepeatingDate.ts","app/pages/card-viewer/logic/getCardGroupName.ts","app/common/logic/updateStatistic.ts","app/common/logic/readByVoiceEngine.ts","app/pages/card-viewer/logic/getCardForViewing.ts","app/parts/selection-dialog/SelectionDialogComponent.tsx","app/parts/selection-dialog/defaults/initialState.ts","app/parts/selection-dialog/channels-callbacks/onOpenDialogChannel.ts","app/parts/selection-dialog/ui-callbacks/onClose.ts","app/parts/selection-dialog/ui-callbacks/onClickItem.ts","app/parts/selection-dialog/SelectionDialogContainer.tsx","app/common/defaults/defaultAppState.ts","app/pages/repeater-list/logic/getRepeaterByID.ts","app/common/services/VoiceService.ts","App.tsx","app/parts/error-container/ErrorService.ts","app/parts/confirm-dialog/ConfirmDialogService.ts","app/parts/selection-dialog/SelectionDialogService.ts","app/parts/navigation-panel/NavigationPanelService.ts","app/parts/toolbar/ToolbarService.tsx","app/parts/toolbar/logic/getPageLabel.ts","app/common/services/DataBaseService.ts","app/common/constants/STORE_NAME.ts","app/pages/cards-groups-editor/CardsGroupsEditorService.ts","app/pages/cards-groups-editor/logic/saveCardsGroup.ts","app/pages/cards-groups-editor/logic/getEditingCardsGroup.ts","app/pages/cards-groups-list/CardsGroupsListService.ts","app/pages/cards-groups-list/logic/updateObsoleteStatus.ts","app/pages/cards-groups-list/logic/updateRepeatingDate.ts","app/pages/cards-groups-list/logic/countRepeatedCardsPercent.ts","app/pages/cards-groups-list/logic/sortByFilter.ts","app/pages/cards-groups-list/logic/deleteGroup.ts","app/pages/cards-groups-list/logic/resetRepeatingProgress.ts","app/pages/google-auth/GoogleAuthService.ts","app/pages/google-backups/GoogleBackupsService.ts","app/pages/google-backups/logic/getBackupFiles.ts","app/pages/google-backups/logic/formatCreatedDate.ts","app/pages/google-backups/logic/loadBackupFile.ts","app/pages/google-backups/logic/createBackupFolder.ts","app/pages/google-backups/logic/createBackupName.ts","app/pages/google-backups/logic/createEmptyBackupFile.ts","app/pages/google-backups/logic/uploadBackupFile.ts","app/pages/google-backups/logic/deleteBackupFile.ts","app/pages/cards-editor/CardsEditorService.ts","app/pages/cards-editor/logic/saveCard.ts","app/pages/cards-editor/logic/getEditingCard.ts","app/pages/cards/CardsService.ts","app/pages/cards/logic/filterCards.ts","app/pages/cards/logic/resetCardProgress.ts","app/pages/cards/logic/changeCardsGroup.ts","app/pages/cards/logic/copyCardsInGroup.ts","app/pages/cards/logic/deleteCards.ts","app/pages/cards/logic/cardsToIDS.ts","app/pages/cards/logic/selectedItemsToIDs.ts","app/pages/cards-repeater/CardsRepeaterService.ts","app/pages/cards-repeater/logic/getCardsByIDs.ts","app/pages/cards-repeater/logic/getRepeatingProgress.ts","app/pages/local-backup/LocalBackupsService.ts","app/pages/local-backup/logic/saveBackupFile.ts","app/pages/settings/SettingsService.ts","app/pages/card-viewer/CardViewerService.tsx","app/pages/statistic/StatisticService.ts","app/pages/statistic/logic/getRowsFromStatistic.ts","app/pages/repeater-list/RepeaterListService.ts","app/pages/repeater-list/logic/updateRepeatersProgress.ts","app/pages/repeater-list/logic/getCardsIDsFromRepeater.ts","app/pages/repeater-list/logic/removeRepeater.ts","app/pages/repeater-list/logic/resetRepeatingProgress.ts","app/pages/repeater-editor/RepeaterEditorService.ts","app/pages/repeater-editor/logic/updateExistRepeater.ts","app/pages/repeater-editor/logic/updateGroupsIDs.ts","app/pages/repeater-editor/logic/getRepeaterByID.ts","app/pages/repeater-editor/logic/getSelectedGroups.ts","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["ToolbarComponent","pageLabel","onClick","AppBar","position","Toolbar","className","IconButton","edge","color","Typography","variant","useChannel","channel","next","additionalErrorHandler","deepEqual","value","useRef","subscription","current","closed","subscribe","useEffect","unsubscribe","useCallbackFactory","initialState","services","context","settings","location","useLocation","history","useHistory","useState","state","setState","setSubscription","subscriptions","forEach","subscribtion","push","useUnsubscribe","callbackSettings","useContext","callbackFactory","callback","args","onToolbarExternalLabelChannel","label","onPageLabelChannel","empty","navigationPanelService","navigationPanelOpenChannel","ToolbarContainer","AppContext","toolbarService","toolbarExternalLabelChannel","pageLabelChannel","pathname","click","useCallback","Routs","path","name","NavigationLinkComponent","toggleDrawer","ListItem","button","to","NavigationPanelComponent","isOpen","SwipeableDrawer","anchor","open","onClose","onOpen","List","onNavigationPanelOpenChannel","prevState","onToggleDrawer","event","keyboardEvent","nativeEvent","type","key","NavigationPanelContainer","ErrorComponent","errorMessage","handleClose","Dialog","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onErrorChannel","ErrorContainer","errorService","errorChannel","close","SpinnerComponent","isShow","LinearProgress","onSpinnerCounterChannel","spinnerCounter","SpinnerContainer","spinnerService","spinnerCounterChannel","DialogTitleComponent","titleBackgroundColor","icon","style","backgroundColor","ConfirmDialogComponent","onClickAgree","onClickDisagree","message","autoFocus","defaultConfirmDialogState","onOpenDialogChannel","confirmDialogContainerState","confirmDialogService","confirmationChannel","ConfirmDialogContainer","openDialogChannel","clickAgree","clickDisagree","jsonEqual","other","Array","length","console","log","JSON","stringify","fromThread","arg","workerFunction","thread","functionString","toString","functionBlob","Blob","Worker","URL","createObjectURL","functionToThread","Observable","observer","postMessage","onmessage","data","complete","terminate","onerror","err","error","Channel","observableCreator","outputSubject","previousEmittedValue","this","Subject","customErrorHandler","outputSubjectSubscription","globalNextHandler","globalErrorHandler","result","equalityError","setGlobalErrorHandler","setGlobalNextHandler","ISortVariant","AddButtonComponent","Fab","size","CircularProgressComponent","percent","Box","display","CircularProgress","top","left","bottom","right","alignItems","justifyContent","component","Math","round","ListItemMenuComponent","onEdit","onDelete","onResetProgress","React","anchorEl","setAnchorEl","keepMounted","Boolean","MenuItem","currentTarget","DATE_FORMAT","CardsGroupsListItemComponent","cardsGroup","onClickItem","onEditItem","onDeleteItem","ListItemIcon","percentRepeatedCards","ListItemText","primary","nameCardsGroup","secondary","format","repeatingDate","Date","FilterComponent","onChangeSearchableText","filter","onChangeSorting","sortVariants","Accordion","AccordionSummary","expandIcon","TextField","required","placeholder","onChange","target","searchableText","marginRight","stopPropagation","preventDefault","AccordionDetails","Select","sort","map","IRangeOfKnowledge","CardsGroupsListComponent","cardsGroups","onOpenEditor","height","NONE","DATE_ASK","DATE_DESK","NAME_ASK","NAME_DESK","PROGRESS_ASK","PROGRESS_DESC","itemData","itemSize","itemCount","overscanCount","width","index","cardGroup","useConstructor","isFirstRun","cardsGroupID","cardsGroupsListService","isConfirm","resetProgressChannel","groupDeleteChannel","onConstructor","groupsListChannel","filterChannel","onResetProgressChannel","onGroupDeleteChannel","onGroupsListChannel","sortVariant","newFilter","changeFilterChannel","onChangeFilterChannel","defaultFilter","onFilterChannel","CardsGroupsListContainer","clickItem","openEditor","deleteItem","editItem","resetProgress","changeSorting","changeSearchableText","GoogleAuthComponent","onSuccess","onFailure","clientId","buttonText","scope","response","googleAuthService","loginChannel","accessToken","onLoginChannel","replace","GoogleAuthContainer","success","failure","BackupMenuComponent","backupID","onLoad","BackupsListItemComponent","backupName","backupDate","GoogleBackupsComponent","backupsFiles","onCreate","backup","createdTime","onBackupsNameLoadChannelError","onBackupsNameLoadChannel","onBackupLoadChannelError","onBackupLoadChannel","onBackupDeleteChannel","googleBackupsService","backupsNameLoadChannel","onBackupUploadChannel","backupLoadChannel","backupDeleteChannel","GoogleBackupsContainer","backupUploadChannel","load","deleteBackup","CardsListActions","onOpenRepeater","onStartSelecting","onMovingSelectedCards","onDeleteSelectedCards","onCopySelectedCards","hideOpenRepeaterButton","hideOpenEditorButton","hideMovingSelectedCardsButton","hideDeleteSelectedCardsButton","hideCopySelectedCardButton","IRepeatingType","CardPrimaryTextComponent","card","question","answer","CardsListItemComponent","onSelect","isEnabledSelecting","isSelected","dateText","dateRepeating","rangeOfKnowledge","DONE","IN_PROGRESS","getIconColor","Checkbox","checked","tabIndex","disableRipple","CardsListComponent","cards","onSelectItem","selectedItems","CardsComponent","QUESTION_ASK","QUESTION_DESK","STATUS_ASK","STATUS_DESK","ANSWER_ASK","ANSWER_DESK","cardsListService","deleteCardsChannel","selectionDialogService","selectionChannel","groupID","copyCardsChannel","destinationGroupID","title","selectionItems","existedGroupsIDs","movingCardsChannel","cardID","cardsIDsBySelectedItemsChannel","cardsIDsByGroupIDsChannel","onCardsChannel","onCardsIDsByGroupIDsChannel","cardsIDsForRepeating","onCardsIDsBySelectedItemsChannel","cardsChannel","existedGroupsIDsChannel","onChangeFilter","onResetCardProgressChannel","onDeleteSingleCardChannel","onMovingCardsChannel","onCopyCardsChannel","onDeleteCardsChannel","onExistedGroupsIDsChannel","deleteSingleCardChannel","resetCardProgressChannel","CardsContainer","startSelecting","openRepeater","selectItem","movingSelectedCards","copySelectedCards","deleteSelectedCards","StatisticComponent","repeatingProgress","todo","inProgress","done","AllCardsRepeatedComponent","onBackClick","CardsHeaderComponent","isQuestionSide","onSwitchEditing","onReadByVoiceEngine","isEditable","Campaign","gutterBottom","Check","Edit","LongTextViewerComponent","viewHeight","text","onClickText","paddingTop","TextEditorComponent","onChangeText","changeableText","multiline","LongTextEditorComponent","DeleteButtonFooterComponent","CardActions","QuestionCardComponent","onClickCard","cardHeight","onDeleteCard","onChangeQuestion","Card","CardContent","AnswerCardFooterComponent","onClickYesNoButton","AnswerCardComponent","onChangeAnswer","getText","CardsContentComponent","CardsRepeaterComponent","cardsRepeaterService","cardChannel","onCardGroupNameChannel","defaultCard","onCardChannel","cardGroupNameChannel","repeatingProgressChannel","onCardEditingChannel","defaultRepeatingProgress","onStatisticChannel","statistic","onRepeatingResultChannel","isKnown","repeatingResultChannel","goBack","initDefaultCard","getTime","cardsEditorService","cardEditingChannel","editableCard","readByVoiceEngineChannel","onReadByVoiceEngineChannel","CardRepeaterContainer","clickCard","backClick","switchEditing","changeQuestion","changeAnswer","deleteCard","readByVoiceEngine","onLoadBackupChannel","onFileSelect","localBackupsService","file","files","reader","FileReader","onload","readerEvent","games","loadBackupChannel","readAsText","LocalBackupsContainer","localBackupChannel","handleFileSelect","CardsGroupsEditorComponent","groupName","onChangeGroupName","onSaveGroup","cardsGroupsEditorService","groupEditingChannel","groupChannel","onGroupEditingChannel","defaultCardsGroup","onGroupChannel","CardsGroupsEditorContainer","changeGroupName","saveGroup","CardsEditorComponent","onSaveCard","CardsEditorContainer","saveCard","SettingsSwitcherComponent","FormControlLabel","control","Switch","SettingsNumberInputComponent","Input","Number","SettingsComponent","onChangeAlgorithm","onChangeAutoObsolete","onChangeTimeInDone","onChangeTimeInProgress","FormGroup","FormLabel","RadioGroup","repeatingType","DEFAULT","Radio","RANDOM","autoObsolete","isEnable","timeInDone","timeInProgress","defaultSettings","onChangeSettingsChannel","settingsService","settingsChannel","onSettingsChannel","changeSettingsChannel","SettingsContainer","changeAlgorithm","changeAutoObsolete","changeTimeInDone","changeTimeInProgress","CardViewerComponent","props","cardViewerService","CardViewerContainer","clickYesNoButton","RemoveButtonComponent","rows","onRemoveStatistic","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","row","date","statisticService","statisticChannel","removeStatisticChannel","onRemoveStatisticChannel","StatisticContainer","removeStatistic","SelectingGroupListItem","RepeaterEditorComponent","onSaveRepeater","selectedGroups","onChangeName","repeaterName","defaultRepeater","cardsGroupsIDs","repeater","onSaveRepeaterChannel","repeaterEditorService","saveRepeaterChannel","onUpdateGroupsIDsChannel","updateGroupsIDsChannel","onRepeaterChannel","selectedGroupsChannel","repeaterID","repeaterChannel","onSelectedGroupsChannel","RepeaterEditorContainer","saveRepeater","select","changeName","RepeaterListItem","onStartRepeating","onDeleteRepeater","RepeaterListComponent","repeaters","onEditRepeater","onRepeaterListChannel","repeaterListService","repeaterListChannel","onStartRepeatingChannel","cardsIDs","startRepeatingChannel","onRemoveRepeater","removingRepeaterChannel","RepeaterListContainer","startRepeating","removeRepeater","editRepeater","NavigationContainer","exact","from","getBackupFolder","token","url","googleDriveFilesAPI","fetch","headers","method","then","json","find","mimeType","defaultStatistic","dailyStatistic","cardsInProgressFrequency","cardsInDone","StorageService","dataBaseService","cardsStorageID","authTokenLocalStorageID","settingsID","filterID","statisticID","repeatersID","getBackup","getBackupFromDataBase","a","get","setBackupToDataBase","set","Promise","resolve","reject","authToken","localStorage","getItem","setItem","parse","getCardsByGroup","foundCardsGroup","deleteSingleCard","cardGroupIndex","findIndex","cardIndex","item","selectedItemsObjectToArray","selectedItemsObject","array","getExistedCardsGroups","changeRangeOfKnowledge","TO_DO","getCardForRepeating","foundCard","randomIndex","copy","floor","random","shuffleCards","refreshCardRepeatingDate","getCardGroupName","foundIndex","updateStatistic","today","getDate","month","getMonth","year","getFullYear","foundDayIndex","dayStatistic","voice","synth","window","speechSynthesis","speechSynthesisUtterance","SpeechSynthesisUtterance","warn","lang","rate","speak","getCardForViewing","i","SelectionDialogComponent","itemID","SelectionDialogContainer","defaultAppState","getRepeaterByID","repeaterIndex","VoiceService","voices","addEventListener","getVoices","createContext","of","difference","pipe","tap","getPageLabel","voiceService","storageService","storeName","dataBase","DATA_BASE_NAME","put","openDB","upgrade","db","createObjectStore","editedCardGroup","saveCardsGroup","setBackup","cardGroupID","getEditingCardsGroup","switchMap","getSettings","defer","millisecondsInDay","currentDate","timeInProgressMilliseconds","timeInDoneMilliseconds","differences","updateObsoleteStatus","updateRepeatingDate","statusDone","countRepeatedCardsPercent","mergeMap","getFilter","storedFilter","sortedCards","toLowerCase","indexOf","firstCardGroup","secondCardsGroup","sortByFilter","deleteGroup","resetRepeatingProgress","storedFilters","setFilter","setAuthToken","getAuthToken","folder","getBackupFiles","googleDriveFiles","googleDriveFile","outputFormat","getHours","getMinutes","formatCreatedDate","fileId","loadBackupFile","requestOptions","body","createBackupFolder","folderId","cardsAmount","createBackupName","fileName","parents","createEmptyBackupFile","responseType","uploadBackupFile","fileID","deleteBackupFile","getEditingCard","foundByTextCards","card1","card2","filterCards","resetCardProgress","selectedCardsIDs","selectedCards","changeCardsGroup","copyCardsInGroup","deleteCards","cardsToIDS","ids","selectedItemsToIDs","statisticValue","foundCards","getCardsByIDs","getRepeatingProgress","getStatistic","setStatistic","getRandomVoice","fileData","blob","fileBuffer","document","createElement","href","download","revokeObjectURL","saveBackupFile","backupFile","settingService","setSettings","reverse","dateAsString","monthAsString","inProgressSum","Object","keys","k","doneSum","getRowsFromStatistic","getRepeaters","cardsCount","repeatedCardsCount","updateRepeatersProgress","idsForRepeating","getCardsIDsFromRepeater","setRepeaters","updateExistRepeater","updateGroupsIDs","getSelectedGroups","App","appState","setAppState","screen","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","catch","ReactDOM","render","getElementById","process","origin","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0edf16f5.chunk.js","sourcesContent":["import {FC} from 'react';\nimport {AppBar, IconButton, Toolbar, Typography} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nimport './ToolbarComponent.css'\nimport {IToolbarComponent} from \"./types/IToolbarComponent\";\n\nexport const ToolbarComponent: FC<IToolbarComponent> = ({pageLabel, onClick}) => {\n\n    return (\n        <AppBar position=\"fixed\">\n            <Toolbar className=\"toolbar\">\n                <IconButton className=\"toolbar_menu-icon\" edge=\"start\" color=\"inherit\" aria-label=\"menu\"\n                            onClick={onClick}>\n                    <MenuIcon/>\n                </IconButton>\n                <Typography className=\"toolbar_label\" variant=\"h6\">\n                    {pageLabel}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n};\n","import {useEffect, useRef} from 'react';\nimport {Subscription} from 'rxjs';\n\nimport {Channel} from '../Channel';\n\nexport const useChannel = <A, D>(\n    channel: Channel<A, D>,\n    next?: (value: D) => void,\n    additionalErrorHandler?: (error: Error) => void,\n    deepEqual: boolean = false\n) => {\n\n    const value = useRef<{ subscription: Subscription | null }>({\n        subscription: null\n    });\n\n    if (!value.current.subscription || value.current.subscription.closed) {\n        const subscription = channel.subscribe(next, additionalErrorHandler, deepEqual);\n        value.current.subscription = subscription;\n    }\n\n    useEffect(() => {\n        return () => {\n            channel.unsubscribe();\n        }\n    }, [channel]);\n};\n","import {useHistory, useLocation} from \"react-router\";\nimport {Context, useContext, useState} from \"react\";\nimport {useUnsubscribe} from \"./useUnsubscribe\";\nimport {ICallbackSettings} from \"./types/ICallbackSettings\";\nimport {CallbackFactory} from \"../react-utils/CallbackFactory\";\n\nexport const useCallbackFactory = <T extends ICallbackSettings<any, any, any, any>>(\n    initialState: T[\"state\"],\n    services: T[\"services\"],\n    context: Context<T[\"context\"]>\n) => {\n    const location = useLocation<T[\"location\"]>();\n\n    const history = useHistory<T[\"location\"]>();\n\n    const [state, setState] = useState<T[\"state\"]>(initialState);\n\n    const {setSubscription} = useUnsubscribe();\n\n    const value = useContext<T[\"context\"]>(context);\n\n    const callbackSettings: ICallbackSettings<T[\"state\"], T[\"services\"], T[\"location\"][\"state\"], T[\"context\"]> = {\n        location,\n        history,\n        services,\n        state,\n        setState,\n        context: value,\n        setSubscription\n    }\n\n    return {\n        callbackFactory: CallbackFactory(callbackSettings),\n        callbackSettings\n    };\n}","export type ICallback<S, A> = (settings: Pick<S, Exclude<keyof S, 'state'>>, args?: A) => void\n\nexport const CallbackFactory = <S>(settings: S) => <A>(callback: ICallback<S, A>) => {\n    return (args?: A) => callback(settings, args)\n}","import {useEffect, useRef} from 'react';\nimport {Subscription} from 'rxjs';\n\nexport const useUnsubscribe = () => {\n\n    const subscriptions = useRef<Array<Subscription>>([]);\n\n    useEffect(() => {\n        return () => {\n            subscriptions.current.forEach((subscription: Subscription) => {\n                if( !subscription.closed ) {\n                    subscription.unsubscribe();\n                }\n            });\n            subscriptions.current = [];\n        }\n    }, []);\n\n    return { setSubscription: (subscribtion: Subscription) => {\n        subscriptions.current.push(subscribtion);\n    }}\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ToolbarCallbackSettings} from \"../types/ToolbarCallbackSettings\";\n\nexport const onToolbarExternalLabelChannel: ICallback<ToolbarCallbackSettings, string> = (\n    {setState},\n    label = ''\n) => {\n    setState(() => label);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ToolbarCallbackSettings} from \"../types/ToolbarCallbackSettings\";\n\nexport const onPageLabelChannel: ICallback<ToolbarCallbackSettings, string> = (\n    {setState},\n    label = ''\n) => {\n    setState(() => label);\n}","export const empty = {\n    empty: 'empty'\n};","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ToolbarCallbackSettings} from \"../types/ToolbarCallbackSettings\";\nimport {MouseEvent} from \"react\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onClick: ICallback<ToolbarCallbackSettings, MouseEvent> = (\n    {services: {navigationPanelService}}\n) => {\n    navigationPanelService.navigationPanelOpenChannel.next(empty);\n}","import React, {FC, useCallback, useEffect} from 'react';\n\nimport {ToolbarComponent} from './ToolbarComponent';\nimport {useChannel} from \"../../../MyTools/channel-conception/react-hooks/useChannel\";\nimport {IToolbarContainer} from \"./types/IToolbarContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {ToolbarCallbackSettings} from \"./types/ToolbarCallbackSettings\";\nimport {onToolbarExternalLabelChannel} from \"./channels-callbacks/onToolbarExternalLabelChannel\";\nimport {onPageLabelChannel} from \"./channels-callbacks/onPageLabelChannel\";\nimport {onClick} from \"./ui-callbacks/onClick\";\n\nexport const ToolbarContainer: FC<IToolbarContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<ToolbarCallbackSettings>(\n        '',\n        services,\n        AppContext\n    );\n\n    const {services: {toolbarService, navigationPanelService}, state, location} = callbackSettings;\n\n    useChannel(toolbarService.toolbarExternalLabelChannel, callbackFactory(onToolbarExternalLabelChannel))\n    useChannel(toolbarService.pageLabelChannel, callbackFactory(onPageLabelChannel))\n\n    useEffect(() => {\n        toolbarService.pageLabelChannel.next(location.pathname);\n    }, [location.pathname]);\n\n    const click = useCallback(callbackFactory(onClick), []);\n\n    return (\n        <ToolbarComponent pageLabel={state} onClick={click}/>\n    )\n};\n","export const Routs = {\n    googleAuth: {\n        path: '/google-auth',\n        name: 'Auth Google'\n    },\n\n    googleBackups: {\n        path: '/google-backups',\n        name: 'Google Backups'\n    },\n\n    cardsGroups: {\n        path: '/cards-groups',\n        name: 'Cards Groups'\n    },\n\n    cards: {\n        path: '/cards-list',\n        name: 'Cards'\n    },\n\n    cardsRepeater: {\n        path: '/cards-repeater',\n        name: 'Repeat Card'\n    },\n\n    cardsEditor: {\n        path: '/cards-editor',\n        name: 'Edit Card'\n    },\n\n    localBackups: {\n        path: '/local-backups',\n        name: 'Local Backups'\n    },\n\n    cardsGroupEditor: {\n        path: '/cards-group-editor',\n        name: 'Edit Group'\n    },\n\n    settings: {\n        path: '/settings',\n        name: 'Settings'\n    },\n\n    cardViewer: {\n        path: '/card-viewer',\n        name: 'Card Preview'\n    },\n\n    statistic: {\n        path: '/statistic',\n        name: 'Statistic'\n    },\n\n    repeaterEditor: {\n        path: '/repeater-editor',\n        name: 'Edit repeater'\n    },\n\n    repeaterList: {\n        path: '/repeater-list',\n        name: 'Repeater list'\n    }\n};\n","import {Link} from 'react-router-dom';\nimport {ListItem} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {INavigationLinkComponent} from \"./types/INavigationLinkComponent\";\n\nexport const NavigationLinkComponent: FC<INavigationLinkComponent> = (\n    {\n        path,\n        name,\n        toggleDrawer\n    }: INavigationLinkComponent\n) => {\n    return (\n        <ListItem button>\n            <Link to={path} onClick={toggleDrawer}>\n                {name}\n            </Link>\n        </ListItem>\n    )\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {List, SwipeableDrawer} from '@mui/material';\n\nimport {Routs} from '../../common/Routs';\nimport {NavigationLinkComponent} from './elements/navigation-link-component/NavigationLinkComponent';\nimport {INavigationPanelComponent} from \"./types/INavigationPanelComponent\";\n\nexport const NavigationPanelComponent: FC<INavigationPanelComponent> = ({isOpen, toggleDrawer}) => {\n\n    return (\n        <SwipeableDrawer\n            anchor=\"left\"\n            open={isOpen}\n            onClose={toggleDrawer}\n            onOpen={toggleDrawer}\n        >\n            <List>\n                <NavigationLinkComponent path={Routs.cardsGroups.path} name={Routs.cardsGroups.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.repeaterList.path} name={Routs.repeaterList.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.statistic.path} name={Routs.statistic.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.googleAuth.path} name={Routs.googleAuth.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.localBackups.path} name={Routs.localBackups.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.settings.path} name={Routs.settings.name}\n                                         toggleDrawer={toggleDrawer}/>\n            </List>\n        </SwipeableDrawer>\n    )\n};\n\n\n","export const initialState = {\n    isOpen: false\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {NavigationPanelCallbackSettings} from \"../types/NavigationPanelCallbackSettings\";\nimport {IEmpty} from \"../../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport const onNavigationPanelOpenChannel: ICallback<NavigationPanelCallbackSettings, IEmpty> = (\n    {setState}\n) => {\n    setState((prevState) => {\n        return {...prevState, isOpen: true}\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {NavigationPanelCallbackSettings} from \"../types/NavigationPanelCallbackSettings\";\nimport {SyntheticEvent} from \"react\";\n\nexport const onToggleDrawer: ICallback<NavigationPanelCallbackSettings, SyntheticEvent<Element, Event>> = (\n    {setState},\n    event\n) => {\n    const keyboardEvent = event && event.nativeEvent as KeyboardEvent\n    if (event && event.type === 'keydown' && (keyboardEvent?.key === 'Tab' || keyboardEvent?.key === 'Shift')) {\n        return;\n    }\n\n    setState((prevState) => {\n        return {...prevState, isOpen: !prevState.isOpen}\n    });\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {NavigationPanelComponent} from './NavigationPanelComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {INavigationPanelContainer} from \"./types/INavigationPanelContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {initialState} from \"./defaults/initialState\";\nimport {onNavigationPanelOpenChannel} from \"./channels-callbacks/onNavigationPanelOpenChannel\";\nimport {onToggleDrawer} from \"./ui-callbacks/onToggleDrawer\";\nimport {NavigationPanelCallbackSettings} from \"./types/NavigationPanelCallbackSettings\";\n\nexport const NavigationPanelContainer: FC<INavigationPanelContainer> = (services) => {\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<NavigationPanelCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {navigationPanelService}} = callbackSettings\n\n    useChannel(navigationPanelService.navigationPanelOpenChannel, callbackFactory(onNavigationPanelOpenChannel));\n\n    const toggleDrawer = useCallback(callbackFactory(onToggleDrawer), []);\n\n    return (\n        <NavigationPanelComponent isOpen={state.isOpen} toggleDrawer={toggleDrawer}/>\n    )\n};\n","import {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {IErrorComponent} from \"./types/IErrorComponent\";\n\nexport const ErrorComponent: FC<IErrorComponent> = ({isOpen, errorMessage, handleClose}) => {\n\n    return (\n        <Dialog\n            open={isOpen}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n            onClose={handleClose}\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"Something went wrong\"}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {errorMessage}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button color=\"primary\" onClick={handleClose}>\n                    Ok\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n","export const initialState = {\n    isOpen: false,\n    errorMessage: ''\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ErrorCallbackSettings} from \"../types/ErrorCallbackSettings\";\n\nexport const onErrorChannel: ICallback<ErrorCallbackSettings, string> = (\n    {setState},\n    errorMessage = ''\n) => {\n    setState(() => {\n        return {\n            isOpen: true,\n            errorMessage\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ErrorCallbackSettings} from \"../types/ErrorCallbackSettings\";\nimport {initialState} from \"../defaults/initialState\";\n\nexport const onClose: ICallback<ErrorCallbackSettings, void> = (\n    {setState}\n) => {\n    setState(() => {\n        return initialState\n    })\n}","import React, {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ErrorComponent} from './ErrorComponent';\nimport {IErrorContainer} from \"./types/IErrorContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {initialState} from \"./defaults/initialState\";\nimport {onErrorChannel} from \"./channels-callbacks/onErrorChannel\";\nimport {onClose} from \"./ui-callbacks/onClose\";\nimport {ErrorCallbackSettings} from \"./types/ErrorCallbackSettings\";\n\nexport const ErrorContainer: FC<IErrorContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<ErrorCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {errorService}} = callbackSettings\n\n    useChannel(errorService.errorChannel, callbackFactory(onErrorChannel));\n\n    const close = useCallback(callbackFactory(onClose), []);\n\n    return <ErrorComponent isOpen={state.isOpen} errorMessage={state.errorMessage} handleClose={close}/>\n};\n","import {LinearProgress} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {ISpinnerComponent} from \"./types/ISpinnerComponent\";\n\nexport const SpinnerComponent: FC<ISpinnerComponent> = ({isShow}) => {\n    return (\n        isShow ? <LinearProgress color=\"secondary\" /> : null\n    )\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {SpinnerCallbackSettings} from \"../types/SpinnerCallbackSettings\";\n\nexport const onSpinnerCounterChannel: ICallback<SpinnerCallbackSettings, number> = (\n    {setState},\n    spinnerCounter = 0\n) => {\n    setState(() => spinnerCounter !== 0);\n}","import * as React from 'react';\nimport {FC} from 'react';\n\nimport {SpinnerComponent} from './SpinnerComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ISpinnerContainer} from \"./types/ISpinnerContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {SpinnerCallbackSettings} from \"./types/SpinnerCallbackSettings\";\nimport {onSpinnerCounterChannel} from \"./channels-callbacks/onSpinnerCounterChannel\";\n\nexport const SpinnerContainer: FC<ISpinnerContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<SpinnerCallbackSettings>(\n        false,\n        services,\n        AppContext\n    );\n\n    const {state, services: {spinnerService}} = callbackSettings\n\n    useChannel<number, number>(spinnerService.spinnerCounterChannel, callbackFactory(onSpinnerCounterChannel));\n\n    return <SpinnerComponent isShow={state}/>\n};\n","import DialogTitle from \"@mui/material/DialogTitle\";\nimport React, {FC} from \"react\";\n\nimport {IDialogTitleComponent} from \"./types/IDialogTitleComponent\";\nimport './DialogTitleComponent.css'\n\nexport const DialogTitleComponent: FC<IDialogTitleComponent> = (\n    {\n        titleBackgroundColor = 'grey',\n        icon = null\n    }\n) => {\n    return <DialogTitle\n        id=\"alert-dialog-title\"\n        style={\n            {\n                backgroundColor: titleBackgroundColor,\n                color: 'white'\n            }\n        }\n    >\n        <div className=\"dialog-title_value\">\n            Warning {icon}\n        </div>\n    </DialogTitle>\n}","import React, {FC} from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\nimport {IConfirmDialogComponent} from \"./types/IConfirmDialogComponent\";\nimport {DialogTitleComponent} from \"./elements/dialog-title/DialogTitleComponent\";\n\nexport const ConfirmDialogComponent: FC<IConfirmDialogComponent> = (\n    {\n        onClickAgree,\n        onClickDisagree,\n        isOpen,\n        message,\n        onClose,\n        titleBackgroundColor = 'grey',\n        icon = null\n    }\n) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitleComponent\n                    titleBackgroundColor={titleBackgroundColor}\n                    icon={icon}\n                />\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClickDisagree} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={onClickAgree} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n","import {ConfirmDialogContainerState} from \"../../parts/confirm-dialog/types/ConfirmDialogContainerState\";\n\nexport const defaultConfirmDialogState: ConfirmDialogContainerState = {\n    isOpen: false,\n    message: '',\n    icon: null,\n    titleBackgroundColor: 'grey'\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\nimport {ConfirmDialogContainerState} from \"../types/ConfirmDialogContainerState\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onOpenDialogChannel: ICallback<ConfirmDialogCallbackSettings, ConfirmDialogContainerState> = (\n    {setState, services: {confirmDialogService}},\n    confirmDialogContainerState = defaultConfirmDialogState\n) => {\n    setState(() => {\n        return {...confirmDialogContainerState}\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\n\nexport const onClose: ICallback<ConfirmDialogCallbackSettings, void> = (\n    {setState, services: {confirmDialogService}}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            isOpen: false, message: ''\n        }\n    });\n    confirmDialogService.confirmationChannel.unsubscribe();\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\n\nexport const onClickAgree: ICallback<ConfirmDialogCallbackSettings, void> = (\n    {services: {confirmDialogService}}\n) => {\n    confirmDialogService.confirmationChannel.next(true);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\n\nexport const onClickDisagree: ICallback<ConfirmDialogCallbackSettings, void> = (\n    {services: {confirmDialogService}}\n) => {\n    confirmDialogService.confirmationChannel.next(false);\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {ConfirmDialogComponent} from './ConfirmDialogComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {IConfirmDialogContainer} from \"./types/IConfirmDialogContainer\";\nimport {defaultConfirmDialogState} from \"../../common/defaults/defaultConfirmDialogState\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {onOpenDialogChannel} from \"./channels-callbacks/onOpenDialogChannel\";\nimport {onClose} from \"./ui-callbacks/onClose\";\nimport {onClickAgree} from \"./ui-callbacks/onClickAgree\";\nimport {onClickDisagree} from \"./ui-callbacks/onClickDisagree\";\nimport {ConfirmDialogCallbackSettings} from \"./types/ConfirmDialogCallbackSettings\";\n\nexport const ConfirmDialogContainer: FC<IConfirmDialogContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<ConfirmDialogCallbackSettings>(\n        defaultConfirmDialogState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {confirmDialogService}} = callbackSettings\n\n    useChannel(confirmDialogService.openDialogChannel, callbackFactory(onOpenDialogChannel));\n\n    const close = useCallback(callbackFactory(onClose), []);\n    const clickAgree = useCallback(callbackFactory(onClickAgree), [])\n    const clickDisagree = useCallback(callbackFactory(onClickDisagree), [])\n\n    return <ConfirmDialogComponent\n        isOpen={state.isOpen}\n        onClickAgree={clickAgree}\n        onClickDisagree={clickDisagree}\n        onClose={close}\n        message={state.message}\n        titleBackgroundColor={state.titleBackgroundColor}\n        icon={state.icon}\n    />\n};\n","export const jsonEqual = <T>(args: { value: T, other: T }) => {\n    const {value, other} = args;\n\n    if(typeof value !== 'object') {\n        return value === other;\n    }\n\n    if(value instanceof Array && other instanceof Array) {\n       if(value.length !== other.length) {\n           return false;\n       }\n    }\n    console.log('checked')\n\n    return JSON.stringify(value) === JSON.stringify(other);\n}","import {Observable} from 'rxjs';\n\nimport {functionToThread} from \"../logic/functionToThread\";\n\nexport const fromThread = <A, R>(arg: A, workerFunction: (arg: A) => R): Observable<R> => {\n\n    const thread = functionToThread(workerFunction)\n\n    return new Observable(observer => {\n        thread.postMessage(arg);\n        thread.onmessage = (event: MessageEvent) => {\n            observer.next(event.data);\n            observer.complete();\n            thread.terminate();\n        }\n        thread.onerror = (err) => {\n            observer.error(err);\n        }\n    })\n}","export const functionToThread = <A, R>(workerFunction: (arg: A) => R) => {\n\n    const functionString = `(function worker() {\n            var self = this;\n            self.onmessage = function(e) {\n                const result = (${workerFunction.toString()})(e.data)\n                self.postMessage(result);\n            }\n        })()`;\n\n    const functionBlob = new Blob([functionString], {type: 'text/javascript'});\n\n    return new Worker(URL.createObjectURL(functionBlob));\n}","import {Observable, Subject, Subscription} from 'rxjs';\n\nimport {jsonEqual} from \"./logic/jsonEqual\";\nimport {fromThread} from \"../worker-observable/operators/fromThread\";\n\nexport class Channel<A, D> {\n\n    private readonly outputSubject: Subject<D>;\n    private observableCreator: (arg: A) => Observable<D>;\n    private subscriptions: Subscription[] = [];\n    private previousEmittedValue: D | null = null;\n    private static globalErrorHandler = (error: Error) => {};\n    private static globalNextHandler = () => {};\n\n    constructor(\n        observableCreator: (arg: A) => Observable<D>\n    ) {\n        this.outputSubject = new Subject<D>();\n        this.observableCreator = observableCreator;\n    }\n\n    next(value: A) {\n        //Don't make implement complete method because it can affect on subject behaviour in app\n        this.subscriptions.push(this.observableCreator(value).subscribe(\n            (value) => {\n                this.outputSubject.next(value);\n            },\n            (error) => {\n                this.outputSubject.error(error);\n            }\n        ));\n    }\n\n    subscribe(\n        next?: (data: D) => void,\n        customErrorHandler?: (error: Error) => void,\n        deepEqual = false\n    ): Subscription {\n        const outputSubjectSubscription = this.outputSubject.subscribe(\n            (data: D) => {\n                if (next) {\n                    if (deepEqual) {\n                        this.deepEqual(next, data);\n                    } else {\n                        next(data)\n                        Channel.globalNextHandler()\n                    }\n                }\n            },\n            (error: Error) => {\n                if (customErrorHandler) {\n                    customErrorHandler(error);\n                }\n                Channel.globalErrorHandler(error)\n            }\n        );\n        this.subscriptions.push(outputSubjectSubscription);\n        return outputSubjectSubscription;\n    }\n\n    private deepEqual(next: (data: D) => void, data: D): void {\n        if (!this.previousEmittedValue) {\n            next(data)\n            Channel.globalNextHandler()\n            this.previousEmittedValue = data;\n        }\n\n        const subscription = fromThread(\n            {value: data, other: this.previousEmittedValue},\n            jsonEqual\n        ).subscribe(\n            (result) => {\n                if (!result) {\n                    next(data)\n                    Channel.globalNextHandler()\n                    this.previousEmittedValue = data;\n                }\n            },\n            (equalityError) => {\n                console.error(equalityError)\n            }\n        )\n        this.subscriptions.push(subscription)\n    }\n\n    unsubscribe() {\n        this.subscriptions.forEach((subscribtion: Subscription) => {\n            if (!subscribtion.closed) {\n                subscribtion.unsubscribe();\n            }\n        });\n        this.subscriptions = [];\n        this.previousEmittedValue = null;\n    }\n\n    static setGlobalErrorHandler = (globalErrorHandler: (error: Error) => void) => {\n        Channel.globalErrorHandler = globalErrorHandler;\n    }\n\n    static setGlobalNextHandler = (globalNextHandler: () => void) => {\n        Channel.globalNextHandler = globalNextHandler;\n    }\n}\n","import {of} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class SpinnerService {\n\n    public spinnerCounterChannel: Channel<number, number>;\n\n    private spinnerCounter = 0;\n\n    constructor() {\n        this.spinnerCounterChannel = new Channel((difference: number) => of('').pipe(map(() => {\n            if(this.spinnerCounter + difference >= 0) {\n                this.spinnerCounter = this.spinnerCounter + difference;\n            }\n            return this.spinnerCounter;\n        })))\n    }\n}\n","export enum ISortVariant {\n    NONE = 'Нет сортировки',\n    QUESTION_ASK = 'По вопросу по возрастанию',\n    QUESTION_DESK = 'По вопросу по убыванию',\n    ANSWER_ASK = 'По ответу по возрастанию',\n    ANSWER_DESK = 'По ответу по убыванию',\n    NAME_ASK = 'По имени по возрастанию',\n    NAME_DESK = 'По имени по убыванию',\n    STATUS_ASK = 'По стсатусу сначала пройденные',\n    STATUS_DESK = 'По статусу сначала не пройденные',\n    DATE_ASK = 'По дате повторения сначала устаревшие',\n    DATE_DESK = 'По дате повторения сначала новые',\n    PROGRESS_ASK = 'Прогресс повторения повышение',\n    PROGRESS_DESC = 'Прогресс повторения понижение',\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport Fab from '@mui/material/Fab';\nimport AddIcon from '@mui/icons-material/Add';\n\nimport {IAddButton} from \"./types/IAddButton\";\nimport './AddButtonComponent.css'\n\nexport const AddButtonComponent: FC<IAddButton> = ({onClick}) => {\n    return <Fab size=\"medium\" color=\"secondary\" aria-label=\"add\" className=\"add-button\" onClick={onClick}>\n        <AddIcon/>\n    </Fab>\n};\n","import React, {FC} from 'react';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nimport {ICircularProgressComponent} from \"./types/ICircularProgressComponent\";\n\nexport const CircularProgressComponent: FC<ICircularProgressComponent> = ({percent}) => {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" value={percent}/>\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                    percent,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n};\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nimport {IListItemMenuComponent} from \"./types/IListItemMenuComponent\";\n\nexport const ListItemMenuComponent: FC<IListItemMenuComponent> = ({onEdit, onDelete, onResetProgress}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const editClick = () => {\n        onEdit();\n        handleClose();\n    };\n\n    const resetClick = () => {\n        onResetProgress();\n        handleClose();\n    };\n\n    const deleteClick = () => {\n        onDelete();\n        handleClose();\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={editClick}>Edit</MenuItem>\n                <MenuItem onClick={resetClick}>Reset progress</MenuItem>\n                <MenuItem onClick={deleteClick}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n","export const DATE_FORMAT = \"dd-MM-yyyy\";","import React, {FC} from \"react\"\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\n\nimport {CircularProgressComponent} from '../circular-progress/CircularProgressComponent';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport './CardsGroupsListItemComponent.css'\nimport {ICardsGroupsListItemComponent} from \"./types/ICardsGroupsListItemComponent\";\nimport {DATE_FORMAT} from \"../../../../common/constants/DATE_FORMAT\";\n\nexport const CardsGroupsListItemComponent: FC<ICardsGroupsListItemComponent> = (\n    {\n        cardsGroup,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress\n    }\n) => {\n\n    return <>\n        <ListItem key={cardsGroup.id} button component=\"div\">\n            <ListItemIcon onClick={() => onClickItem(cardsGroup.id)}>\n                <CircularProgressComponent percent={cardsGroup.percentRepeatedCards || 0}/>\n            </ListItemIcon>\n            <ListItemText\n                className=\"cards-groups-list-item_card-name\"\n                onClick={() => onClickItem(cardsGroup.id)}\n                primary={cardsGroup.nameCardsGroup}\n                secondary={'Last repeating date: ' + format(cardsGroup.repeatingDate ? cardsGroup.repeatingDate : new Date(), DATE_FORMAT)}\n            />\n            <ListItemIcon>\n                <ListItemMenuComponent\n                    onEdit={() => onEditItem(cardsGroup.id)}\n                    onDelete={() => onDeleteItem(cardsGroup.id)}\n                    onResetProgress={() => onResetProgress(cardsGroup.id)}\n                />\n            </ListItemIcon>\n        </ListItem>\n    </>\n};\n","import {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    TextField,\n} from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport {ChangeEvent, default as React, FC} from \"react\";\n\nimport {ISortVariant} from \"../../types/ISortVariant\";\nimport {IFilterComponent} from \"./types/IFilterComponent\";\n\nexport const FilterComponent: FC<IFilterComponent> = (\n    {\n        onChangeSearchableText,\n        filter,\n        onChangeSorting,\n        sortVariants\n    }\n) => {\n\n    const handleChangingSearchableText = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeSearchableText(event.target.value);\n    };\n\n    const handleChangingSortingVariant = (event: SelectChangeEvent<ISortVariant>) => {\n        onChangeSorting(event.target.value as ISortVariant)\n    }\n\n    return <Accordion>\n        <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n        >\n            <TextField\n                className=\"text-editor\"\n                required\n                id=\"outlined-required\"\n                placeholder=\"Search text\"\n                onChange={handleChangingSearchableText}\n                value={filter.searchableText}\n                style={{\n                    marginRight: '20px',\n                }}\n                onClick={(event) => {\n                    event.stopPropagation()\n                    event.preventDefault()\n                }}\n            />\n        </AccordionSummary>\n        <AccordionDetails>\n            <Select\n                value={filter.sort}\n                label=\"Sorting\"\n                onChange={handleChangingSortingVariant}\n            >\n                {\n                    sortVariants.map((variant: ISortVariant) => {\n                        return <MenuItem key={variant} value={variant}>{variant}</MenuItem>\n                    })\n                }\n            </Select>\n        </AccordionDetails>\n    </Accordion>\n}","import React, {FC} from \"react\";\nimport {FixedSizeList as List} from 'react-window';\n\nimport './CardsGroupsListComponent.css'\nimport {AddButtonComponent} from '../../common/elements/add-button/AddButtonComponent';\nimport {CardsGroupsListItemComponent} from './elements/cards-groups-list-item/CardsGroupsListItemComponent';\nimport {ICardsGroupsListComponent} from \"./types/ICardsGroupsListComponent\";\nimport {FilterComponent} from \"../../common/elements/filter/FilterComponent\";\nimport {ISortVariant} from \"../../common/types/ISortVariant\";\n\nexport const CardsGroupsListComponent: FC<ICardsGroupsListComponent> = (\n    {\n        cardsGroups,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onOpenEditor,\n        onResetProgress,\n        onChangeSearchableText,\n        onChangeSorting,\n        filter,\n        height,\n    }\n) => {\n\n    return <>\n        <FilterComponent\n            filter={filter}\n            onChangeSearchableText={onChangeSearchableText}\n            onChangeSorting={onChangeSorting}\n            sortVariants={[\n                ISortVariant.NONE,\n                ISortVariant.DATE_ASK,\n                ISortVariant.DATE_DESK,\n                ISortVariant.NAME_ASK,\n                ISortVariant.NAME_DESK,\n                ISortVariant.PROGRESS_ASK,\n                ISortVariant.PROGRESS_DESC\n            ]}\n        />\n        <List\n            className=\"cards-groups\"\n            itemData={cardsGroups}\n            itemSize={55}\n            itemCount={cardsGroups.length}\n            overscanCount={5}\n            height={height}\n            width=\"100%\"\n        >\n            {({index, style}: any) => {\n                const cardGroup = cardsGroups[index];\n                return <div style={style}><CardsGroupsListItemComponent\n                    key={cardGroup.id}\n                    cardsGroup={cardGroup}\n                    onClickItem={onClickItem}\n                    onEditItem={onEditItem}\n                    onDeleteItem={onDeleteItem}\n                    onResetProgress={onResetProgress}\n                /></div>\n            }}\n        </List>\n        <AddButtonComponent onClick={onOpenEditor}/>\n    </>\n};\n","export enum IRangeOfKnowledge {\n    TO_DO,\n    IN_PROGRESS,\n    DONE\n}\n","import {useRef} from 'react';\n\nexport const useConstructor = (callback: () => void) => {\n\n    const value = useRef({isFirstRun: true});\n\n    if (value.current.isFirstRun) {\n        callback();\n        value.current.isFirstRun = false;\n    }\n};\n","import RefreshIcon from '@mui/icons-material/Refresh';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onResetProgress: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {services, setSubscription},\n    cardsGroupID = -1\n) => {\n    const {confirmDialogService, cardsGroupsListService} = services;\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsGroupsListService.resetProgressChannel.next(cardsGroupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to reset progress of this group?',\n        titleBackgroundColor: 'green',\n        icon: <RefreshIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {history, location},\n    cardsGroupID = -1\n) => {\n    history.push({\n        pathname: Routs.cardsGroupEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: cardsGroupID\n        }\n    })\n}","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {\n        history,\n        location,\n        services: {\n            confirmDialogService,\n            cardsGroupsListService\n        },\n        setSubscription\n    },\n    cardsGroupID = -1\n) => {\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsGroupsListService.groupDeleteChannel.next(cardsGroupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this group?',\n        icon: <DeleteIcon/>,\n        titleBackgroundColor: 'red'\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onOpenEditor: ICallback<ICardsGroupsCallbackSettings, void> = (\n    {history}\n) => {\n    history.push({\n        pathname: Routs.cardsGroupEditor.path\n    })\n}","import {Routs} from \"../../../common/Routs\";\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onClickItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {history, location},\n    cardsGroupID = -1\n) => {\n    history.push({\n        pathname: Routs.cards.path,\n        state: {\n            ...location.state,\n            cardsGroupID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<ICardsGroupsCallbackSettings, void> = (\n    {services}\n) => {\n    services.cardsGroupsListService.groupsListChannel.next(empty);\n    services.cardsGroupsListService.filterChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onResetProgressChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {\n        services: {\n            cardsGroupsListService\n        },\n    }\n) => {\n    cardsGroupsListService.groupsListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onGroupDeleteChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {\n        services: {\n            cardsGroupsListService\n        }\n    }\n) => {\n    cardsGroupsListService.groupsListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupsListChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {setState},\n    cardsGroups = []\n) => {\n    setState((prevState) => {\n        return {...prevState, cardsGroups}\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const onChangeSorting: ICallback<ICardsGroupsCallbackSettings, ISortVariant> = (\n    {services: {cardsGroupsListService}, setState},\n    sortVariant = ISortVariant.NONE\n) => {\n    setState((prevState) => {\n        const newFilter = {\n            ...prevState.filter,\n            sort: sortVariant\n        }\n        cardsGroupsListService.changeFilterChannel.next(newFilter);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {IStoredFilters} from \"../../../common/types/IStoredFilters\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onChangeFilterChannel: ICallback<ICardsGroupsCallbackSettings, IStoredFilters> = (\n    {\n        services: {\n            cardsGroupsListService\n        }\n    }\n) => {\n    cardsGroupsListService.filterChannel.next(empty);\n    cardsGroupsListService.groupsListChannel.next(empty);\n}","import {ISortVariant} from \"../types/ISortVariant\";\n\nexport const defaultFilter = {\n    searchableText: '',\n    sort: ISortVariant.NONE\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const onFilterChannel: ICallback<ICardsGroupsCallbackSettings, IFilter> = (\n    {setState, services},\n    filter = defaultFilter\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            filter\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onChangeSearchableText: ICallback<ICardsGroupsCallbackSettings, string> = (\n    {\n        setState,\n        services: {\n            cardsGroupsListService\n        }\n    },\n    searchableText = ''\n) => {\n    setState((prevState) => {\n        cardsGroupsListService.changeFilterChannel.next({\n            ...prevState.filter,\n            searchableText\n        })\n        return prevState\n    })\n}","import {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const initialState = {\n    cardsGroups: [],\n    filter: defaultFilter\n}","import React, {FC, useCallback} from \"react\";\n\nimport {CardsGroupsListComponent} from './CardsGroupsListComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {AppContext} from '../../../App';\nimport {ICardsGroupsListContainer} from \"./types/ICardsGroupsListContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {onResetProgress} from \"./ui-callbacks/onResetProgress\";\nimport {onEditItem} from \"./ui-callbacks/onEditItem\";\nimport {onDeleteItem} from \"./ui-callbacks/onDeleteItem\";\nimport {onOpenEditor} from \"./ui-callbacks/onOpenEditor\";\nimport {onClickItem} from \"./ui-callbacks/onClickItem\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onResetProgressChannel} from \"./channels-callbacks/onResetProgressChannel\";\nimport {onGroupDeleteChannel} from \"./channels-callbacks/onGroupDeleteChannel\";\nimport {onGroupsListChannel} from \"./channels-callbacks/onGroupsListChannel\";\nimport {onChangeSorting} from \"./ui-callbacks/onChangeSorting\";\nimport {onChangeFilterChannel} from \"./channels-callbacks/onChangeFilterChannel\";\nimport {onFilterChannel} from \"./channels-callbacks/onFilterChannel\";\nimport {onChangeSearchableText} from \"./ui-callbacks/onChangeSearchableText\";\nimport {initialState} from \"./defaults/initialState\";\nimport {ICardsGroupsCallbackSettings} from \"./types/ICardsGroupsCallbackSettings\";\n\nexport const CardsGroupsListContainer: FC<ICardsGroupsListContainer> = (\n    services\n) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<ICardsGroupsCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, context, services: {cardsGroupsListService}} = callbackSettings\n\n    useChannel(cardsGroupsListService.groupsListChannel, callbackFactory(onGroupsListChannel));\n    useChannel(cardsGroupsListService.groupDeleteChannel, callbackFactory(onGroupDeleteChannel));\n    useChannel(cardsGroupsListService.resetProgressChannel, callbackFactory(onResetProgressChannel));\n    useChannel(cardsGroupsListService.changeFilterChannel, callbackFactory(onChangeFilterChannel));\n    useChannel(cardsGroupsListService.filterChannel, callbackFactory(onFilterChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const clickItem = useCallback(callbackFactory(onClickItem), []);\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const deleteItem = useCallback(callbackFactory(onDeleteItem), []);\n    const editItem = useCallback(callbackFactory(onEditItem), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const changeSorting = useCallback(callbackFactory(onChangeSorting), []);\n    const changeSearchableText = useCallback(callbackFactory(onChangeSearchableText), []);\n\n    return <CardsGroupsListComponent\n        onClickItem={clickItem}\n        onOpenEditor={openEditor}\n        onDeleteItem={deleteItem}\n        onEditItem={editItem}\n        onResetProgress={resetProgress}\n        onChangeSorting={changeSorting}\n        filter={state.filter}\n        onChangeSearchableText={changeSearchableText}\n        height={context.height}\n        cardsGroups={state.cardsGroups}/>\n};\n","import GoogleLogin from 'react-google-login';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport './GoogleAuthComponent.css'\nimport {IGoogleAuthComponent} from \"./types/IGoogleAuthComponent\";\n\nexport const GoogleAuthComponent: FC<IGoogleAuthComponent> = ({onSuccess, onFailure, height}) => {\n    return (\n        <div className=\"google-auth\" style={{height}}>\n            <GoogleLogin\n                className=\"google-auth_button\"\n                clientId=\"627973926597-tj2la0mnorvm04cqmcosu2nj3b02g6k2.apps.googleusercontent.com\"\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                scope={'profile email https://www.googleapis.com/auth/drive'}\n            />\n        </div>\n    )\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleLoginResponse, GoogleLoginResponseOffline} from \"react-google-login\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\n\nexport const onSuccess: ICallback<GoogleAuthCallbackSettings, GoogleLoginResponse | GoogleLoginResponseOffline> = (\n    {services: {googleAuthService}},\n    response\n) => {\n    googleAuthService.loginChannel.next((response as GoogleLoginResponse).accessToken);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\nimport {GoogleLoginResponse, GoogleLoginResponseOffline} from \"react-google-login\";\n\nexport const onFailure: ICallback<GoogleAuthCallbackSettings, GoogleLoginResponse | GoogleLoginResponseOffline> = (\n    {services: {errorService}}\n) => {\n    errorService.errorChannel.next('Error of connection');\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onLoginChannel: ICallback<GoogleAuthCallbackSettings, string> = (\n    {history}\n) => {\n    history.replace(Routs.googleBackups.path);\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {GoogleAuthComponent} from './GoogleAuthComponent';\nimport {AppContext} from '../../../App';\nimport {IGoogleAuthContainer} from \"./types/IGoogleAuthContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {onSuccess} from \"./ui-callbacks/onSuccess\";\nimport {onFailure} from \"./ui-callbacks/onFailure\";\nimport {onLoginChannel} from \"./channels-callbacks/onLoginChannel\";\nimport {GoogleAuthCallbackSettings} from \"./types/GoogleAuthCallbackSettings\";\n\nexport const GoogleAuthContainer: FC<IGoogleAuthContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<GoogleAuthCallbackSettings>(\n        null,\n        services,\n        AppContext\n    );\n\n    const {context, services: {googleAuthService}} = callbackSettings\n\n    useChannel(googleAuthService.loginChannel, callbackFactory(onLoginChannel));\n\n    const success = useCallback(callbackFactory(onSuccess), []);\n    const failure = useCallback(callbackFactory(onFailure), []);\n\n    return <GoogleAuthComponent\n        onSuccess={success}\n        onFailure={failure}\n        height={context.height}\n    />;\n};\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nimport {IBackupMenuComponent} from \"./types/IBackupMenuComponent\";\n\n\nexport const BackupMenuComponent: FC<IBackupMenuComponent> = ({backupID, onLoad, onDelete}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const onLoadBackup = () => {\n        setAnchorEl(null);\n        onLoad(backupID);\n    };\n\n    const onDeleteBackup = () => {\n        setAnchorEl(null);\n        onDelete(backupID);\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={onLoadBackup}>Load</MenuItem>\n                <MenuItem onClick={onDeleteBackup}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n","import {default as React, FC} from 'react';\nimport {ListItem, ListItemIcon, ListItemText} from '@mui/material';\n\nimport {BackupMenuComponent} from '../backup-menu-component/BackupMenuComponent';\nimport {IBackupsListItemComponent} from \"./types/IBackupsListItemComponent\";\n\nexport const BackupsListItemComponent: FC<IBackupsListItemComponent> = (\n    {\n        backupName,\n        backupDate,\n        backupID,\n        onLoad,\n        onDelete\n    }\n) => {\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={backupName}\n                secondary={backupDate}\n            />\n            <ListItemIcon>\n                <BackupMenuComponent backupID={backupID} onLoad={onLoad} onDelete={onDelete}/>\n            </ListItemIcon>\n        </ListItem>\n    );\n};\n","import {List} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {BackupsListItemComponent} from './elements/backups-list-item-component/BackupsListItemComponent';\nimport {AddButtonComponent} from '../../common/elements/add-button/AddButtonComponent';\nimport {IBackupsListComponent} from \"../local-backup/types/IBackupsListComponent\";\n\n\nexport const GoogleBackupsComponent: FC<IBackupsListComponent> = ({backupsFiles, onLoad, onCreate, onDelete}) => {\n    return (\n        <>\n            <List>\n                {\n                    backupsFiles.map((backup: IGoogleDriveFile) => {\n                        return <BackupsListItemComponent\n                            key={backup.id}\n                            backupName={backup.name}\n                            backupDate={backup.createdTime}\n                            onLoad={onLoad}\n                            onDelete={onDelete}\n                            backupID={backup.id}/>\n                    })\n                }\n            </List>\n            <AddButtonComponent onClick={onCreate}/>\n        </>\n    )\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {Routs} from \"../../../common/Routs\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\n\nexport const onBackupsNameLoadChannelError: ICallback<GoogleBackupCallbackSettings, Error> = (\n    {history, services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n    history.replace(Routs.googleAuth.path);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const onBackupsNameLoadChannel: ICallback<GoogleBackupCallbackSettings, IGoogleDriveFile[]> = (\n    {setState, services: {spinnerService}},\n    backupsFiles = []\n) => {\n    setState((prevState) => {\n        return {...prevState, backupsFiles}\n    });\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onBackupLoadChannelError: ICallback<GoogleBackupCallbackSettings, Error> = (\n    {history, services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n    history.replace(Routs.googleAuth.path);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onBackupLoadChannel: ICallback<GoogleBackupCallbackSettings, ICardsGroup[]> = (\n    {services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onBackupDeleteChannel: ICallback<GoogleBackupCallbackSettings, string> = (\n    {services: {googleBackupsService, spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n    googleBackupsService.backupsNameLoadChannel.next(empty)\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onBackupUploadChannel: ICallback<GoogleBackupCallbackSettings, string> = (\n    {services: {spinnerService, googleBackupsService}}\n) => {\n    googleBackupsService.backupsNameLoadChannel.next(empty)\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<GoogleBackupCallbackSettings, string> = (\n    {services: {googleBackupsService}}\n) => {\n    googleBackupsService.backupsNameLoadChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport UploadIcon from \"@mui/icons-material/Upload\";\nimport * as React from \"react\";\n\nexport const onLoad: ICallback<GoogleBackupCallbackSettings, string> = (\n    {\n        setSubscription,\n        services: {\n            spinnerService,\n            googleBackupsService,\n            confirmDialogService\n        }\n    },\n    backupID = '-1'\n) => {\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            spinnerService.spinnerCounterChannel.next(1);\n            googleBackupsService.backupLoadChannel.next(backupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to load this backup?',\n            titleBackgroundColor: 'red',\n            icon: <UploadIcon/>\n        }\n    );\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport * as React from \"react\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nexport const onDelete: ICallback<GoogleBackupCallbackSettings, string> = (\n    {\n        setSubscription,\n        services: {\n            spinnerService,\n            googleBackupsService,\n            confirmDialogService\n        }\n    },\n    backupID = '-1'\n) => {\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            spinnerService.spinnerCounterChannel.next(1);\n            googleBackupsService.backupDeleteChannel.next(backupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this backup?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {GoogleBackupsComponent} from './GoogleBackupsComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {IGoogleBackupsContainer} from \"./types/IGoogleBackupsContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {onBackupsNameLoadChannelError} from \"./channels-callback/onBackupsNameLoadChannelError\";\nimport {onBackupsNameLoadChannel} from \"./channels-callback/onBackupsNameLoadChannel\";\nimport {onBackupLoadChannelError} from \"./channels-callback/onBackupLoadChannelError\";\nimport {onBackupLoadChannel} from \"./channels-callback/onBackupLoadChannel\";\nimport {onBackupDeleteChannel} from \"./channels-callback/onBackupDeleteChannel\";\nimport {onBackupUploadChannel} from \"./channels-callback/onBackupUploadChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onLoad} from \"./ui-callbacks/onLoad\";\nimport {onDelete} from \"./ui-callbacks/onDelete\";\nimport {GoogleBackupCallbackSettings} from \"./types/GoogleBackupCallbackSettings\";\n\nexport const GoogleBackupsContainer: FC<IGoogleBackupsContainer> = (services) => {\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<GoogleBackupCallbackSettings>(\n        {\n            backupsFiles: []\n        },\n        services,\n        AppContext\n    );\n\n    const {state, services: {googleBackupsService, spinnerService, confirmDialogService}} = callbackSettings\n\n    useChannel(\n        googleBackupsService.backupsNameLoadChannel,\n        callbackFactory(onBackupsNameLoadChannel),\n        callbackFactory(onBackupsNameLoadChannelError)\n    );\n    useChannel(\n        googleBackupsService.backupLoadChannel,\n        callbackFactory(onBackupLoadChannel),\n        callbackFactory(onBackupLoadChannelError)\n    );\n    useChannel(googleBackupsService.backupDeleteChannel, callbackFactory(onBackupDeleteChannel));\n    useChannel(googleBackupsService.backupUploadChannel, callbackFactory(onBackupUploadChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const load = useCallback(callbackFactory(onLoad), []);\n    const deleteBackup = useCallback(callbackFactory(onDelete), []);\n\n    const onCreate = () => {\n        spinnerService.spinnerCounterChannel.next(1);\n        googleBackupsService.backupUploadChannel.next();\n    };\n\n    return <GoogleBackupsComponent\n        backupsFiles={state.backupsFiles}\n        onLoad={load}\n        onDelete={deleteBackup}\n        onCreate={onCreate}\n    />;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport CopyIcon from \"@mui/icons-material/CopyAll\";\nimport Fab from \"@mui/material/Fab\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport SelectAllIcon from \"@mui/icons-material/SelectAll\";\nimport DriveFileMoveIcon from \"@mui/icons-material/DriveFileMove\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport {ICardsListActions} from \"./types/ICardsListActions\";\nimport './CardsListActions.css'\n\nexport const CardsListActions: FC<ICardsListActions> = (\n    {\n        onOpenEditor,\n        onOpenRepeater,\n        onStartSelecting,\n        onMovingSelectedCards,\n        onDeleteSelectedCards,\n        onCopySelectedCards,\n        hideOpenRepeaterButton = false,\n        hideOpenEditorButton = false,\n        hideMovingSelectedCardsButton = false,\n        hideDeleteSelectedCardsButton = false,\n        hideCopySelectedCardButton = false\n    }\n) => {\n    return <div className=\"cards-list-actions\">\n        <Fab size=\"medium\" color=\"secondary\" onClick={onStartSelecting}>\n            <SelectAllIcon/>\n        </Fab>\n        <Fab size=\"medium\" color=\"primary\" onClick={onOpenRepeater}>\n            <PlayArrowIcon/>\n        </Fab>\n        {\n            !hideOpenEditorButton && <Fab size=\"medium\" color=\"secondary\" onClick={onOpenEditor}>\n                <AddIcon/>\n            </Fab>\n        }\n        {\n            !hideMovingSelectedCardsButton && <Fab size=\"medium\" color=\"primary\" onClick={onMovingSelectedCards}>\n                <DriveFileMoveIcon/>\n            </Fab>\n        }\n        {\n            !hideCopySelectedCardButton && <Fab size=\"medium\" color=\"secondary\" onClick={onCopySelectedCards}>\n                <CopyIcon/>\n            </Fab>\n        }\n        {\n            !hideDeleteSelectedCardsButton && <Fab size=\"medium\" color=\"secondary\" onClick={onDeleteSelectedCards}>\n                <DeleteIcon/>\n            </Fab>\n        }\n    </div>\n}","export enum IRepeatingType {\n    DEFAULT,\n    RANDOM\n}","import React, {FC} from \"react\";\n\nimport {ICardPrimaryTextComponent} from \"./types/ICardPrimaryTextComponent\";\nimport './CardPrimaryTextComponent.css'\n\nexport const CardPrimaryTextComponent: FC<ICardPrimaryTextComponent> = ({card}) => {\n    return <div className=\"card-primary-text\">\n        <p className=\"card-primary-text_title\">\n            {card.question}\n        </p>\n        <p className=\"card-primary-text_content\">\n            {card.answer}\n        </p>\n    </div>\n}","import React, {FC} from \"react\"\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport FlagIcon from '@mui/icons-material/Flag';\nimport {Checkbox} from \"@mui/material\";\n\nimport {ICard} from '../../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../../common/types/IRangeOfKnowledge';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport {ICardListItemComponent} from \"./types/ICardListItemComponent\";\nimport {CardPrimaryTextComponent} from \"../card-primary-text/CardPrimaryTextComponent\";\nimport {DATE_FORMAT} from \"../../../../common/constants/DATE_FORMAT\";\n\nexport const CardsListItemComponent: FC<ICardListItemComponent> = (\n    {\n        card,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onSelect,\n        isEnabledSelecting,\n        isSelected\n    }\n) => {\n\n    const dateText = 'Last repeating date: ' + format(card.dateRepeating ? card.dateRepeating : new Date(), DATE_FORMAT)\n\n    const getIconColor = (card: ICard): string => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n            return 'green'\n        }\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            return 'yellow'\n        }\n        return 'red'\n    };\n\n    return <ListItem key={card.id} button>\n        <ListItemIcon onClick={() => onClickItem(card.id)}>\n            <FlagIcon style={{color: getIconColor(card)}}/>\n        </ListItemIcon>\n        <ListItemText\n            onClick={() => onClickItem(card.id)}\n            primary={<CardPrimaryTextComponent card={card}/>}\n            secondary={dateText}\n        />\n        {\n            !isEnabledSelecting ?\n                <ListItemIcon>\n                    <ListItemMenuComponent\n                        onEdit={() => onEditItem(card.id)}\n                        onDelete={() => onDeleteItem(card.id)}\n                        onResetProgress={() => onResetProgress(card.id)}\n                    />\n                </ListItemIcon> :\n                <ListItemIcon onClick={() => isEnabledSelecting && onSelect(card.id)}>\n                    <Checkbox\n                        edge=\"start\"\n                        checked={isSelected}\n                        tabIndex={-1}\n                        disableRipple\n                    />\n                </ListItemIcon>\n        }\n    </ListItem>\n};\n","import {FixedSizeList as List} from \"react-window\";\nimport * as React from \"react\";\nimport {FC} from \"react\";\n\nimport {CardsListItemComponent} from \"../cards-list-item/CardsListItemComponent\";\nimport {ICardsListComponent} from \"./types/ICardsListComponent\";\n\nexport const CardsListComponent: FC<ICardsListComponent> = (\n    {\n        cards,\n        height,\n        onEditItem,\n        onDeleteItem,\n        onSelectItem,\n        onResetProgress,\n        onClickItem,\n        isEnabledSelecting,\n        selectedItems\n    }\n) => {\n    return <List\n        className=\"cards\"\n        itemData={cards}\n        itemSize={75}\n        itemCount={cards.length}\n        overscanCount={5}\n        height={height}\n        width=\"100%\"\n    >\n        {\n            ({index, style}: any) => {\n                const card = cards[index];\n                return <div style={style}>\n                    <CardsListItemComponent\n                        key={card.id}\n                        card={card}\n                        onEditItem={onEditItem}\n                        onDeleteItem={onDeleteItem}\n                        onResetProgress={onResetProgress}\n                        onClickItem={onClickItem}\n                        onSelect={onSelectItem}\n                        isEnabledSelecting={isEnabledSelecting}\n                        isSelected={selectedItems[card.id]}\n                    />\n                </div>\n            }\n        }\n    </List>\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {FilterComponent} from \"../../common/elements/filter/FilterComponent\";\nimport {CardsListActions} from \"./elements/cards-list-actions/CardsListActions\";\nimport {ICardsComponent} from \"./types/ICardsComponent\";\nimport './CardsComponent.css';\nimport {CardsListComponent} from \"./elements/cards-list/CardsListComponent\";\nimport {ISortVariant} from \"../../common/types/ISortVariant\";\n\nexport const CardsComponent: FC<ICardsComponent> = (\n    {\n        cards,\n        filter,\n        onOpenEditor,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onChangeSearchableText,\n        onChangeSorting,\n        height,\n        onOpenRepeater,\n        onStartSelecting,\n        onSelectItem,\n        onDeleteSelectedCards,\n        onMovingSelectedCards,\n        onCopySelectedCards,\n        isEnabledSelecting,\n        selectedItems\n    }\n) => {\n    return (\n        <>\n                <FilterComponent\n                    onChangeSearchableText={onChangeSearchableText}\n                    onChangeSorting={onChangeSorting}\n                    filter={filter}\n                    sortVariants={[\n                            ISortVariant.NONE,\n                            ISortVariant.DATE_ASK,\n                            ISortVariant.DATE_DESK,\n                            ISortVariant.QUESTION_ASK,\n                            ISortVariant.QUESTION_DESK,\n                            ISortVariant.STATUS_ASK,\n                            ISortVariant.STATUS_DESK,\n                            ISortVariant.ANSWER_ASK,\n                            ISortVariant.ANSWER_DESK\n                    ]}\n                />\n                <CardsListComponent\n                    cards={cards}\n                    height={height}\n                    onEditItem={onEditItem}\n                    onDeleteItem={onDeleteItem}\n                    onResetProgress={onResetProgress}\n                    onClickItem={onClickItem}\n                    onSelectItem={onSelectItem}\n                    isEnabledSelecting={isEnabledSelecting}\n                    selectedItems={selectedItems}\n                />\n                <CardsListActions\n                    onOpenRepeater={onOpenRepeater}\n                    onOpenEditor={onOpenEditor}\n                    onStartSelecting={onStartSelecting}\n                    onCopySelectedCards={onCopySelectedCards}\n                    hideOpenEditorButton={isEnabledSelecting}\n                    hideOpenRepeaterButton={isEnabledSelecting}\n                    hideDeleteSelectedCardsButton={!isEnabledSelecting}\n                    hideMovingSelectedCardsButton={!isEnabledSelecting}\n                    hideCopySelectedCardButton={!isEnabledSelecting}\n                    onDeleteSelectedCards={onDeleteSelectedCards}\n                    onMovingSelectedCards={onMovingSelectedCards}\n                />\n        </>\n    )\n};\n","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteSelectedCards: ICallback<CardsCallbackSettings, void> = (\n    {services: {confirmDialogService, cardsListService}, setState, setSubscription}\n) => {\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            setState((prevState) => {\n                cardsListService.deleteCardsChannel.next(prevState.selectedItems);\n                return prevState;\n            })\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import CopyIcon from '@mui/icons-material/CopyAll';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onCopySelectedCards: ICallback<CardsCallbackSettings, void> = (\n    {services, setState, setSubscription}\n) => {\n    const {\n        cardsListService,\n        confirmDialogService,\n        selectionDialogService\n    } = services;\n\n    setState((prevState) => {\n\n        const subscription = selectionDialogService.selectionChannel.subscribe((groupID) => {\n\n            const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n                if (isConfirm) {\n                    cardsListService.copyCardsChannel.next({\n                        selectedItems: prevState.selectedItems,\n                        destinationGroupID: groupID\n                    });\n\n                    selectionDialogService.openDialogChannel.next({\n                        isOpen: false,\n                        title: '',\n                        selectionItems: []\n                    });\n                }\n\n                confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n            });\n\n            setSubscription(subscription);\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: true,\n                message: 'Do you want to copy this cards?',\n                titleBackgroundColor: 'orange',\n                icon: <CopyIcon/>\n            });\n        });\n\n        setSubscription(subscription);\n\n        selectionDialogService.openDialogChannel.next({\n            isOpen: true,\n            title: 'Select cards group',\n            selectionItems: prevState.existedGroupsIDs\n        })\n\n        return prevState;\n    })\n}","import MoveIcon from '@mui/icons-material/MoveToInbox';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onMovingSelectedCards: ICallback<CardsCallbackSettings, void> = (\n    {services, setState, setSubscription}\n) => {\n\n    setState((prevState) => {\n        const {\n            cardsListService,\n            confirmDialogService,\n            selectionDialogService\n        } = services;\n\n        const subscription = selectionDialogService.selectionChannel.subscribe((groupID) => {\n\n            const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n                if (isConfirm) {\n                    cardsListService.movingCardsChannel.next({\n                        selectedItems: prevState.selectedItems,\n                        destinationGroupID: groupID\n                    });\n\n                    selectionDialogService.openDialogChannel.next({\n                        isOpen: false,\n                        title: '',\n                        selectionItems: []\n                    });\n                }\n\n                confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n            });\n\n            setSubscription(subscription);\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: true,\n                message: 'Do you want to move this cards?',\n                titleBackgroundColor: 'green',\n                icon: <MoveIcon/>\n            });\n        });\n\n        setSubscription(subscription);\n\n        selectionDialogService.openDialogChannel.next({\n            isOpen: true,\n            title: 'Select cards group',\n            selectionItems: prevState.existedGroupsIDs\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onSelectItem: ICallback<CardsCallbackSettings, number> = (\n    settings,\n    cardID = -1\n) => {\n\n    const {setState} = settings;\n\n    setState((prevState) => {\n        const selectedItems = {\n            ...prevState.selectedItems\n        };\n\n        if (selectedItems[cardID]) {\n            selectedItems[cardID] = !selectedItems[cardID]\n        } else {\n            selectedItems[cardID] = true\n        }\n        return {\n            ...prevState,\n            selectedItems\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onStartSelecting: ICallback<CardsCallbackSettings, void> = (\n    {setState}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            isEnabledSelecting: !prevState.isEnabledSelecting,\n            selectedItems: !prevState.isEnabledSelecting ? {} : prevState.selectedItems\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onOpenRepeater: ICallback<CardsCallbackSettings, void> = (\n    {\n        setState,\n        location,\n        services\n    }\n) => {\n    setState((prevState) => {\n        if (prevState.isEnabledSelecting) {\n            services.cardsListService.cardsIDsBySelectedItemsChannel.next(prevState.selectedItems);\n        } else {\n            services.cardsListService.cardsIDsByGroupIDsChannel.next(location.state.cardsGroupID);\n        }\n        return prevState;\n    })\n}","import {ISortVariant} from \"../../../common/types/ISortVariant\";\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onChangeSorting: ICallback<CardsCallbackSettings, ISortVariant> = (\n    {setState, services, location},\n    sortVariant: ISortVariant = ISortVariant.NONE\n) => {\n    setState((prevState) => {\n        const newFilter = {\n            ...prevState.filter,\n            sort: sortVariant\n        }\n        services.cardsListService.changeFilterChannel.next(newFilter);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onChangeSearchableText: ICallback<CardsCallbackSettings, string> = (\n    {services, setState, location},\n    searchableText = ''\n) => {\n    setState((prevState) => {\n        const newFilter = {\n            ...prevState.filter,\n            searchableText: searchableText\n        }\n\n        services.cardsListService.changeFilterChannel.next(newFilter)\n\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {CardsContainerState} from \"../types/CardsContainerState\";\n\nexport const onCardsChannel: ICallback<CardsCallbackSettings, ICard[]> = (\n    {setState},\n    cards = []\n) => {\n    setState((prevState: CardsContainerState) => {\n        return {\n            ...prevState,\n            cards\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onCardsIDsByGroupIDsChannel: ICallback<CardsCallbackSettings, number[]> = (\n    {history, location},\n    args\n) => {\n    history.push({\n        pathname: Routs.cardsRepeater.path,\n        state: {\n            ...location.state,\n            cardsIDsForRepeating: args || []\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onCardsIDsBySelectedItemsChannel: ICallback<CardsCallbackSettings, number[]> = (\n    {history, location},\n    args\n) => {\n    if (args && args.length > 1) {\n        history.push({\n            pathname: Routs.cardsRepeater.path,\n            state: {\n                ...location.state,\n                cardsIDsForRepeating: args || []\n            }\n        })\n    } else if (args && args.length === 1) {\n        history.push({\n            pathname: Routs.cardViewer.path,\n            state: {\n                ...location.state,\n                cardsGroupID: location.state.cardsGroupID,\n                cardID: args[0]\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const onFilterChannel: ICallback<CardsCallbackSettings, IFilter> = (\n    {setState, services, location},\n    filter = defaultFilter\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            filter\n        }\n    });\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<CardsCallbackSettings, ISortVariant> = (\n    {services, setState, location}\n) => {\n    const {cardsListService} = services;\n    setState((prevState) => {\n        cardsListService.filterChannel.next(empty)\n        cardsListService.existedGroupsIDsChannel.next(empty);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {IStoredFilters} from \"../../../common/types/IStoredFilters\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onChangeFilter: ICallback<CardsCallbackSettings, IStoredFilters> = (\n    {services, location}\n) => {\n    services.cardsListService.filterChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onResetCardProgressChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next(\n            {\n                cardsGroupID: location.state.cardsGroupID,\n                filter: prevState.filter\n            }\n        )\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location},\n    cards = []\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onMovingCardsChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onCopyCardsChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {services, setState, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteCardsChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {CardsContainerState} from \"../types/CardsContainerState\";\n\nexport const onExistedGroupsIDsChannel: ICallback<CardsCallbackSettings, { id: number; label: string; }[]> = (\n    {setState},\n    existedGroupsIDs = []\n) => {\n    setState((prevState: CardsContainerState) => {\n        return {\n            ...prevState,\n            existedGroupsIDs\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onOpenEditor: ICallback<CardsCallbackSettings, void> = (\n    {\n        location,\n        history\n    }\n) => {\n    history.push({\n        pathname: Routs.cardsEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditItem: ICallback<CardsCallbackSettings, number> = (\n    {\n        location,\n        history\n    },\n    cardID = -1\n) => {\n    history.push({\n        pathname: Routs.cardsEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID,\n            cardID: cardID\n        }\n    })\n}","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteItem: ICallback<CardsCallbackSettings, number> = (\n    {\n        setSubscription,\n        services\n    },\n    cardID = -1\n) => {\n    const {confirmDialogService, cardsListService} = services;\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            cardsListService.deleteSingleCardChannel.next(cardID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this card?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onResetProgress: ICallback<CardsCallbackSettings, number> = (\n    {\n        services,\n        location\n    },\n    cardID = -1\n) => {\n    services.cardsListService.resetCardProgressChannel.next(\n        {\n            cardID,\n            cardsGroupID: location.state.cardsGroupID\n        }\n    )\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onClickItem: ICallback<CardsCallbackSettings, number> = (\n    {\n        location,\n        history\n    },\n    cardID = -1\n) => {\n    history.push({\n        pathname: Routs.cardViewer.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID,\n            cardID\n        }\n    })\n}","import {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const initialState = {\n    cards: [],\n    filter: defaultFilter,\n    isEnabledSelecting: false,\n    selectedItems: {},\n    existedGroupsIDs: []\n}","import React, {FC, useCallback} from 'react';\n\nimport {CardsComponent} from './CardsComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {AppContext} from '../../../App';\nimport {ICardsContainer} from \"./types/ICardsContainer\";\nimport {onDeleteSelectedCards} from \"./ui-callbacks/onDeleteSelectedCards\";\nimport {onCopySelectedCards} from \"./ui-callbacks/onCopySelectedCards\";\nimport {onMovingSelectedCards} from \"./ui-callbacks/onMovingSelectedCards\";\nimport {onSelectItem} from \"./ui-callbacks/onSelectItem\";\nimport {onStartSelecting} from \"./ui-callbacks/onStartSelecting\";\nimport {onOpenRepeater} from \"./ui-callbacks/onOpenRepeater\";\nimport {onChangeSorting} from \"./ui-callbacks/onChangeSorting\";\nimport {onChangeSearchableText} from \"./ui-callbacks/onChangeSearchableText\";\nimport {onCardsChannel} from \"./channels-callbacks/onCardsChannel\";\nimport {onCardsIDsByGroupIDsChannel} from \"./channels-callbacks/onCardsIDsByGroupIDsChannel\";\nimport {onCardsIDsBySelectedItemsChannel} from \"./channels-callbacks/onCardsIDsBySelectedItemsChannel\";\nimport {onFilterChannel} from \"./channels-callbacks/onFilterChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onChangeFilter} from \"./channels-callbacks/onChangeFilter\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {onResetCardProgressChannel} from \"./channels-callbacks/onResetCardProgressChannel\";\nimport {onDeleteSingleCardChannel} from \"./channels-callbacks/onDeleteSingleCardChannel\";\nimport {onMovingCardsChannel} from \"./channels-callbacks/onMovingCardsChannel\";\nimport {onCopyCardsChannel} from \"./channels-callbacks/onCopyCardsChannel\";\nimport {onDeleteCardsChannel} from \"./channels-callbacks/onDeleteCardsChannel\";\nimport {onExistedGroupsIDsChannel} from \"./channels-callbacks/onExistedGroupsIDsChannel\";\nimport {onOpenEditor} from \"./ui-callbacks/onOpenEditor\";\nimport {onEditItem} from \"./ui-callbacks/onEditItem\";\nimport {onDeleteItem} from \"./ui-callbacks/onDeleteItem\";\nimport {onResetProgress} from \"./ui-callbacks/onResetProgress\";\nimport {onClickItem} from \"./ui-callbacks/onClickItem\";\nimport {initialState} from \"./defaults/initialState\";\nimport {CardsCallbackSettings} from \"./types/CardsCallbackSettings\";\n\nexport const CardsContainer: FC<ICardsContainer> = (services) => {\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<CardsCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, context, services: {cardsListService}} = callbackSettings\n\n    useChannel(cardsListService.cardsChannel, callbackFactory(onCardsChannel));\n    useChannel(cardsListService.cardsIDsByGroupIDsChannel, callbackFactory(onCardsIDsByGroupIDsChannel));\n    useChannel(cardsListService.cardsIDsBySelectedItemsChannel, callbackFactory(onCardsIDsBySelectedItemsChannel));\n    useChannel(cardsListService.filterChannel, callbackFactory(onFilterChannel));\n    useChannel(cardsListService.changeFilterChannel, callbackFactory(onChangeFilter))\n    useChannel(cardsListService.resetCardProgressChannel, callbackFactory(onResetCardProgressChannel));\n    useChannel(cardsListService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel));\n    useChannel(cardsListService.movingCardsChannel, callbackFactory(onMovingCardsChannel));\n    useChannel(cardsListService.copyCardsChannel, callbackFactory(onCopyCardsChannel));\n    useChannel(cardsListService.deleteCardsChannel, callbackFactory(onDeleteCardsChannel))\n    useChannel(cardsListService.existedGroupsIDsChannel, callbackFactory(onExistedGroupsIDsChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const editItem = useCallback(callbackFactory(onEditItem), []);\n    const deleteItem = useCallback(callbackFactory(onDeleteItem), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const clickItem = useCallback(callbackFactory(onClickItem), []);\n    const changeSearchableText = useCallback(callbackFactory(onChangeSearchableText), [state.filter]);\n    const changeSorting = useCallback(callbackFactory(onChangeSorting), [state.filter]);\n\n    const startSelecting = useCallback(callbackFactory(onStartSelecting), []);\n    const openRepeater = useCallback(callbackFactory(onOpenRepeater), []);\n    const selectItem = useCallback(callbackFactory(onSelectItem), []);\n    const movingSelectedCards = useCallback(callbackFactory(onMovingSelectedCards), []);\n    const copySelectedCards = useCallback(callbackFactory(onCopySelectedCards), []);\n    const deleteSelectedCards = useCallback(callbackFactory(onDeleteSelectedCards), [])\n\n    return <CardsComponent\n        filter={state.filter}\n        onChangeSorting={changeSorting}\n        onChangeSearchableText={changeSearchableText}\n        cards={state.cards}\n        onOpenEditor={openEditor}\n        onEditItem={editItem}\n        onDeleteItem={deleteItem}\n        onResetProgress={resetProgress}\n        onClickItem={clickItem}\n        height={context.height}\n        onOpenRepeater={openRepeater}\n        onStartSelecting={startSelecting}\n        isEnabledSelecting={state.isEnabledSelecting}\n        onSelectItem={selectItem}\n        selectedItems={state.selectedItems}\n        onMovingSelectedCards={movingSelectedCards}\n        onDeleteSelectedCards={deleteSelectedCards}\n        onCopySelectedCards={copySelectedCards}\n    />\n};\n","import React, {FC} from 'react';\n\nimport {Button} from '@mui/material';\nimport {IRepeatingStatisticComponent} from \"./types/IRepeatingStatisticComponent\";\n\nexport const StatisticComponent: FC<IRepeatingStatisticComponent> = ({repeatingProgress}) => {\n\n    return <div>\n        <Button size=\"small\">\n            <span style={{color: \"red\"}}>To Do: {repeatingProgress.todo}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"orange\"}}>In progress: {repeatingProgress.inProgress}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"green\"}}>Completed: {repeatingProgress.done}</span>\n        </Button>\n    </div>\n};\n","import React, {FC} from 'react';\nimport {Button} from '@mui/material';\n\nimport {IAllCardsRepeatedComponent} from \"./types/IAllCardsRepeatedComponent\";\n\nexport const AllCardsRepeatedComponent: FC<IAllCardsRepeatedComponent> = ({onBackClick}) => {\n    return <>\n        <span>No cards for repeating</span>\n        <Button size=\"small\" color=\"primary\" onClick={onBackClick}>\n            Go back\n        </Button>\n    </>\n};\n","import React, {FC} from 'react';\nimport {IconButton} from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport {Campaign, Check, Edit} from '@mui/icons-material';\nimport {ICardsRepeaterHeaderComponent} from \"./types/ICardsRepeaterHeaderComponent\";\n\nexport const CardsHeaderComponent: FC<ICardsRepeaterHeaderComponent> = (\n    {\n        isQuestionSide,\n        onSwitchEditing,\n        onReadByVoiceEngine,\n        isEditable\n    }\n) => {\n    return <div className=\"cards-repeater_title\">\n        <IconButton color=\"inherit\" onClick={onReadByVoiceEngine}>\n            <Campaign/>\n        </IconButton>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {isQuestionSide ? 'Question' : 'Answer'}\n        </Typography>\n        <IconButton color=\"inherit\" onClick={onSwitchEditing}>\n            {isEditable ? <Check/> : <Edit/>}\n        </IconButton>\n    </div>\n};\n","import React, {FC} from \"react\";\nimport {List} from \"@mui/material\";\nimport Typography from \"@mui/material/Typography\";\nimport {ILongTextViewerComponent} from \"./types/ILongTextViewerComponent\";\nimport './LongTextViewerComponent.css'\n\nexport const LongTextViewerComponent: FC<ILongTextViewerComponent> = (\n    {\n        viewHeight,\n        text,\n        onClickText = () => {}\n    }\n) => {\n    return <Typography\n        component=\"div\"\n        color=\"textSecondary\"\n        gutterBottom\n        onClick={onClickText}\n        className=\"long-text-viewer\"\n        style={{height: viewHeight}}\n    >\n        <List style={{paddingTop: 0}}>\n            {text}\n        </List>\n    </Typography>\n}","import {ChangeEvent, default as React, FC} from 'react';\nimport {TextField} from '@mui/material';\n\nimport './TextEditorComponent.css'\nimport {ITextEditorComponent} from \"./types/ITextEditorComponent\";\n\nexport const TextEditorComponent: FC<ITextEditorComponent> = ({onChangeText, changeableText, label}) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeText(event.target.value);\n    };\n\n    return <TextField\n        className=\"text-editor\"\n        required\n        id=\"outlined-required\"\n        label={label || \"\"}\n        multiline\n        onChange={onChange}\n        value={changeableText}\n        variant=\"filled\"\n    />\n};\n","import React, {FC} from \"react\";\n\nimport {TextEditorComponent} from \"../text-editor/TextEditorComponent\";\nimport {ILongTextEditorComponent} from \"./types/ILongTextEditorComponent\";\nimport './LongTextEditorComponent.css'\n\nexport const LongTextEditorComponent: FC<ILongTextEditorComponent> = (\n    {\n        viewHeight,\n        text,\n        onChangeText\n    }\n) => {\n    return <div\n        className=\"long-text-editor\"\n        style={{\n            height: viewHeight\n        }}\n    >\n        <TextEditorComponent onChangeText={onChangeText} changeableText={text}/>\n    </div>\n}","import React, {FC} from 'react';\nimport {Button, CardActions} from '@mui/material';\n\nimport {IDeleteButtonFooterComponent} from \"./types/IDeleteButtonFooterComponent\";\n\nexport const DeleteButtonFooterComponent: FC<IDeleteButtonFooterComponent> = ({onClick}) => {\n\n    return <>\n        {\n            <CardActions className=\"cards-repeater_buttons-container\" style={{height: 10}}>\n                <Button size=\"small\" color=\"primary\" onClick={() => onClick()}>\n                    Remove\n                </Button>\n            </CardActions>\n        }\n    </>\n};\n","import React, {FC} from 'react';\n\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\nimport {LongTextViewerComponent} from \"../long-text-viewer/LongTextViewerComponent\";\nimport {IQuestionCard} from \"./types/IQuestionCard\";\nimport {LongTextEditorComponent} from \"../long-text-editor/LongTextEditorComponent\";\nimport {DeleteButtonFooterComponent} from \"../delete-button-footer/DeleteButtonFooterComponent\";\n\nexport const QuestionCardComponent: FC<IQuestionCard> = (\n    {\n        card,\n        onClickCard,\n        cardHeight,\n        isEditable,\n        onDeleteCard,\n        onChangeQuestion\n    }\n) => {\n\n    const question = card ? card.question : '';\n\n    return <Card>\n        <CardContent onClick={onClickCard} style={{height: cardHeight}}>\n            {\n                isEditable ?\n                    <>\n                        <LongTextEditorComponent\n                            text={question}\n                            viewHeight={cardHeight}\n                            onChangeText={onChangeQuestion}\n                        />\n                        <DeleteButtonFooterComponent onClick={onDeleteCard}/>\n                    </>\n                    :\n                    <LongTextViewerComponent viewHeight={cardHeight} text={question}/>\n            }\n        </CardContent>\n    </Card>\n};\n","import React, {FC} from 'react';\nimport {Button, CardActions} from '@mui/material';\n\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\nimport {IAnswerCardFooterComponent} from \"./types/IAnswerCardFooterComponent\";\n\nexport const AnswerCardFooterComponent: FC<IAnswerCardFooterComponent> = ({card, onClickYesNoButton}) => {\n\n    return <>\n        {\n            card && card.rangeOfKnowledge !== IRangeOfKnowledge.DONE ?\n                <CardActions className=\"cards-repeater_buttons-container\" style={{height: 10}}>\n                    <Button size=\"small\" color=\"primary\" onClick={() => onClickYesNoButton(true)}>\n                        Yes\n                    </Button>\n                    <Button size=\"small\" color=\"primary\" onClick={() => onClickYesNoButton(false)}>\n                        No\n                    </Button>\n                </CardActions> :\n                <div>Repeated</div>\n        }\n    </>\n};\n","import React, {FC} from 'react';\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\n\nimport {AnswerCardFooterComponent} from '../answer-card-footer/AnswerCardFooterComponent';\nimport {IAnswerCardComponent} from \"./types/IAnswerCardComponent\";\nimport {LongTextViewerComponent} from \"../long-text-viewer/LongTextViewerComponent\";\nimport {LongTextEditorComponent} from \"../long-text-editor/LongTextEditorComponent\";\nimport {DeleteButtonFooterComponent} from \"../delete-button-footer/DeleteButtonFooterComponent\";\n\nexport const AnswerCardComponent: FC<IAnswerCardComponent> = (\n    {\n        card,\n        cardHeight,\n        onClickText,\n        onClickYesNoButton,\n        isEditable,\n        onChangeAnswer,\n        onDeleteCard\n    }\n) => {\n\n    const getText = () => {\n        return card ? card.answer : '';\n    };\n\n    return <Card className=\"cards-repeater\">\n        <CardContent style={{height: cardHeight}}>\n            {\n                isEditable ?\n                    <>\n                        <LongTextEditorComponent\n                            text={getText()}\n                            viewHeight={cardHeight}\n                            onChangeText={onChangeAnswer}\n                        />\n                        <DeleteButtonFooterComponent onClick={onDeleteCard}/>\n                    </>\n                    :\n                    <>\n                        <LongTextViewerComponent\n                            viewHeight={cardHeight}\n                            text={getText()}\n                            onClickText={onClickText}\n                        />\n                        <AnswerCardFooterComponent onClickYesNoButton={onClickYesNoButton} card={card}/>\n                    </>\n            }\n        </CardContent>\n    </Card>\n};\n","import React, {FC} from \"react\";\n\nimport {CardsHeaderComponent} from \"../cards-header/CardsHeaderComponent\";\nimport {QuestionCardComponent} from \"../question-card/QuestionCardComponent\";\nimport {AnswerCardComponent} from \"../answer-card/AnswerCardComponent\";\nimport {ICardsContentComponent} from \"./types/ICardsContentComponent\";\n\nexport const CardsContentComponent: FC<ICardsContentComponent> = (\n    {\n        isQuestionSide,\n        isEditable,\n        onSwitchEditing,\n        card,\n        cardHeight,\n        onClickCard,\n        onChangeAnswer,\n        onChangeQuestion,\n        onDeleteCard,\n        onClickYesNoButton,\n        onReadByVoiceEngine\n    }\n) => {\n    return <>\n        <CardsHeaderComponent\n            onReadByVoiceEngine={onReadByVoiceEngine}\n            isQuestionSide={isQuestionSide}\n            isEditable={isEditable}\n            onSwitchEditing={onSwitchEditing}\n        />\n        {\n            isQuestionSide ?\n                <QuestionCardComponent\n                    card={card}\n                    onClickCard={onClickCard}\n                    cardHeight={cardHeight}\n                    isEditable={isEditable}\n                    onChangeQuestion={onChangeQuestion}\n                    onDeleteCard={onDeleteCard}\n                /> :\n                <AnswerCardComponent\n                    card={card}\n                    onClickText={onClickCard}\n                    cardHeight={cardHeight}\n                    onClickYesNoButton={onClickYesNoButton}\n                    onChangeAnswer={onChangeAnswer}\n                    isEditable={isEditable}\n                    onDeleteCard={onDeleteCard}\n                />\n        }\n    </>\n}","import React, {FC} from 'react';\n\nimport {StatisticComponent} from './elements/statistic/StatisticComponent';\nimport \"./CardsRepeaterComponent.css\"\nimport {AllCardsRepeatedComponent} from './elements/all-cards-repeated/AllCardsRepeatedComponent';\nimport {CardsContentComponent} from \"../../common/elements/cards-content/CardsContentComponent\";\nimport {ICardsRepeaterComponent} from \"./types/ICardsRepeaterComponent\";\n\nexport const CardsRepeaterComponent: FC<ICardsRepeaterComponent> = (\n    {\n        card,\n            cardHeight,\n            isQuestionSide,\n            onClickCard,\n            onClickYesNoButton,\n            repeatingProgress,\n            onBackClick,\n            onSwitchEditing,\n            isEditable,\n            onChangeAnswer,\n            onChangeQuestion,\n            onReadByVoiceEngine,\n            onDeleteCard\n    }\n) => {\n\n        return card && card.id !== -1 ?\n            <div className=\"cards-repeater\">\n                    <StatisticComponent repeatingProgress={repeatingProgress}/>\n                    <CardsContentComponent\n                        card={card}\n                        onDeleteCard={onDeleteCard}\n                        onClickYesNoButton={onClickYesNoButton}\n                        isQuestionSide={isQuestionSide}\n                        onClickCard={onClickCard}\n                        cardHeight={cardHeight}\n                        onSwitchEditing={onSwitchEditing}\n                        isEditable={isEditable}\n                        onChangeQuestion={onChangeQuestion}\n                        onChangeAnswer={onChangeAnswer}\n                        onReadByVoiceEngine={onReadByVoiceEngine}\n                    />\n            </div> :\n            <AllCardsRepeatedComponent onBackClick={onBackClick}/>\n};\n","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteCard: ICallback<CardRepeaterCallbackSettings, void> = (\n    {services, setState, setSubscription}\n) => {\n    const {confirmDialogService, cardsRepeaterService} = services;\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            setState((prevState) => {\n                cardsRepeaterService.deleteSingleCardChannel.next(prevState.card.id);\n                return prevState;\n            })\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardRepeaterCallbackSettings, ICardsGroup[]> = (\n    {services, location}\n) => {\n    services.cardsRepeaterService.cardChannel.next(\n        location.state ? location.state.cardsIDsForRepeating : []\n    )\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onCardGroupNameChannel: ICallback<CardRepeaterCallbackSettings, string> = (\n    {services},\n    label\n) => {\n    services.toolbarService.toolbarExternalLabelChannel.next(label as string);\n}","import {IRangeOfKnowledge} from \"../types/IRangeOfKnowledge\";\n\nexport const defaultCard = {\n    id: -1,\n    question: '',\n    answer: '',\n    rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n    dateRepeating: 0\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onCardChannel: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {services: {cardsRepeaterService}, setState},\n    card = defaultCard\n) => {\n    cardsRepeaterService.cardGroupNameChannel.next(card.id)\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card,\n            isQuestionSide: true,\n            isEditable: false\n        }\n    });\n    cardsRepeaterService.repeatingProgressChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onCardEditingChannel: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {setState},\n    card = defaultCard\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","export const defaultRepeatingProgress = {\n    inProgress: 0,\n    todo: 0,\n    done: 0\n};","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {IRepeatingProgress} from \"../../../common/types/IRepeatingProgress\";\nimport {defaultRepeatingProgress} from \"../../../common/defaults/defaultRepeatingProgress\";\n\nexport const onStatisticChannel: ICallback<CardRepeaterCallbackSettings, IRepeatingProgress> = (\n    {setState},\n    statistic = defaultRepeatingProgress\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeatingProgress: statistic\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onRepeatingResultChannel: ICallback<CardRepeaterCallbackSettings, ICardsGroup[]> = (\n    {services: {cardsRepeaterService}, location}\n) => {\n    cardsRepeaterService.cardChannel.next(location.state.cardsIDsForRepeating);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {services: {cardsRepeaterService}, location}\n) => {\n    if (location.state) {\n        cardsRepeaterService.cardChannel.next(location.state.cardsIDsForRepeating);\n    }\n    cardsRepeaterService.repeatingProgressChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const onClick: ICallback<CardRepeaterCallbackSettings, boolean> = (\n    {\n        setState,\n        location,\n        services: {cardsRepeaterService}\n    },\n    isKnown = false\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            cardsRepeaterService.repeatingResultChannel.next({\n                isKnown: isKnown,\n                cardID: prevState.card.id,\n                cardsGroupID: location.state.cardsGroupID\n            });\n            return prevState;\n        } else {\n            return {\n                ...prevState,\n                card: {\n                    id: -1,\n                    question: '',\n                    answer: '',\n                    rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n                    dateRepeating: 0\n                },\n                isQuestionSide: false,\n                isEditable: false\n            }\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onClickCard: ICallback<CardRepeaterCallbackSettings, void> = (\n    {setState}\n) => {\n\n    setState((prevState) => {\n        if (!prevState.isEditable) {\n            return {\n                ...prevState,\n                isQuestionSide: !prevState.isQuestionSide\n            }\n        }\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onBackClick: ICallback<CardRepeaterCallbackSettings, void> = (\n    {history}\n) => {\n    history.goBack();\n}","import {IRangeOfKnowledge} from \"../types/IRangeOfKnowledge\";\n\nexport const initDefaultCard = () => {\n    return {\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        answer: '',\n        question: '',\n        dateRepeating: 0,\n        id: new Date().getTime()\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const onSwitchEditing: ICallback<CardRepeaterCallbackSettings, void> = (\n    {setState, location, services: {cardsEditorService}}\n) => {\n    setState((prevState) => {\n        if (prevState.isEditable) {\n            cardsEditorService.cardEditingChannel.next({\n                card: prevState.card || initDefaultCard(),\n                cardsGroupID: location.state.cardsGroupID\n            })\n        }\n        return {\n            ...prevState,\n            isEditable: !prevState.isEditable\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardRepeaterCallbackSettings, string> = (\n    {setState},\n    question = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                question\n            };\n            return {...prevState, card: editableCard}\n        }\n        return prevState\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardRepeaterCallbackSettings, string> = (\n    {setState},\n    answer = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                answer\n            };\n            return {...prevState, card: editableCard}\n        }\n        return prevState;\n    });\n}","import {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\nimport {defaultRepeatingProgress} from \"../../../common/defaults/defaultRepeatingProgress\";\n\nexport const initialState = {\n    card: {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    },\n    isQuestionSide: true,\n    isEditable: false,\n    repeatingProgress: defaultRepeatingProgress\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onReadByVoiceEngine: ICallback<CardRepeaterCallbackSettings, void> = (\n    {setState, services}\n) => {\n    setState((prevState) => {\n        if (prevState.isQuestionSide) {\n            services.cardsRepeaterService.readByVoiceEngineChannel.next(prevState.card.question);\n        } else {\n            services.cardsRepeaterService.readByVoiceEngineChannel.next(prevState.card.answer);\n        }\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onReadByVoiceEngineChannel: ICallback<CardRepeaterCallbackSettings, string> = (\n    {},\n) => {\n}","import React, {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {CardsRepeaterComponent} from './CardsRepeaterComponent';\nimport {AppContext} from '../../../App';\nimport {ICardRepeaterContainer} from \"./types/ICardRepeaterContainer\";\nimport {onDeleteCard} from \"./ui-callbacks/onDeleteCard\";\nimport {onDeleteSingleCardChannel} from \"./channels-callbacks/onDeleteSingleCardChannel\";\nimport {onCardGroupNameChannel} from \"./channels-callbacks/onCardGroupNameChannel\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {onCardChannel} from \"./channels-callbacks/onCardChannel\";\nimport {onCardEditingChannel} from \"./channels-callbacks/onCardEditingChannel\";\nimport {onStatisticChannel} from \"./channels-callbacks/onStatisticChannel\";\nimport {onRepeatingResultChannel} from \"./channels-callbacks/onRepeatingResultChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onClick} from \"./ui-callbacks/onClick\";\nimport {onClickCard} from \"./ui-callbacks/onClickCard\";\nimport {onBackClick} from \"./ui-callbacks/onBackClick\";\nimport {onSwitchEditing} from \"./ui-callbacks/onSwitchEditing\";\nimport {onChangeQuestion} from \"./ui-callbacks/onChangeQuestion\";\nimport {onChangeAnswer} from \"./ui-callbacks/onChangeAnswer\";\nimport {initialState} from \"./defaults/initialState\";\nimport {CardRepeaterCallbackSettings} from \"./types/CardRepeaterCallbackSettings\";\nimport {onReadByVoiceEngine} from \"./ui-callbacks/onReadByVoiceEngine\";\nimport {onReadByVoiceEngineChannel} from \"./channels-callbacks/onReadByVoiceEngineChannel\";\n\nexport const CardRepeaterContainer: FC<ICardRepeaterContainer> = (\n    services\n) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<CardRepeaterCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {\n        state, context, services: {\n            cardsRepeaterService, cardsEditorService\n        }\n    } = callbackSettings\n\n    useChannel(cardsRepeaterService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel))\n    useChannel(cardsRepeaterService.cardGroupNameChannel, callbackFactory(onCardGroupNameChannel))\n    useChannel(cardsRepeaterService.cardChannel, callbackFactory(onCardChannel));\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardsRepeaterService.repeatingProgressChannel, callbackFactory(onStatisticChannel));\n    useChannel(cardsRepeaterService.repeatingResultChannel, callbackFactory(onRepeatingResultChannel));\n    useChannel(cardsRepeaterService.readByVoiceEngineChannel, callbackFactory(onReadByVoiceEngineChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const click = useCallback(callbackFactory(onClick), []);\n    const clickCard = useCallback(callbackFactory(onClickCard), []);\n    const backClick = useCallback(callbackFactory(onBackClick), []);\n    const switchEditing = useCallback(callbackFactory(onSwitchEditing), []);\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), []);\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), []);\n    const deleteCard = useCallback(callbackFactory(onDeleteCard), [])\n    const readByVoiceEngine = useCallback(callbackFactory(onReadByVoiceEngine), []);\n\n    return <CardsRepeaterComponent\n        onReadByVoiceEngine={readByVoiceEngine}\n        onDeleteCard={deleteCard}\n        cardHeight={context.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={clickCard}\n        onClickYesNoButton={click}\n        card={state.card}\n        repeatingProgress={state.repeatingProgress}\n        onBackClick={backClick}\n        onSwitchEditing={switchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n    />\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {LocalBackupsCallbackSettings} from \"../types/LocalBackupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onLoadBackupChannel: ICallback<LocalBackupsCallbackSettings, ICardsGroup[]> = (\n    {services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {LocalBackupsCallbackSettings} from \"../types/LocalBackupsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport LoadIcon from \"@mui/icons-material/Download\";\nimport * as React from \"react\";\n\nexport const onFileSelect: ICallback<LocalBackupsCallbackSettings, any> = (\n    {\n        setSubscription,\n        services: {\n            spinnerService,\n            confirmDialogService,\n            localBackupsService\n        }\n    },\n    event\n) => {\n\n    let file = null;\n    if (event) {\n        file = event.target.files[0];\n    }\n    if (!file) {\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = (readerEvent: any) => {\n        const games: string = readerEvent.target.result;\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                spinnerService.spinnerCounterChannel.next(1);\n                localBackupsService.loadBackupChannel.next(games);\n            }\n\n            confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to load this backup, your current changes could be removed?',\n            titleBackgroundColor: 'red',\n            icon: <LoadIcon/>\n        });\n    };\n    reader.readAsText(file);\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {Button} from '@mui/material';\nimport {ILocalBackupsContainer} from \"./types/ILocalBackupsContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {onLoadBackupChannel} from \"./channels-callbacks/onLoadBackupChannel\";\nimport {onFileSelect} from \"./ui-callbacks/onFileSelect\";\nimport {LocalBackupsCallbackSettings} from \"./types/LocalBackupsCallbackSettings\";\n\nexport const LocalBackupsContainer: FC<ILocalBackupsContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<LocalBackupsCallbackSettings>(\n        null,\n        services,\n        AppContext\n    );\n\n    const {services: {localBackupsService}} = callbackSettings\n\n    useChannel(localBackupsService.localBackupChannel);\n    useChannel(localBackupsService.loadBackupChannel, callbackFactory(onLoadBackupChannel));\n\n    const handleFileSelect = useCallback(callbackFactory(onFileSelect), [])\n\n    return <>\n        <input type=\"file\" onChange={handleFileSelect}/>\n        <Button size=\"small\" onClick={() => localBackupsService.localBackupChannel.next()}>\n            Save\n        </Button>\n    </>\n};\n","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {Button, TextField} from '@mui/material';\n\nimport './CardsGroupsEditorComponent.css'\nimport {ICardsGroupsEditorComponent} from \"./types/ICardsGroupsEditorComponent\";\n\nexport const CardsGroupsEditorComponent: FC<ICardsGroupsEditorComponent> = (\n    {groupName, onChangeGroupName, onSaveGroup}\n) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeGroupName(event.target.value);\n    };\n\n    return <div className=\"group-editor\">\n        <TextField\n            className=\"group-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Group name\"\n            onChange={onChange}\n            value={groupName}\n            variant=\"filled\"\n        />\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveGroup()}>\n            Save\n        </Button>\n    </div>\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onChangeGroupName: ICallback<ICardsGroupsEditorCallbackSettings, string> = (\n    {setState},\n    groupName = ''\n) => {\n    setState((prevState) => {\n        return {\n            cardsGroup: {\n                ...prevState.cardsGroup,\n                nameCardsGroup: groupName\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onSaveGroup: ICallback<ICardsGroupsEditorCallbackSettings, void> = (\n    {setState, services}\n) => {\n    setState((prevState) => {\n        services.cardsGroupsEditorService.groupEditingChannel.next(prevState.cardsGroup);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onConstructor: ICallback<ICardsGroupsEditorCallbackSettings, void> = (\n    {services, location}\n) => {\n    let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n    services.cardsGroupsEditorService.groupChannel.next(cardsGroupID)\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupEditingChannel: ICallback<ICardsGroupsEditorCallbackSettings, ICardsGroup[]> = (\n    {history}\n) => {\n    history.goBack();\n}","export const defaultCardsGroup = {\n    cards: [],\n    nameCardsGroup: '',\n    repeatingDate: new Date().getTime(),\n    id: new Date().getTime(),\n    percentRepeatedCards: 0\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {defaultCardsGroup} from \"../../../common/defaults/defaultCardsGroup\";\n\nexport const onGroupChannel: ICallback<ICardsGroupsEditorCallbackSettings, ICardsGroup> = (\n    {setState},\n    cardsGroup = defaultCardsGroup\n) => {\n    setState((prevState) => {\n        return {\n            cardsGroup\n        }\n    })\n}","import {defaultCardsGroup} from \"../../../common/defaults/defaultCardsGroup\";\n\nexport const initialState = {\n    cardsGroup: defaultCardsGroup\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {CardsGroupsEditorComponent} from './CardsGroupsEditorComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {ICardsGroupsEditorContainer} from \"./types/ICardsGroupsEditorContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {onChangeGroupName} from \"./ui-callbacks/onChangeGroupName\";\nimport {onSaveGroup} from \"./ui-callbacks/onSaveGroup\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onGroupEditingChannel} from \"./channels-callbacks/onGroupEditingChannel\";\nimport {onGroupChannel} from \"./channels-callbacks/onGroupChannel\";\nimport {initialState} from \"./defaults/initialState\";\nimport {ICardsGroupsEditorCallbackSettings} from \"./types/ICardsGroupsEditorCallbackSettings\";\n\nexport const CardsGroupsEditorContainer: FC<ICardsGroupsEditorContainer> = (\n    services\n) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<ICardsGroupsEditorCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {cardsGroupsEditorService}} = callbackSettings\n\n    useChannel(cardsGroupsEditorService.groupEditingChannel, callbackFactory(onGroupEditingChannel));\n    useChannel(cardsGroupsEditorService.groupChannel, callbackFactory(onGroupChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeGroupName = useCallback(callbackFactory(onChangeGroupName), []);\n    const saveGroup = useCallback(callbackFactory(onSaveGroup), []);\n\n    return <CardsGroupsEditorComponent\n        groupName={state.cardsGroup.nameCardsGroup}\n        onChangeGroupName={changeGroupName}\n        onSaveGroup={saveGroup}\n    />\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {Button} from '@mui/material';\n\nimport './CardsEditorComponent.css'\nimport {TextEditorComponent} from '../../common/elements/text-editor/TextEditorComponent';\nimport {ICardsEditorComponent} from \"./types/ICardsEditorComponent\";\n\nexport const CardsEditorComponent: FC<ICardsEditorComponent> = (\n    {\n        answer,\n        question,\n        onChangeAnswer,\n        onChangeQuestion,\n        onSaveCard\n    }\n) => {\n    return <div className=\"cards-editor\">\n        <TextEditorComponent onChangeText={onChangeQuestion} changeableText={question} label=\"Question\"/>\n        <TextEditorComponent onChangeText={onChangeAnswer} changeableText={answer} label=\"Answer\"/>\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveCard()}>\n            Save\n        </Button>\n    </div>\n};\n","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onCardEditingChannel: ICallback<CardsEditorCallbackSettings, ICard> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onCardChannel: ICallback<CardsEditorCallbackSettings, ICard> = (\n    {history, setState},\n    card = defaultCard\n) => {\n    if (card) {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                card\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onConstructor: ICallback<CardsEditorCallbackSettings, void> = (\n    {\n        location,\n        services\n    }\n) => {\n    let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n    let cardID = location.state ? location.state.cardID : -1;\n    services.cardsEditorService.cardChannel.next({cardID, cardsGroupID});\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardsEditorCallbackSettings, string> = (\n    {history, setState},\n    question = ''\n) => {\n    setState((prevState) => {\n        return {\n            card: {\n                ...prevState.card,\n                question\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardsEditorCallbackSettings, string> = (\n    {history, setState},\n    answer = ''\n) => {\n    setState((prevState) => {\n        return {\n            card: {\n                ...prevState.card,\n                answer\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onSaveCard: ICallback<CardsEditorCallbackSettings, void> = (\n    {services, setState, location}\n) => {\n    setState((prevState) => {\n        services.cardsEditorService.cardEditingChannel.next(\n            {card: prevState.card, cardsGroupID: location.state.cardsGroupID}\n        );\n        return prevState;\n    })\n}","import {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const initialState = {\n    card: initDefaultCard()\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {CardsEditorComponent} from './CardsEditorComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {ICardsEditorContainer} from \"./types/ICardsEditorContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {onCardEditingChannel} from \"./channels-callbacks/onCardEditingChannel\";\nimport {onCardChannel} from \"./channels-callbacks/onCardChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onChangeQuestion} from \"./ui-callbacks/onChangeQuestion\";\nimport {onChangeAnswer} from \"./ui-callbacks/onChangeAnswer\";\nimport {onSaveCard} from \"./ui-callbacks/onSaveCard\";\nimport {initialState} from \"./defaults/initialState\";\nimport {CardsEditorCallbackSettings} from \"./types/CardsEditorCallbackSettings\";\n\nexport const CardsEditorContainer: FC<ICardsEditorContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<CardsEditorCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {cardsEditorService}} = callbackSettings\n\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardsEditorService.cardChannel, callbackFactory(onCardChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), []);\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), []);\n    const saveCard = useCallback(callbackFactory(onSaveCard), []);\n\n    return <CardsEditorComponent\n        question={state.card.question}\n        answer={state.card.answer}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n        onSaveCard={saveCard}\n    />\n};\n","import * as React from \"react\";\nimport {ChangeEvent, FC} from \"react\";\nimport {FormControlLabel, Switch} from \"@mui/material\";\nimport {ISettingsSwitcherComponent} from \"./types/ISettingsSwitcherComponent\";\n\nexport const SettingsSwitcherComponent: FC<ISettingsSwitcherComponent> = (\n    {\n        checked,\n        label,\n        onChange\n    }\n) => {\n\n    const change = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.checked)\n    };\n\n    return <FormControlLabel\n        control={\n            <Switch\n                checked={checked}\n                onChange={change}\n            />\n        }\n        label={label}\n    />\n}","import * as React from \"react\";\nimport {ChangeEvent, FC} from \"react\";\n\nimport {ISettingsNumberInputComponent} from \"./types/ISettingsNumberInputComponent\";\nimport {FormControlLabel, Input} from \"@mui/material\";\n\nexport const SettingsNumberInputComponent: FC<ISettingsNumberInputComponent> = (\n    {\n        value,\n        label,\n        onChange,\n    }\n) => {\n\n    const change = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange(Number(event.target.value))\n    };\n\n    return <FormControlLabel\n        control={\n            <Input\n                type=\"number\"\n                value={value}\n                onChange={change}\n            />\n        }\n        label={label}\n    />\n}","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {FormControlLabel, FormGroup, FormLabel} from '@mui/material';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\n\nimport {ISettingsComponent} from \"./types/ISettingsComponent\";\nimport {SettingsSwitcherComponent} from \"./elements/settings-switcher/SettingsSwitcherComponent\";\nimport {SettingsNumberInputComponent} from \"./elements/settings-number-input/SettingsNumberInputComponent\";\nimport './SettingsComponent.css'\nimport {IRepeatingType} from \"../../common/types/IRepeatingType\";\n\nexport const SettingsComponent: FC<ISettingsComponent> = (\n    {\n        settings,\n        onChangeAlgorithm,\n        onChangeAutoObsolete,\n        onChangeTimeInDone,\n        onChangeTimeInProgress\n    }\n) => {\n\n    const changeAlgorithm = (event: ChangeEvent<HTMLInputElement>) => {\n        let repeatingType = Number(event.target.value) as any\n        onChangeAlgorithm(repeatingType);\n    };\n\n    return <FormGroup className=\"settings-form\">\n        <FormLabel>Random repeating algorithm</FormLabel>\n        <RadioGroup value={settings.repeatingType} onChange={changeAlgorithm}>\n            <FormControlLabel value={IRepeatingType.DEFAULT} control={<Radio/>} label=\"Default\"/>\n            <FormControlLabel value={IRepeatingType.RANDOM} control={<Radio/>} label=\"Random\"/>\n        </RadioGroup>\n        <SettingsSwitcherComponent\n            checked={settings.autoObsolete?.isEnable}\n            label=\"Enable auto obsolete\"\n            onChange={onChangeAutoObsolete}\n        />\n        <SettingsNumberInputComponent\n            value={settings.autoObsolete?.timeInDone}\n            onChange={onChangeTimeInDone}\n            label=\"How long cards exist in done status (days)\"\n        />\n        <SettingsNumberInputComponent\n            value={settings.autoObsolete?.timeInProgress}\n            onChange={onChangeTimeInProgress}\n            label=\"How long cards exist in progress status (days)\"\n        />\n    </FormGroup>\n};\n","import {ISettings} from \"../types/ISettings\";\nimport {IRepeatingType} from \"../types/IRepeatingType\";\n\nexport const defaultSettings: ISettings = {\n    repeatingType: IRepeatingType.DEFAULT,\n    autoObsolete: {\n        isEnable: false,\n        timeInDone: 7,\n        timeInProgress: 7\n    }\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {ISettings} from \"../../../common/types/ISettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onChangeSettingsChannel: ICallback<SettingsCallbackSettings, ISettings> = (\n    {services: {settingsService}}\n) => {\n    settingsService.settingsChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {ISettings} from \"../../../common/types/ISettings\";\nimport {defaultSettings} from \"../../../common/defaults/defaultSettings\";\n\nexport const onSettingsChannel: ICallback<SettingsCallbackSettings, ISettings> = (\n    {setState, services: {settingsService}},\n    settings = defaultSettings\n) => {\n    setState((prevState) => {\n        return {...prevState, ...settings}\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<SettingsCallbackSettings, void> = (\n    {setState, services: {settingsService}}\n) => {\n    settingsService.settingsChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {IRepeatingType} from \"../../../common/types/IRepeatingType\";\n\nexport const onChangeAlgorithm: ICallback<SettingsCallbackSettings, IRepeatingType> = (\n    {setState, services: {settingsService}},\n    repeatingType = IRepeatingType.DEFAULT\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            repeatingType\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\n\nexport const onChangeAutoObsolete: ICallback<SettingsCallbackSettings, boolean> = (\n    {setState, services: {settingsService}},\n    isEnable = false\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            autoObsolete: {\n                ...prevState.autoObsolete,\n                isEnable\n            }\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\n\nexport const onChangeTimeInDone: ICallback<SettingsCallbackSettings, number> = (\n    {setState, services: {settingsService}},\n    timeInDone = -1\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            autoObsolete: {\n                ...prevState.autoObsolete,\n                timeInDone\n            }\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\n\nexport const onChangeTimeInProgress: ICallback<SettingsCallbackSettings, number> = (\n    {setState, services: {settingsService}},\n    timeInProgress = -1\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            autoObsolete: {\n                ...prevState.autoObsolete,\n                timeInProgress\n            }\n        })\n        return prevState;\n    })\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {SettingsComponent} from './SettingsComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {ISettingsContainer} from \"./types/ISettingsContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {defaultSettings} from \"../../common/defaults/defaultSettings\";\nimport {onChangeSettingsChannel} from \"./channels-callbacks/onChangeSettingsChannel\";\nimport {onSettingsChannel} from \"./channels-callbacks/onSettingsChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onChangeAlgorithm} from \"./ui-callbacks/onChangeAlgorithm\";\nimport {onChangeAutoObsolete} from \"./ui-callbacks/onChangeAutoObsolete\";\nimport {onChangeTimeInDone} from \"./ui-callbacks/onChangeTimeInDone\";\nimport {onChangeTimeInProgress} from \"./ui-callbacks/onChangeTimeInProgress\";\nimport {SettingsCallbackSettings} from \"./types/SettingsCallbackSettings\";\n\nexport const SettingsContainer: FC<ISettingsContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<SettingsCallbackSettings>(\n        defaultSettings,\n        services,\n        AppContext\n    );\n\n    const {state, services: {settingsService}} = callbackSettings\n\n    useChannel(settingsService.changeSettingsChannel, callbackFactory(onChangeSettingsChannel));\n    useChannel(settingsService.settingsChannel, callbackFactory(onSettingsChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeAlgorithm = useCallback(callbackFactory(onChangeAlgorithm), []);\n    const changeAutoObsolete = useCallback(callbackFactory(onChangeAutoObsolete), [])\n    const changeTimeInDone = useCallback(callbackFactory(onChangeTimeInDone), [])\n    const changeTimeInProgress = useCallback(callbackFactory(onChangeTimeInProgress), [])\n\n    return <SettingsComponent\n        settings={state}\n        onChangeAlgorithm={changeAlgorithm}\n        onChangeAutoObsolete={changeAutoObsolete}\n        onChangeTimeInDone={changeTimeInDone}\n        onChangeTimeInProgress={changeTimeInProgress}\n    />\n};","import React, {FC} from \"react\";\n\nimport {CardsContentComponent} from \"../../common/elements/cards-content/CardsContentComponent\";\nimport {ICardsContentComponent} from \"../../common/elements/cards-content/types/ICardsContentComponent\";\n\nexport const CardViewerComponent: FC<ICardsContentComponent> = (props) => {\n\n    return <div className=\"cards-viewer\">\n        {\n            props.card.id === -1 ? <div>No card for viewing</div> : <CardsContentComponent {...props}/>\n        }\n    </div>\n};","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteCard: ICallback<CardViewerCallbackSettings, void> = (\n    {services, setSubscription, setState}\n) => {\n    setState((prevState) => {\n        const {confirmDialogService, cardViewerService} = services;\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardViewerService.deleteSingleCardChannel.next(prevState.card.id);\n            }\n\n            confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to delete this cards?',\n            titleBackgroundColor: 'red',\n            icon: <DeleteIcon/>\n        });\n        return prevState;\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardViewerCallbackSettings, ICardsGroup[]> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onCardGroupNameChannel: ICallback<CardViewerCallbackSettings, string> = (\n    {services},\n    label\n) => {\n    services.toolbarService.toolbarExternalLabelChannel.next(label as string);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardViewerCallbackSettings, string> = (\n    {setState},\n    args = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                answer: args\n            };\n            return {...prevState, card: editableCard}\n        }\n        return prevState;\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardViewerCallbackSettings, string> = (\n    {setState},\n    args = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                question: args\n            };\n\n            return {...prevState, card: editableCard}\n        }\n        return prevState;\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const onSwitchEditing: ICallback<CardViewerCallbackSettings, void> = (\n    {\n        setState,\n        services,\n        location\n    }\n) => {\n    setState((prevState) => {\n        if (prevState.isEditable) {\n            services.cardsEditorService.cardEditingChannel.next({\n                card: prevState.card || initDefaultCard(),\n                cardsGroupID: location.state.cardsGroupID\n            })\n        }\n        return {\n            ...prevState,\n            isEditable: !prevState.isEditable\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onClickYesNoButton: ICallback<CardViewerCallbackSettings, boolean> = (\n    {\n        setState,\n        services,\n        location\n    },\n    args = false\n) => {\n\n    setState((prevState) => {\n        if (prevState.card) {\n            services.cardViewerService.repeatingResultChannel.next({\n                isKnown: args,\n                cardID: prevState.card.id,\n                cardsGroupID: location.state.cardsGroupID\n            });\n            return prevState;\n        } else {\n            return {\n                card: defaultCard,\n                isQuestionSide: false,\n                isEditable: false\n            }\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onClickCard: ICallback<CardViewerCallbackSettings, void> = (\n    {setState}\n) => {\n    setState((prevState) => {\n        if (!prevState.isEditable) {\n            return {\n                ...prevState,\n                isQuestionSide: !prevState.isQuestionSide\n            }\n        }\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onCardChannel: ICallback<CardViewerCallbackSettings, ICard> = (\n    {services, setState},\n    card = defaultCard\n) => {\n    services.cardViewerService.cardGroupNameChannel.next(card.id)\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onCardEditingChannel: ICallback<CardViewerCallbackSettings, ICard> = (\n    {setState},\n    card = defaultCard\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onRepeatingResultChannel: ICallback<CardViewerCallbackSettings, ICardsGroup[]> = (\n    {services, location}\n) => {\n    services.cardViewerService.cardChannel.next(location.state.cardID);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onConstructor: ICallback<CardViewerCallbackSettings, void> = (\n    {services, location}\n) => {\n    services.cardViewerService.cardChannel.next(location.state.cardID);\n}","import {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const initialState = {\n    card: {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    },\n    isQuestionSide: true,\n    isEditable: false\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onReadByVoiceEngine: ICallback<CardViewerCallbackSettings, void> = (\n    {services, setState}\n) => {\n    setState((prevState) => {\n        if (prevState.isQuestionSide) {\n            services.cardViewerService.readByVoiceEngineChannel.next(prevState.card.question);\n        } else {\n            services.cardViewerService.readByVoiceEngineChannel.next(prevState.card.answer);\n        }\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onReadByVoiceEngineChannel: ICallback<CardViewerCallbackSettings, string> = (\n    {}\n) => {\n}","import React, {FC, useCallback} from \"react\";\n\nimport {useChannel} from \"../../../MyTools/channel-conception/react-hooks/useChannel\";\nimport {AppContext} from \"../../../App\";\nimport {CardViewerComponent} from \"./CardViewerComponent\";\nimport {useConstructor} from \"../../../MyTools/react-hooks/useConstructor\";\nimport {ICardViewerContainer} from \"./types/ICardViewerContainer\";\nimport {onDeleteCard} from \"./ui-callbacks/onDeleteCard\";\nimport {onDeleteSingleCardChannel} from \"./channels-callbacks/onDeleteSingleCardChannel\";\nimport {onCardGroupNameChannel} from \"./channels-callbacks/onCardGroupNameChannel\";\nimport {onChangeAnswer} from \"./ui-callbacks/onChangeAnswer\";\nimport {onChangeQuestion} from \"./ui-callbacks/onChangeQuestion\";\nimport {onSwitchEditing} from \"./ui-callbacks/onSwitchEditing\";\nimport {onClickYesNoButton} from \"./ui-callbacks/onClickYesNoButton\";\nimport {onClickCard} from \"./ui-callbacks/onClickCard\";\nimport {onCardChannel} from \"./channels-callbacks/onCardChannel\";\nimport {onCardEditingChannel} from \"./channels-callbacks/onCardEditingChannel\";\nimport {onRepeatingResultChannel} from \"./channels-callbacks/onRepeatingResultChannel\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {initialState} from \"./defaults/initialState\";\nimport {CardViewerCallbackSettings} from \"./types/CardViewerCallbackSettings\";\nimport {onReadByVoiceEngine} from \"./ui-callbacks/onReadByVoiceEngine\";\nimport {onReadByVoiceEngineChannel} from \"./channels-callbacks/onReadByVoiceEngineChannel\";\n\nexport const CardViewerContainer: FC<ICardViewerContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<CardViewerCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, context, services: {cardViewerService, cardsEditorService}} = callbackSettings\n\n    useChannel(cardViewerService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel))\n    useChannel(cardViewerService.cardGroupNameChannel, callbackFactory(onCardGroupNameChannel))\n    useChannel(cardViewerService.cardChannel, callbackFactory(onCardChannel));\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardViewerService.repeatingResultChannel, callbackFactory(onRepeatingResultChannel));\n    useChannel(cardViewerService.readByVoiceEngineChannel, callbackFactory(onReadByVoiceEngineChannel));\n\n    useConstructor(callbackFactory(onConstructor))\n\n    const clickCard = useCallback(callbackFactory(onClickCard), [])\n    const clickYesNoButton = useCallback(callbackFactory(onClickYesNoButton), [])\n    const switchEditing = useCallback(callbackFactory(onSwitchEditing), [])\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), [])\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), [])\n    const deleteCard = useCallback(callbackFactory(onDeleteCard), [])\n    const readByVoiceEngine = useCallback(callbackFactory(onReadByVoiceEngine), [])\n\n    return <CardViewerComponent\n        onReadByVoiceEngine={readByVoiceEngine}\n        cardHeight={context.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={clickCard}\n        onClickYesNoButton={clickYesNoButton}\n        card={state.card}\n        onSwitchEditing={switchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n        onDeleteCard={deleteCard}\n    />\n}","import DeleteIcon from \"@mui/icons-material/Delete\";\nimport Fab from \"@mui/material/Fab\";\nimport * as React from \"react\";\nimport {FC} from \"react\";\n\nimport './RemoveButtonComponent.css'\nimport {IRemoveButtonComponent} from \"./types/IRemoveButtonComponent\";\n\nexport const RemoveButtonComponent: FC<IRemoveButtonComponent> = ({onClick}) => {\n    return <div className='remove-button-container'>\n        <Fab size=\"medium\" color=\"secondary\" onClick={onClick}>\n            <DeleteIcon/>\n        </Fab>\n    </div>\n}","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@mui/material\";\n\nimport './StatisticComponent.css'\nimport {IStatisticComponent} from \"./types/IStatisticComponent\";\nimport {RemoveButtonComponent} from \"./elements/RemoveButtonComponent\";\n\nexport const StatisticComponent: FC<IStatisticComponent> = ({rows, onRemoveStatistic}) => {\n    return <>\n        <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Date</TableCell>\n                        <TableCell>Done</TableCell>\n                        <TableCell>In Progress</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {rows.map((row) => (\n                        <TableRow key={row.date}>\n                            <TableCell>{row.date}</TableCell>\n                            <TableCell>{row.done}</TableCell>\n                            <TableCell>{row.inProgress}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n        <RemoveButtonComponent onClick={onRemoveStatistic}/>\n    </>\n}","export const initialState = {\n    rows: []\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {IRow} from \"../types/IRow\";\n\nexport const onStatisticChannel: ICallback<StatisticCallbackSettings, IRow[]> = (\n    {setState},\n    rows = []\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            rows\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<StatisticCallbackSettings, void> = (\n    {services: {statisticService}}\n) => {\n    statisticService.statisticChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport * as React from \"react\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onRemoveStatistic: ICallback<StatisticCallbackSettings, void> = (\n    {setSubscription, services: {statisticService, confirmDialogService}}\n) => {\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            statisticService.removeStatisticChannel.next(empty);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete statistic?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {initialState} from \"../defaults/initialState\";\nimport {IStatistic} from \"../../../common/types/IStatistic\";\n\nexport const onRemoveStatisticChannel: ICallback<StatisticCallbackSettings, IStatistic> = (\n    {setState}\n) => {\n    setState(() => {\n        return initialState;\n    })\n}","import {StatisticComponent} from \"./StatisticComponent\";\nimport {IStatisticContainer} from \"./types/IStatisticContainer\";\nimport {FC, useCallback} from \"react\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {StatisticCallbackSettings} from \"./types/StatisticCallbackSettings\";\nimport {initialState} from \"./defaults/initialState\";\nimport {useChannel} from \"../../../MyTools/channel-conception/react-hooks/useChannel\";\nimport {onStatisticChannel} from \"./channels-callbacks/onStatisticChannel\";\nimport {useConstructor} from \"../../../MyTools/react-hooks/useConstructor\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onRemoveStatistic} from \"./ui-callbacks/onRemoveStatistic\";\nimport {onRemoveStatisticChannel} from \"./channels-callbacks/onRemoveStatisticChannel\";\n\nexport const StatisticContainer: FC<IStatisticContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<StatisticCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {services: {statisticService}, state} = callbackSettings\n\n    useChannel(statisticService.statisticChannel, callbackFactory(onStatisticChannel));\n    useChannel(statisticService.removeStatisticChannel, callbackFactory(onRemoveStatisticChannel));\n\n    useConstructor(callbackFactory(onConstructor))\n\n    const removeStatistic = useCallback(callbackFactory(onRemoveStatistic), [])\n\n    return <StatisticComponent rows={state.rows} onRemoveStatistic={removeStatistic}/>\n}","import * as React from \"react\";\nimport {FC} from \"react\";\n\nimport {ISelectingGroupListItem} from \"./types/ISelectingGroupListItem\";\nimport ListItemText from \"@mui/material/ListItemText/ListItemText\";\nimport ListItemIcon from \"@mui/material/ListItemIcon/ListItemIcon\";\nimport {Checkbox, ListItem} from \"@mui/material\";\n\nexport const SelectingGroupListItem: FC<ISelectingGroupListItem> = (\n    {cardsGroup, onSelect, isSelected}\n) => {\n    return <ListItem key={cardsGroup.id} button>\n        <ListItemText\n            primary={<div>{cardsGroup.nameCardsGroup}</div>}\n        />\n        <ListItemIcon onClick={() => onSelect(cardsGroup.id)}>\n            <Checkbox\n                edge=\"start\"\n                checked={isSelected}\n                tabIndex={-1}\n                disableRipple\n            />\n        </ListItemIcon>\n    </ListItem>\n}","import * as React from \"react\";\nimport {ChangeEvent, FC} from \"react\";\nimport {Button, TextField} from \"@mui/material\";\nimport {FixedSizeList as List} from \"react-window\";\n\nimport './RepeaterEditorComponent.css'\nimport {IRepeaterEditorComponent} from \"./types/IRepeaterEditorComponent\";\nimport {SelectingGroupListItem} from \"./elements/selecting-group-list-element/SelectingGroupListItem\";\n\nexport const RepeaterEditorComponent: FC<IRepeaterEditorComponent> = (\n    {\n        onSaveRepeater,\n        cardsGroups,\n        height,\n        onSelect,\n        selectedGroups,\n        onChangeName,\n        repeaterName\n    }\n) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeName(event.target.value);\n    };\n\n    return <>\n        <TextField\n            className=\"repeater-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Repeater name\"\n            onChange={onChange}\n            value={repeaterName}\n            variant=\"filled\"\n        />\n        <List\n            className=\"repeater-editor_list\"\n            itemData={cardsGroups}\n            itemSize={55}\n            itemCount={cardsGroups.length}\n            overscanCount={5}\n            height={height}\n            width=\"100%\"\n        >\n            {({index, style}: any) => {\n                return <div style={style}><SelectingGroupListItem\n                    cardsGroup={cardsGroups[index]}\n                    onSelect={onSelect}\n                    isSelected={selectedGroups[cardsGroups[index].id]}\n                /></div>\n            }}\n        </List>\n        <Button variant=\"outlined\" className=\"repeater-editor_button\" size=\"small\" onClick={onSaveRepeater}>\n            Save\n        </Button>\n    </>\n}","import {IRepeater} from \"../types/IRepeater\";\n\nexport const defaultRepeater: IRepeater = {\n    id: -1,\n    cardsGroupsIDs: [],\n    name: ''\n}","import {RepeaterEditorState} from \"../types/RepeaterEditorState\";\nimport {defaultRepeater} from \"../../../common/defaults/defaultRepeater\";\n\nexport const initialState: RepeaterEditorState = {\n    cardsGroups: [],\n    selectedGroups: {},\n    repeater: defaultRepeater\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupsListChannel: ICallback<RepeaterEditorCallbackSettings, ICardsGroup[]> = (\n    {setState},\n    cardsGroups = []\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            cardsGroups\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const onSaveRepeaterChannel: ICallback<RepeaterEditorCallbackSettings, IRepeater[]> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onSaveRepeater: ICallback<RepeaterEditorCallbackSettings, ICardsGroup[]> = (\n    {setState, services: {repeaterEditorService}}\n) => {\n    setState((prevState) => {\n        repeaterEditorService.saveRepeaterChannel.next(prevState.repeater);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\nimport {defaultRepeater} from \"../../../common/defaults/defaultRepeater\";\n\nexport const onUpdateGroupsIDsChannel: ICallback<RepeaterEditorCallbackSettings, IRepeater> = (\n    {setState},\n    repeater = defaultRepeater\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeater\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\n\nexport const onSelect: ICallback<RepeaterEditorCallbackSettings, number> = (\n    {setState, services: {repeaterEditorService}},\n    cardID = -1\n) => {\n    setState((prevState) => {\n        prevState.selectedGroups[cardID] = !prevState.selectedGroups[cardID];\n        repeaterEditorService.updateGroupsIDsChannel.next({\n            selectedGroups: prevState.selectedGroups,\n            repeater: prevState.repeater\n        })\n\n        return {\n            ...prevState\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\nimport {defaultRepeater} from \"../../../common/defaults/defaultRepeater\";\n\nexport const onRepeaterChannel: ICallback<RepeaterEditorCallbackSettings, IRepeater> = (\n    {setState, services: {repeaterEditorService}},\n    repeater = defaultRepeater\n) => {\n    repeaterEditorService.selectedGroupsChannel.next(repeater);\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeater\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\n\nexport const onChangeName: ICallback<RepeaterEditorCallbackSettings, string> = (\n    {setState},\n    name = ''\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeater: {\n                ...prevState.repeater,\n                name\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<RepeaterEditorCallbackSettings, void> = (\n    {services: {repeaterEditorService}, location}\n) => {\n    const repeaterID = location.state && location.state.repeaterID;\n    if (repeaterID) {\n        repeaterEditorService.repeaterChannel.next(repeaterID);\n    }\n    repeaterEditorService.groupsListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\n\nexport const onSelectedGroupsChannel: ICallback<RepeaterEditorCallbackSettings, {\n    [key: number]: boolean;\n}> = (\n    {setState},\n    selectedGroups = {}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            selectedGroups\n        }\n    })\n}","import {FC, useCallback} from \"react\";\n\nimport {RepeaterEditorComponent} from \"./RepeaterEditorComponent\";\nimport {IRepeaterEditorContainer} from \"./types/IRepeaterEditorContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {initialState} from \"./defaults/inititalState\";\nimport {RepeaterEditorCallbackSettings} from \"./types/RepeaterEditorCallbackSettings\";\nimport {useChannel} from \"../../../MyTools/channel-conception/react-hooks/useChannel\";\nimport {onGroupsListChannel} from \"./channels-callbacks/onGroupsListChannel\";\nimport {onSaveRepeaterChannel} from \"./channels-callbacks/onSaveRepeaterChannel\";\nimport {onSaveRepeater} from \"./ui-callbacks/onSaveRepeater\";\nimport {onUpdateGroupsIDsChannel} from \"./channels-callbacks/onUpdateGroupsIDsChannel\";\nimport {onSelect} from \"./ui-callbacks/onSelect\";\nimport {onRepeaterChannel} from \"./channels-callbacks/onRepeaterChannel\";\nimport {onChangeName} from \"./ui-callbacks/onChangeName\";\nimport {useConstructor} from \"../../../MyTools/react-hooks/useConstructor\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onSelectedGroupsChannel} from \"./channels-callbacks/onSelectedGroupsChannel\";\n\nexport const RepeaterEditorContainer: FC<IRepeaterEditorContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<RepeaterEditorCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {repeaterEditorService}, context} = callbackSettings\n\n    useChannel(repeaterEditorService.groupsListChannel, callbackFactory(onGroupsListChannel));\n    useChannel(repeaterEditorService.saveRepeaterChannel, callbackFactory(onSaveRepeaterChannel));\n    useChannel(repeaterEditorService.updateGroupsIDsChannel, callbackFactory(onUpdateGroupsIDsChannel));\n    useChannel(repeaterEditorService.repeaterChannel, callbackFactory(onRepeaterChannel));\n    useChannel(repeaterEditorService.selectedGroupsChannel, callbackFactory(onSelectedGroupsChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const saveRepeater = useCallback(callbackFactory(onSaveRepeater), []);\n    const select = useCallback(callbackFactory(onSelect), []);\n    const changeName = useCallback(callbackFactory(onChangeName), []);\n\n    return <RepeaterEditorComponent\n        onSaveRepeater={saveRepeater}\n        cardsGroups={state.cardsGroups}\n        height={context.height}\n        selectedGroups={state.selectedGroups}\n        onSelect={select}\n        onChangeName={changeName}\n        repeaterName={state.repeater.name}\n    />\n}","import React, {FC} from \"react\";\nimport ListItemIcon from \"@mui/material/ListItemIcon/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText/ListItemText\";\nimport ListItem from \"@mui/material/ListItem\";\n\nimport {IRepeaterListItem} from \"./types/IRepeaterListItem\";\nimport {ListItemMenuComponent} from \"../../../../common/elements/list-item-menu/ListItemMenuComponent\";\nimport {\n    CircularProgressComponent\n} from \"../../../cards-groups-list/elements/circular-progress/CircularProgressComponent\";\n\nexport const RepeaterListItem: FC<IRepeaterListItem> = (\n    {\n        repeater,\n        onStartRepeating,\n        onDeleteRepeater,\n        onResetProgress,\n        onEditItem\n    }\n) => {\n\n    return <ListItem key={repeater.id} button component=\"div\">\n        <ListItemIcon onClick={() => onStartRepeating(repeater.id)}>\n            <CircularProgressComponent percent={repeater.percentRepeatedCards || 0}/>\n        </ListItemIcon>\n        <ListItemText\n            className=\"repeater-list-item_content\"\n            primary={repeater.name}\n            onClick={() => onStartRepeating(repeater.id)}\n        />\n        <ListItemIcon>\n            <ListItemMenuComponent\n                onEdit={() => onEditItem(repeater.id)}\n                onDelete={() => onDeleteRepeater(repeater.id)}\n                onResetProgress={() => onResetProgress(repeater.id)}\n            />\n        </ListItemIcon>\n    </ListItem>\n}","import React, {FC} from \"react\";\nimport {FixedSizeList as List} from \"react-window\";\n\nimport './RepeaterListComponent.css'\nimport {AddButtonComponent} from \"../../common/elements/add-button/AddButtonComponent\";\nimport {IRepeaterListComponent} from \"./types/IRepeaterListComponent\";\nimport {RepeaterListItem} from \"./elements/repeater-list-item/RepeaterListItem\";\n\nexport const RepeaterListComponent: FC<IRepeaterListComponent> = (\n    {\n        repeaters,\n        height,\n        onOpenEditor,\n        onStartRepeating,\n        onDeleteRepeater,\n        onEditRepeater,\n        onResetProgress\n    }\n) => {\n    return <>\n        <List\n            className=\"repeater-list\"\n            itemData={repeaters}\n            itemSize={55}\n            itemCount={repeaters.length}\n            overscanCount={5}\n            height={height}\n            width=\"100%\"\n        >\n            {({index, style}: any) => {\n                return <div style={style}>\n                    <RepeaterListItem\n                        repeater={repeaters[index]}\n                        onStartRepeating={onStartRepeating}\n                        onDeleteRepeater={onDeleteRepeater}\n                        onEditItem={onEditRepeater}\n                        onResetProgress={onResetProgress}\n                    />\n                </div>\n            }}\n        </List>\n        <AddButtonComponent onClick={onOpenEditor}/>\n    </>\n}","import {RepeaterListState} from \"../types/RepeaterListState\";\n\nexport const initialState: RepeaterListState = {\n    repeaters: []\n}","import {Routs} from \"../../../common/Routs\";\nimport {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\n\nexport const onOpenEditor: ICallback<RepeaterListCallbackSettings, void> = (\n    {history, location}\n) => {\n    history.push({\n        pathname: Routs.repeaterEditor.path\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const onRepeaterListChannel: ICallback<RepeaterListCallbackSettings, IRepeater[]> = (\n    {setState, services: {repeaterListService}},\n    repeaters = []\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeaters\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<RepeaterListCallbackSettings, void> = (\n    {services: {repeaterListService}}\n) => {\n    repeaterListService.repeaterListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onStartRepeatingChannel: ICallback<RepeaterListCallbackSettings, number[]> = (\n    {setState, history, location},\n    cardsIDs = []\n) => {\n    history.push({\n        pathname: Routs.cardsRepeater.path,\n        state: {\n            ...location.state,\n            cardsIDsForRepeating: cardsIDs\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\n\nexport const onStartRepeating: ICallback<RepeaterListCallbackSettings, number> = (\n    {services: {repeaterListService}},\n    repeaterID = -1\n) => {\n    repeaterListService.startRepeatingChannel.next(repeaterID);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nexport const onRemoveRepeater: ICallback<RepeaterListCallbackSettings, number> = (\n    {\n        setSubscription,\n        services: {\n            repeaterListService,\n            confirmDialogService\n        }\n    },\n    repeaterID = -1\n) => {\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            repeaterListService.removingRepeaterChannel.next(repeaterID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this repeater?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    })\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onResetProgressChannel: ICallback<RepeaterListCallbackSettings, ICardsGroup[]> = (\n    {services: {repeaterListService}}\n) => {\n    repeaterListService.repeaterListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\n\nexport const onResetProgress: ICallback<RepeaterListCallbackSettings, number> = (\n    {services: {repeaterListService}},\n    repeaterID = -1\n) => {\n    repeaterListService.resetProgressChannel.next(repeaterID);\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditRepeater: ICallback<RepeaterListCallbackSettings, number> = (\n    {history, location},\n    repeaterID = -1\n) => {\n    history.push({\n        pathname: Routs.repeaterEditor.path,\n        state: {\n            ...location.state,\n            repeaterID\n        }\n    })\n}","import {FC, useCallback} from \"react\";\n\nimport {RepeaterListComponent} from \"./RepeaterListComponent\";\nimport {IRepeaterListContainer} from \"./types/IRepeaterListContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {RepeaterListCallbackSettings} from \"./types/RepeaterListCallbackSettings\";\nimport {initialState} from \"./defaults/initialState\";\nimport {onOpenEditor} from \"./ui-callbacks/onOpenEditor\";\nimport {useChannel} from \"../../../MyTools/channel-conception/react-hooks/useChannel\";\nimport {onRepeaterListChannel} from \"./channels-callbacks/onRepeaterListChannel\";\nimport {useConstructor} from \"../../../MyTools/react-hooks/useConstructor\";\nimport {onConstructor} from \"./ui-callbacks/onConstructor\";\nimport {onStartRepeatingChannel} from \"./channels-callbacks/onStartRepeatingChannel\";\nimport {onStartRepeating} from \"./ui-callbacks/onStartRepeating\";\nimport {onRemoveRepeater} from \"./ui-callbacks/onRemoveRepeater\";\nimport {onResetProgressChannel} from \"./channels-callbacks/onResetProgressChannel\";\nimport {onResetProgress} from \"./ui-callbacks/onResetProgress\";\nimport {onEditRepeater} from \"./ui-callbacks/onEditRepeater\";\n\nexport const RepeaterListContainer: FC<IRepeaterListContainer> = (services) => {\n\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<RepeaterListCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {repeaterListService}, context} = callbackSettings\n\n    useChannel(repeaterListService.repeaterListChannel, callbackFactory(onRepeaterListChannel));\n    useChannel(repeaterListService.startRepeatingChannel, callbackFactory(onStartRepeatingChannel));\n    useChannel(repeaterListService.removingRepeaterChannel, callbackFactory(onRepeaterListChannel));\n    useChannel(repeaterListService.resetProgressChannel, callbackFactory(onResetProgressChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const startRepeating = useCallback(callbackFactory(onStartRepeating), []);\n    const removeRepeater = useCallback(callbackFactory(onRemoveRepeater), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const editRepeater = useCallback(callbackFactory(onEditRepeater), []);\n\n    return <RepeaterListComponent\n        repeaters={state.repeaters}\n        height={context.height}\n        onOpenEditor={openEditor}\n        onDeleteRepeater={removeRepeater}\n        onStartRepeating={startRepeating}\n        onResetProgress={resetProgress}\n        onEditRepeater={editRepeater}\n    />\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {Redirect, Route, Switch} from 'react-router';\n\nimport {Routs} from '../../common/Routs';\nimport {CardsGroupsListContainer} from '../../pages/cards-groups-list/CardsGroupsListContainer';\nimport {GoogleAuthContainer} from '../../pages/google-auth/GoogleAuthContainer';\nimport {GoogleBackupsContainer} from '../../pages/google-backups/GoogleBackupsContainer';\nimport {CardsContainer} from '../../pages/cards/CardsContainer';\nimport {CardRepeaterContainer} from '../../pages/cards-repeater/CardsRepeaterContainer';\nimport {LocalBackupsContainer} from '../../pages/local-backup/LocalBackupsContainer';\nimport {CardsGroupsEditorContainer} from '../../pages/cards-groups-editor/CardsGroupsEditorContainer';\nimport {CardsEditorContainer} from '../../pages/cards-editor/CardsEditorContainer';\nimport {SettingsContainer} from '../../pages/settings/SettingsContainer';\nimport {CardViewerContainer} from \"../../pages/card-viewer/CardViewerContainer\";\nimport {INavigationContainer} from \"./types/INavigationContainer\";\nimport {StatisticContainer} from \"../../pages/statistic/StatisticContainer\";\nimport {RepeaterEditorContainer} from \"../../pages/repeater-editor/RepeaterEditorContainer\";\nimport {RepeaterListContainer} from \"../../pages/repeater-list/RepeaterListContainer\";\n\n\nexport const NavigationContainer: FC<INavigationContainer> = (\n    {\n        cardsGroupsListService,\n        cardsGroupsEditorService,\n        errorService,\n        googleAuthService,\n        googleBackupsService,\n        spinnerService,\n        confirmDialogService,\n        cardsEditorService,\n        cardsListService,\n        cardsRepeaterService,\n        settingsService,\n        localBackupsService,\n        cardViewerService,\n        selectionDialogService,\n        toolbarService,\n        statisticService,\n        repeaterListService,\n        repeaterEditorService\n    }\n) => {\n\n    return <Switch>\n        <Redirect exact from=\"/MyCardsWeb\" to={Routs.cardsGroups.path}/>\n        <Redirect exact from=\"/\" to={Routs.cardsGroups.path}/>\n        <Route path={Routs.cardsGroups.path}>\n            <CardsGroupsListContainer cardsGroupsListService={cardsGroupsListService}\n                                      confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.googleAuth.path}>\n            <GoogleAuthContainer googleAuthService={googleAuthService} errorService={errorService}/>\n        </Route>\n        <Route path={Routs.googleBackups.path}>\n            <GoogleBackupsContainer googleBackupsService={googleBackupsService} spinnerService={spinnerService}\n                                    confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.cards.path}>\n            <CardsContainer\n                cardsListService={cardsListService}\n                confirmDialogService={confirmDialogService}\n                selectionDialogService={selectionDialogService}\n            />\n        </Route>\n        <Route path={Routs.cardsRepeater.path}>\n            <CardRepeaterContainer\n                toolbarService={toolbarService}\n                cardsRepeaterService={cardsRepeaterService}\n                cardsEditorService={cardsEditorService}\n                confirmDialogService={confirmDialogService}\n            />\n        </Route>\n        <Route path={Routs.localBackups.path}>\n            <LocalBackupsContainer localBackupsService={localBackupsService} confirmDialogService={confirmDialogService}\n                                   spinnerService={spinnerService}/>\n        </Route>\n        <Route path={Routs.cardsGroupEditor.path}>\n            <CardsGroupsEditorContainer cardsGroupsEditorService={cardsGroupsEditorService}/>\n        </Route>\n        <Route path={Routs.cardsEditor.path}>\n            <CardsEditorContainer cardsEditorService={cardsEditorService}/>\n        </Route>\n        <Route path={Routs.settings.path}>\n            <SettingsContainer settingsService={settingsService}/>\n        </Route>\n        <Route path={Routs.cardViewer.path}>\n            <CardViewerContainer\n                toolbarService={toolbarService}\n                confirmDialogService={confirmDialogService}\n                cardViewerService={cardViewerService}\n                cardsEditorService={cardsEditorService}\n            />\n        </Route>\n        <Route path={Routs.statistic.path}>\n            <StatisticContainer\n                confirmDialogService={confirmDialogService}\n                statisticService={statisticService}\n            />\n        </Route>\n        <Route path={Routs.repeaterEditor.path}>\n            <RepeaterEditorContainer repeaterEditorService={repeaterEditorService}/>\n        </Route>\n        <Route path={Routs.repeaterList.path}>\n            <RepeaterListContainer\n                repeaterListService={repeaterListService}\n                confirmDialogService={confirmDialogService}\n            />\n        </Route>\n    </Switch>\n};\n","import {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const getBackupFolder = (token: string): Promise<IGoogleDriveFile | null> => {\n\n    const googleDriveFolderType = 'application/vnd.google-apps.folder';\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const backupFolderName = 'my-cards';\n    const searchFolderURI = googleDriveFilesAPI + '?q=name%20contains%20';\n    const url = `${searchFolderURI}'${backupFolderName}'`\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + token\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (result) => result.json()\n    ).then((result: { files: IGoogleDriveFile[] }) => {\n        let foundedFolder = result.files.find((file) => {\n            return file.mimeType === googleDriveFolderType\n        });\n        return foundedFolder || null;\n    })\n}","import {IStatistic} from \"../types/IStatistic\";\n\nexport const defaultStatistic: IStatistic = {\n    dailyStatistic: [],\n    cardsInProgressFrequency: {},\n    cardsInDone: {}\n}","import {from, Observable} from 'rxjs';\nimport {ICardsGroup} from '../types/ICardsGroup';\nimport {DataBaseService} from './DataBaseService';\nimport {ISettings} from '../types/ISettings';\nimport {IStoredFilters} from \"../types/IStoredFilters\";\nimport {defaultFilter} from \"../defaults/defaultFilter\";\nimport {IStatistic} from \"../types/IStatistic\";\nimport {defaultStatistic} from \"../defaults/defaultStatistic\";\nimport {defaultSettings} from \"../defaults/defaultSettings\";\nimport {IRepeater} from \"../types/IRepeater\";\n\nexport class StorageService {\n\n    private cardsStorageID = 'cards-local-storage';\n    private authTokenLocalStorageID = 'auth-token';\n    private settingsID = 'settings';\n    private filterID = 'filter'\n    private statisticID = 'statistic'\n    private repeatersID = 'repeaters'\n\n    constructor(private dataBaseService: DataBaseService) {\n    }\n\n    public getBackup = () : Observable<ICardsGroup[]> => {\n        return from(this.getBackupFromDataBase());\n    };\n\n    private getBackupFromDataBase = async () => {\n        let backup = null;\n\n        try {\n            backup = await this.dataBaseService.get<ICardsGroup[]>(this.cardsStorageID);\n        } catch (e) {\n            console.error(e);\n            return backup;\n        }\n        if(backup) {\n            return backup;\n        } else {\n            return [];\n        }\n    };\n\n    public setBackup(cardsGroups: ICardsGroup[]): Observable<ICardsGroup[]> {\n        return from(this.setBackupToDataBase(cardsGroups));\n    }\n\n    private setBackupToDataBase = async (cardsGroups: ICardsGroup[]) => {\n        try {\n            await this.dataBaseService.set(this.cardsStorageID, cardsGroups);\n        } catch (e) {\n            console.error(e);\n        }\n        return cardsGroups;\n    };\n\n    public getAuthToken(): Observable<string> {\n        return from(new Promise<string>((resolve, reject) => {\n            const authToken = localStorage.getItem(this.authTokenLocalStorageID);\n            if(authToken) {\n                resolve(authToken);\n            } else {\n                reject('Auth token is empty')\n            }\n        }));\n    }\n\n    public setAuthToken(authToken: string): Observable<string> {\n        return from(new Promise<string>((resolve) => {\n            localStorage.setItem(this.authTokenLocalStorageID, authToken);\n            resolve(authToken);\n        }));\n    }\n\n    public getSettings(): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve, reject) => {\n            const settings = localStorage.getItem(this.settingsID);\n            if(settings) {\n                resolve(JSON.parse(settings) as ISettings);\n            } else {\n                resolve(defaultSettings)\n            }\n        }));\n    }\n\n    public setSettings(settings: ISettings): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve) => {\n            localStorage.setItem(this.settingsID, JSON.stringify(settings));\n            resolve(settings);\n        }));\n    }\n\n    public getFilter(): Observable<IStoredFilters> {\n        return from(new Promise<IStoredFilters>((resolve) => {\n            const settings = localStorage.getItem(this.filterID);\n            if (settings) {\n                resolve(JSON.parse(settings) as IStoredFilters);\n            } else {\n                resolve({\n                    cards: defaultFilter,\n                    cardsGroups: defaultFilter\n                })\n            }\n        }));\n    }\n\n    public setFilter(settings: IStoredFilters): Observable<IStoredFilters> {\n        return from(new Promise<IStoredFilters>((resolve) => {\n            localStorage.setItem(this.filterID, JSON.stringify(settings));\n            resolve(settings);\n        }));\n    }\n\n    public getStatistic(): Observable<IStatistic> {\n        return from(new Promise<IStatistic>((resolve) => {\n            const statistic = localStorage.getItem(this.statisticID);\n            if (statistic) {\n                resolve(JSON.parse(statistic) as IStatistic);\n            } else {\n                resolve(defaultStatistic)\n            }\n        }));\n    }\n\n    public setStatistic(statistic: IStatistic): Observable<IStatistic> {\n        return from(new Promise<IStatistic>((resolve) => {\n            localStorage.setItem(this.statisticID, JSON.stringify(statistic));\n            resolve(statistic);\n        }));\n    }\n\n    public getRepeaters(): Observable<IRepeater[]> {\n        return from(new Promise<IRepeater[]>((resolve) => {\n            const repeaters = localStorage.getItem(this.repeatersID);\n            if (repeaters) {\n                resolve(JSON.parse(repeaters) as IRepeater[]);\n            } else {\n                resolve([])\n            }\n        }));\n    }\n\n    public setRepeaters(repeaters: IRepeater[]): Observable<IRepeater[]> {\n        return from(new Promise<IRepeater[]>((resolve) => {\n            localStorage.setItem(this.repeatersID, JSON.stringify(repeaters));\n            resolve(repeaters);\n        }));\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getCardsByGroup = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n    const foundCardsGroup = cardsGroups.find((cardsGroup: ICardsGroup) => {\n        return cardsGroup.id === cardsGroupID;\n    });\n\n    return foundCardsGroup ? foundCardsGroup.cards : [];\n};\n","import {ICardsGroup} from '../types/ICardsGroup';\nimport {ICard} from '../types/ICard';\n\nexport const deleteSingleCard = (cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => {\n        const cardIndex = cardGroup.cards.findIndex((card) => {\n            return card.id === cardID;\n        })\n\n        return cardIndex > -1\n    });\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.filter((card: ICard) => card.id !== cardID);\n    }\n\n    return cardsGroups;\n};\n","export const selectedItemsObjectToArray = (selectedItemsObject: {[key: number]: boolean}): number[] => {\n    const array: number[] = [];\n    for (let item in selectedItemsObject) {\n        if (selectedItemsObject[item]) {\n            array.push(Number(item));\n        }\n    }\n    return array\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const getExistedCardsGroups = (cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.map((cardsGroup) => {\n        return {\n            id: cardsGroup.id,\n            label: cardsGroup.nameCardsGroup\n        }\n    })\n}","import {IRepeatingArgs} from '../types/IRepeatingArgs';\nimport {ICardsGroup} from '../types/ICardsGroup';\nimport {ICard} from '../types/ICard';\nimport {IRangeOfKnowledge} from '../types/IRangeOfKnowledge';\n\nexport const changeRangeOfKnowledge = (args: IRepeatingArgs, cardsGroups: ICardsGroup[]) => {\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (!args.cardID || card.id === args.cardID) {\n                    if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (!args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n                    }\n                }\n            });\n        }\n    });\n\n\n    return cardsGroups;\n};\n","import {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\nimport {IRepeatingType} from \"../../../common/types/IRepeatingType\";\nimport {shuffleCards} from \"./shuffleCards\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const getCardForRepeating = (cards: ICard[], repeatingType: IRepeatingType): ICard => {\n\n    let foundCard\n\n    if (repeatingType === IRepeatingType.RANDOM) {\n        const cardsWithoutDone = shuffleCards(cards).filter((card: ICard) => {\n            return card.rangeOfKnowledge !== IRangeOfKnowledge.DONE\n        })\n        foundCard = cardsWithoutDone[0];\n    } else {\n        foundCard = cards.find((card: ICard) => {\n            return card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO;\n        });\n\n        if (!foundCard) {\n            foundCard = cards.find((card: ICard) => {\n                return card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS;\n            });\n        }\n\n        if (cards.length === 1) {\n            foundCard = cards[0]\n        }\n    }\n\n    return foundCard || defaultCard\n};\n","import {ICard} from '../../../common/types/ICard';\n\nexport const shuffleCards = (array: ICard[]) => {\n    const copy = [];\n    let length = array.length;\n    let randomIndex;\n\n    while (length) {\n        randomIndex = Math.floor(Math.random() * array.length);\n        if (randomIndex in array) {\n            copy.push(array[randomIndex]);\n            delete array[randomIndex];\n            length--;\n        }\n    }\n\n    return copy;\n};\n","import {ICardsGroup} from \"../types/ICardsGroup\";\nimport {IRepeatingArgs} from \"../types/IRepeatingArgs\";\nimport {ICard} from \"../types/ICard\";\n\nexport const refreshCardRepeatingDate = (args: IRepeatingArgs, cardsGroups: ICardsGroup[]) => {\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (!args.cardID || card.id === args.cardID) {\n                    card.dateRepeating = new Date().getTime();\n                }\n            });\n        }\n    });\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const getCardGroupName = (cardsGroups: ICardsGroup[], cardID: number): string => {\n    const foundIndex = cardsGroups.findIndex((cardsGroup) => {\n        const foundCardIndex = cardsGroup.cards.findIndex((card) => {\n            return card.id === cardID;\n        })\n        return foundCardIndex > -1;\n    });\n    return foundIndex > -1 ? cardsGroups[foundIndex].nameCardsGroup : 'No name';\n}","import {IRepeatingArgs} from \"../types/IRepeatingArgs\";\nimport {IStatistic} from \"../types/IStatistic\";\n\nexport const updateStatistic = (statistic: IStatistic, args: IRepeatingArgs): IStatistic => {\n\n    let today = new Date();\n    let date = today.getDate();\n    let month = today.getMonth();\n    let year = today.getFullYear();\n    let foundDayIndex = statistic.dailyStatistic.findIndex((dayStatistic) => {\n        return dayStatistic.date === date && dayStatistic.year === year && dayStatistic.month === month\n    });\n\n    if (foundDayIndex >= 0) {\n        let dailyStatistic = statistic.dailyStatistic[foundDayIndex];\n        if (args.isKnown) {\n            if (dailyStatistic.done[args.cardID]) {\n                dailyStatistic.done[args.cardID] = dailyStatistic.done[args.cardID] + 1;\n            } else {\n                dailyStatistic.done[args.cardID] = 1;\n            }\n        } else {\n            if (dailyStatistic.inProgress[args.cardID]) {\n                dailyStatistic.inProgress[args.cardID] = dailyStatistic.inProgress[args.cardID] + 1;\n            } else {\n                dailyStatistic.inProgress[args.cardID] = 1;\n            }\n        }\n    } else {\n        statistic.dailyStatistic.push({\n            date,\n            year,\n            month,\n            inProgress: args.isKnown ? {} : {[args.cardID]: 1},\n            done: args.isKnown ? {[args.cardID]: 1} : {}\n        });\n    }\n    if (!args.isKnown) {\n        if (statistic.cardsInProgressFrequency[args.cardID]) {\n            statistic.cardsInProgressFrequency[args.cardID] = statistic.cardsInProgressFrequency[args.cardID] + 1;\n        } else {\n            statistic.cardsInProgressFrequency[args.cardID] = 1;\n        }\n    }\n\n    return statistic;\n}","export const readByVoiceEngine = (text: string, voice: SpeechSynthesisVoice) => {\n\n    const synth = window.speechSynthesis;\n    const speechSynthesisUtterance = new SpeechSynthesisUtterance(text);\n    speechSynthesisUtterance.onerror = (error) => {\n        console.warn('Read text error', error);\n    }\n    speechSynthesisUtterance.voice = voice;\n    speechSynthesisUtterance.lang = 'en-US';\n    speechSynthesisUtterance.rate = 1;\n    synth.speak(speechSynthesisUtterance);\n\n    return text;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const getCardForViewing = (cardsGroups: ICardsGroup[], cardID: number): ICard => {\n    let card = {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    };\n\n    for (let i = 0; i < cardsGroups.length; i++) {\n        const index = cardsGroups[i].cards.findIndex((card: ICard) => {\n            return card.id === cardID\n        })\n\n        if (index > -1) {\n            card = cardsGroups[i].cards[index];\n            return card;\n        }\n    }\n\n    return card;\n}","import React, {FC} from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport {List, ListItem, ListItemText} from \"@mui/material\";\nimport {ISelectionDialogComponent} from \"./types/ISelectionDialogComponent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\n\nexport const SelectionDialogComponent: FC<ISelectionDialogComponent> = (\n    {\n        isOpen,\n        onClose,\n        onClickItem,\n        selectionItems,\n        title\n    }\n) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitle>{title}</DialogTitle>\n                <DialogContent>\n                    <List>\n                        {\n                            selectionItems.map((item) => {\n                                return <ListItem key={item.id} onClick={() => onClickItem(item.id)}>\n                                    <ListItemText primary={item.label}/>\n                                </ListItem>\n                            })\n                        }\n                    </List>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n};\n","export const initialState = {\n    isOpen: false,\n    title: '',\n    selectionItems: []\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {SelectionDialogCallbackSettings} from \"../types/SelectionDialogCallbackSettings\";\nimport {SelectionDialogContainerState} from \"../types/SelectionDialogContainerState\";\nimport {initialState} from \"../defaults/initialState\";\n\nexport const onOpenDialogChannel: ICallback<SelectionDialogCallbackSettings, SelectionDialogContainerState> = (\n    {setState},\n    value = initialState\n) => {\n    setState(() => {\n        return {...value}\n    });\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {SelectionDialogCallbackSettings} from \"../types/SelectionDialogCallbackSettings\";\nimport {initialState} from \"../defaults/initialState\";\n\nexport const onClose: ICallback<SelectionDialogCallbackSettings, void> = (\n    {setState, services: {selectionDialogService}}\n) => {\n    setState(() => initialState);\n    selectionDialogService.selectionChannel.unsubscribe();\n}","import {ICallback} from \"../../../../MyTools/react-utils/CallbackFactory\";\nimport {SelectionDialogCallbackSettings} from \"../types/SelectionDialogCallbackSettings\";\n\nexport const onClickItem: ICallback<SelectionDialogCallbackSettings, number> = (\n    {setState, services: {selectionDialogService}},\n    itemID = -1\n) => {\n    selectionDialogService.selectionChannel.next(itemID);\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {SelectionDialogComponent} from './SelectionDialogComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ISelectionDialogContainer} from \"./types/ISelectionDialogContainer\";\nimport {useCallbackFactory} from \"../../../MyTools/react-hooks/useCallbackFactory\";\nimport {AppContext} from \"../../../App\";\nimport {initialState} from \"./defaults/initialState\";\nimport {SelectionDialogCallbackSettings} from \"./types/SelectionDialogCallbackSettings\";\nimport {onOpenDialogChannel} from \"./channels-callbacks/onOpenDialogChannel\";\nimport {onClose} from \"./ui-callbacks/onClose\";\nimport {onClickItem} from \"./ui-callbacks/onClickItem\";\n\nexport const SelectionDialogContainer: FC<ISelectionDialogContainer> = (services) => {\n    const {\n        callbackFactory,\n        callbackSettings\n    } = useCallbackFactory<SelectionDialogCallbackSettings>(\n        initialState,\n        services,\n        AppContext\n    );\n\n    const {state, services: {selectionDialogService}} = callbackSettings\n\n    useChannel(selectionDialogService.openDialogChannel, callbackFactory(onOpenDialogChannel));\n\n    const close = useCallback(callbackFactory(onClose), [])\n    const clickItem = useCallback(callbackFactory(onClickItem), [])\n\n    return <SelectionDialogComponent\n        isOpen={state.isOpen}\n        onClickItem={clickItem}\n        onClose={close}\n        title={state.title}\n        selectionItems={state.selectionItems}\n    />\n};\n","export const defaultAppState = {\n    height: 0,\n    width: 0\n};","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const getRepeaterByID = (repeaters: IRepeater[], repeaterID: number) => {\n    const repeaterIndex = repeaters.findIndex((repeater) => {\n        return repeater.id === repeaterID;\n    })\n    return repeaters[repeaterIndex];\n}","export class VoiceService {\n\n    private voices: SpeechSynthesisVoice[] = [];\n\n    constructor() {\n        speechSynthesis.addEventListener(\"voiceschanged\", () => {\n            this.voices = speechSynthesis.getVoices().filter((voice) => {\n                return voice.lang === 'en-US';\n            });\n        })\n    }\n\n    public getRandomVoice(): SpeechSynthesisVoice {\n        return this.voices[Math.floor(Math.random() * this.voices.length)]\n    }\n}","import React, {useEffect, useState} from 'react';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport './App.css';\nimport {IAppContext} from './app/common/types/IAppContext';\nimport {ToolbarContainer} from './app/parts/toolbar/ToolbarContainer';\nimport {NavigationPanelContainer} from './app/parts/navigation-panel/NavigationPanelContainer';\nimport {ErrorContainer} from './app/parts/error-container/ErrorContainer';\nimport {SpinnerContainer} from './app/parts/spinner/SpinnerContainer';\nimport {ConfirmDialogContainer} from './app/parts/confirm-dialog/ConfirmDialogContainer';\nimport {SpinnerService} from './app/parts/spinner/SpinnerService';\nimport {ErrorService} from './app/parts/error-container/ErrorService';\nimport {NavigationContainer} from './app/parts/navigation/NavigationContainer';\nimport {CardsGroupsEditorService} from './app/pages/cards-groups-editor/CardsGroupsEditorService';\nimport {CardsGroupsListService} from './app/pages/cards-groups-list/CardsGroupsListService';\nimport {ConfirmDialogService} from './app/parts/confirm-dialog/ConfirmDialogService';\nimport {GoogleAuthService} from './app/pages/google-auth/GoogleAuthService';\nimport {GoogleBackupsService} from './app/pages/google-backups/GoogleBackupsService';\nimport {CardsEditorService} from './app/pages/cards-editor/CardsEditorService';\nimport {StorageService} from './app/common/services/StorageService';\nimport {CardsService} from './app/pages/cards/CardsService';\nimport {CardsRepeaterService} from './app/pages/cards-repeater/CardsRepeaterService';\nimport {LocalBackupsService} from './app/pages/local-backup/LocalBackupsService';\nimport {DataBaseService} from './app/common/services/DataBaseService';\nimport {SettingsService} from './app/pages/settings/SettingsService';\nimport {CardViewerService} from \"./app/pages/card-viewer/CardViewerService\";\nimport {SelectionDialogContainer} from \"./app/parts/selection-dialog/SelectionDialogContainer\";\nimport {SelectionDialogService} from \"./app/parts/selection-dialog/SelectionDialogService\";\nimport {NavigationPanelService} from \"./app/parts/navigation-panel/NavigationPanelService\";\nimport {ToolbarService} from \"./app/parts/toolbar/ToolbarService\";\nimport {Channel} from \"./MyTools/channel-conception/Channel\";\nimport {defaultAppState} from \"./app/common/defaults/defaultAppState\";\nimport {STORE_NAME} from \"./app/common/constants/STORE_NAME\";\nimport {StatisticService} from \"./app/pages/statistic/StatisticService\";\nimport {RepeaterListService} from \"./app/pages/repeater-list/RepeaterListService\";\nimport {RepeaterEditorService} from \"./app/pages/repeater-editor/RepeaterEditorService\";\nimport {VoiceService} from \"./app/common/services/VoiceService\";\n\nexport const AppContext = React.createContext<IAppContext>(defaultAppState);\n\nconst errorService = new ErrorService();\nconst spinnerService = new SpinnerService();\n\nconst confirmDialogService = new ConfirmDialogService();\nconst selectionDialogService = new SelectionDialogService();\nconst navigationPanelService = new NavigationPanelService();\nconst toolbarService = new ToolbarService();\n\nconst voiceService = new VoiceService();\nconst dataBaseService = new DataBaseService(STORE_NAME);\nconst storageService = new StorageService(dataBaseService);\nconst cardsGroupsEditorService = new CardsGroupsEditorService(storageService);\nconst cardsGroupsListService = new CardsGroupsListService(storageService);\nconst googleAuthService = new GoogleAuthService(storageService);\nconst googleBackupsService = new GoogleBackupsService(storageService);\nconst cardsEditorService = new CardsEditorService(storageService);\nconst cardsListService = new CardsService(storageService);\nconst cardsRepeaterService = new CardsRepeaterService(storageService, voiceService);\nconst localBackupsService = new LocalBackupsService(storageService);\nconst settingService = new SettingsService(storageService);\nconst cardViewerService = new CardViewerService(storageService, voiceService);\nconst statisticService = new StatisticService(storageService);\nconst repeaterListService = new RepeaterListService(storageService);\nconst repeaterEditorService = new RepeaterEditorService(storageService);\n\nChannel.setGlobalErrorHandler((error) => {\n    console.error(error);\n})\n\nfunction App() {\n\n    const [appState, setAppState] = useState<IAppContext>(defaultAppState);\n\n    useEffect(() => {\n        const height = window.screen.height;\n        if (appState.height !== height) {\n            setAppState({...appState, height});\n        }\n    }, [appState]);\n\n    return (\n        <>\n            <AppContext.Provider value={appState}>\n                <Router>\n                    <div>\n\n                        <ErrorContainer errorService={errorService}/>\n\n                        <ToolbarContainer\n                            toolbarService={toolbarService}\n                            navigationPanelService={navigationPanelService}\n                        />\n\n                        <NavigationPanelContainer navigationPanelService={navigationPanelService}/>\n\n                        <ConfirmDialogContainer confirmDialogService={confirmDialogService}/>\n\n                        <SelectionDialogContainer selectionDialogService={selectionDialogService}/>\n\n                        <div className=\"page-container\" style={{height: appState.height - 110, width: '100%'}}>\n                            <SpinnerContainer spinnerService={spinnerService}/>\n                            <NavigationContainer\n                                toolbarService={toolbarService}\n                                cardsGroupsListService={cardsGroupsListService}\n                                cardsGroupsEditorService={cardsGroupsEditorService}\n                                googleAuthService={googleAuthService}\n                                googleBackupsService={googleBackupsService}\n                                errorService={errorService}\n                                spinnerService={spinnerService}\n                                confirmDialogService={confirmDialogService}\n                                cardsEditorService={cardsEditorService}\n                                cardsListService={cardsListService}\n                                cardsRepeaterService={cardsRepeaterService}\n                                localBackupsService={localBackupsService}\n                                settingsService={settingService}\n                                cardViewerService={cardViewerService}\n                                selectionDialogService={selectionDialogService}\n                                statisticService={statisticService}\n                                repeaterListService={repeaterListService}\n                                repeaterEditorService={repeaterEditorService}\n                            />\n                        </div>\n                    </div>\n                </Router>\n            </AppContext.Provider>\n        </>\n    );\n}\n\nexport default App;\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class ErrorService {\n    public errorChannel: Channel<string, string>;\n\n\n    constructor() {\n        this.errorChannel = new Channel<string, string>((error: string)=> of(error));\n    }\n\n}\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ConfirmDialogContainerState} from \"./types/ConfirmDialogContainerState\";\n\nexport class ConfirmDialogService {\n\n    public openDialogChannel = new Channel<ConfirmDialogContainerState, ConfirmDialogContainerState>(\n        (state: ConfirmDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.confirmationChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public confirmationChannel = new Channel<boolean, boolean>((value: boolean) => of(value));\n}\n\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {SelectionDialogContainerState} from \"./types/SelectionDialogContainerState\";\n\nexport class SelectionDialogService {\n\n    public openDialogChannel = new Channel<SelectionDialogContainerState, SelectionDialogContainerState>(\n        (state: SelectionDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.selectionChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public selectionChannel = new Channel<number, number>((value: number) => of(value));\n}\n\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\nimport {empty} from \"../../../MyTools/channel-conception/defaults/empty\";\n\nexport class NavigationPanelService {\n\n    public navigationPanelOpenChannel: Channel<IEmpty, IEmpty>;\n\n    constructor() {\n        this.navigationPanelOpenChannel = new Channel(() => of(empty))\n    }\n}\n","import {of} from \"rxjs\";\n\nimport {Channel} from \"../../../MyTools/channel-conception/Channel\";\nimport {getPageLabel} from \"./logic/getPageLabel\";\n\nexport class ToolbarService {\n\n    public toolbarExternalLabelChannel: Channel<string, string> = new Channel(\n        (name: string) => of(name)\n    )\n\n    public pageLabelChannel: Channel<string, string> = new Channel(\n        (path: string) => of(getPageLabel(path))\n    )\n}\n","import {Routs} from \"../../../common/Routs\";\n\nexport const getPageLabel = (path: string) => {\n    if (path === Routs.googleAuth.path) {\n        return Routs.googleAuth.name;\n    }\n\n    if (path === Routs.googleBackups.path) {\n        return Routs.googleBackups.name;\n    }\n\n    if (path === Routs.cardsGroups.path) {\n        return Routs.cardsGroups.name;\n    }\n\n    if (path === Routs.cards.path) {\n        return Routs.cards.name;\n    }\n\n    if (path === Routs.cardsRepeater.path) {\n        return Routs.cardsRepeater.name;\n    }\n\n    if (path === Routs.localBackups.path) {\n        return Routs.localBackups.name;\n    }\n\n    if (path === Routs.settings.path) {\n        return Routs.settings.name;\n    }\n\n    if (path === Routs.cardViewer.path) {\n        return Routs.cardViewer.name;\n    }\n\n    if (path === Routs.statistic.path) {\n        return Routs.statistic.name;\n    }\n\n    return 'My Cards'\n}","import {IDBPDatabase, openDB} from 'idb';\n\nexport class DataBaseService {\n\n    private dataBase: Promise<IDBPDatabase>;\n\n    private DATA_BASE_NAME = \"my-cards-data-base\";\n\n    constructor(private storeName: string) {\n        this.dataBase = openDB(this.DATA_BASE_NAME, 1, {\n            upgrade(db) {\n                db.createObjectStore(storeName);\n            },\n        });\n    }\n\n    get = async <T>(key: string) => {\n        return (await this.dataBase).get(this.storeName, key);\n    };\n\n    set = async <T>(key: string, value: T) => {\n        return (await this.dataBase).put(this.storeName, value, key);\n    };\n}\n","export const STORE_NAME = \"cards-store\";","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {saveCardsGroup} from './logic/saveCardsGroup';\nimport {getEditingCardsGroup} from './logic/getEditingCardsGroup';\n\nexport class CardsGroupsEditorService {\n\n    public groupEditingChannel: Channel<ICardsGroup, ICardsGroup[]>;\n    public groupChannel: Channel<number, ICardsGroup>;\n\n    constructor(storageService: StorageService) {\n        this.groupEditingChannel = new Channel((editedCardGroup: ICardsGroup) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCardsGroup(editedCardGroup, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            })\n        ));\n\n        this.groupChannel = new Channel((cardGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCardsGroup(cardGroupID, cardsGroups))\n        ))\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveCardsGroup = (editedCardGroup: ICardsGroup, cardsGroups: ICardsGroup[]) => {\n        const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => editedCardGroup.id === cardGroup.id);\n\n        if (cardGroupIndex < 0) {\n            cardsGroups.push(editedCardGroup);\n        } else {\n            cardsGroups[cardGroupIndex] = editedCardGroup;\n        }\n\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getEditingCardsGroup = (cardGroupID: number, cardsGroups: ICardsGroup[]): ICardsGroup => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardGroupID === cardGroup.id);\n\n        if (!cardsGroup) {\n            cardsGroup = {\n                cards: [],\n                nameCardsGroup: '',\n                repeatingDate: new Date().getTime(),\n                id: new Date().getTime(),\n                percentRepeatedCards: 0\n            }\n        }\n        return cardsGroup;\n};\n","import {map, mergeMap, switchMap, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {updateRepeatingDate} from './logic/updateRepeatingDate';\nimport {sortByFilter} from './logic/sortByFilter';\nimport {countRepeatedCardsPercent} from './logic/countRepeatedCardsPercent';\nimport {deleteGroup} from './logic/deleteGroup';\nimport {resetRepeatingProgress} from './logic/resetRepeatingProgress';\nimport {defer, of} from \"rxjs\";\nimport {ISettings} from \"../../common/types/ISettings\";\nimport {updateObsoleteStatus} from \"./logic/updateObsoleteStatus\";\nimport {IFilter} from \"../../common/types/IFilter\";\nimport {IStoredFilters} from \"../../common/types/IStoredFilters\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class CardsGroupsListService {\n    public groupsListChannel: Channel<IEmpty, ICardsGroup[]>;\n    public groupDeleteChannel: Channel<number, ICardsGroup[]>;\n    public resetProgressChannel: Channel<number, ICardsGroup[]>;\n    public changeFilterChannel: Channel<IFilter, IStoredFilters>;\n    public filterChannel: Channel<IEmpty, IFilter>;\n\n    constructor(storageService: StorageService) {\n\n        this.groupsListChannel = new Channel(() => storageService.getBackup().pipe(\n            switchMap((backup) => {\n                return storageService.getSettings().pipe(\n                    switchMap((settings: ISettings) => {\n                        return defer(() => {\n                            return settings.autoObsolete && settings.autoObsolete.isEnable ?\n                                of(\n                                    updateObsoleteStatus(\n                                        backup,\n                                        settings.autoObsolete.timeInProgress,\n                                        settings.autoObsolete.timeInDone\n                                    )\n                                ).pipe(tap((cardsGroups) => storageService.setBackup(cardsGroups))) :\n                                of(backup)\n                        })\n                    })\n                )\n            }),\n            map((cardsGroups: ICardsGroup[]) => updateRepeatingDate(cardsGroups)),\n            map((cardsGroups: ICardsGroup[]) => countRepeatedCardsPercent(cardsGroups)),\n            mergeMap((cardsGroups: ICardsGroup[]) => {\n                return storageService.getFilter().pipe(\n                    map((storedFilter) => sortByFilter(cardsGroups, storedFilter.cardsGroups))\n                )\n            })\n        ));\n\n        this.groupDeleteChannel = new Channel((groupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => deleteGroup(groupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ));\n\n        this.resetProgressChannel = new Channel((cardsGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => resetRepeatingProgress(cardsGroupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ))\n\n        this.filterChannel = new Channel(\n            () => storageService.getFilter().pipe(\n                map((storedFilters) => storedFilters.cardsGroups)\n            )\n        )\n\n        this.changeFilterChannel = new Channel<IFilter, IStoredFilters>(\n            (filter) => storageService.getFilter().pipe(\n                map((storedFilters) => {\n                        return {...storedFilters, cardsGroups: filter}\n                    }\n                ),\n                tap((storedFilters) => {\n                    storageService.setFilter(storedFilters);\n                })\n            )\n        )\n    }\n}\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const updateObsoleteStatus = (\n    cardsGroups: ICardsGroup[],\n    timeInProgress: number,\n    timeInDone: number\n): ICardsGroup[] => {\n\n    if(timeInProgress < 1 && timeInDone < 1) {\n        return cardsGroups;\n    }\n\n    const millisecondsInDay = 86400000;\n    const currentDate = new Date().getTime();\n    const timeInProgressMilliseconds = timeInProgress * millisecondsInDay;\n    const timeInDoneMilliseconds = timeInDone * millisecondsInDay;\n\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        cardsGroup.cards.forEach((card: ICard) => {\n            const differences = currentDate - card.dateRepeating;\n\n            if(card.rangeOfKnowledge === IRangeOfKnowledge.DONE && differences > timeInDoneMilliseconds) {\n                card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n            }\n\n            if(card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS && differences > timeInProgressMilliseconds) {\n                card.rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n            }\n        });\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\n\nexport const updateRepeatingDate = (cardsGroups: ICardsGroup[]) => {\n        cardsGroups.map((cardsGroup: ICardsGroup) => {\n            let dateRepeating = 0;\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (card.dateRepeating > dateRepeating) {\n                    dateRepeating = card.dateRepeating\n                }\n            });\n            cardsGroup.repeatingDate = dateRepeating;\n            return cardsGroup;\n        });\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const countRepeatedCardsPercent = (cardsGroups: ICardsGroup[]) => {\n    cardsGroups.map((cardsGroup: ICardsGroup) => {\n        let statusDone = 0;\n        cardsGroup.cards.forEach((card: ICard) => {\n            if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n                statusDone++\n            }\n        });\n        cardsGroup.percentRepeatedCards = statusDone / cardsGroup.cards.length * 100;\n        return cardsGroup;\n    });\n    return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const sortByFilter = (cardsGroups: ICardsGroup[], filter: IFilter) => {\n    let sortedCards = cardsGroups.filter(\n        (cardsGroup) => cardsGroup.nameCardsGroup.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1\n    );\n    if (filter.sort === ISortVariant.NAME_DESK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.nameCardsGroup > secondCardsGroup.nameCardsGroup) {\n                return 1\n            }\n            if (firstCardGroup.nameCardsGroup < secondCardsGroup.nameCardsGroup) {\n                return -1\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.NAME_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.nameCardsGroup > secondCardsGroup.nameCardsGroup) {\n                return -1\n            }\n            if (firstCardGroup.nameCardsGroup < secondCardsGroup.nameCardsGroup) {\n                return 1\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.DATE_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.repeatingDate && secondCardsGroup.repeatingDate) {\n                if (firstCardGroup.repeatingDate > secondCardsGroup.repeatingDate) {\n                    return 1\n                }\n                if (firstCardGroup.repeatingDate < secondCardsGroup.repeatingDate) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.DATE_DESK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.repeatingDate && secondCardsGroup.repeatingDate) {\n                if (firstCardGroup.repeatingDate < secondCardsGroup.repeatingDate) {\n                    return 1\n                }\n                if (firstCardGroup.repeatingDate > secondCardsGroup.repeatingDate) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.PROGRESS_DESC) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (\n                typeof firstCardGroup.percentRepeatedCards === 'number' &&\n                typeof secondCardsGroup.percentRepeatedCards === 'number'\n            ) {\n                if (firstCardGroup.percentRepeatedCards < secondCardsGroup.percentRepeatedCards) {\n                    return 1\n                }\n                if (firstCardGroup.percentRepeatedCards > secondCardsGroup.percentRepeatedCards) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.PROGRESS_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (\n                typeof firstCardGroup.percentRepeatedCards === 'number' &&\n                typeof secondCardsGroup.percentRepeatedCards === 'number'\n            ) {\n                if (firstCardGroup.percentRepeatedCards > secondCardsGroup.percentRepeatedCards) {\n                    return 1\n                }\n                if (firstCardGroup.percentRepeatedCards < secondCardsGroup.percentRepeatedCards) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    }\n\n    return sortedCards;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const deleteGroup = (groupID: number, cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.filter((cardGroup) => {\n        return cardGroup.id !== groupID;\n    });\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const resetRepeatingProgress = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n\n    if (cardGroupIndex < 0) {\n        return cardsGroups;\n    }\n\n    cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.map((card: ICard) => {\n        return {\n            ...card,\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO\n        }\n    });\n\n    return cardsGroups;\n};\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class GoogleAuthService {\n    public loginChannel: Channel<string, string>;\n\n    constructor(storageService: StorageService) {\n\n        this.loginChannel = new Channel((authToken: string) => of('').pipe(\n            tap(() => {\n                storageService.setAuthToken(authToken)\n            })\n        ));\n    }\n}\n","import {defer, from, mergeMap, of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {formatCreatedDate} from './logic/formatCreatedDate';\nimport {getBackupFolder} from \"./logic/getBackupFolder\";\nimport {getBackupFiles} from \"./logic/getBackupFiles\";\nimport {loadBackupFile} from \"./logic/loadBackupFile\";\nimport {createBackupFolder} from \"./logic/createBackupFolder\";\nimport {createEmptyBackupFile} from \"./logic/createEmptyBackupFile\";\nimport {createBackupName} from \"./logic/createBackupName\";\nimport {uploadBackupFile} from \"./logic/uploadBackupFile\";\nimport {deleteBackupFile} from \"./logic/deleteBackupFile\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class GoogleBackupsService {\n\n    public backupsNameLoadChannel: Channel<IEmpty, IGoogleDriveFile[]>;\n    public backupLoadChannel: Channel<string, ICardsGroup[]>;\n    public backupUploadChannel: Channel<void, string>;\n    public backupDeleteChannel: Channel<string, string>;\n\n    constructor(private storageService: StorageService) {\n\n        this.backupsNameLoadChannel = new Channel(() => storageService.getAuthToken().pipe(\n            mergeMap(\n                (authToken: string) => of(authToken).pipe(\n                    switchMap(() => from(getBackupFolder(authToken))),\n                    switchMap(\n                        (folder: IGoogleDriveFile | null) => from(getBackupFiles(authToken, folder))\n                    ),\n                    map((googleDriveFiles: IGoogleDriveFile[] | null) => formatCreatedDate(googleDriveFiles))\n                )\n            )\n        ));\n\n        this.backupLoadChannel = new Channel(\n            (backupID: string) => storageService.getAuthToken().pipe(\n                switchMap(\n                    (authToken) => from(loadBackupFile(authToken, backupID))\n                ),\n                tap((cards: ICardsGroup[]) => {\n                    storageService.setBackup(cards);\n                })\n            )\n        );\n\n        this.backupUploadChannel = new Channel(\n            () => storageService.getAuthToken().pipe(\n                mergeMap((authToken: string) => of(authToken).pipe(\n                        switchMap(() => from(getBackupFolder(authToken))),\n                        mergeMap((folder: IGoogleDriveFile | null) => {\n                            return defer(() => {\n                                return folder ? of(folder.id) : from(createBackupFolder(authToken))\n                            })\n                        }),\n                        mergeMap((folderId: string) => {\n                            return storageService.getBackup().pipe(\n                                map(\n                                    (cardsGroups) => createBackupName(cardsGroups)\n                                ),\n                                switchMap((name: string) => {\n                                    return from(createEmptyBackupFile(\n                                        authToken,\n                                        folderId,\n                                        name\n                                    ));\n                                })\n                            )\n                        }),\n                        switchMap((fileId: string) => {\n                            return storageService.getBackup().pipe(\n                                switchMap((cardsGroups) => {\n                                    return uploadBackupFile(\n                                        authToken,\n                                        fileId,\n                                        cardsGroups\n                                    )\n                                })\n                            )\n                        })\n                    )\n                )\n            )\n        );\n\n        this.backupDeleteChannel = new Channel((fileID: string) => storageService.getAuthToken().pipe(\n            switchMap((authToken) => deleteBackupFile(authToken, fileID))\n        ));\n    }\n}\n","import {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const getBackupFiles = (authToken: string, folder: IGoogleDriveFile | null): Promise<IGoogleDriveFile[] | null> => {\n\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const url = `${googleDriveFilesAPI}?q=\"${folder ? folder.id : -1}\"+in+parents&fields=files(id,createdTime,name)`\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.files)\n}","import {IGoogleDriveFile} from '../../../common/types/IGoogleDriveFile';\n\nexport const formatCreatedDate = (googleDriveFiles: IGoogleDriveFile[] | null) => {\n    return googleDriveFiles ? googleDriveFiles.map((googleDriveFile: IGoogleDriveFile) => {\n        const date = new Date(googleDriveFile.createdTime);\n        const outputFormat = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\n        return {\n            ...googleDriveFile, createdTime: outputFormat\n        };\n    }) : [];\n};\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const loadBackupFile = (authToken: string, fileId: string): Promise<ICardsGroup[]> => {\n\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const url = googleDriveFilesAPI + fileId + '?alt=media';\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    )\n}","export const createBackupFolder = (authToken: string): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/';\n    const backupFolderName = 'my-cards';\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            name: backupFolderName,\n            mimeType: 'application/vnd.google-apps.folder'\n        }),\n        method: 'POST'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.id)\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const createBackupName = (backup: ICardsGroup[]) => {\n    let cardsAmount = 0;\n    backup.forEach((cardsGroup) => {\n        cardsAmount = cardsAmount + cardsGroup.cards.length\n    })\n    return `groups(${backup.length})cards(${cardsAmount})`\n}","export const createEmptyBackupFile = (\n    authToken: string,\n    id: string,\n    fileName: string\n): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/';\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            parents: [id],\n            name: fileName\n        }),\n        method: 'POST'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.id)\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const uploadBackupFile = (\n    authToken: string,\n    fileId: string,\n    cardsGroups: ICardsGroup[]\n): Promise<string> => {\n\n    const url = \"https://www.googleapis.com/upload/drive/v3/files/\" + fileId;\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        body: JSON.stringify(cardsGroups, null, 4),\n        responseType: 'text',\n        method: 'PATCH'\n    }\n\n    return fetch(url, requestOptions).then(() => fileId);\n}","export const deleteBackupFile = (\n    authToken: string,\n    fileId: string\n): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/' + fileId;\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'DELETE'\n    }\n\n    return fetch(url, requestOptions).then(() => fileId)\n}","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ICard} from '../../common/types/ICard';\nimport {saveCard} from './logic/saveCard';\nimport {getEditingCard} from './logic/getEditingCard';\n\nexport class CardsEditorService {\n\n    public cardEditingChannel: Channel<{ card: ICard, cardsGroupID: number }, ICard>;\n    public cardChannel: Channel<{ cardID: number, cardsGroupID: number }, ICard | undefined>;\n\n    constructor(storageService: StorageService) {\n        this.cardEditingChannel = new Channel(({card, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCard(cardsGroupID, card, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            }),\n            map(() => card)\n        ));\n\n        this.cardChannel = new Channel(({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCard(cardsGroupID, cardID, cardsGroups))\n        ));\n    }\n}","import {ICard} from '../../../common/types/ICard';\nimport {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveCard = (cardsGroupID: number, card: ICard, cardsGroups: ICardsGroup[]) => {\n\n    if (card.id === -1) {\n        card.id = new Date().getTime();\n    }\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => card.id === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex < 0) {\n        cardsGroups[cardGroupIndex].cards.push(card);\n    } else if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards[cardIndex] = card;\n    }\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const getEditingCard = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n        let card: ICard | undefined = {\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO,\n            answer: '',\n            question: '',\n            dateRepeating: 0,\n            id: new Date().getTime()\n        };\n\n        if (cardsGroup) {\n            card = cardsGroup.cards.find((card: ICard) => card.id === cardID)\n        }\n\n        return card;\n};\n","import {map, mergeMap, tap} from 'rxjs/operators';\nimport {of} from \"rxjs\";\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {getCardsByGroup} from './logic/getCardsByGroup';\nimport {resetCardProgress} from './logic/resetCardProgress';\nimport {deleteSingleCard} from '../../common/logic/deleteSingleCard';\nimport {filterCards} from \"./logic/filterCards\";\nimport {IFilter} from \"../../common/types/IFilter\";\nimport {changeCardsGroup} from \"./logic/changeCardsGroup\";\nimport {selectedItemsObjectToArray} from \"./logic/selectedItemsObjectToArray\";\nimport {getExistedCardsGroups} from \"./logic/getExistedCardsGroups\";\nimport {copyCardsInGroup} from \"./logic/copyCardsInGroup\";\nimport {deleteCards} from \"./logic/deleteCards\";\nimport {cardsToIDS} from \"./logic/cardsToIDS\";\nimport {selectedItemsToIDs} from \"./logic/selectedItemsToIDs\";\nimport {IStoredFilters} from \"../../common/types/IStoredFilters\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class CardsService {\n    public cardsChannel: Channel<{ cardsGroupID: number, filter: IFilter }, ICard[]>;\n    public resetCardProgressChannel: Channel<{ cardID: number, cardsGroupID: number }, ICardsGroup[]>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public movingCardsChannel: Channel<{\n        selectedItems: { [key: number]: boolean };\n        destinationGroupID: number;\n    }, ICardsGroup[]>;\n    public copyCardsChannel: Channel<{\n        selectedItems: { [key: number]: boolean };\n        destinationGroupID: number;\n    }, ICardsGroup[]>;\n    public deleteCardsChannel: Channel<{ [key: number]: boolean }, ICardsGroup[]>;\n    public existedGroupsIDsChannel: Channel<IEmpty, Array<{ id: number; label: string }>>;\n    public cardsIDsByGroupIDsChannel: Channel<number, number[]>;\n    public cardsIDsBySelectedItemsChannel: Channel<{ [key: number]: boolean }, number[]>;\n    public filterChannel: Channel<IEmpty, IFilter>;\n    public changeFilterChannel: Channel<IFilter, IStoredFilters>;\n\n    constructor(private storageService: StorageService) {\n        this.cardsChannel = new Channel(\n            ({cardsGroupID, filter}) => this.storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => getCardsByGroup(cardsGroupID, cardsGroups)),\n                map((cards: ICard[]) => filterCards(cards, filter)))\n        );\n\n        this.resetCardProgressChannel = new Channel(\n            ({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => resetCardProgress(cardsGroupID, cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n\n        this.movingCardsChannel = new Channel((\n            {\n                selectedItems,\n                destinationGroupID\n            }\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => changeCardsGroup(\n                        cardsGroups,\n                        selectedCardsIDs,\n                        destinationGroupID\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.existedGroupsIDsChannel = new Channel(() => storageService.getBackup().pipe(\n            map(getExistedCardsGroups)\n        ))\n\n        this.copyCardsChannel = new Channel((\n            {\n                selectedItems,\n                destinationGroupID\n            }\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => copyCardsInGroup(\n                        cardsGroups,\n                        selectedCardsIDs,\n                        destinationGroupID\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.deleteCardsChannel = new Channel((\n            selectedItems\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => deleteCards(\n                        cardsGroups,\n                        selectedCardsIDs\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.cardsIDsByGroupIDsChannel = new Channel<number, number[]>(\n            (groupID) => storageService.getBackup().pipe(\n                map((cardsGroups) => getCardsByGroup(groupID, cardsGroups)),\n                map((cards: ICard[]) => cardsToIDS(cards))\n            )\n        )\n\n        this.cardsIDsBySelectedItemsChannel = new Channel(\n            (args) => of(args).pipe(\n                map(() => selectedItemsToIDs(args))\n            )\n        )\n\n        this.filterChannel = new Channel(\n            () => storageService.getFilter().pipe(\n                map((storedFilters) => storedFilters.cards)\n            )\n        )\n\n        this.changeFilterChannel = new Channel<IFilter, IStoredFilters>(\n            (filter) => storageService.getFilter().pipe(\n                map((storedFilters) => {\n                        return {...storedFilters, cards: filter}\n                    }\n                ),\n                tap((storedFilters) => {\n                    storageService.setFilter(storedFilters);\n                })\n            )\n        )\n    }\n}\n","import {ICard} from \"../../../common/types/ICard\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const filterCards = (cards: ICard[], filter: IFilter) => {\n    const foundByTextCards = cards.filter((card: ICard) => {\n        return card.question.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1 ||\n            card.answer.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1\n    })\n\n    let sortedCards = []\n\n    if (filter.sort === ISortVariant.QUESTION_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.question === card2.question) {\n                return 0\n            } else if (card1.question > card2.question) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.QUESTION_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.question === card2.question) {\n                return 0\n            } else if (card1.question > card2.question) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.STATUS_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.STATUS_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.DATE_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.dateRepeating === card2.dateRepeating) {\n                return 0\n            } else if (card1.dateRepeating > card2.dateRepeating) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.DATE_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.dateRepeating === card2.dateRepeating) {\n                return 0\n            } else if (card1.dateRepeating < card2.dateRepeating) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.ANSWER_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.answer === card2.answer) {\n                return 0\n            } else if (card1.answer < card2.answer) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.ANSWER_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.answer === card2.answer) {\n                return 0\n            } else if (card1.answer < card2.answer) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.PROGRESS_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge < card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.PROGRESS_DESC) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge < card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    }\n\n    return foundByTextCards\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const resetCardProgress = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards[cardIndex].rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n    }\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\n\nexport const changeCardsGroup = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[],\n    destinationGroupID: number\n) => {\n\n    const selectedCards: ICard[] = []\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card) => {\n            const isSelected = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id\n            }) > -1\n\n            if (isSelected) {\n                selectedCards.push(card);\n            }\n        });\n        cardsGroup.cards = cardsGroup.cards.filter((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id;\n            });\n\n            return foundCardIndex < 0;\n        })\n    })\n\n    cardsGroups.forEach((cardsGroup) => {\n        if(cardsGroup.id === destinationGroupID) {\n            cardsGroup.cards.push(...selectedCards)\n        }\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\n\nexport const copyCardsInGroup = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[],\n    destinationGroupID: number\n) => {\n    const selectedCards: ICard[] = []\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card, index) => {\n            const isSelected = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id\n            }) > -1\n\n            if (isSelected) {\n                selectedCards.push({\n                    ...card,\n                    id: new Date().getTime() + index * 1000\n                });\n            }\n        });\n    });\n\n    cardsGroups.forEach((cardsGroup) => {\n        if(cardsGroup.id === destinationGroupID) {\n            cardsGroup.cards.push(...selectedCards)\n        }\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const deleteCards = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[]\n) => {\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards = cardsGroup.cards.filter((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id;\n            });\n\n            return foundCardIndex < 0;\n        })\n    })\n\n    return cardsGroups;\n}","import {ICard} from \"../../../common/types/ICard\";\n\nexport const cardsToIDS = (cards: ICard[]) => {\n    return cards.map((card) => card.id)\n}","export const selectedItemsToIDs = (selectedItems: { [p: number]: boolean }): number[] => {\n    const ids = [];\n    for (let a in selectedItems) {\n        if (selectedItems[a]) {\n            ids.push(Number(a));\n        }\n    }\n    return ids;\n}","import {of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {IRepeatingArgs} from '../../common/types/IRepeatingArgs';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {IRepeatingProgress} from '../../common/types/IRepeatingProgress';\nimport {getCardsByIDs} from './logic/getCardsByIDs';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForRepeating} from './logic/getCardForRepeating';\nimport {getRepeatingProgress} from './logic/getRepeatingProgress';\nimport {refreshCardRepeatingDate} from \"../../common/logic/refreshCardRepeatingDate\";\nimport {deleteSingleCard} from \"../../common/logic/deleteSingleCard\";\nimport {getCardGroupName} from \"../card-viewer/logic/getCardGroupName\";\nimport {updateStatistic} from \"../../common/logic/updateStatistic\";\nimport {IStatistic} from \"../../common/types/IStatistic\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\nimport {readByVoiceEngine} from \"../../common/logic/readByVoiceEngine\";\nimport {VoiceService} from \"../../common/services/VoiceService\";\n\nexport class CardsRepeaterService {\n    public cardChannel: Channel<number[], ICard>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public repeatingProgressChannel: Channel<IEmpty, IRepeatingProgress>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public cardGroupNameChannel: Channel<number, string>;\n    public readByVoiceEngineChannel: Channel<string, string>;\n\n    private statisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    constructor(private storageService: StorageService, private voiceService: VoiceService) {\n        this.cardChannel = new Channel((cardsIDs) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardsByIDs(cardsGroups, cardsIDs)),\n            tap((cards) => {\n                this.statisticValue = getRepeatingProgress(cards);\n            }),\n            switchMap((cards: ICard[]) => this.storageService.getSettings().pipe(\n                map((settings) => {\n                    return getCardForRepeating(cards, settings.repeatingType);\n                })\n            ))\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getStatistic().pipe(\n                map((statistic: IStatistic) => updateStatistic(statistic, args)),\n                map((statistic: IStatistic) => this.storageService.setStatistic(statistic)),\n                switchMap(() => this.storageService.getBackup()),\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                map((cardsGroups: ICardsGroup[]) => refreshCardRepeatingDate(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups)),\n            );\n        });\n\n        this.repeatingProgressChannel = new Channel(() => of(this.statisticValue));\n\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n        this.cardGroupNameChannel = new Channel<number, string>(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => {\n                    return getCardGroupName(cardsGroups, cardID);\n                })\n            )\n        );\n        this.readByVoiceEngineChannel = new Channel<string, string>(\n            (text) => of(text).pipe(\n                map(\n                    (text) => readByVoiceEngine(text, voiceService.getRandomVoice())\n                )\n            )\n        );\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\n\nexport const getCardsByIDs = (cardsGroups: ICardsGroup[], cardsIDs: number[]) => {\n\n    let foundCards: Array<ICard> = [];\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card) => {\n            const foundIndex = cardsIDs.findIndex((value) => value === card.id)\n            if (foundIndex > -1) {\n                foundCards.push(card);\n            }\n        })\n    });\n\n    return foundCards;\n};\n","import {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\nimport {IRepeatingProgress} from '../../../common/types/IRepeatingProgress';\n\nexport const getRepeatingProgress = (cards: ICard[]): IRepeatingProgress => {\n\n    const repeatingProgress = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    cards.forEach((card: ICard) => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            repeatingProgress.inProgress = repeatingProgress.inProgress + 1\n        } else if (card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n            repeatingProgress.todo = repeatingProgress.todo + 1\n        } else {\n            repeatingProgress.done = repeatingProgress.done + 1\n        }\n    });\n\n    return repeatingProgress;\n};\n","import {of} from 'rxjs';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {switchMap, tap} from 'rxjs/operators';\nimport {saveBackupFile} from './logic/saveBackupFile';\n\nexport class LocalBackupsService {\n\n    public localBackupChannel: Channel<void, ICardsGroup[]>;\n    public loadBackupChannel: Channel<string, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.localBackupChannel = new Channel(() => this.storageService.getBackup().pipe(\n            tap((backup: ICardsGroup[]) => saveBackupFile(backup))\n        ));\n\n        this.loadBackupChannel = new Channel((backupFile: string) => of('').pipe(\n            switchMap(() => {\n                return this.storageService.setBackup(JSON.parse(backupFile));\n            })\n        ));\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveBackupFile = (backup: ICardsGroup[]) => {\n    const fileData: string = JSON.stringify(backup, null, 4);\n    const blob = new Blob([fileData], {type: \"octet/stream\"});\n    const url = window.URL.createObjectURL(blob);\n\n    const fileBuffer = document.createElement('a');\n\n    if (fileBuffer) {\n        fileBuffer.href = url;\n        fileBuffer.download = 'My Cards.txt';\n        fileBuffer.click();\n    }\n    window.URL.revokeObjectURL(url);\n};\n","import {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ISettings} from '../../common/types/ISettings';\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class SettingsService {\n\n    public settingsChannel: Channel<IEmpty, ISettings>;\n\n    public changeSettingsChannel: Channel<ISettings, ISettings>;\n\n    constructor(storageService: StorageService) {\n\n        this.settingsChannel = new Channel(() => storageService.getSettings());\n\n        this.changeSettingsChannel = new Channel(\n            (settings: ISettings) => storageService.setSettings(settings)\n        );\n    }\n}\n","import {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {IRepeatingArgs} from '../../common/types/IRepeatingArgs';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForViewing} from \"./logic/getCardForViewing\";\nimport {refreshCardRepeatingDate} from \"../../common/logic/refreshCardRepeatingDate\";\nimport {deleteSingleCard} from \"../../common/logic/deleteSingleCard\";\nimport {getCardGroupName} from \"./logic/getCardGroupName\";\nimport {IStatistic} from \"../../common/types/IStatistic\";\nimport {updateStatistic} from \"../../common/logic/updateStatistic\";\nimport {readByVoiceEngine} from \"../../common/logic/readByVoiceEngine\";\nimport {of} from \"rxjs\";\nimport {VoiceService} from \"../../common/services/VoiceService\";\n\nexport class CardViewerService {\n    public cardChannel: Channel<number, ICard>;\n    public cardGroupNameChannel: Channel<number, string>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public readByVoiceEngineChannel: Channel<string, string>;\n\n    constructor(private storageService: StorageService, voiceService: VoiceService) {\n        this.cardChannel = new Channel((cardID = -1) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardForViewing(cardsGroups, cardID))\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getStatistic().pipe(\n                map((statistic: IStatistic) => updateStatistic(statistic, args)),\n                map((statistic: IStatistic) => this.storageService.setStatistic(statistic)),\n                switchMap(() => this.storageService.getBackup()),\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                map((cardsGroups: ICardsGroup[]) => refreshCardRepeatingDate(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups))\n            );\n        });\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n        this.cardGroupNameChannel = new Channel<number, string>(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => {\n                    return getCardGroupName(cardsGroups, cardID);\n                })\n            )\n        )\n        this.readByVoiceEngineChannel = new Channel<string, string>(\n            (text) => of(text).pipe(\n                map(\n                    (text) => readByVoiceEngine(text, voiceService.getRandomVoice())\n                )\n            )\n        );\n    }\n}\n","import {Channel} from \"../../../MyTools/channel-conception/Channel\";\nimport {IStatistic} from \"../../common/types/IStatistic\";\nimport {StorageService} from \"../../common/services/StorageService\";\nimport {map} from \"rxjs/operators\";\nimport {getRowsFromStatistic} from \"./logic/getRowsFromStatistic\";\nimport {IRow} from \"./types/IRow\";\nimport {defaultStatistic} from \"../../common/defaults/defaultStatistic\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class StatisticService {\n    public statisticChannel: Channel<IEmpty, IRow[]>;\n    public removeStatisticChannel: Channel<IEmpty, IStatistic>;\n\n    constructor(private storageService: StorageService) {\n        this.statisticChannel = new Channel(\n            () => storageService.getStatistic().pipe(\n                map((statistic: IStatistic) => {\n                    return getRowsFromStatistic(statistic);\n                })\n            )\n        )\n        this.removeStatisticChannel = new Channel(\n            () => storageService.setStatistic(defaultStatistic)\n        )\n    }\n}\n","import {IStatistic} from \"../../../common/types/IStatistic\";\nimport {IRow} from \"../types/IRow\";\n\nexport const getRowsFromStatistic = (statistic: IStatistic): IRow[] => {\n    return statistic.dailyStatistic.reverse().map((\n        {date, done, inProgress, year, month}\n    ) => {\n        let dateAsString = date > 0 && date < 10 ? '0' + date : date;\n        month = month + 1;\n        let monthAsString = month > 0 && month < 10 ? '0' + month : month;\n        let inProgressSum: number = 0;\n        Object.keys(inProgress).forEach((k) => {\n            inProgressSum = inProgressSum + inProgress[Number(k)]\n        })\n        let doneSum: number = 0;\n        Object.keys(done).forEach((k) => {\n            doneSum = doneSum + done[Number(k)]\n        })\n        return {\n            date: `${dateAsString}-${monthAsString}-${year}`,\n            inProgress: inProgressSum,\n            done: doneSum\n        }\n    })\n}","import {Channel} from \"../../../MyTools/channel-conception/Channel\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\nimport {IRepeater} from \"../../common/types/IRepeater\";\nimport {StorageService} from \"../../common/services/StorageService\";\nimport {map, switchMap, tap} from \"rxjs/operators\";\nimport {getRepeaterByID} from \"./logic/getRepeaterByID\";\nimport {getCardsIDsFromRepeater} from \"./logic/getCardsIDsFromRepeater\";\nimport {removeRepeater} from \"./logic/removeRepeater\";\nimport {updateRepeatersProgress} from \"./logic/updateRepeatersProgress\";\nimport {resetRepeatingProgress} from \"./logic/resetRepeatingProgress\";\nimport {ICardsGroup} from \"../../common/types/ICardsGroup\";\n\nexport class RepeaterListService {\n    public repeaterListChannel: Channel<IEmpty, IRepeater[]>;\n    public startRepeatingChannel: Channel<number, number[]>;\n    public removingRepeaterChannel: Channel<number, IRepeater[]>;\n    public resetProgressChannel: Channel<number, ICardsGroup[]>;\n\n    constructor(storageService: StorageService) {\n        this.repeaterListChannel = new Channel(\n            () => storageService.getRepeaters().pipe(\n                switchMap((repeaters) => {\n                    return storageService.getBackup().pipe(\n                        map((cardsGroups) => updateRepeatersProgress(cardsGroups, repeaters))\n                    )\n                })\n            )\n        )\n        this.startRepeatingChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters: IRepeater[]) => {\n                    return getRepeaterByID(repeaters, repeaterID);\n                }),\n                switchMap((repeater: IRepeater) => storageService.getBackup().pipe(\n                    map((cardsGroups) => {\n                        return getCardsIDsFromRepeater(cardsGroups, repeater);\n                    })\n                ))\n            )\n        )\n        this.removingRepeaterChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters) => removeRepeater(repeaters, repeaterID)),\n                tap((repeaters) => storageService.setRepeaters(repeaters))\n            )\n        )\n        this.resetProgressChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters: IRepeater[]) => {\n                    return getRepeaterByID(repeaters, repeaterID);\n                }),\n                switchMap((repeater) => storageService.getBackup().pipe(\n                    map((cardsGroups) => resetRepeatingProgress(cardsGroups, repeater)),\n                    switchMap((cardsGroups) => storageService.setBackup(cardsGroups))\n                ))\n            )\n        )\n    }\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const updateRepeatersProgress = (\n    cardsGroups: ICardsGroup[],\n    repeaters: IRepeater[]\n) => {\n    repeaters.forEach((repeater) => {\n        let cardsCount = 0;\n        let repeatedCardsCount = 0;\n\n        cardsGroups.forEach((cardsGroup) => {\n            const isCardsGroupInRepeater = repeater.cardsGroupsIDs.findIndex(\n                (id) => cardsGroup.id === id\n            ) > -1\n\n            if (isCardsGroupInRepeater) {\n                cardsCount = cardsCount + cardsGroup.cards.length;\n                cardsGroup.cards.forEach((card) => {\n                    if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n                        repeatedCardsCount++;\n                    }\n                })\n            }\n        });\n\n        repeater.percentRepeatedCards = repeatedCardsCount / cardsCount * 100;\n    })\n    return repeaters;\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const getCardsIDsFromRepeater = (cardsGroups: ICardsGroup[], repeater: IRepeater) => {\n    const idsForRepeating: number[] = [];\n\n    cardsGroups.forEach((cardsGroup) => {\n        const cardsGroupIndex = repeater.cardsGroupsIDs.findIndex((id) => id === cardsGroup.id);\n        if (cardsGroupIndex >= 0) {\n            idsForRepeating.push(...cardsGroup.cards.map((card) => card.id));\n        }\n    })\n\n    return idsForRepeating;\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const removeRepeater = (repeaters: IRepeater[], repeaterID: number) => {\n    const repeaterIndex = repeaters.findIndex((repeater) => repeater.id === repeaterID);\n\n    return repeaters.filter((repeater) => repeater.id !== repeaters[repeaterIndex].id);\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const resetRepeatingProgress = (\n    cardsGroups: ICardsGroup[],\n    repeater: IRepeater\n) => {\n    cardsGroups.forEach((cardsGroup) => {\n        const isCardsGroupInRepeater = repeater.cardsGroupsIDs.findIndex(\n            (id) => cardsGroup.id === id\n        ) > -1\n\n        if (isCardsGroupInRepeater) {\n            cardsGroup.cards.forEach((card) => {\n                if (card.rangeOfKnowledge !== IRangeOfKnowledge.TO_DO) {\n                    card.rangeOfKnowledge = IRangeOfKnowledge.TO_DO\n                }\n            })\n        }\n    })\n    return cardsGroups;\n}","import {map, switchMap} from \"rxjs/operators\";\n\nimport {Channel} from \"../../../MyTools/channel-conception/Channel\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\nimport {ICardsGroup} from \"../../common/types/ICardsGroup\";\nimport {StorageService} from \"../../common/services/StorageService\";\nimport {IRepeater} from \"../../common/types/IRepeater\";\nimport {updateExistRepeater} from \"./logic/updateExistRepeater\";\nimport {of} from \"rxjs\";\nimport {updateGroupsIDs} from \"./logic/updateGroupsIDs\";\nimport {getRepeaterByID} from \"./logic/getRepeaterByID\";\nimport {getSelectedGroups} from \"./logic/getSelectedGroups\";\n\nexport class RepeaterEditorService {\n    public groupsListChannel: Channel<IEmpty, ICardsGroup[]>;\n    public saveRepeaterChannel: Channel<IRepeater, IRepeater[]>;\n    public updateGroupsIDsChannel: Channel<{ selectedGroups: { [key: number]: boolean }; repeater: IRepeater },\n        IRepeater>;\n    public repeaterChannel: Channel<number, IRepeater>;\n    public selectedGroupsChannel: Channel<IRepeater, {\n        [key: number]: boolean;\n    }>;\n\n    constructor(private storageService: StorageService) {\n        this.groupsListChannel = new Channel(\n            () => storageService.getBackup()\n        );\n\n        this.saveRepeaterChannel = new Channel(\n            (repeater) => storageService.getRepeaters().pipe(\n                map((repeaters) => {\n                    if (repeater.id === -1) {\n                        repeater.id = new Date().getTime();\n                        repeaters.push(repeater);\n                    } else {\n                        updateExistRepeater(repeaters, repeater);\n                    }\n                    return repeaters;\n                }),\n                switchMap((repeaters) => storageService.setRepeaters(repeaters))\n            )\n        )\n\n        this.updateGroupsIDsChannel = new Channel(\n            ({repeater, selectedGroups}) => of(repeater).pipe(\n                map(() => updateGroupsIDs(selectedGroups, repeater))\n            )\n        )\n\n        this.repeaterChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters) => {\n                    return getRepeaterByID(repeaters, repeaterID);\n                })\n            )\n        )\n        this.selectedGroupsChannel = new Channel(\n            (repeater: IRepeater) => of(repeater).pipe(\n                map(() => getSelectedGroups(repeater))\n            )\n        )\n    }\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const updateExistRepeater = (\n    repeaters: IRepeater[],\n    repeater: IRepeater\n) => {\n    const repeaterIndex = repeaters.findIndex((item) => item.id === repeater.id);\n    repeaters[repeaterIndex] = {\n        ...repeaters[repeaterIndex],\n        cardsGroupsIDs: repeater.cardsGroupsIDs,\n        name: repeater.name\n    }\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const updateGroupsIDs = (selectedGroups: { [key: number]: boolean }, repeater: IRepeater): IRepeater => {\n    const cardsGroupsIDs: number[] = [];\n    Object.keys(selectedGroups).forEach((groupID) => {\n        const id = Number(groupID);\n        if (selectedGroups[id]) {\n            cardsGroupsIDs.push(id);\n        }\n    });\n    return {\n        ...repeater,\n        cardsGroupsIDs\n    }\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const getRepeaterByID = (repeaters: IRepeater[], id: number) => {\n    const repeaterIndex = repeaters.findIndex((item) => item.id === id);\n    return repeaters[repeaterIndex]\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const getSelectedGroups = (repeater: IRepeater) => {\n    const selectedGroups: {\n        [key: number]: boolean;\n    } = {};\n    repeater.cardsGroupsIDs.forEach((id) => {\n        selectedGroups[id] = true;\n    })\n    return selectedGroups;\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://cra.link/PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}