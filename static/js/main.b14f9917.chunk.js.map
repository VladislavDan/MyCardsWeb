{"version":3,"sources":["app/types/IRangeOfKnowledge.ts","app/common/Routs.ts","app/parts/toolbar-container/ToolbarService.tsx","app/parts/toolbar-container/ToolbarComponent.tsx","app/common/Channel.ts","app/parts/navigation-panel-container/NavigationPanelService.ts","app/parts/toolbar-container/ToolbarContainer.tsx","app/parts/navigation-panel-container/navigation-panel-component/navigation-panel-component/navigation-link-component/NavigationLinkComponent.tsx","app/parts/navigation-panel-container/navigation-panel-component/NavigationPanelComponent.tsx","app/common/hooks/useChannel.ts","app/parts/navigation-panel-container/NavigationPanelContainer.tsx","app/parts/error-container/ErrorComponent.tsx","app/parts/error-container/ErrorContainer.tsx","app/parts/spinner-container/SpinnerComponent.tsx","app/parts/spinner-container/SpinnerContainer.tsx","app/common/Constants.ts","app/parts/confirm-dialog/ConfirmDialogComponent.tsx","app/parts/confirm-dialog/ConfirmDialogContainer.tsx","app/pages/cards-groups-list/elements/circular-progress/CircularProgressComponent.tsx","app/common/elements/list-item-menu/ListItemMenuComponent.tsx","app/pages/cards-groups-list/elements/cards-groups-list-item/CardsGroupsListItemComponent.tsx","app/common/elements/add-button/AddButton.tsx","app/pages/cards-groups-list/CardsGroupsListComponent.tsx","app/common/hooks/useConstructor.ts","app/common/hooks/useUnsubscribe.ts","app/pages/cards-groups-list/CardsGroupsListContainer.tsx","app/pages/google-auth/GoogleAuthComponent.tsx","app/pages/google-auth/GoogleAuthContainer.tsx","app/pages/google-backups/elements/backup-menu-component/BackupMenuComponent.tsx","app/pages/google-backups/elements/backups-list-item-component/BackupsListItemComponent.tsx","app/pages/google-backups/BackupsListComponent.tsx","app/pages/google-backups/GoogleBackupsContainer.tsx","app/pages/cards-list/elements/cards-list-item/CardsListItemComponent.tsx","app/pages/cards-list/CardsListComponent.tsx","app/pages/cards-list/CardsListContainer.tsx","app/pages/cards-repeater/elements/statistic/StatisticComponent.tsx","app/pages/cards-repeater/elements/answer/AnswerComponent.tsx","app/pages/cards-repeater/CardsRepeaterComponent.tsx","app/pages/cards-repeater/CardsRepeaterContainer.tsx","app/pages/local-backup/LocalBackupsContainer.tsx","app/pages/cards-groups-editor/CardsGroupsEditorComponent.tsx","app/pages/cards-groups-editor/CardsGroupsEditorContainer.tsx","app/pages/cards-editor/CardsEditorComponent.tsx","app/pages/cards-editor/CardsEditorContainer.tsx","app/parts/navigation/NavigationContainer.tsx","app/pages/google-backups/GoogleBackupsService.ts","app/common/services/StorageService.ts","app/pages/cards-list/CardsListService.ts","app/pages/cards-repeater/CardsRepeaterService.ts","app/pages/local-backup/LocalBackupsService.ts","App.tsx","app/parts/error-container/ErrorService.ts","app/parts/spinner-container/SpinnerService.ts","app/parts/confirm-dialog/ConfirmDialogService.ts","app/data-base/DataBaseService.ts","app/pages/cards-groups-editor/CardsGroupsEditorService.ts","app/pages/cards-groups-list/CardsGroupsListService.ts","app/pages/google-auth/GoogleAuthService.ts","app/pages/cards-editor/CardsEditorService.ts","reportWebVitals.ts","index.tsx"],"names":["IRangeOfKnowledge","Routs","path","name","toolbarManager","ToolbarComponent","pageLabel","onClick","history","useHistory","location","useLocation","AppBar","position","Toolbar","className","IconButton","edge","color","Typography","variant","push","pathname","state","Channel","observableCreator","outputSubject","subscriptions","this","Subject","value","subscribe","next","errorHandler","outputSubjectSubscription","data","error","console","forEach","subscribtion","closed","unsubscribe","navigationPanelService","navigationPanelOpenChannel","of","ToolbarContainer","useState","setPageLabel","useEffect","newPageLabel","getPageLabel","NavigationLinkComponent","toggleDrawer","ListItem","button","to","NavigationPanelComponent","isOpen","SwipeableDrawer","anchor","open","onClose","onOpen","List","useChannel","channel","additionalErrorHandler","subscription","setState","NavigationPanelContainer","event","type","nativeEvent","key","ErrorComponent","errorMessage","handleClose","Dialog","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","ErrorContainer","errorService","errorChannel","SpinnerComponent","isShow","LinearProgress","SpinnerContainer","spinnerService","setShowing","spinnerCounterChannel","spinnerCounter","defaultAppState","height","width","updateContext","DATE_FORMAT","ConfirmDialogComponent","onClickAgree","onClickDisagree","message","autoFocus","ConfirmDialogContainer","confirmDialogService","React","openDialogChannel","confirmationChannel","CircularProgressComponent","percent","Box","display","CircularProgress","top","left","bottom","right","alignItems","justifyContent","component","Math","round","ListItemMenuComponent","onEdit","onDelete","onResetProgress","anchorEl","setAnchorEl","keepMounted","Boolean","MenuItem","currentTarget","CardsGroupsListItemComponent","cardsGroup","onClickItem","onEditItem","onDeleteItem","ListItemIcon","percentRepeatedCards","ListItemText","primary","nameCardsGroup","secondary","format","dateRepeating","Date","AddButton","Fab","size","CardsGroupsListComponent","cardsGroups","onOpenEditor","map","useConstructor","callback","useRef","isFirstRun","current","useUnsubscribe","setSubscription","CardsGroupsListContainer","cardsGroupsListService","groupsListChannel","groupDeleteChannel","resetProgressChannel","cardsGroupID","isConfirm","GoogleAuthComponent","onSuccess","onFailure","style","clientId","buttonText","scope","GoogleAuthContainer","googleAuthService","loginChannel","replace","AppContext","response","accessToken","BackupMenuComponent","backupID","onLoad","BackupsListItemComponent","backupName","BackupsListComponent","backupsFiles","onCreate","backup","createdTime","GoogleBackupsContainer","googleBackupsService","backupsNameLoadChannel","backupLoadChannel","backupDeleteChannel","backupUploadChannel","CardsListItemComponent","card","rangeOfKnowledge","DONE","IN_PROGRESS","getIconColor","question","CardsListComponent","cards","CardsListContainer","cardsListService","cardsChannel","resetCardProgressChannel","deleteCardChannel","cardID","StatisticComponent","statistic","todo","inProgress","done","AnswerComponent","text","onClickText","gutterBottom","paddingTop","overflow","whiteSpace","CardsRepeaterComponent","answerCardHeight","isQuestionSide","onClickCard","onEditCard","onBackClick","Card","CardContent","answer","CardActions","CardRepeaterContainer","cardsRepeaterService","undefined","setStatistic","cardChannel","statisticChannel","currentCardChannel","repeatingResultChannel","useContext","isKnown","LocalBackupsContainer","localBackupsService","fileBuffer","localBackupChannel","loadBackupChannel","onChange","file","target","files","reader","FileReader","onload","readerEvent","games","result","readAsText","ref","CardsGroupsEditorComponent","groupName","onChangeGroupName","onSaveGroup","TextField","required","label","CardsGroupsEditorContainer","cardsGroupsEditorService","getTime","groupEditingChannel","groupChannel","goBack","CardsEditorComponent","onChangeAnswer","onChangeQuestion","onSaveCard","currentCardsGroup","onChangeCardsGroup","multiline","Select","labelId","toString","Number","autoWidth","CardsEditorContainer","cardsEditorService","cardEditingChannel","simplifiedCardsGroupsChannel","prevState","newState","NavigationContainer","exact","from","GoogleBackupsService","storageService","backupFileName","backupFolderName","googleDriveFilesAPI","googleDriveUploadAPI","searchFilesURI","searchFolderURI","getFilesAdditionalPartURI","googleDriveFolderType","pipe","switchMap","getAuthToken","authToken","getBackupFiles","googleDriveFiles","googleDriveFile","slice","loadBackupFile","createNewBackup","fileID","deleteBackupFile","tap","getBackupFolder","folders","foundedFolder","find","mimeType","createBackupFolder","folderId","createNewBackupFile","fileId","uploadBackupFile","token","ajax","url","headers","method","setBackupToStorage","body","parents","getBackupFromStorage","JSON","stringify","responseType","StorageService","dataBaseService","cardsStorageID","authTokenLocalStorageID","getBackupFromDataBase","a","get","setBackupToDataBase","set","Promise","resolve","reject","localStorage","getItem","setItem","CardsListService","getCards","cardGroupIndex","findIndex","cardGroup","cardIndex","item","TO_DO","filter","foundCardsGroup","CardsRepeaterService","statisticValue","currentCardID","writeRangeOfKnowledge","args","getCardForRepeating","length","foundCards","foundCard","updateStatistic","LocalBackupsService","saveFile","backupFile","parse","fileData","blob","Blob","window","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","createContext","difference","storeName","dataBase","DATA_BASE_NAME","put","openDB","upgrade","db","createObjectStore","editedCardGroup","cardGroupID","sort","firstCardGroup","secondCardsGroup","statusDone","groupID","setAuthToken","App","appState","setAppState","screen","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b14f9917.chunk.js","sourcesContent":["export enum IRangeOfKnowledge {\n    TO_DO,\n    IN_PROGRESS,\n    DONE\n}\n","export const Routs = {\n    googleAuth: {\n        path: '/google-auth',\n        name: 'Auth Google'\n    },\n\n    googleBackups: {\n        path: '/google-backups',\n        name: 'Google Backups'\n    },\n\n    cardsGroups: {\n        path: '/cards-groups',\n        name: 'Cards Groups'\n    },\n\n    cards: {\n        path: '/cards-list',\n        name: 'Cards'\n    },\n\n    cardsRepeater: {\n        path: '/cards-repeater',\n        name: 'Repeat Card'\n    },\n\n    cardsEditor: {\n        path: '/cards-editor',\n        name: 'Edit Card'\n    },\n\n    localBackups: {\n        path: '/local-backups',\n        name: 'Local Backups'\n    },\n\n    cardsGroupEditor: {\n        path: '/cards-group-editor',\n        name: 'Edit Group'\n    }\n};\n","import {Routs} from '../../common/Routs';\n\nclass ToolbarService {\n\n    public getPageLabel(path: string) {\n        if(path === Routs.googleAuth.path) {\n            return Routs.googleAuth.name;\n        }\n\n        if(path === Routs.googleBackups.path) {\n            return Routs.googleBackups.name;\n        }\n\n        if(path === Routs.cardsGroups.path) {\n            return Routs.cardsGroups.name;\n        }\n\n        if(path === Routs.cards.path) {\n            return Routs.cards.name;\n        }\n\n        if(path === Routs.cardsRepeater.path) {\n            return Routs.cardsRepeater.name;\n        }\n\n        if(path === Routs.localBackups.path) {\n            return Routs.localBackups.name;\n        }\n\n        return 'My Cards'\n    }\n}\n\nexport const toolbarManager = new ToolbarService();\n","import {FC, MouseEventHandler} from 'react';\nimport {AppBar, IconButton, Toolbar, Typography} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\n\nimport './ToolbarComponent.css'\nimport {useHistory, useLocation} from 'react-router';\nimport {Routs} from '../../common/Routs';\n\nexport const ToolbarComponent: FC<IToolbarComponent> = ({pageLabel, onClick}) => {\n\n    const history = useHistory();\n    const location = useLocation();\n\n    const onOpenRepeater = () => {\n\n        if (pageLabel === Routs.cards.name) {\n            history.push({\n                pathname: Routs.cardsRepeater.path,\n                state: location.state\n            })\n        } else {\n            history.push({\n                pathname: Routs.cardsRepeater.path,\n                state: null\n            })\n        }\n\n    };\n\n    return (\n        <AppBar position=\"fixed\">\n            <Toolbar className=\"toolbar\">\n                <IconButton className=\"toolbar_menu-icon\" edge=\"start\" color=\"inherit\" aria-label=\"menu\"\n                            onClick={onClick}>\n                    <MenuIcon/>\n                </IconButton>\n                <Typography className=\"toolbar_label\" variant=\"h6\">\n                    {pageLabel}\n                </Typography>\n                {pageLabel === Routs.cards.name || pageLabel === Routs.cardsGroups.name ?\n                    <IconButton color=\"inherit\" onClick={onOpenRepeater}>\n                        <PlayArrowIcon/>\n                    </IconButton> : null}\n            </Toolbar>\n        </AppBar>\n    )\n};\n\ninterface IToolbarComponent {\n    pageLabel: string;\n    onClick: MouseEventHandler\n}\n","import {Observable, Subject, Subscription} from 'rxjs';\n\nexport class Channel<A, D> {\n\n    private readonly outputSubject: Subject<D>;\n    private observableCreator: (arg: A) => Observable<D>;\n    private subscriptions: Subscription[] = [];\n\n    constructor(observableCreator: (arg: A) => Observable<D>) {\n        this.outputSubject = new Subject<D>();\n        this.observableCreator = observableCreator;\n    }\n\n    next(value: A) {\n        this.subscriptions.push(this.observableCreator(value).subscribe((value) => {\n            this.outputSubject.next(value);\n        }));\n    }\n\n    subscribe(next?: (data: D) => void, errorHandler?: (error: Error) => void): Subscription {\n\n\n        const outputSubjectSubscription = this.outputSubject.subscribe(\n            (data: D) => {\n                if(next) {\n                    next(data)\n                }\n            },\n            (error: Error) => {\n                if(errorHandler) {\n                    errorHandler(error);\n                }\n                console.error(error)\n            }\n        );\n        this.subscriptions.push(outputSubjectSubscription);\n        return outputSubjectSubscription;\n    }\n\n    unsubscribe() {\n        this.subscriptions.forEach((subscribtion: Subscription) => {\n            if(!subscribtion.closed) {\n                subscribtion.unsubscribe();\n            }\n        });\n        this.subscriptions = [];\n    }\n}\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../common/Channel';\n\nclass NavigationPanelService {\n\n    public navigationPanelOpenChannel: Channel<string, string>;\n\n    constructor() {\n        this.navigationPanelOpenChannel = new Channel<string, string>((value: string) => of(value))\n    }\n}\n\nexport const navigationPanelService = new NavigationPanelService();\n","import React, {ReactElement, useEffect, useState} from 'react';\nimport * as H from 'history';\nimport {useLocation} from 'react-router-dom';\n\nimport {toolbarManager} from './ToolbarService';\nimport {ToolbarComponent} from './ToolbarComponent';\nimport {navigationPanelService} from '../navigation-panel-container/NavigationPanelService';\n\nexport const ToolbarContainer = (): ReactElement => {\n\n    const location: H.Location = useLocation();\n    const [pageLabel, setPageLabel] = useState('');\n\n    useEffect(() => {\n        const newPageLabel = toolbarManager.getPageLabel(location.pathname);\n        setPageLabel(newPageLabel);\n    }, [location.pathname]);\n\n    const onClick = () => {\n        navigationPanelService.navigationPanelOpenChannel.next('');\n    };\n\n    return (\n        <ToolbarComponent pageLabel={pageLabel} onClick={onClick}/>\n    )\n};\n","import {Link} from 'react-router-dom';\nimport {ListItem} from '@mui/material';\nimport * as React from 'react';\nimport {FC, ReactEventHandler} from 'react';\n\nexport const NavigationLinkComponent: FC<INavigationLinkComponent> = ({path, name, toggleDrawer}: INavigationLinkComponent) => {\n\n    return (\n        <ListItem button>\n            <Link to={path} onClick={toggleDrawer(false)}>\n                {name}\n            </Link>\n        </ListItem>\n    )\n};\n\ninterface INavigationLinkComponent {\n    path: string;\n    name: string;\n    toggleDrawer: (isOpen: boolean) => ReactEventHandler\n}\n","import * as React from 'react';\nimport {FC, ReactEventHandler} from 'react';\nimport {List, SwipeableDrawer} from '@mui/material';\n\nimport {Routs} from '../../../common/Routs';\nimport {NavigationLinkComponent} from './navigation-panel-component/navigation-link-component/NavigationLinkComponent';\n\nexport const NavigationPanelComponent: FC<INavigationPanelComponent> = ({isOpen, toggleDrawer}) => {\n\n    return (\n        <SwipeableDrawer\n            anchor=\"left\"\n            open={isOpen}\n            onClose={toggleDrawer(false)}\n            onOpen={toggleDrawer(true)}\n        >\n            <List>\n                <NavigationLinkComponent path={Routs.cardsGroups.path} name={Routs.cardsGroups.name} toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.googleAuth.path} name={Routs.googleAuth.name} toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.localBackups.path} name={Routs.localBackups.name} toggleDrawer={toggleDrawer}/>\n            </List>\n        </SwipeableDrawer>\n    )\n};\n\ninterface INavigationPanelComponent {\n    isOpen: boolean\n    toggleDrawer: (isOpen: boolean) => ReactEventHandler\n}\n\n\n","import {useEffect, useState} from 'react';\nimport {Subscription} from 'rxjs';\n\nimport {Channel} from '../Channel';\n\nexport const useChannel = <A, D>(channel: Channel<A, D>, next?: (value: D) => void, additionalErrorHandler?: (error: Error) => void) => {\n    const [state, setState] = useState<{ subscription: Subscription | null }>({\n        subscription: null\n    });\n\n    useEffect(() => {\n\n        if (!state.subscription || state.subscription.closed) {\n            const subscription = channel.subscribe(next, additionalErrorHandler);\n\n            setState({...state, subscription});\n        }\n\n        return () => {\n            channel.unsubscribe();\n        }\n    }, []);\n};\n","import * as React from 'react';\nimport {ReactEventHandler, SyntheticEvent, useState} from 'react';\n\nimport {navigationPanelService} from './NavigationPanelService';\nimport {NavigationPanelComponent} from './navigation-panel-component/NavigationPanelComponent';\nimport {useChannel} from '../../common/hooks/useChannel';\n\nexport const NavigationPanelContainer = () => {\n\n    const [state, setState] = useState<INavigationPanelState>({\n        isOpen: false\n    });\n\n    useChannel<string, string>(navigationPanelService.navigationPanelOpenChannel, () => {\n        setState({...state, isOpen: true});\n    });\n\n    const toggleDrawer = (isOpen: boolean): ReactEventHandler => (event: SyntheticEvent<Element, KeyboardEvent>) => {\n        if (event && event.type === 'keydown' && (event.nativeEvent.key === 'Tab' || event.nativeEvent.key === 'Shift')) {\n            return;\n        }\n\n        setState({...state, isOpen});\n    };\n\n    return (\n        <NavigationPanelComponent isOpen={state.isOpen} toggleDrawer={toggleDrawer}/>\n    )\n};\n\ninterface INavigationPanelState {\n    isOpen: boolean;\n}\n","import {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nexport const ErrorComponent: FC<IErrorComponent> = ({isOpen, errorMessage, handleClose}) => {\n\n    return (\n        <Dialog\n            open={isOpen}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n            onClose={handleClose}\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"Something went wrong\"}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {errorMessage}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button color=\"primary\" onClick={handleClose}>\n                    Ok\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\ninterface IErrorComponent {\n    isOpen: boolean;\n    errorMessage: string;\n    handleClose: () => void;\n}\n","import React, {FC, useState} from 'react';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {ErrorComponent} from './ErrorComponent';\nimport {ErrorService} from './ErrorService';\n\nexport const ErrorContainer: FC<IErrorContainer> = ({errorService}) => {\n\n    const [state, setState] = useState<ErrorContainerState>({isOpen: false, errorMessage: ''});\n\n    useChannel<string, string>(errorService.errorChannel, (errorMessage: string) => {\n        setState({\n            isOpen: true,\n            errorMessage\n        })\n    });\n\n    const onClose = () => {\n        setState({\n            isOpen: false,\n            errorMessage: ''\n        })\n    };\n\n    return <ErrorComponent isOpen={state.isOpen} errorMessage={state.errorMessage} handleClose={onClose}/>\n};\n\ninterface IErrorContainer {\n    errorService: ErrorService;\n}\n\ninterface ErrorContainerState {\n    isOpen: boolean;\n    errorMessage: string;\n}\n","import {LinearProgress} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nexport const SpinnerComponent: FC<ISpinnerComponent> = ({isShow}) => {\n    return (\n        isShow ? <LinearProgress color=\"secondary\" /> : null\n    )\n};\n\ninterface ISpinnerComponent {\n   isShow: boolean;\n}\n","import * as React from 'react';\nimport {FC, useState} from 'react';\n\nimport {SpinnerComponent} from './SpinnerComponent';\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {SpinnerService} from './SpinnerService';\n\nexport const SpinnerContainer: FC<ISpinnerContainer> = ({spinnerService}) => {\n\n    const [isShow, setShowing] = useState(false);\n\n    useChannel<number, number>(spinnerService.spinnerCounterChannel, (spinnerCounter) => {\n        setShowing(spinnerCounter !== 0);\n    });\n\n    return <SpinnerComponent isShow={isShow}/>\n};\n\ninterface ISpinnerContainer {\n    spinnerService: SpinnerService;\n}\n","export const defaultAppState = {\n    height: 0,\n    width: 0,\n    updateContext: () => {\n    }\n};\n\nexport const DATE_FORMAT = \"dd-MM-yyyy\";\nexport const STORE_NAME = \"cards-store\";\n","import React, {FC} from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nexport const ConfirmDialogComponent: FC<IConfirmDialogComponent> = ({onClickAgree, onClickDisagree, isOpen, message, onClose}) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitle id=\"alert-dialog-title\">Warning</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClickDisagree} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={onClickAgree} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n\ninterface IConfirmDialogComponent {\n    onClickAgree: () => void;\n    onClickDisagree: () => void;\n    onClose: () => void;\n    isOpen: boolean;\n    message: string;\n}\n","import * as React from 'react';\nimport {FC} from 'react';\n\nimport {ConfirmDialogComponent} from './ConfirmDialogComponent';\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {ConfirmDialogService} from './ConfirmDialogService';\n\nexport const ConfirmDialogContainer: FC<IConfirmDialogContainer> = ({confirmDialogService}) => {\n\n    const [state, setState] = React.useState<ConfirmDialogContainerState>({\n        isOpen: false,\n        message: ''\n    });\n\n    useChannel<ConfirmDialogContainerState, ConfirmDialogContainerState>(\n        confirmDialogService.openDialogChannel,\n        (state: ConfirmDialogContainerState) => {\n            setState({...state});\n        }\n    );\n\n    const onClose = () => {\n        setState({isOpen: false, message: ''});\n        confirmDialogService.confirmationChannel.unsubscribe();\n    };\n\n    const onClickAgree = () => {\n        confirmDialogService.confirmationChannel.next(true);\n    };\n\n    const onClickDisagree = () => {\n        confirmDialogService.confirmationChannel.next(false);\n    };\n\n    return <ConfirmDialogComponent\n        isOpen={state.isOpen}\n        onClickAgree={onClickAgree}\n        onClickDisagree={onClickDisagree}\n        onClose={onClose}\n        message={state.message}\n    />\n};\n\nexport interface IConfirmDialogContainer {\n    confirmDialogService: ConfirmDialogService;\n}\n\nexport interface ConfirmDialogContainerState {\n    isOpen: boolean;\n    message: string;\n}\n","import React, {FC} from 'react';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nexport const CircularProgressComponent: FC<ICircularProgressComponent> = ({percent}) => {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" value={percent}/>\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                    percent,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n};\n\ninterface ICircularProgressComponent {\n    percent: number\n}\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nexport const ListItemMenuComponent: FC<IListItemMenuComponent> = ({onEdit, onDelete, onResetProgress}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const editClick = () => {\n        onEdit();\n        handleClose();\n    };\n\n    const resetClick = () => {\n        onResetProgress();\n        handleClose();\n    };\n\n    const deleteClick = () => {\n        onDelete();\n        handleClose();\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={editClick}>Edit</MenuItem>\n                <MenuItem onClick={resetClick}>Reset progress</MenuItem>\n                <MenuItem onClick={deleteClick}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n\ninterface IListItemMenuComponent {\n    onEdit: () => void;\n    onDelete: () => void;\n    onResetProgress: () => void;\n}\n","import React, {FC} from \"react\"\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\n\nimport {DATE_FORMAT} from '../../../../common/Constants';\nimport {ICardsGroup} from '../../../../types/ICardsGroup';\nimport {CircularProgressComponent} from '../circular-progress/CircularProgressComponent';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\n\nexport const CardsGroupsListItemComponent: FC<ICardsGroupsListItemComponent> = ({cardsGroup, onClickItem, onEditItem, onDeleteItem, onResetProgress}) => {\n\n    return <>\n        <ListItem key={cardsGroup.id} button>\n            <ListItemIcon onClick={() => onClickItem(cardsGroup.id)}>\n                <CircularProgressComponent percent={cardsGroup.percentRepeatedCards || 0}/>\n            </ListItemIcon>\n            <ListItemText\n                onClick={() => onClickItem(cardsGroup.id)}\n                primary={cardsGroup.nameCardsGroup}\n                secondary={'Last repeating date: ' + format(cardsGroup.dateRepeating ? cardsGroup.dateRepeating : new Date(), DATE_FORMAT)}\n            />\n            <ListItemIcon>\n                <ListItemMenuComponent\n                    onEdit={() => onEditItem(cardsGroup.id)}\n                    onDelete={() => onDeleteItem(cardsGroup.id)}\n                    onResetProgress={() => onResetProgress(cardsGroup.id)}\n                />\n            </ListItemIcon>\n        </ListItem>\n    </>\n};\n\ninterface ICardsGroupsListItemComponent {\n    cardsGroup: ICardsGroup;\n    onClickItem: (id: number) => void;\n    onEditItem: (id: number) => void;\n    onDeleteItem: (id: number) => void;\n    onResetProgress: (id: number) => void;\n}\n","import * as React from 'react';\nimport {FC} from 'react';\nimport Fab from '@mui/material/Fab';\nimport AddIcon from '@mui/icons-material/Add';\nimport './AddButton.css'\n\nexport const AddButton: FC<IAddButton> = ({onClick}) => {\n    return <Fab size=\"medium\" color=\"secondary\" aria-label=\"add\" className=\"add-button\" onClick={onClick}>\n        <AddIcon/>\n    </Fab>\n};\n\ninterface IAddButton {\n    onClick: () => void;\n}\n","import React, {FC} from \"react\";\nimport List from '@mui/material/List';\n\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {CardsGroupsListItemComponent} from './elements/cards-groups-list-item/CardsGroupsListItemComponent';\nimport './CardsGroupsListComponent.css'\nimport {AddButton} from '../../common/elements/add-button/AddButton';\n\nexport const CardsGroupsListComponent: FC<ICardsGroupsListComponent> = ({cardsGroups, onClickItem, onEditItem, onDeleteItem, onOpenEditor, onResetProgress}) => {\n\n    return <>\n        <List component=\"nav\" aria-label=\"contacts\" className=\"cards-groups\">\n            {cardsGroups.map((cardsGroup: ICardsGroup) => {\n                return <CardsGroupsListItemComponent\n                    key={cardsGroup.id}\n                    cardsGroup={cardsGroup}\n                    onClickItem={onClickItem}\n                    onEditItem={onEditItem}\n                    onDeleteItem={onDeleteItem}\n                    onResetProgress={onResetProgress}\n                />\n            })}\n        </List>\n        <AddButton onClick={onOpenEditor}/>\n    </>\n};\n\ninterface ICardsGroupsListComponent {\n    cardsGroups: ICardsGroup[];\n    onClickItem: (id: number) => void;\n    onEditItem: (id: number) => void;\n    onDeleteItem: (id: number) => void;\n    onOpenEditor: () => void;\n    onResetProgress: (id: number) => void;\n}\n","import {useEffect, useRef} from 'react';\n\nexport const useConstructor = (callback: () => void) => {\n\n    const value = useRef({isFirstRun: false});\n\n    useEffect(() => {\n        if (!value.current.isFirstRun) {\n            callback();\n            value.current.isFirstRun = true;\n        }\n\n        return () => {\n            value.current.isFirstRun = false;\n        }\n    }, []);\n};\n","import {useEffect, useState} from 'react';\nimport {Subscription} from 'rxjs';\n\nexport const useUnsubscribe = () => {\n\n    const [subscriptions, setSubscription] = useState<Array<Subscription>>([]);\n\n    useEffect(() => {\n        return () => {\n            subscriptions.forEach((subscription: Subscription) => {\n                if( !subscription.closed ) {\n                    subscription.unsubscribe();\n                }\n            });\n            setSubscription([]);\n        }\n    }, []);\n\n    return { setSubscription: (subscribtion: Subscription) => {\n        setSubscription([...subscriptions, subscribtion]);\n    }}\n};\n","import React, {FC, useState} from \"react\";\n\nimport {CardsGroupsListComponent} from './CardsGroupsListComponent';\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {useConstructor} from '../../common/hooks/useConstructor';\nimport {CardsGroupsListService} from './CardsGroupsListService';\nimport {Routs} from '../../common/Routs';\nimport {useHistory} from 'react-router';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {useUnsubscribe} from '../../common/hooks/useUnsubscribe';\n\nexport const CardsGroupsListContainer: FC<ICardsGroupsListContainer> = ({cardsGroupsListService, confirmDialogService}) => {\n\n    const [state, setState] = useState<CardsGroupsListContainerState>({cardsGroups: []});\n\n    const history = useHistory();\n\n    useChannel<string, ICardsGroup[]>(cardsGroupsListService.groupsListChannel, (cardsGroups: ICardsGroup[]) => {\n        setState({cardsGroups: cardsGroups})\n    });\n\n    useChannel<number, ICardsGroup[]>(cardsGroupsListService.groupDeleteChannel, () => {\n        cardsGroupsListService.groupsListChannel.next('');\n    });\n\n    useChannel<number, ICardsGroup[]>(cardsGroupsListService.resetProgressChannel, () => {\n        cardsGroupsListService.groupsListChannel.next('');\n    });\n\n    useConstructor(() => {\n        cardsGroupsListService.groupsListChannel.next('');\n    });\n\n    const { setSubscription } = useUnsubscribe();\n\n    const onClickItem = (cardsGroupID: number): void => {\n        history.push({\n            pathname: Routs.cards.path,\n            state: {\n                cardsGroupID: cardsGroupID\n            }\n        })\n    };\n\n    const onOpenEditor = () => {\n        history.push({\n            pathname: Routs.cardsGroupEditor.path\n        })\n    };\n\n    const onDeleteItem = (cardsGroupID: number) => {\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardsGroupsListService.groupDeleteChannel.next(cardsGroupID);\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to remove this group?'\n        })\n    };\n\n    const onEditItem = (cardsGroupID: number) => {\n        history.push({\n            pathname: Routs.cardsGroupEditor.path,\n            state: {\n                cardsGroupID: cardsGroupID\n            }\n        })\n    };\n\n    const onResetProgress = (cardsGroupID: number) => {\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardsGroupsListService.resetProgressChannel.next(cardsGroupID);\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to reset progress of this group?'\n        });\n    };\n\n    return <CardsGroupsListComponent\n        onClickItem={onClickItem}\n        onOpenEditor={onOpenEditor}\n        onDeleteItem={onDeleteItem}\n        onEditItem={onEditItem}\n        onResetProgress={onResetProgress}\n        cardsGroups={state.cardsGroups}/>\n};\n\ninterface CardsGroupsListContainerState {\n    cardsGroups: ICardsGroup[];\n}\n\ninterface ICardsGroupsListContainer {\n    cardsGroupsListService: CardsGroupsListService;\n    confirmDialogService: ConfirmDialogService;\n}\n","import GoogleLogin, {GoogleLoginResponse, GoogleLoginResponseOffline} from 'react-google-login';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport './GoogleAuthComponent.css'\n\nexport const GoogleAuthComponent: FC<IGoogleAuthComponent> = ({onSuccess, onFailure, height, width}) => {\n    return (\n        <div className=\"google-auth\" style={{height, width}}>\n            <GoogleLogin\n                className=\"google-auth_button\"\n                clientId=\"627973926597-tj2la0mnorvm04cqmcosu2nj3b02g6k2.apps.googleusercontent.com\"\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                scope={'profile email https://www.googleapis.com/auth/drive'}\n            />\n        </div>\n    )\n};\n\ninterface IGoogleAuthComponent {\n    onSuccess: (response: GoogleLoginResponse | GoogleLoginResponseOffline) => void\n    onFailure: (response: GoogleLoginResponse | GoogleLoginResponseOffline) => void\n    height: number,\n    width: number\n}\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {GoogleLoginResponse, GoogleLoginResponseOffline} from 'react-google-login';\nimport {useHistory} from 'react-router';\n\nimport {Routs} from '../../common/Routs';\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {GoogleAuthService} from './GoogleAuthService';\nimport {GoogleAuthComponent} from './GoogleAuthComponent';\nimport {IAppContext} from '../../types/IAppContext';\nimport {AppContext} from '../../../App';\nimport {ErrorService} from '../../parts/error-container/ErrorService';\n\nexport const GoogleAuthContainer: FC<IGoogleAuthContainer> = ({googleAuthService, errorService}) => {\n\n    const history = useHistory();\n\n    useChannel(googleAuthService.loginChannel, ()=> {\n        history.replace(Routs.googleBackups.path);\n    });\n\n    const {height, width} = React.useContext<IAppContext>(AppContext);\n\n    const onSuccess = (response: GoogleLoginResponse | GoogleLoginResponseOffline) => {\n        googleAuthService.loginChannel.next((response as GoogleLoginResponse).accessToken);\n    };\n\n    const onFailure = () => {\n        errorService.errorChannel.next('Error of connection');\n    };\n\n    return <GoogleAuthComponent\n        onSuccess={onSuccess}\n        onFailure={onFailure}\n        height={height}\n        width={width}\n    />;\n};\n\ninterface IGoogleAuthContainer {\n    googleAuthService: GoogleAuthService;\n    errorService: ErrorService;\n}\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\n\nexport const BackupMenuComponent: FC<IBackupMenuComponent> = ({backupID, onLoad, onDelete}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const onLoadBackup = () => {\n        setAnchorEl(null);\n        onLoad(backupID);\n    };\n\n    const onDeleteBackup = () => {\n        setAnchorEl(null);\n        onDelete(backupID);\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={onLoadBackup}>Load</MenuItem>\n                <MenuItem onClick={onDeleteBackup}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n\ninterface IBackupMenuComponent {\n    backupID: string;\n    onLoad: (backupID: string)=>void;\n    onDelete: (backupID: string)=>void;\n}\n","import {default as React, FC} from 'react';\nimport {ListItem, ListItemIcon, ListItemText} from '@mui/material';\n\nimport {BackupMenuComponent} from '../backup-menu-component/BackupMenuComponent';\n\nexport const BackupsListItemComponent: FC<IBackupsListItemComponent> = ({backupName, backupID, onLoad, onDelete}) => {\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={backupName}\n            />\n            <ListItemIcon>\n                <BackupMenuComponent backupID={backupID} onLoad={onLoad} onDelete={onDelete}/>\n            </ListItemIcon>\n        </ListItem>\n    );\n};\n\ninterface IBackupsListItemComponent {\n    backupName: string;\n    backupID: string;\n    onLoad: (backupID: string)=>void;\n    onDelete: (backupID: string)=>void;\n}\n","import {IGoogleDriveFile} from '../../types/IGoogleDriveFile';\nimport {BackupsListItemComponent} from './elements/backups-list-item-component/BackupsListItemComponent';\nimport {List} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {AddButton} from '../../common/elements/add-button/AddButton';\n\n\nexport const BackupsListComponent: FC<IBackupsListComponent> = ({backupsFiles, onLoad, onCreate, onDelete}) => {\n    return (\n        <>\n            <List>\n                {\n                    backupsFiles.map((backup: IGoogleDriveFile) => {\n                        return <BackupsListItemComponent\n                            key={backup.id}\n                            backupName={backup.createdTime}\n                            onLoad={onLoad}\n                            onDelete={onDelete}\n                            backupID={backup.id}/>\n                    })\n                }\n            </List>\n            <AddButton onClick={onCreate}/>\n        </>\n    )\n};\n\ninterface IBackupsListComponent {\n    backupsFiles: IGoogleDriveFile[];\n    onLoad: (backupID: string) => void;\n    onCreate: () => void;\n    onDelete: (backupID: string) => void;\n}\n","import * as React from 'react';\nimport {FC, useState} from 'react';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {GoogleBackupsService} from './GoogleBackupsService';\nimport {IGoogleDriveFile} from '../../types/IGoogleDriveFile';\nimport {BackupsListComponent} from './BackupsListComponent';\nimport {useHistory} from 'react-router';\nimport {Routs} from '../../common/Routs';\nimport {useConstructor} from '../../common/hooks/useConstructor';\nimport {SpinnerService} from '../../parts/spinner-container/SpinnerService';\nimport {useUnsubscribe} from '../../common/hooks/useUnsubscribe';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\n\nexport const GoogleBackupsContainer: FC<IGoogleBackupsContainer> = ({spinnerService, googleBackupsService, confirmDialogService}) => {\n\n    const history = useHistory();\n\n    const [state, setState] = useState<GoogleAuthComponentState>({\n        backupsFiles: []\n    });\n\n    useChannel(\n        googleBackupsService.backupsNameLoadChannel,\n        (backupsFiles: IGoogleDriveFile[]) => {\n            setState({...state, backupsFiles: backupsFiles});\n            spinnerService.spinnerCounterChannel.next(-1);\n        },\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n            history.replace(Routs.googleAuth.path);\n        }\n    );\n\n    useChannel(\n        googleBackupsService.backupLoadChannel,\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n        },\n        () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n            history.replace(Routs.googleAuth.path);\n        }\n    );\n\n    useChannel(googleBackupsService.backupDeleteChannel, () => {\n       spinnerService.spinnerCounterChannel.next(-1);\n    });\n\n    useChannel(googleBackupsService.backupUploadChannel, () => {\n        spinnerService.spinnerCounterChannel.next(-1);\n    });\n\n    useConstructor(() => {\n        googleBackupsService.backupsNameLoadChannel.next('');\n    });\n\n    const { setSubscription } = useUnsubscribe();\n\n    const onLoad = (backupID: string) => {\n        spinnerService.spinnerCounterChannel.next(1);\n        googleBackupsService.backupLoadChannel.next(backupID);\n    };\n\n    const onDelete = (backupID: string) => {\n        googleBackupsService.backupLoadChannel.next(backupID);\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                spinnerService.spinnerCounterChannel.next(1);\n                googleBackupsService.backupDeleteChannel.next(backupID);\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to delete this backup?'\n        });\n    };\n\n    const onCreate = () => {\n        spinnerService.spinnerCounterChannel.next(1);\n        googleBackupsService.backupUploadChannel.next();\n    };\n\n    return <BackupsListComponent backupsFiles={state.backupsFiles} onLoad={onLoad} onDelete={onDelete} onCreate={onCreate}/>;\n};\n\ninterface IGoogleBackupsContainer {\n    spinnerService: SpinnerService;\n    googleBackupsService: GoogleBackupsService;\n    confirmDialogService: ConfirmDialogService;\n}\n\ninterface GoogleAuthComponentState {\n    backupsFiles: IGoogleDriveFile[];\n}\n","import React, {FC} from \"react\"\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport FlagIcon from '@mui/icons-material/Flag';\n\nimport {DATE_FORMAT} from '../../../../common/Constants';\nimport {ICard} from '../../../../types/ICard';\nimport {IRangeOfKnowledge} from '../../../../types/IRangeOfKnowledge';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\n\nexport const CardsListItemComponent: FC<ICardListItemComponent> = ({card, onEditItem, onDeleteItem, onResetProgress, onClickItem}) => {\n\n    const getIconColor = (card: ICard): string => {\n        if(card.rangeOfKnowledge === IRangeOfKnowledge.DONE){\n            return 'green'\n        }\n        if(card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS){\n            return 'yellow'\n        }\n        return 'red'\n    };\n\n    return <ListItem key={card.id} button>\n        <ListItemIcon onClick={() => onClickItem(card.id)}>\n             <FlagIcon style={{color: getIconColor(card)}}/>\n        </ListItemIcon>\n        <ListItemText\n            onClick={() => onClickItem(card.id)}\n            primary={card.question}\n            secondary={'Last repeating date: ' + format(card.dateRepeating ? card.dateRepeating : new Date(), DATE_FORMAT)}\n        />\n        <ListItemIcon>\n            <ListItemMenuComponent\n                onEdit={() => onEditItem(card.id)}\n                onDelete={() => onDeleteItem(card.id)}\n                onResetProgress={() => onResetProgress(card.id)}\n            />\n        </ListItemIcon>\n    </ListItem>\n};\n\ninterface ICardListItemComponent {\n    card: ICard;\n    onEditItem: (id: number) => void;\n    onDeleteItem: (id: number) => void;\n    onResetProgress: (id: number) => void;\n    onClickItem: (id: number) => void;\n}\n","import {List} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {CardsListItemComponent} from './elements/cards-list-item/CardsListItemComponent';\nimport {ICard} from '../../types/ICard';\nimport {AddButton} from '../../common/elements/add-button/AddButton';\nimport './CardsListComponent.css'\n\nexport const CardsListComponent: FC<ICardsListComponent> = ({cards, onOpenEditor, onEditItem, onDeleteItem, onResetProgress, onClickItem}) => {\n    return (\n        <>\n            <List className=\"cards\">\n                {\n                    cards.map((card: ICard) => {\n                        return <CardsListItemComponent\n                            key={card.id}\n                            card={card}\n                            onEditItem={onEditItem}\n                            onDeleteItem={onDeleteItem}\n                            onResetProgress={onResetProgress}\n                            onClickItem={onClickItem}\n                        />\n                    })\n                }\n            </List>\n            <AddButton onClick={onOpenEditor}/>\n        </>\n    )\n};\n\ninterface ICardsListComponent {\n    cards: ICard[];\n    onOpenEditor: () => void;\n    onEditItem: (id: number) => void;\n    onDeleteItem: (id: number) => void;\n    onResetProgress: (id: number) => void;\n    onClickItem: (id: number) => void;\n}\n","import React, {FC, useState} from 'react';\n\nimport {ICard} from '../../types/ICard';\nimport {CardsListComponent} from './CardsListComponent';\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {CardsListService} from './CardsListService';\nimport {useHistory, useLocation} from 'react-router';\nimport {useConstructor} from '../../common/hooks/useConstructor';\nimport {INavigationState} from '../../types/INavigationState';\nimport {Routs} from '../../common/Routs';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {useUnsubscribe} from '../../common/hooks/useUnsubscribe';\n\nexport const CardsListContainer: FC<ICardsListContainer> = ({cardsListService, confirmDialogService}) => {\n\n    const location = useLocation<INavigationState>();\n\n    const history = useHistory();\n\n    const [state, setState] = useState<CardsListContainerState>({cards: []});\n\n    useChannel(cardsListService.cardsChannel, (cards: ICard[]) => {\n        setState({\n            cards: cards\n        });\n    });\n\n    useChannel(cardsListService.resetCardProgressChannel, (cards: ICardsGroup[]) => {\n        cardsListService.cardsChannel.next(location.state.cardsGroupID)\n    });\n\n    useChannel(cardsListService.deleteCardChannel, (cards: ICardsGroup[]) => {\n        cardsListService.cardsChannel.next(location.state.cardsGroupID)\n    });\n\n    useConstructor(() => {\n        cardsListService.cardsChannel.next(location.state.cardsGroupID)\n    });\n\n    const onOpenEditor = () => {\n        history.push({\n            pathname: Routs.cardsEditor.path,\n            state: {\n                cardsGroupID: location.state.cardsGroupID\n            }\n        })\n    };\n\n    const onEditItem = (cardID: number) => {\n        history.push({\n            pathname: Routs.cardsEditor.path,\n            state: {\n                cardsGroupID: location.state.cardsGroupID,\n                cardID: cardID\n            }\n        })\n    };\n\n    const { setSubscription } = useUnsubscribe();\n\n    const onDeleteItem = (cardID: number) => {\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardsListService.deleteCardChannel.next({cardID, cardsGroupID: location.state.cardsGroupID});\n            }\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: false,\n                message: ''\n            })\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to remove this card?'\n        })\n    };\n\n    const onResetProgress = (cardID: number) => {\n        cardsListService.resetCardProgressChannel.next({cardID, cardsGroupID: location.state.cardsGroupID})\n    };\n\n    const onClickItem = (cardID: number) => {\n        history.push({\n            pathname: Routs.cardsRepeater.path,\n            state: {\n                cardsGroupID: location.state.cardsGroupID,\n                cardID: cardID\n            }\n        })\n    };\n\n    return <CardsListComponent\n        cards={state.cards}\n        onOpenEditor={onOpenEditor}\n        onEditItem={onEditItem}\n        onDeleteItem={onDeleteItem}\n        onResetProgress={onResetProgress}\n        onClickItem={onClickItem}\n    />\n};\n\ninterface CardsListContainerState {\n    cards: ICard[];\n}\n\ninterface ICardsListContainer {\n    cardsListService: CardsListService;\n    confirmDialogService: ConfirmDialogService;\n}\n","import React, {FC} from 'react';\n\nimport {Button} from '@mui/material';\nimport {IStatistic} from '../../../../types/IStatistic';\n\nexport const StatisticComponent: FC<IRepeatingStatisticComponent> = ({statistic}) => {\n\n    return <div>\n        <Button size=\"small\">\n            <span style={{color: \"red\"}}>To Do: {statistic.todo}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"orange\"}}>In progress: {statistic.inProgress}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"green\"}}>Completed: {statistic.done}</span>\n        </Button>\n    </div>\n};\n\ninterface IRepeatingStatisticComponent {\n    statistic: IStatistic\n}\n","import Typography from '@mui/material/Typography';\nimport React, {FC} from 'react';\nimport {List} from '@mui/material';\n\nexport const AnswerComponent: FC<IExpandableTextComponent> = ({text, height, onClickText}) => {\n\n    const getText = () => {\n        return text;\n    };\n\n    return <>\n        <Typography color=\"textSecondary\" gutterBottom onClick={onClickText}\n                    style={{paddingTop: 0, height: height, overflow: 'auto', whiteSpace: 'pre-wrap'}}>\n            <List style={{paddingTop: 0}}>\n                {getText()}\n            </List>\n        </Typography>\n    </>\n};\n\ninterface IExpandableTextComponent {\n    text: string\n    onClickText: () => void\n    height: number\n}\n","import React, {FC} from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport {Button, CardActions, IconButton} from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\n\nimport {ICard} from '../../types/ICard';\nimport {StatisticComponent} from './elements/statistic/StatisticComponent';\nimport {AnswerComponent} from './elements/answer/AnswerComponent';\nimport \"./CardsRepeaterComponent.css\"\nimport {IStatistic} from '../../types/IStatistic';\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\n\nexport const CardsRepeaterComponent: FC<ICardsRepeaterComponent> = (\n    {\n        card,\n        answerCardHeight,\n        isQuestionSide,\n        onClickCard,\n        onClick,\n        statistic,\n        onEditCard,\n        onBackClick\n    }\n) => {\n\n    return card ? <div className=\"cards-repeater\">\n            <StatisticComponent statistic={statistic}/>\n\n            <div className=\"cards-repeater_title\">\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    {isQuestionSide ? 'Question' : 'Answer'}\n                </Typography>\n                <IconButton color=\"inherit\" onClick={onEditCard}>\n                    <EditIcon/>\n                </IconButton>\n            </div>\n\n            {isQuestionSide ? <Card>\n                <CardContent onClick={onClickCard} style={{height: answerCardHeight}}>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                        {card.question}\n                    </Typography>\n                </CardContent>\n            </Card> : <Card className=\"cards-repeater\">\n                <CardContent style={{height: answerCardHeight}}>\n                    <AnswerComponent height={answerCardHeight - 20} text={card.answer} onClickText={() => onClickCard()}/>\n                    { card.rangeOfKnowledge !== IRangeOfKnowledge.DONE ? <CardActions className=\"cards-repeater_buttons-container\">\n                        <Button size=\"small\" color=\"primary\" onClick={() => onClick(true)}>\n                            Yes\n                        </Button>\n                        <Button size=\"small\" color=\"primary\" onClick={() => onClick(false)}>\n                            No\n                        </Button>\n                    </CardActions> : <div>Repeated</div> }\n                </CardContent>\n            </Card>}\n        </div> :\n        <>\n            <span>All cards repeated</span>\n            <Button size=\"small\" color=\"primary\" onClick={onBackClick}>\n                Go back\n            </Button>\n        </>\n};\n\ninterface ICardsRepeaterComponent {\n    card: ICard | undefined;\n    onClick: (isUnderstandable: boolean) => void;\n    isQuestionSide: boolean;\n    onClickCard: () => void;\n    statistic: IStatistic;\n    answerCardHeight: number;\n    onEditCard: () => void;\n    onBackClick: () => void;\n}\n","import {useHistory, useLocation} from 'react-router';\nimport React, {FC, useContext, useState} from 'react';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {ICard} from '../../types/ICard';\nimport {useConstructor} from '../../common/hooks/useConstructor';\nimport {CardsRepeaterService} from './CardsRepeaterService';\nimport {CardsRepeaterComponent} from './CardsRepeaterComponent';\nimport {Routs} from '../../common/Routs';\nimport {IRepeatingArgs} from '../../types/IRepeatingArgs';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {IStatistic} from '../../types/IStatistic';\nimport {INavigationState} from '../../types/INavigationState';\nimport {AppContext} from '../../../App';\nimport {IAppContext} from '../../types/IAppContext';\n\nexport const CardRepeaterContainer: FC<ICardRepeaterContainer> = ({cardsRepeaterService}) => {\n\n    const location = useLocation<INavigationState>();\n\n    const history = useHistory();\n\n    const defaultStatisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    const [state, setState] = useState<CardRepeaterContainerState>({\n        card: undefined,\n        isQuestionSide: true\n    });\n\n    const [statistic, setStatistic] = useState<IStatistic>(defaultStatisticValue);\n\n    useChannel<{ cardsGroupID: number, cardID: number }, ICard | undefined>(cardsRepeaterService.cardChannel, (card: ICard | undefined) => {\n        setState({\n            card: card,\n            isQuestionSide: true\n        });\n        cardsRepeaterService.statisticChannel.next('');\n    });\n\n    useChannel<number, ICard | null>(cardsRepeaterService.currentCardChannel, (card: ICard | null) => {\n\n        if(card) {\n            setState({\n                card: card,\n                isQuestionSide: true\n            });\n        } else {\n            cardsRepeaterService.cardChannel.next({\n                cardsGroupID: location.state.cardsGroupID,\n                cardID: location.state.cardID\n            });\n        }\n    });\n\n    useChannel<string, IStatistic>(cardsRepeaterService.statisticChannel, (statistic: IStatistic) => {\n        setStatistic(() => statistic)\n    });\n\n    useChannel<IRepeatingArgs, ICardsGroup[]>(cardsRepeaterService.repeatingResultChannel, () => {\n\n        cardsRepeaterService.cardChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            cardID: location.state.cardID\n        });\n    });\n\n    useConstructor(() => {\n        cardsRepeaterService.currentCardChannel.next(location.state.cardsGroupID);\n        cardsRepeaterService.statisticChannel.next('');\n    });\n\n    const value = useContext<IAppContext>(AppContext);\n\n    const onClick = (isKnown: boolean) => {\n\n        if (state.card) {\n            cardsRepeaterService.repeatingResultChannel.next({\n                isKnown: isKnown,\n                cardID: state.card.id,\n                cardsGroupID: location.state.cardsGroupID\n            });\n        } else {\n            setState({\n                card: undefined,\n                isQuestionSide: false\n            });\n        }\n    };\n\n    const onClickCard = () => {\n        setState({\n            ...state,\n            isQuestionSide: !state.isQuestionSide\n        })\n    };\n\n    const onEditCard = () => {\n        if(state.card) {\n            history.push({\n                pathname: Routs.cardsEditor.path,\n                state: {\n                    cardsGroupID: location.state.cardsGroupID,\n                    cardID: state.card.id\n                }\n            })\n        }\n    };\n\n    const onBackClick = () => {\n        history.replace(Routs.cardsGroups.path);\n    };\n\n    return <CardsRepeaterComponent\n        answerCardHeight={value.height - 220}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={onClickCard}\n        onClick={onClick}\n        card={state.card}\n        statistic={statistic}\n        onEditCard={onEditCard}\n        onBackClick={onBackClick}\n    />\n};\n\ninterface CardRepeaterContainerState {\n    card: ICard | undefined,\n    isQuestionSide: boolean\n}\n\ninterface ICardRepeaterContainer {\n    cardsRepeaterService: CardsRepeaterService;\n}\n","import * as React from 'react';\nimport {FC, useRef} from 'react';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {LocalBackupsService} from './LocalBackupsService';\nimport {Button} from '@mui/material';\nimport {useUnsubscribe} from '../../common/hooks/useUnsubscribe';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {SpinnerService} from '../../parts/spinner-container/SpinnerService';\n\nexport const LocalBackupsContainer: FC<ILocalBackupsContainer> = ({localBackupsService, confirmDialogService, spinnerService}) => {\n\n    const fileBuffer = useRef(null);\n\n    useChannel(\n        localBackupsService.localBackupChannel\n    );\n\n    useChannel(\n        localBackupsService.loadBackupChannel, () => {\n            spinnerService.spinnerCounterChannel.next(-1);\n        }\n    );\n\n    const { setSubscription } = useUnsubscribe();\n\n    const handleFileSelect = (event: any) => {\n        const file = event.target.files[0];\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = (readerEvent: any) => {\n            const games: string = readerEvent.target.result;\n\n            const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n                if (isConfirm) {\n                    spinnerService.spinnerCounterChannel.next(1);\n                    localBackupsService.loadBackupChannel.next(games);\n                }\n\n                confirmDialogService.openDialogChannel.next({\n                    isOpen: false,\n                    message: ''\n                })\n            });\n\n            setSubscription(subscription);\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: true,\n                message: 'Do you want to load this backup, your current changes could be removed?'\n            });\n        };\n        reader.readAsText(file);\n    };\n\n    return <>\n        <input type=\"file\" onChange={handleFileSelect}/>\n        <a ref={fileBuffer}></a>\n        <Button size=\"small\" onClick={() => localBackupsService.localBackupChannel.next()}>\n            Save\n        </Button>\n    </>\n};\n\ninterface ILocalBackupsContainer {\n    localBackupsService: LocalBackupsService;\n    confirmDialogService: ConfirmDialogService;\n    spinnerService: SpinnerService;\n}\n","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {Button, TextField} from '@mui/material';\nimport './CardsGroupsEditorComponent.css'\n\nexport const CardsGroupsEditorComponent: FC<ICardsGroupsEditorComponent> = ({groupName, onChangeGroupName, onSaveGroup}) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeGroupName(event.target.value);\n    };\n\n    return <div className=\"group-editor\">\n        <TextField\n            className=\"group-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Group name\"\n            onChange={onChange}\n            value={groupName}\n            variant=\"filled\"\n        />\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveGroup()}>\n            Save\n        </Button>\n    </div>\n};\n\ninterface ICardsGroupsEditorComponent {\n    groupName: string;\n    onChangeGroupName: (groupName: string) => void;\n    onSaveGroup: () => void;\n}\n","import * as React from 'react';\nimport {FC, useState} from 'react';\nimport {useHistory, useLocation} from 'react-router';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {CardsGroupsEditorService} from './CardsGroupsEditorService';\nimport {CardsGroupsEditorComponent} from './CardsGroupsEditorComponent';\nimport {INavigationState} from '../../types/INavigationState';\nimport {useConstructor} from '../../common/hooks/useConstructor';\n\nexport const CardsGroupsEditorContainer: FC<ICardsGroupsEditorContainer> = ({cardsGroupsEditorService}) => {\n\n    const location = useLocation<INavigationState>();\n\n    const history = useHistory();\n\n    const [state, setState] = useState<CardsGroupsEditorState>({\n        cardsGroup: {\n            cards: [],\n            nameCardsGroup: '',\n            dateRepeating: new Date().getTime(),\n            id: new Date().getTime(),\n            percentRepeatedCards: 0\n        }\n    });\n\n    useChannel<ICardsGroup, ICardsGroup[]>(cardsGroupsEditorService.groupEditingChannel);\n\n    useChannel<number, ICardsGroup>(cardsGroupsEditorService.groupChannel, (cardsGroup: ICardsGroup) => {\n        setState({\n            cardsGroup\n        })\n    });\n\n    useConstructor(() => {\n        let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n        cardsGroupsEditorService.groupChannel.next(cardsGroupID);\n    });\n\n    const onChangeGroupName = (groupName: string) => {\n        setState({\n            cardsGroup: {\n                ...state.cardsGroup,\n                nameCardsGroup: groupName\n            }\n        })\n    };\n\n    const onSaveGroup = () => {\n        cardsGroupsEditorService.groupEditingChannel.next(state.cardsGroup);\n        history.goBack();\n    };\n\n    return <CardsGroupsEditorComponent\n        groupName={state.cardsGroup.nameCardsGroup}\n        onChangeGroupName={onChangeGroupName}\n        onSaveGroup={onSaveGroup}\n    />\n};\n\ninterface CardsGroupsEditorState {\n    cardsGroup: ICardsGroup\n}\n\ninterface ICardsGroupsEditorContainer {\n    cardsGroupsEditorService: CardsGroupsEditorService\n}\n","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {Button, MenuItem, Select, SelectChangeEvent, TextField} from '@mui/material';\nimport './CardsEditorComponent.css'\nimport {ISimplifiedCardsGroup} from '../../types/ISimplifiedCardsGroup';\n\nexport const CardsEditorComponent: FC<ICardsGroupsEditorComponent> = ({\n                                                                          answer,\n                                                                          question,\n                                                                          onChangeAnswer,\n                                                                          onChangeQuestion,\n                                                                          onSaveCard,\n                                                                          cardsGroups,\n                                                                          currentCardsGroup,\n    onChangeCardsGroup\n}) => {\n\n    const changeAnswer = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeAnswer(event.target.value);\n    };\n\n    const changeQuestion = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeQuestion(event.target.value);\n    };\n\n    const changeGroup = (event: SelectChangeEvent) => {\n        onChangeCardsGroup(Number(event.target.value));\n    };\n\n    return <div className=\"cards-editor\">\n        <TextField\n            className=\"cards-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Question\"\n            multiline\n            onChange={changeQuestion}\n            value={question}\n            variant=\"filled\"\n        />\n        <TextField\n            className=\"cards-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Answer\"\n            multiline\n            onChange={changeAnswer}\n            value={answer}\n            variant=\"filled\"\n        />\n        <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            className=\"cards-editor_text\"\n            value={currentCardsGroup.id.toString()}\n            label={currentCardsGroup.nameCardsGroup}\n            onChange={changeGroup}\n            autoWidth\n        >\n            {cardsGroups.map((cardsGroup: ISimplifiedCardsGroup) => (\n                <MenuItem\n                    key={cardsGroup.id}\n                    value={cardsGroup.id.toString()}\n                >\n                    {cardsGroup.nameCardsGroup}\n                </MenuItem>\n            ))}\n        </Select>\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveCard()}>\n            Save\n        </Button>\n    </div>\n};\n\ninterface ICardsGroupsEditorComponent {\n    answer: string;\n    question: string;\n    onChangeAnswer: (answer: string) => void;\n    onChangeQuestion: (question: string) => void;\n    onSaveCard: () => void;\n    currentCardsGroup: ISimplifiedCardsGroup;\n    cardsGroups: ISimplifiedCardsGroup[];\n    onChangeCardsGroup: (cardsGroupID: number) => void;\n}\n","import * as React from 'react';\nimport {FC, useState} from 'react';\nimport {useHistory, useLocation} from 'react-router';\n\nimport {useChannel} from '../../common/hooks/useChannel';\nimport {CardsEditorService} from './CardsEditorService';\nimport {CardsEditorComponent} from './CardsEditorComponent';\nimport {INavigationState} from '../../types/INavigationState';\nimport {useConstructor} from '../../common/hooks/useConstructor';\nimport {ICard} from '../../types/ICard';\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\nimport {ISimplifiedCardsGroup} from '../../types/ISimplifiedCardsGroup';\n\nexport const CardsEditorContainer: FC<ICardsGroupsEditorContainer> = ({cardsEditorService}) => {\n\n    const location = useLocation<INavigationState>();\n\n    const history = useHistory();\n\n    const [state, setState] = useState<CardsGroupsEditorState>({\n        card: {\n            rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n            answer: '',\n            question: '',\n            dateRepeating: 0,\n            id: new Date().getTime()\n        },\n        currentCardsGroup: {\n            id: 0,\n            nameCardsGroup: ''\n        },\n        cardsGroups: []\n    });\n\n    useChannel<{ card: ICard, cardsGroupID: number }, ICard>(cardsEditorService.cardEditingChannel);\n\n    useChannel<number, { currentCardsGroup: ISimplifiedCardsGroup | undefined, cardsGroups: ISimplifiedCardsGroup[] }>(\n        cardsEditorService.simplifiedCardsGroupsChannel,\n        ({currentCardsGroup, cardsGroups}) => {\n            if (currentCardsGroup) {\n                setState((prevState) => { return  {\n                    ...prevState,\n                    cardsGroups,\n                    currentCardsGroup\n                }})\n            } else {\n                setState((newState) =>{ return  {\n                    ...newState,\n                    currentCardsGroup: state.currentCardsGroup,\n                    cardsGroups\n                }})\n            }\n        }\n    );\n\n    useChannel<{ cardID: number, cardsGroupID: number }, ICard | undefined>(cardsEditorService.cardChannel, (card: ICard | undefined) => {\n        if (card) {\n            setState({\n                ...state,\n                card\n            })\n        }\n    });\n\n    useConstructor(() => {\n        let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n        let cardID = location.state ? location.state.cardID : -1;\n        cardsEditorService.cardChannel.next({cardID, cardsGroupID});\n\n        cardsEditorService.simplifiedCardsGroupsChannel.next(cardsGroupID);\n    });\n\n    const onChangeQuestion = (question: string) => {\n        setState({\n            card: {\n                ...state.card,\n                question\n            },\n            currentCardsGroup: state.currentCardsGroup,\n            cardsGroups: state.cardsGroups\n        })\n    };\n\n    const onChangeAnswer = (answer: string) => {\n        setState({\n            card: {\n                ...state.card,\n                answer\n            },\n            currentCardsGroup: state.currentCardsGroup,\n            cardsGroups: state.cardsGroups\n        })\n    };\n\n    const onChangeCardsGroup = (cardsGroupID: number) => {\n        cardsEditorService.simplifiedCardsGroupsChannel.next(cardsGroupID);\n    };\n\n    const onSaveCard = () => {\n        cardsEditorService.cardEditingChannel.next({card: state.card, cardsGroupID: state.currentCardsGroup.id});\n        history.goBack();\n    };\n\n    return <CardsEditorComponent\n        question={state.card.question}\n        answer={state.card.answer}\n        onChangeQuestion={onChangeQuestion}\n        onChangeAnswer={onChangeAnswer}\n        onSaveCard={onSaveCard}\n        currentCardsGroup={state.currentCardsGroup}\n        cardsGroups={state.cardsGroups}\n        onChangeCardsGroup={onChangeCardsGroup}\n    />\n};\n\ninterface CardsGroupsEditorState {\n    card: ICard;\n    currentCardsGroup: ISimplifiedCardsGroup;\n    cardsGroups: ISimplifiedCardsGroup[];\n}\n\ninterface ICardsGroupsEditorContainer {\n    cardsEditorService: CardsEditorService\n}\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {Redirect, Route, Switch} from 'react-router';\n\nimport {Routs} from '../../common/Routs';\nimport {CardsGroupsListContainer} from '../../pages/cards-groups-list/CardsGroupsListContainer';\nimport {GoogleAuthContainer} from '../../pages/google-auth/GoogleAuthContainer';\nimport {GoogleBackupsContainer} from '../../pages/google-backups/GoogleBackupsContainer';\nimport {CardsListContainer} from '../../pages/cards-list/CardsListContainer';\nimport {CardRepeaterContainer} from '../../pages/cards-repeater/CardsRepeaterContainer';\nimport {LocalBackupsContainer} from '../../pages/local-backup/LocalBackupsContainer';\nimport {CardsGroupsEditorContainer} from '../../pages/cards-groups-editor/CardsGroupsEditorContainer';\nimport {CardsGroupsListService} from '../../pages/cards-groups-list/CardsGroupsListService';\nimport {CardsGroupsEditorService} from '../../pages/cards-groups-editor/CardsGroupsEditorService';\nimport {ErrorService} from '../error-container/ErrorService';\nimport {GoogleAuthService} from '../../pages/google-auth/GoogleAuthService';\nimport {GoogleBackupsService} from '../../pages/google-backups/GoogleBackupsService';\nimport {SpinnerService} from '../spinner-container/SpinnerService';\nimport {ConfirmDialogService} from '../confirm-dialog/ConfirmDialogService';\nimport {CardsEditorContainer} from '../../pages/cards-editor/CardsEditorContainer';\nimport {CardsEditorService} from '../../pages/cards-editor/CardsEditorService';\nimport {CardsListService} from '../../pages/cards-list/CardsListService';\nimport {CardsRepeaterService} from '../../pages/cards-repeater/CardsRepeaterService';\nimport {LocalBackupsService} from '../../pages/local-backup/LocalBackupsService';\n\n\nexport const NavigationContainer: FC<INavigationContainer> = ({\n                                                                  cardsGroupsListService,\n                                                                  cardsGroupsEditorService,\n                                                                  errorService,\n                                                                  googleAuthService,\n                                                                  googleBackupsService,\n                                                                  spinnerService,\n                                                                  confirmDialogService,\n                                                                  cardsEditorService,\n    cardsListService,\n    cardsRepeaterService,\n                                                                  localBackupsService\n                                                              }) => {\n\n    return <Switch>\n        <Redirect exact from=\"/\" to={Routs.cardsGroups.path}/>\n        <Route path={Routs.cardsGroups.path}>\n            <CardsGroupsListContainer cardsGroupsListService={cardsGroupsListService}\n                                      confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.googleAuth.path}>\n            <GoogleAuthContainer googleAuthService={googleAuthService} errorService={errorService}/>\n        </Route>\n        <Route path={Routs.googleBackups.path}>\n            <GoogleBackupsContainer googleBackupsService={googleBackupsService} spinnerService={spinnerService} confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.cards.path}>\n            <CardsListContainer cardsListService={cardsListService} confirmDialogService={confirmDialogService}/>\n        </Route>\n        <Route path={Routs.cardsRepeater.path}>\n            <CardRepeaterContainer cardsRepeaterService={cardsRepeaterService}/>\n        </Route>\n        <Route path={Routs.localBackups.path}>\n            <LocalBackupsContainer localBackupsService={localBackupsService} confirmDialogService={confirmDialogService} spinnerService={spinnerService}/>\n        </Route>\n        <Route path={Routs.cardsGroupEditor.path}>\n            <CardsGroupsEditorContainer cardsGroupsEditorService={cardsGroupsEditorService}/>\n        </Route>\n        <Route path={Routs.cardsEditor.path}>\n            <CardsEditorContainer cardsEditorService={cardsEditorService}/>\n        </Route>\n    </Switch>\n};\n\ninterface INavigationContainer {\n    cardsGroupsListService: CardsGroupsListService;\n    cardsGroupsEditorService: CardsGroupsEditorService;\n    errorService: ErrorService;\n    googleAuthService: GoogleAuthService;\n    googleBackupsService: GoogleBackupsService;\n    spinnerService: SpinnerService;\n    confirmDialogService: ConfirmDialogService;\n    cardsEditorService: CardsEditorService;\n    cardsListService: CardsListService;\n    cardsRepeaterService: CardsRepeaterService;\n    localBackupsService: LocalBackupsService;\n}\n","import {Observable, of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\nimport {ajax, AjaxResponse} from 'rxjs/ajax';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {IGoogleDriveFile} from '../../types/IGoogleDriveFile';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {Channel} from '../../common/Channel';\n\nexport class GoogleBackupsService {\n\n    public backupsNameLoadChannel: Channel<string, IGoogleDriveFile[]>;\n    public backupLoadChannel: Channel<string, ICardsGroup[]>;\n    public backupUploadChannel: Channel<void, string>;\n    public backupDeleteChannel: Channel<string, AjaxResponse<string>>;\n\n    private backupFileName = 'my-cards.json';\n    private backupFolderName = 'my-cards';\n    private googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    private googleDriveUploadAPI = \"https://www.googleapis.com/upload/drive/v3/files/\";\n    private searchFilesURI = this.googleDriveFilesAPI + '?fields=files(id,createdTime)&q=name%20contains%20';\n    private searchFolderURI = this.googleDriveFilesAPI + '?q=name%20contains%20';\n    private getFilesAdditionalPartURI = '?alt=media';\n    private googleDriveFolderType = 'application/vnd.google-apps.folder';\n\n    constructor(private storageService: StorageService) {\n\n        this.backupsNameLoadChannel = new Channel(() => of('').pipe(\n            switchMap(() => storageService.getAuthToken()),\n            switchMap(\n                (authToken: string): Observable<IGoogleDriveFile[]> => this.getBackupFiles(authToken)\n            ),\n            map((googleDriveFiles: IGoogleDriveFile[]) => {\n                return googleDriveFiles.map((googleDriveFile: IGoogleDriveFile) => {\n                    return {...googleDriveFile, createdTime: googleDriveFile.createdTime.slice(0, 10)};\n                });\n            })\n        ));\n\n        this.backupLoadChannel = new Channel((backupID: string) => of('').pipe(\n            switchMap((): Observable<ICardsGroup[]> => this.loadBackupFile(backupID))\n        ));\n\n        this.backupUploadChannel = new Channel(() => of('').pipe(\n            switchMap(() => storageService.getAuthToken()),\n            switchMap((authToken: string) => this.createNewBackup(authToken))\n        ));\n\n        this.backupDeleteChannel = new Channel((fileID: string) => of(\"\").pipe(\n            switchMap(() => this.deleteBackupFile(fileID)),\n            tap(() => {\n                this.backupsNameLoadChannel.next('')\n            })\n        ));\n    }\n\n    public createNewBackup(authToken: string): Observable<string> {\n        return this.getBackupFolder(authToken)\n            .pipe(\n                switchMap((folders: IGoogleDriveFile[]) => {\n                    if (folders) {\n                        let foundedFolder = folders.find((file) => {\n                            return file.mimeType === this.googleDriveFolderType\n                        });\n                        if (foundedFolder) {\n                            return of(foundedFolder.id);\n                        } else {\n                            return this.createBackupFolder(authToken);\n                        }\n                    } else {\n                        return this.createBackupFolder(authToken);\n                    }\n                }),\n                switchMap((folderId: string) => {\n                    return this.createNewBackupFile(\n                        authToken,\n                        folderId\n                    );\n                }),\n                switchMap((fileId: string) => {\n                    return this.uploadBackupFile(\n                        authToken,\n                        fileId\n                    )\n                }),\n                tap(() => {\n                    this.backupsNameLoadChannel.next('');\n                })\n            );\n    }\n\n    public getBackupFiles(token: string): Observable<IGoogleDriveFile[]> {\n        return ajax<{files: IGoogleDriveFile[]}>(\n            {\n                url: `${this.searchFilesURI}'${this.backupFileName}'`,\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                },\n                method: 'GET'\n            }\n        ).pipe(\n            map((result: AjaxResponse<{files: IGoogleDriveFile[]}>) => {\n                return result.response.files;\n            })\n        );\n    }\n\n    public loadBackupFile(fileId: string): Observable<ICardsGroup[]> {\n        return of('').pipe(\n            switchMap(() => this.storageService.getAuthToken()),\n            switchMap((authToken: string) => ajax<ICardsGroup[]>(\n                {\n                    url: this.googleDriveFilesAPI + fileId + this.getFilesAdditionalPartURI,\n                    headers: {\n                        \"Authorization\": \"Bearer \" + authToken\n                    },\n                    method: \"GET\"\n                }\n            )),\n            map((result: AjaxResponse<ICardsGroup[]>) => {\n                this.storageService.setBackupToStorage(result.response);\n                return result.response;\n            })\n        );\n    }\n\n\n    public getBackupFolder(token: string): Observable<IGoogleDriveFile[]> {\n        return ajax<{files:IGoogleDriveFile[]}>(\n            {\n                url: `${this.searchFolderURI}'${this.backupFolderName}'`,\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                },\n                method: 'GET'\n            }\n        ).pipe(\n            map((result: AjaxResponse<{files:IGoogleDriveFile[]}>) => {\n                return result.response.files;\n            })\n        );\n    }\n\n    public deleteBackupFile(fileId: string): Observable<AjaxResponse<string>> {\n        return of('').pipe(\n            switchMap(() => this.storageService.getAuthToken()),\n            switchMap((authToken: string) => ajax<string>(\n                {\n                    url: this.googleDriveFilesAPI + fileId,\n                    headers: {\n                        'Authorization': 'Bearer ' + authToken,\n                        'Content-Type': 'application/json'\n                    },\n                    method: 'DELETE'\n                }\n            ))\n        );\n    }\n\n    public createNewBackupFile(token: string, id: string): Observable<string> {\n        return ajax<{id:string}>(\n            {\n                url: this.googleDriveFilesAPI,\n                headers: {\n                    'Authorization': 'Bearer ' + token,\n                    'Content-Type': 'application/json'\n                },\n                body: {\n                    parents: [id],\n                    name: this.backupFileName\n                },\n                method: 'POST'\n            }\n        ).pipe(\n            map((result: AjaxResponse<{id:string}>) => {\n                return result.response.id;\n            })\n        );\n    }\n\n    public createBackupFolder(token: string): Observable<string> {\n        return ajax<{id:string}>(\n            {\n                url: this.googleDriveFilesAPI,\n                headers: {\n                    'Authorization': 'Bearer ' + token,\n                    'Content-Type': 'application/json'\n                },\n                body: {\n                    name: this.backupFolderName,\n                    mimeType: 'application/vnd.google-apps.folder'\n                },\n                method: 'POST'\n            }\n        ).pipe(\n            map((result: AjaxResponse<{id:string}>) => {\n                return result.response.id;\n            })\n        );\n    }\n\n    public uploadBackupFile(token: string, fileId: string): Observable<string> {\n        return of('').pipe(\n            switchMap(() => this.storageService.getBackupFromStorage()),\n            switchMap((cardsGroups: ICardsGroup[]) => ajax(\n                {\n                    url: this.googleDriveUploadAPI + fileId,\n                    headers: {\n                        'Authorization': 'Bearer ' + token\n                    },\n                    body: JSON.stringify(cardsGroups, null, 4),\n                    responseType: 'text',\n                    method: 'PATCH'\n                }\n            ).pipe(\n                map(() => {\n                    return fileId;\n                })\n            ))\n        )\n    }\n\n}\n","import {from, Observable} from 'rxjs';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {DataBaseService} from '../../data-base/DataBaseService';\n\nexport class StorageService {\n\n    private cardsStorageID = 'cards-local-storage';\n    private authTokenLocalStorageID = 'auth-token';\n\n    constructor(private dataBaseService: DataBaseService) {\n    }\n\n    public getBackupFromStorage = () : Observable<ICardsGroup[]> => {\n        return from(this.getBackupFromDataBase());\n    };\n\n    private getBackupFromDataBase = async () => {\n        let backup = null;\n\n        try {\n            backup = await this.dataBaseService.get<ICardsGroup[]>(this.cardsStorageID);\n        } catch (e) {\n            console.error(e);\n            return backup;\n        }\n        if(backup) {\n            return backup;\n        } else {\n            return [];\n        }\n    };\n\n    public setBackupToStorage(cardsGroups: ICardsGroup[]): Observable<ICardsGroup[]> {\n        return from(this.setBackupToDataBase(cardsGroups));\n    }\n\n    private setBackupToDataBase = async (cardsGroups: ICardsGroup[]) => {\n        try {\n            await this.dataBaseService.set(this.cardsStorageID, cardsGroups);\n        } catch (e) {\n            console.error(e);\n        }\n        return cardsGroups;\n    };\n\n    public getAuthToken(): Observable<string> {\n        return from(new Promise<string>((resolve, reject) => {\n            const authToken = localStorage.getItem(this.authTokenLocalStorageID);\n            if(authToken) {\n                resolve(authToken);\n            } else {\n                reject('Auth token is empty')\n            }\n        }));\n    }\n\n    public setAuthToken(authToken: string): Observable<string> {\n        return from(new Promise<string>((resolve) => {\n            localStorage.setItem(this.authTokenLocalStorageID, authToken);\n            resolve(authToken);\n        }));\n    }\n}\n","import {Observable, of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {Channel} from '../../common/Channel';\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\n\nexport class CardsListService {\n    public cardsChannel: Channel<number, ICard[]>;\n    public resetCardProgressChannel: Channel<{cardID: number, cardsGroupID: number}, ICardsGroup[]>;\n    public deleteCardChannel: Channel<{cardID: number, cardsGroupID: number}, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.cardsChannel = new Channel((cardsGroupID: number) => of('').pipe(\n            switchMap(() => this.getCards(cardsGroupID))\n        ));\n\n        this.resetCardProgressChannel = new Channel(({cardID, cardsGroupID}) => storageService.getBackupFromStorage().pipe(\n            map((cardsGroups: ICardsGroup[]) => {\n                const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n                let cardIndex = -1;\n\n                if(cardGroupIndex >=0) {\n                    cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n                }\n\n                if(cardGroupIndex >= 0 && cardIndex >= 0) {\n                    cardsGroups[cardGroupIndex].cards[cardIndex].rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n                }\n\n                return cardsGroups;\n            }),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackupToStorage(cardsGroups);\n            })\n        ));\n\n        this.deleteCardChannel = new Channel(({cardID, cardsGroupID}) => storageService.getBackupFromStorage().pipe(\n            map((cardsGroups: ICardsGroup[]) => {\n                const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n                let cardIndex = -1;\n\n                if(cardGroupIndex >=0) {\n                    cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n                }\n\n                if(cardGroupIndex >= 0 && cardIndex >= 0) {\n                    cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.filter((card: ICard) => card.id !== cardID);\n                }\n\n                return cardsGroups;\n            }),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackupToStorage(cardsGroups);\n            })\n        ));\n    }\n\n    getCards(cardsGroupID: number): Observable<ICard[]> {\n        return of('').pipe(\n            switchMap(() => this.storageService.getBackupFromStorage()),\n            map((cardsGroups: ICardsGroup[]) => {\n                const foundCardsGroup = cardsGroups.find((cardsGroup: ICardsGroup) => {\n                    return cardsGroup.id === cardsGroupID;\n                });\n\n                return foundCardsGroup ? foundCardsGroup.cards : [];\n            })\n        )\n    }\n}\n","import {of} from 'rxjs';\nimport {map, switchMap} from 'rxjs/operators';\n\nimport {ICard} from '../../types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\nimport {IRepeatingArgs} from '../../types/IRepeatingArgs';\nimport {Channel} from '../../common/Channel';\nimport {IStatistic} from '../../types/IStatistic';\n\nexport class CardsRepeaterService {\n    public currentCardChannel: Channel<number, ICard | null>;\n    public cardChannel: Channel<{ cardsGroupID: number, cardID: number }, ICard | undefined>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public statisticChannel: Channel<string, IStatistic>;\n\n    private statisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    private currentCardID: number = 0;\n\n    constructor(private storageService: StorageService) {\n        this.cardChannel = new Channel(({cardsGroupID, cardID}) => of('').pipe(\n            switchMap(() => this.getCards(cardsGroupID, cardID)),\n            map((cards: ICard[]) => this.getCardForRepeating(cards))\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.writeRangeOfKnowledge(args);\n        });\n\n        this.currentCardChannel = new Channel((cardsGroupID: number) => of('').pipe(\n            switchMap(() => this.getCards(cardsGroupID, this.currentCardID)),\n            map((cards: ICard[]) => {\n                if(cards.length === 1) {\n                    return cards[0];\n                } else {\n                    return null;\n                }\n            })\n        ));\n\n        this.statisticChannel = new Channel(() => of(this.statisticValue));\n    }\n\n    getCards(cardsGroupID: number, cardID: number) {\n        return this.storageService.getBackupFromStorage().pipe(\n            map((cardsGroups: ICardsGroup[]) => {\n\n                const foundCardsGroup = cardsGroups.find((cardsGroup: ICardsGroup) => {\n                    return !cardsGroupID || cardsGroup.id === cardsGroupID;\n                });\n\n                let foundCards: Array<ICard> = [];\n\n                if (foundCardsGroup) {\n                    foundCards = foundCardsGroup.cards;\n\n                    if (cardID) {\n\n                        const foundCard = foundCards.find((card: ICard) => {\n                            return card.id === cardID;\n                        });\n\n                        if (foundCard) {\n                            foundCards = [];\n                            foundCards.push(foundCard)\n                        }\n                    }\n                }\n\n                return foundCards;\n            })\n        );\n    }\n\n    writeRangeOfKnowledge = (args: IRepeatingArgs) => {\n        return of('').pipe(\n            switchMap(() => this.storageService.getBackupFromStorage()),\n            map((cardsGroups: ICardsGroup[]) => {\n                cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n                    if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n                        cardsGroup.cards.forEach((card: ICard) => {\n                            if (!args.cardID || card.id === args.cardID) {\n                                if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n                                    card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                                } else if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                                    card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                                } else if (!args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                                    card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n                                }\n                            }\n                        });\n                    }\n                });\n\n\n                return cardsGroups;\n            }),\n            switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackupToStorage(cardsGroups))\n        )\n    };\n\n    getCardForRepeating(cards: ICard[]): ICard | undefined {\n        let foundCard = cards.find((card: ICard) => {\n            return card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO;\n        });\n\n        if (!foundCard) {\n            foundCard = cards.find((card: ICard) => {\n                return card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS;\n            });\n        }\n\n        if (cards.length === 1) {\n            foundCard = cards[0]\n        }\n\n        this.updateStatistic(cards);\n\n        if( foundCard ) {\n            this.currentCardID = foundCard.id;\n        }\n\n        return foundCard\n    }\n\n    updateStatistic(cards: ICard[]): void {\n\n        this.statisticValue = {\n            inProgress: 0,\n            todo: 0,\n            done: 0\n        };\n\n        cards.forEach((card: ICard) => {\n            if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n                this.statisticValue.inProgress = this.statisticValue.inProgress + 1\n            } else if (card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                this.statisticValue.todo = this.statisticValue.todo + 1\n            } else {\n                this.statisticValue.done = this.statisticValue.done + 1\n            }\n        });\n    }\n\n}\n","import {of} from 'rxjs';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {Channel} from '../../common/Channel';\nimport {switchMap, tap} from 'rxjs/operators';\n\nexport class LocalBackupsService {\n\n    public localBackupChannel: Channel<void, ICardsGroup[]>;\n    public loadBackupChannel: Channel<string, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.localBackupChannel = new Channel(() => of('').pipe(\n            switchMap(() => this.saveFile())\n        ));\n\n        this.loadBackupChannel = new Channel((backupFile: string) => of('').pipe(\n            switchMap(() => {\n                return this.storageService.setBackupToStorage(JSON.parse(backupFile));\n            })\n        ));\n    }\n\n    saveFile() {\n        return this.storageService.getBackupFromStorage().pipe(\n            tap((backup: ICardsGroup[]) => {\n                const fileData: string = JSON.stringify(backup, null, 4);\n                const blob = new Blob([fileData], {type: \"octet/stream\"});\n                const url = window.URL.createObjectURL(blob);\n\n                const fileBuffer = document.createElement('a');\n\n                if (fileBuffer) {\n                    fileBuffer.href = url;\n                    fileBuffer.download = 'My Cards.txt';\n                    fileBuffer.click();\n                }\n                window.URL.revokeObjectURL(url);\n            })\n        );\n    }\n}\n","import React, {useEffect, useState} from 'react';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport './App.css';\nimport {IAppContext} from './app/types/IAppContext';\nimport {ToolbarContainer} from './app/parts/toolbar-container/ToolbarContainer';\nimport {NavigationPanelContainer} from './app/parts/navigation-panel-container/NavigationPanelContainer';\nimport {ErrorContainer} from './app/parts/error-container/ErrorContainer';\nimport {SpinnerContainer} from './app/parts/spinner-container/SpinnerContainer';\nimport {defaultAppState, STORE_NAME} from './app/common/Constants';\nimport {ConfirmDialogContainer} from './app/parts/confirm-dialog/ConfirmDialogContainer';\nimport {SpinnerService} from './app/parts/spinner-container/SpinnerService';\nimport {ErrorService} from './app/parts/error-container/ErrorService';\nimport {NavigationContainer} from './app/parts/navigation/NavigationContainer';\nimport {CardsGroupsEditorService} from './app/pages/cards-groups-editor/CardsGroupsEditorService';\nimport {CardsGroupsListService} from './app/pages/cards-groups-list/CardsGroupsListService';\nimport {ConfirmDialogService} from './app/parts/confirm-dialog/ConfirmDialogService';\nimport {GoogleAuthService} from './app/pages/google-auth/GoogleAuthService';\nimport {GoogleBackupsService} from './app/pages/google-backups/GoogleBackupsService';\nimport {CardsEditorService} from './app/pages/cards-editor/CardsEditorService';\nimport {StorageService} from './app/common/services/StorageService';\nimport {CardsListService} from './app/pages/cards-list/CardsListService';\nimport {CardsRepeaterService} from './app/pages/cards-repeater/CardsRepeaterService';\nimport {LocalBackupsService} from './app/pages/local-backup/LocalBackupsService';\nimport {DataBaseService} from './app/data-base/DataBaseService';\n\nexport const AppContext = React.createContext<IAppContext>(defaultAppState);\n\nconst errorService = new ErrorService();\nconst spinnerService = new SpinnerService();\n\nconst confirmDialogService= new ConfirmDialogService();\n\nconst dataBaseService = new DataBaseService(STORE_NAME);\nconst storageService = new StorageService(dataBaseService);\nconst cardsGroupsEditorService = new CardsGroupsEditorService(storageService);\nconst cardsGroupsListService = new CardsGroupsListService(storageService);\nconst googleAuthService = new GoogleAuthService(storageService);\nconst googleBackupsService = new GoogleBackupsService(storageService);\nconst cardsEditorService = new CardsEditorService(storageService);\nconst cardsListService = new CardsListService(storageService);\nconst cardsRepeaterService = new CardsRepeaterService(storageService);\nconst localBackupsService = new  LocalBackupsService(storageService);\n\nfunction App() {\n\n    const [appState, setAppState] = useState<IAppContext>(defaultAppState);\n\n    useEffect(() => {\n        const height = window.screen.height;\n        const width = window.screen.width;\n        if (appState.height !== height || appState.width !== width) {\n            setAppState({...appState, height: window.screen.height, width: window.screen.width});\n        }\n    });\n\n    return (\n        <>\n            <AppContext.Provider value={appState}>\n                <Router>\n                    <div>\n\n                        <ErrorContainer errorService={errorService}/>\n\n                        <ToolbarContainer/>\n\n                        <NavigationPanelContainer/>\n\n                        <ConfirmDialogContainer confirmDialogService={confirmDialogService}/>\n\n                        <div className=\"page-container\" style={{height: appState.height, width: appState.width}}>\n                            <SpinnerContainer spinnerService={spinnerService}/>\n                            <NavigationContainer\n                                cardsGroupsListService={cardsGroupsListService}\n                                cardsGroupsEditorService={cardsGroupsEditorService}\n                                googleAuthService={googleAuthService}\n                                googleBackupsService={googleBackupsService}\n                                errorService={errorService}\n                                spinnerService={spinnerService}\n                                confirmDialogService={confirmDialogService}\n                                cardsEditorService={cardsEditorService}\n                                cardsListService={cardsListService}\n                                cardsRepeaterService={cardsRepeaterService}\n                                localBackupsService={localBackupsService}\n                            />\n                        </div>\n                    </div>\n                </Router>\n            </AppContext.Provider>\n        </>\n    );\n}\n\nexport default App;\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../common/Channel';\n\nexport class ErrorService {\n    public errorChannel: Channel<string, string>;\n\n\n    constructor() {\n        this.errorChannel = new Channel<string, string>((error: string)=> of(error));\n    }\n\n}\n","import {of} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Channel} from '../../common/Channel';\n\nexport class SpinnerService {\n\n    public spinnerCounterChannel: Channel<number, number>;\n\n    private spinnerCounter = 0;\n\n    constructor() {\n        this.spinnerCounterChannel = new Channel((difference: number) => of('').pipe(map(() => {\n            if(this.spinnerCounter + difference >= 0) {\n                this.spinnerCounter = this.spinnerCounter + difference;\n            }\n            return this.spinnerCounter;\n        })))\n    }\n}\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {ConfirmDialogContainerState} from './ConfirmDialogContainer';\nimport {Channel} from '../../common/Channel';\n\nexport class ConfirmDialogService {\n\n    public openDialogChannel = new Channel<ConfirmDialogContainerState, ConfirmDialogContainerState>(\n        (state: ConfirmDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.confirmationChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public confirmationChannel = new Channel<boolean, boolean>((value: boolean) => of(value));\n}\n\n","import {IDBPDatabase, openDB} from 'idb';\n\nexport class DataBaseService {\n\n    private dataBase: Promise<IDBPDatabase>;\n\n    private DATA_BASE_NAME = \"app-data-base\";\n\n    constructor(private storeName: string) {\n        this.dataBase = openDB(this.DATA_BASE_NAME, 1, {\n            upgrade(db) {\n                db.createObjectStore(storeName);\n            },\n        });\n    }\n\n    get = async <T>(key: string) => {\n        return (await this.dataBase).get(this.storeName, key);\n    };\n\n    set = async <T>(key: string, value: T) => {\n        return (await this.dataBase).put(this.storeName, value, key);\n    };\n}\n","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {Channel} from '../../common/Channel';\n\nexport class CardsGroupsEditorService {\n\n    public groupEditingChannel: Channel<ICardsGroup, ICardsGroup[]>;\n    public groupChannel: Channel<number, ICardsGroup>;\n\n    constructor(storageService: StorageService) {\n        this.groupEditingChannel = new Channel((editedCardGroup: ICardsGroup) => storageService.getBackupFromStorage().pipe(\n            map((cardsGroups: ICardsGroup[]) => {\n                const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => editedCardGroup.id === cardGroup.id);\n\n                if(cardGroupIndex < 0) {\n                    cardsGroups.push(editedCardGroup);\n                } else {\n                    cardsGroups[cardGroupIndex] = editedCardGroup;\n                }\n\n                return cardsGroups;\n            }),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackupToStorage(cardsGroups);\n            })\n        ));\n\n        this.groupChannel = new Channel((cardGroupID: number) => storageService.getBackupFromStorage().pipe(\n            map((cardsGroups: ICardsGroup[]) => {\n\n                let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardGroupID === cardGroup.id);\n\n                if(!cardsGroup) {\n                    cardsGroup = {\n                        cards: [],\n                        nameCardsGroup: '',\n                        dateRepeating: new Date().getTime(),\n                        id: new Date().getTime(),\n                        percentRepeatedCards: 0\n                    }\n                }\n                return cardsGroup;\n            })\n        ))\n    }\n}\n","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {ICard} from '../../types/ICard';\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\nimport {Channel} from '../../common/Channel';\n\nexport class CardsGroupsListService {\n    public groupsListChannel: Channel<string, ICardsGroup[]>;\n    public groupDeleteChannel: Channel<number, ICardsGroup[]>;\n    public resetProgressChannel: Channel<number, ICardsGroup[]>;\n\n\n    constructor(storageService: StorageService) {\n        this.groupsListChannel = new Channel(() => storageService.getBackupFromStorage().pipe(\n            map((cardsGroups: ICardsGroup[]) => {\n                cardsGroups.map((cardsGroup: ICardsGroup) => {\n                    let dateRepeating = 0;\n                    cardsGroup.cards.forEach((card: ICard) => {\n                        if(card.dateRepeating > dateRepeating) {\n                            dateRepeating = card.dateRepeating\n                        }\n                    });\n                    cardsGroup.dateRepeating = dateRepeating;\n                    return cardsGroup;\n                });\n                return cardsGroups;\n            }),\n            map((cardsGroups: ICardsGroup[]) => {\n                return cardsGroups.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n                    if(firstCardGroup.dateRepeating && secondCardsGroup.dateRepeating) {\n                        return secondCardsGroup.dateRepeating - firstCardGroup.dateRepeating;\n                    } else {\n                        return 0;\n                    }\n                })\n            }),\n            map((cardsGroups: ICardsGroup[]) => {\n                cardsGroups.map((cardsGroup: ICardsGroup) => {\n                    let statusDone = 0;\n                    cardsGroup.cards.forEach((card: ICard) => {\n                        if(card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n                            statusDone++\n                        }\n                    });\n                    cardsGroup.percentRepeatedCards = statusDone/cardsGroup.cards.length*100;\n                    return cardsGroup;\n                });\n                return cardsGroups;\n            })\n        ));\n\n        this.groupDeleteChannel = new Channel((groupID: number) => storageService.getBackupFromStorage().pipe(\n            map((cardsGroups: ICardsGroup[]) => {\n                return cardsGroups.filter((cardGroup) => {\n                    return cardGroup.id !== groupID;\n                });\n            }),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackupToStorage(cardsGroups))\n        ));\n\n        this.resetProgressChannel = new Channel((cardsGroupID: number) => storageService.getBackupFromStorage().pipe(\n            map((cardsGroups: ICardsGroup[]) => {\n\n                const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n\n                if (cardGroupIndex < 0) {\n                    return cardsGroups;\n                }\n\n                cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.map((card: ICard) => {\n                    return {\n                        ...card,\n                        rangeOfKnowledge: IRangeOfKnowledge.TO_DO\n                    }\n                });\n\n                return cardsGroups;\n            }),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackupToStorage(cardsGroups))\n        ))\n    }\n}\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../common/Channel';\n\nexport class GoogleAuthService {\n    public loginChannel: Channel<string, string>;\n\n\n    constructor(storageService: StorageService) {\n\n        this.loginChannel = new Channel((authToken: string) => of('').pipe(\n            tap(() => {\n                storageService.setAuthToken(authToken)\n            })\n        ));\n    }\n}\n","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../types/ICardsGroup';\nimport {Channel} from '../../common/Channel';\nimport {ICard} from '../../types/ICard';\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\nimport {ISimplifiedCardsGroup} from '../../types/ISimplifiedCardsGroup';\n\nexport class CardsEditorService {\n\n    public cardEditingChannel: Channel<{ card: ICard, cardsGroupID: number }, ICard>;\n    public simplifiedCardsGroupsChannel: Channel<number, {currentCardsGroup: ISimplifiedCardsGroup | undefined, cardsGroups: ISimplifiedCardsGroup[]}>;\n    public cardChannel: Channel<{ cardID: number, cardsGroupID: number }, ICard | undefined>;\n\n    constructor(storageService: StorageService) {\n        this.cardEditingChannel = new Channel(({card, cardsGroupID}) => storageService.getBackupFromStorage().pipe(\n            map((cardsGroups: ICardsGroup[]) => {\n                const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n                let cardIndex = -1;\n\n                if(cardGroupIndex >=0) {\n                    cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => card.id === item.id)\n                }\n\n                if (cardGroupIndex >= 0 && cardIndex < 0) {\n                    cardsGroups[cardGroupIndex].cards.push(card);\n                } else if(cardGroupIndex >= 0 && cardIndex >= 0) {\n                    cardsGroups[cardGroupIndex].cards[cardIndex] = card;\n                }\n\n                return cardsGroups;\n            }),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackupToStorage(cardsGroups);\n            }),\n            map(() => card)\n        ));\n\n        this.cardChannel = new Channel(({cardID, cardsGroupID}) => storageService.getBackupFromStorage().pipe(\n            map((cardsGroups: ICardsGroup[]) => {\n\n                let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n                let card: ICard | undefined = {\n                    rangeOfKnowledge: IRangeOfKnowledge.TO_DO,\n                    answer: '',\n                    question: '',\n                    dateRepeating: 0,\n                    id: new Date().getTime()\n                };\n\n                if (cardsGroup) {\n                    card = cardsGroup.cards.find((card: ICard) => card.id === cardID)\n                }\n\n                return card;\n            })\n        ));\n\n        this.simplifiedCardsGroupsChannel = new Channel((cardsGroupID: number) => storageService.getBackupFromStorage().pipe(\n            map((cardsGroups: ICardsGroup[]) => {\n\n                return cardsGroups.map((cardsGroup: ICardsGroup): ISimplifiedCardsGroup => {\n                    return {\n                        id: cardsGroup.id,\n                        nameCardsGroup: cardsGroup.nameCardsGroup\n                    }\n                });\n            }),\n            map((cardsGroups: ISimplifiedCardsGroup[]) => {\n\n                let currentCardsGroup = cardsGroups.find((cardGroup: ISimplifiedCardsGroup) => cardsGroupID === cardGroup.id);\n\n                return {\n                    currentCardsGroup,\n                    cardsGroups\n                }\n            })\n        ))\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}