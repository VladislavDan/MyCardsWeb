{"version":3,"sources":["app/common/types/IDependenciesNames.ts","app/parts/toolbar/ToolbarComponent.tsx","MyTools/channel-conception/react-hooks/useChannel.ts","MyTools/react-hooks/useCallbackFactory.ts","MyTools/react-callback-factory/CallbackFactory.ts","MyTools/react-hooks/useUnsubscribe.ts","app/parts/toolbar/channels-callbacks/onPageLabelChannel.ts","MyTools/channel-conception/defaults/empty.ts","app/parts/toolbar/ui-callbacks/onClick.ts","MyTools/react-di/defaults/defaultServiceProvider.ts","MyTools/react-di/DependenciesProvider.tsx","MyTools/react-di/logic/getDependency.ts","MyTools/react-di/hooks/useDependency.ts","app/parts/toolbar/ui-callbacks/onLoadCardsCount.ts","app/parts/toolbar/defaults/initialState.ts","app/parts/toolbar/channels-callbacks/onCardsCountInGroupChannel.ts","app/parts/toolbar/ui-callbacks/onLoadLabel.ts","app/parts/toolbar/ToolbarContainer.tsx","app/common/types/ISortVariant.ts","app/common/Routs.ts","app/parts/navigation-panel/elements/navigation-link-component/NavigationLinkComponent.tsx","app/parts/navigation-panel/NavigationPanelComponent.tsx","app/parts/navigation-panel/defaults/initialState.ts","app/parts/navigation-panel/channels-callbacks/onNavigationPanelOpenChannel.ts","app/parts/navigation-panel/ui-callbacks/onToggleDrawer.ts","app/parts/navigation-panel/NavigationPanelContainer.tsx","app/parts/error-dialog/ErrorComponent.tsx","app/parts/error-dialog/defaults/initialState.ts","app/parts/error-dialog/channels-callbacks/onErrorChannel.ts","app/parts/error-dialog/ui-callbacks/onClose.ts","app/parts/error-dialog/ErrorContainer.tsx","app/parts/spinner/SpinnerComponent.tsx","app/parts/spinner/channels-callbacks/onSpinnerCounterChannel.ts","app/parts/spinner/SpinnerContainer.tsx","app/parts/confirm-dialog/elements/dialog-title/DialogTitleComponent.tsx","app/parts/confirm-dialog/ConfirmDialogComponent.tsx","app/common/defaults/defaultConfirmDialogState.ts","app/parts/confirm-dialog/channels-callbacks/onOpenDialogChannel.ts","app/parts/confirm-dialog/ui-callbacks/onClose.ts","app/parts/confirm-dialog/ui-callbacks/onClickAgree.ts","app/parts/confirm-dialog/ui-callbacks/onClickDisagree.ts","app/parts/confirm-dialog/ConfirmDialogContainer.tsx","app/common/elements/add-button/AddButtonComponent.tsx","app/pages/cards-groups-list/elements/circular-progress/CircularProgressComponent.tsx","app/common/elements/list-item-menu/ListItemMenuComponent.tsx","app/common/constants/DATE_FORMAT.ts","app/pages/cards-groups-list/elements/cards-groups-list-item/CardsGroupsListItemComponent.tsx","app/common/elements/filter/FilterComponent.tsx","app/pages/cards-groups-list/CardsGroupsListComponent.tsx","app/common/types/IRangeOfKnowledge.ts","MyTools/react-hooks/useConstructor.ts","app/pages/cards-groups-list/ui-callbacks/onResetProgress.tsx","app/pages/cards-groups-list/ui-callbacks/onEditItem.ts","app/pages/cards-groups-list/ui-callbacks/onDeleteItem.tsx","app/pages/cards-groups-list/ui-callbacks/onOpenEditor.ts","app/pages/cards-groups-list/ui-callbacks/onClickItem.ts","app/pages/cards-groups-list/ui-callbacks/onConstructor.ts","app/pages/cards-groups-list/channels-callbacks/onResetProgressChannel.ts","app/pages/cards-groups-list/channels-callbacks/onGroupDeleteChannel.ts","app/pages/cards-groups-list/channels-callbacks/onGroupsListChannel.ts","app/pages/cards-groups-list/ui-callbacks/onChangeSorting.ts","app/pages/cards-groups-list/channels-callbacks/onChangeFilterChannel.ts","app/common/defaults/defaultFilter.ts","app/pages/cards-groups-list/channels-callbacks/onFilterChannel.ts","app/pages/cards-groups-list/ui-callbacks/onChangeSearchableText.ts","app/pages/cards-groups-list/defaults/initialState.ts","app/pages/cards-groups-list/ui-callbacks/onStartRepeatingDifficultCards.ts","app/pages/cards-groups-list/channels-callbacks/onStartRepeatingDifficultCardsChannel.ts","app/pages/cards-groups-list/CardsGroupsListContainer.tsx","app/pages/google-auth/GoogleAuthComponent.tsx","app/pages/google-auth/ui-callbacks/onSuccess.ts","app/pages/google-auth/ui-callbacks/onFailure.ts","app/pages/google-auth/channels-callbacks/onLoginChannel.ts","app/pages/google-auth/GoogleAuthContainer.tsx","app/pages/google-backups/elements/backup-menu-component/BackupMenuComponent.tsx","app/pages/google-backups/elements/backups-list-item-component/BackupsListItemComponent.tsx","app/pages/google-backups/GoogleBackupsComponent.tsx","app/pages/google-backups/channels-callback/onBackupsNameLoadChannelError.ts","app/pages/google-backups/channels-callback/onBackupsNameLoadChannel.ts","app/pages/google-backups/channels-callback/onBackupLoadChannelError.ts","app/pages/google-backups/channels-callback/onBackupLoadChannel.ts","app/pages/google-backups/channels-callback/onBackupDeleteChannel.ts","app/pages/google-backups/channels-callback/onBackupUploadChannel.ts","app/pages/google-backups/ui-callbacks/onConstructor.ts","app/pages/google-backups/ui-callbacks/onLoad.tsx","app/pages/google-backups/ui-callbacks/onDelete.tsx","app/pages/google-backups/GoogleBackupsContainer.tsx","app/pages/cards/elements/cards-list-actions/CardsListActions.tsx","app/common/types/IRepeatingType.ts","app/pages/cards/elements/card-primary-text/CardPrimaryTextComponent.tsx","app/pages/cards/elements/cards-list-item/CardsListItemComponent.tsx","app/pages/cards/elements/cards-list/CardsListComponent.tsx","app/pages/cards/CardsComponent.tsx","app/pages/cards/ui-callbacks/onDeleteSelectedCards.tsx","app/pages/cards/ui-callbacks/onCopySelectedCards.tsx","app/pages/cards/ui-callbacks/onMovingSelectedCards.tsx","app/pages/cards/ui-callbacks/onSelectItem.ts","app/pages/cards/ui-callbacks/onStartSelecting.ts","app/pages/cards/ui-callbacks/onOpenRepeater.ts","app/pages/cards/ui-callbacks/onChangeSorting.ts","app/pages/cards/ui-callbacks/onChangeSearchableText.ts","app/pages/cards/channels-callbacks/onCardsChannel.ts","app/pages/cards/channels-callbacks/onCardsIDsByGroupIDsChannel.ts","app/pages/cards/channels-callbacks/onCardsIDsBySelectedItemsChannel.ts","app/pages/cards/channels-callbacks/onFilterChannel.ts","app/pages/cards/ui-callbacks/onConstructor.ts","app/pages/cards/channels-callbacks/onChangeFilter.ts","app/pages/cards/channels-callbacks/onResetCardProgressChannel.ts","app/pages/cards/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/cards/channels-callbacks/onMovingCardsChannel.ts","app/pages/cards/channels-callbacks/onCopyCardsChannel.ts","app/pages/cards/channels-callbacks/onDeleteCardsChannel.ts","app/pages/cards/channels-callbacks/onExistedGroupsIDsChannel.ts","app/pages/cards/ui-callbacks/onOpenEditor.ts","app/pages/cards/ui-callbacks/onEditItem.ts","app/pages/cards/ui-callbacks/onDeleteItem.tsx","app/pages/cards/ui-callbacks/onResetProgress.ts","app/pages/cards/ui-callbacks/onClickItem.ts","app/pages/cards/defaults/initialState.ts","app/pages/cards/CardsContainer.tsx","app/pages/cards-repeater/elements/statistic/StatisticComponent.tsx","app/pages/cards-repeater/elements/all-cards-repeated/AllCardsRepeatedComponent.tsx","app/common/elements/cards-header/CardsHeaderComponent.tsx","app/common/elements/long-text-viewer/LongTextViewerComponent.tsx","app/common/elements/text-editor/TextEditorComponent.tsx","app/common/elements/long-text-editor/LongTextEditorComponent.tsx","app/common/elements/delete-button-footer/DeleteButtonFooterComponent.tsx","app/common/elements/question-card/QuestionCardComponent.tsx","app/common/elements/answer-card-footer/AnswerCardFooterComponent.tsx","app/common/elements/answer-card/AnswerCardComponent.tsx","app/common/elements/cards-content/CardsContentComponent.tsx","app/pages/cards-repeater/CardsRepeaterComponent.tsx","app/pages/cards-repeater/ui-callbacks/onDeleteCard.tsx","app/pages/cards-repeater/channels-callbacks/onDeleteSingleCardChannel.ts","app/common/defaults/defaultCard.ts","app/pages/cards-repeater/channels-callbacks/onCardChannel.ts","app/pages/cards-repeater/channels-callbacks/onCardEditingChannel.ts","app/common/defaults/defaultRepeatingProgress.ts","app/pages/cards-repeater/channels-callbacks/onStatisticChannel.ts","app/pages/cards-repeater/channels-callbacks/onRepeatingResultChannel.ts","app/pages/cards-repeater/ui-callbacks/onConstructor.ts","app/pages/cards-repeater/ui-callbacks/onClick.ts","app/pages/cards-repeater/ui-callbacks/onClickCard.ts","app/pages/cards-repeater/ui-callbacks/onBackClick.ts","app/common/logic/initDefaultCard.ts","app/pages/cards-repeater/ui-callbacks/onSwitchEditing.ts","app/pages/cards-repeater/ui-callbacks/onChangeQuestion.ts","app/pages/cards-repeater/ui-callbacks/onChangeAnswer.ts","app/pages/cards-repeater/defaults/initialState.ts","app/pages/cards-repeater/ui-callbacks/onReadByVoiceEngine.ts","app/pages/cards-repeater/channels-callbacks/onReadByVoiceEngineChannel.ts","app/pages/cards-repeater/CardsRepeaterContainer.tsx","app/pages/local-backup/channels-callbacks/onLoadBackupChannel.ts","app/pages/local-backup/ui-callbacks/onFileSelect.tsx","app/pages/local-backup/LocalBackupsContainer.tsx","app/pages/cards-groups-editor/CardsGroupsEditorComponent.tsx","app/pages/cards-groups-editor/ui-callbacks/onChangeGroupName.ts","app/pages/cards-groups-editor/ui-callbacks/onSaveGroup.ts","app/pages/cards-groups-editor/ui-callbacks/onConstructor.ts","app/pages/cards-groups-editor/channels-callbacks/onGroupEditingChannel.ts","app/common/defaults/defaultCardsGroup.ts","app/pages/cards-groups-editor/channels-callbacks/onGroupChannel.ts","app/pages/cards-groups-editor/defaults/initialState.ts","app/pages/cards-groups-editor/CardsGroupsEditorContainer.tsx","app/pages/cards-editor/CardsEditorComponent.tsx","app/pages/cards-editor/channels-callbacks/onCardEditingChannel.ts","app/pages/cards-editor/channels-callbacks/onCardChannel.ts","app/pages/cards-editor/ui-callbacks/onConstructor.ts","app/pages/cards-editor/ui-callbacks/onChangeQuestion.ts","app/pages/cards-editor/ui-callbacks/onChangeAnswer.ts","app/pages/cards-editor/ui-callbacks/onSaveCard.ts","app/pages/cards-editor/defaults/initialState.ts","app/pages/cards-editor/CardsEditorContainer.tsx","app/pages/settings/elements/settings-switcher/SettingsSwitcherComponent.tsx","app/pages/settings/elements/settings-number-input/SettingsNumberInputComponent.tsx","app/pages/settings/SettingsComponent.tsx","app/common/defaults/defaultSettings.ts","app/pages/settings/channels-callbacks/onChangeSettingsChannel.ts","app/pages/settings/channels-callbacks/onSettingsChannel.ts","app/pages/settings/ui-callbacks/onConstructor.ts","app/pages/settings/ui-callbacks/onChangeAlgorithm.ts","app/pages/settings/ui-callbacks/onChangeAutoObsolete.ts","app/pages/settings/ui-callbacks/onChangeTimeInDone.ts","app/pages/settings/ui-callbacks/onChangeTimeInProgress.ts","app/pages/settings/SettingsContainer.tsx","app/pages/card-viewer/CardViewerComponent.tsx","app/pages/card-viewer/ui-callbacks/onDeleteCard.tsx","app/pages/card-viewer/channels-callbacks/onDeleteSingleCardChannel.ts","app/pages/card-viewer/ui-callbacks/onChangeAnswer.ts","app/pages/card-viewer/ui-callbacks/onChangeQuestion.ts","app/pages/card-viewer/ui-callbacks/onSwitchEditing.ts","app/pages/card-viewer/ui-callbacks/onClickYesNoButton.ts","app/pages/card-viewer/ui-callbacks/onClickCard.ts","app/pages/card-viewer/channels-callbacks/onCardChannel.ts","app/pages/card-viewer/channels-callbacks/onCardEditingChannel.ts","app/pages/card-viewer/channels-callbacks/onRepeatingResultChannel.ts","app/pages/card-viewer/ui-callbacks/onConstructor.ts","app/pages/card-viewer/defaults/initialState.ts","app/pages/card-viewer/ui-callbacks/onReadByVoiceEngine.ts","app/pages/card-viewer/channels-callbacks/onReadByVoiceEngineChannel.ts","app/pages/card-viewer/CardViewerContainer.tsx","app/pages/statistic/elements/RemoveButtonComponent.tsx","app/pages/statistic/StatisticComponent.tsx","app/pages/statistic/defaults/initialState.ts","app/pages/statistic/channels-callbacks/onStatisticChannel.ts","app/pages/statistic/ui-callbacks/onConstructor.ts","app/pages/statistic/ui-callbacks/onRemoveStatistic.tsx","app/pages/statistic/channels-callbacks/onRemoveStatisticChannel.ts","app/pages/statistic/StatisticContainer.tsx","app/pages/repeater-editor/elements/selecting-group-list-element/SelectingGroupListItem.tsx","app/pages/repeater-editor/RepeaterEditorComponent.tsx","app/common/defaults/defaultRepeater.ts","app/pages/repeater-editor/defaults/inititalState.ts","app/pages/repeater-editor/channels-callbacks/onGroupsListChannel.ts","app/pages/repeater-editor/channels-callbacks/onSaveRepeaterChannel.ts","app/pages/repeater-editor/ui-callbacks/onSaveRepeater.ts","app/pages/repeater-editor/channels-callbacks/onUpdateGroupsIDsChannel.ts","app/pages/repeater-editor/ui-callbacks/onSelect.ts","app/pages/repeater-editor/channels-callbacks/onRepeaterChannel.ts","app/pages/repeater-editor/ui-callbacks/onChangeName.ts","app/pages/repeater-editor/ui-callbacks/onConstructor.ts","app/pages/repeater-editor/channels-callbacks/onSelectedGroupsChannel.ts","app/pages/repeater-editor/RepeaterEditorContainer.tsx","app/common/logic/getRandomColor.ts","app/pages/repeater-list/elements/repeater-list-item/RepeaterListItem.tsx","app/pages/repeater-list/RepeaterListComponent.tsx","app/pages/repeater-list/defaults/initialState.ts","app/pages/repeater-list/ui-callbacks/onOpenEditor.ts","app/pages/repeater-list/channels-callbacks/onRepeaterListChannel.ts","app/pages/repeater-list/ui-callbacks/onConstructor.ts","app/pages/repeater-list/channels-callbacks/onStartRepeatingChannel.ts","app/pages/repeater-list/ui-callbacks/onStartRepeating.ts","app/pages/repeater-list/ui-callbacks/onRemoveRepeater.tsx","app/pages/repeater-list/channels-callbacks/onResetProgressChannel.ts","app/pages/repeater-list/ui-callbacks/onResetProgress.ts","app/pages/repeater-list/ui-callbacks/onEditRepeater.ts","app/pages/repeater-list/RepeaterListContainer.tsx","app/parts/navigation/NavigationContainer.tsx","app/parts/selection-dialog/SelectionDialogComponent.tsx","app/parts/selection-dialog/defaults/initialState.ts","app/parts/selection-dialog/channels-callbacks/onOpenDialogChannel.ts","app/parts/selection-dialog/ui-callbacks/onClose.ts","app/parts/selection-dialog/ui-callbacks/onClickItem.ts","app/parts/selection-dialog/SelectionDialogContainer.tsx","MyTools/channel-conception/logic/jsonEqual.ts","MyTools/worker-observable/operators/fromThread.ts","MyTools/worker-observable/logic/functionToThread.ts","MyTools/channel-conception/Channel.ts","app/common/defaults/defaultAppState.ts","app/common/defaults/defaultStatistic.ts","app/common/services/StorageService.ts","app/common/constants/STORE_NAME.ts","app/common/services/VoiceService.ts","app/pages/google-backups/logic/getBackupFolder.ts","app/pages/cards/logic/getCardsByGroup.ts","app/common/logic/deleteSingleCard.ts","app/pages/cards/logic/selectedItemsObjectToArray.ts","app/pages/cards/logic/getExistedCardsGroups.ts","app/common/logic/changeRangeOfKnowledge.ts","app/pages/cards-repeater/logic/getCardForRepeating.ts","app/pages/cards-repeater/logic/shuffleCards.ts","app/common/logic/refreshCardRepeatingDate.ts","app/common/logic/updateStatistic.ts","app/common/logic/readByVoiceEngine.ts","app/common/logic/prepareTextForVoiceEngine.ts","app/pages/card-viewer/logic/getCardForViewing.ts","app/pages/repeater-list/logic/getRepeaterByID.ts","DependenciesMap.ts","app/pages/google-auth/GoogleAuthService.ts","app/parts/error-dialog/ErrorService.ts","app/pages/cards-editor/CardsEditorService.ts","app/pages/cards-editor/logic/saveCard.ts","app/pages/cards-editor/logic/getEditingCard.ts","app/pages/local-backup/LocalBackupsService.ts","app/pages/local-backup/logic/saveBackupFile.ts","app/parts/spinner/SpinnerService.ts","app/parts/confirm-dialog/ConfirmDialogService.ts","app/common/services/DataBaseService.ts","app/parts/selection-dialog/SelectionDialogService.ts","app/parts/navigation-panel/NavigationPanelService.ts","app/parts/toolbar/ToolbarService.tsx","app/parts/toolbar/logic/getCardsCount.ts","app/parts/toolbar/logic/getGroupName.ts","app/parts/toolbar/logic/getPageLabel.ts","app/pages/cards-groups-editor/CardsGroupsEditorService.ts","app/pages/cards-groups-editor/logic/saveCardsGroup.ts","app/pages/cards-groups-editor/logic/getEditingCardsGroup.ts","app/pages/cards-groups-list/CardsGroupsListService.ts","app/pages/cards-groups-list/logic/getDifficultCardsForRepeating.ts","app/pages/cards-groups-list/logic/updateObsoleteStatus.ts","app/pages/cards-groups-list/logic/updateRepeatingDate.ts","app/pages/cards-groups-list/logic/countRepeatedCardsPercent.ts","app/pages/cards-groups-list/logic/sortByFilter.ts","app/pages/cards-groups-list/logic/deleteGroup.ts","app/pages/cards-groups-list/logic/resetRepeatingProgress.ts","app/pages/google-backups/GoogleBackupsService.ts","app/pages/google-backups/logic/getBackupFiles.ts","app/pages/google-backups/logic/formatCreatedDate.ts","app/pages/google-backups/logic/loadBackupFile.ts","app/pages/google-backups/logic/createBackupFolder.ts","app/pages/google-backups/logic/createBackupName.ts","app/pages/google-backups/logic/createEmptyBackupFile.ts","app/pages/google-backups/logic/uploadBackupFile.ts","app/pages/google-backups/logic/deleteBackupFile.ts","app/pages/cards/CardsService.ts","app/pages/cards/logic/filterCards.ts","app/pages/cards/logic/resetCardProgress.ts","app/pages/cards/logic/changeCardsGroup.ts","app/pages/cards/logic/copyCardsInGroup.ts","app/pages/cards/logic/deleteCards.ts","app/pages/cards/logic/cardsToIDS.ts","app/pages/cards/logic/selectedItemsToIDs.ts","app/pages/cards-repeater/CardsRepeaterService.ts","app/pages/cards-repeater/logic/getCardsByIDs.ts","app/pages/cards-repeater/logic/getRepeatingProgress.ts","app/pages/settings/SettingsService.ts","app/pages/card-viewer/CardViewerService.tsx","app/pages/statistic/StatisticService.ts","app/pages/statistic/logic/getRowsFromStatistic.ts","app/pages/repeater-list/RepeaterListService.ts","app/pages/repeater-list/logic/mapGroupsNameToRepeater.ts","app/pages/repeater-list/logic/updateRepeatersProgress.ts","app/pages/repeater-list/logic/getCardsIDsFromRepeater.ts","app/pages/repeater-list/logic/removeRepeater.ts","app/pages/repeater-list/logic/resetRepeatingProgress.ts","app/pages/repeater-editor/RepeaterEditorService.ts","app/pages/repeater-editor/logic/updateExistRepeater.ts","app/pages/repeater-editor/logic/updateGroupsIDs.ts","app/pages/repeater-editor/logic/getRepeaterByID.ts","app/pages/repeater-editor/logic/getSelectedGroups.ts","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["IDependenciesNames","ToolbarComponent","pageLabel","onClick","cardsCount","AppBar","position","Toolbar","className","IconButton","edge","color","Typography","variant","useChannel","channel","next","additionalErrorHandler","deepEqual","value","useRef","subscription","current","closed","subscribe","useEffect","unsubscribe","useCallbackFactory","initialState","services","context","settings","location","useLocation","history","useHistory","useState","state","setState","setSubscription","subscriptions","forEach","subscribtion","push","useUnsubscribe","callbackSettings","useContext","callbackFactory","callback","args","externalCallbackSettings","onPageLabelChannel","label","prevState","empty","navigationPanelService","navigationPanelOpenChannel","defaultServiceProvider","dependenciesMap","updateDependency","DependenciesContext","createContext","DependenciesProvider","children","ref","Provider","dependency","key","dependenciesInjectionPath","getDependency","dependencyKey","clearDependenciesPath","initialArgs","countOfInjectionKey","Error","join","dependencyConstructor","constructor","arguments","map","argument","classInstance","useDependencyContext","useMemo","onLoadCardsCount","toolbarService","cardsCountInGroupChannel","path","pathname","cardsGroupsId","cardsGroupID","onCardsCountInGroupChannel","onLoadLabel","pageLabelChannel","ISortVariant","ToolbarContainer","ToolbarService","NavigationPanelService","AppContext","click","useCallback","Routs","name","NavigationLinkComponent","toggleDrawer","ListItem","button","to","NavigationPanelComponent","isOpen","SwipeableDrawer","anchor","open","onClose","onOpen","List","onNavigationPanelOpenChannel","onToggleDrawer","event","keyboardEvent","nativeEvent","type","NavigationPanelContainer","ErrorComponent","errorMessage","handleClose","Dialog","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onErrorChannel","ErrorContainer","errorService","ErrorService","errorChannel","close","SpinnerComponent","isShow","LinearProgress","onSpinnerCounterChannel","spinnerCounter","SpinnerContainer","spinnerService","SpinnerService","spinnerCounterChannel","DialogTitleComponent","titleBackgroundColor","icon","style","backgroundColor","ConfirmDialogComponent","onClickAgree","onClickDisagree","message","autoFocus","defaultConfirmDialogState","onOpenDialogChannel","confirmDialogContainerState","confirmDialogService","confirmationChannel","ConfirmDialogContainer","ConfirmDialogService","openDialogChannel","clickAgree","clickDisagree","AddButtonComponent","Fab","size","CircularProgressComponent","percent","Box","display","CircularProgress","top","left","bottom","right","alignItems","justifyContent","component","Math","round","ListItemMenuComponent","menuSetup","React","anchorEl","setAnchorEl","keepMounted","Boolean","menuItem","MenuItem","handler","fieldName","currentTarget","DATE_FORMAT","CardsGroupsListItemComponent","cardsGroup","onClickItem","onEditItem","onDeleteItem","onResetProgress","onStartRepeatingDifficultCards","ListItemIcon","percentRepeatedCards","ListItemText","primary","nameCardsGroup","secondary","format","repeatingDate","Date","FilterComponent","onChangeSearchableText","filter","onChangeSorting","sortVariants","Accordion","AccordionSummary","expandIcon","TextField","required","placeholder","onChange","target","searchableText","marginRight","stopPropagation","preventDefault","AccordionDetails","Select","sort","IRangeOfKnowledge","CardsGroupsListComponent","cardsGroups","onOpenEditor","height","NONE","DATE_ASK","DATE_DESK","NAME_ASK","NAME_DESK","PROGRESS_ASK","PROGRESS_DESC","itemData","itemSize","itemCount","length","overscanCount","width","index","cardGroup","useConstructor","isFirstRun","cardsGroupsListService","isConfirm","resetProgressChannel","groupDeleteChannel","onConstructor","groupsListChannel","filterChannel","onResetProgressChannel","onGroupDeleteChannel","onGroupsListChannel","sortVariant","newFilter","changeFilterChannel","onChangeFilterChannel","defaultFilter","onFilterChannel","cardsGroupId","startRepeatingDifficultCardsChannel","onStartRepeatingDifficultCardsChannel","cardsIDs","cardsIDsForRepeating","CardsGroupsListContainer","CardsGroupsListService","clickItem","openEditor","deleteItem","editItem","resetProgress","changeSorting","changeSearchableText","startRepeatingDifficultCards","GoogleAuthComponent","onSuccess","onFailure","clientId","buttonText","scope","response","googleAuthService","loginChannel","accessToken","onLoginChannel","replace","GoogleAuthContainer","GoogleAuthService","success","failure","BackupMenuComponent","backupID","onLoad","onDelete","BackupsListItemComponent","backupName","backupDate","GoogleBackupsComponent","backupsFiles","onCreate","backup","createdTime","onBackupsNameLoadChannelError","onBackupsNameLoadChannel","onBackupLoadChannelError","onBackupLoadChannel","onBackupDeleteChannel","googleBackupsService","backupsNameLoadChannel","onBackupUploadChannel","backupLoadChannel","backupDeleteChannel","GoogleBackupsContainer","GoogleBackupsService","backupUploadChannel","load","deleteBackup","CardsListActions","onOpenRepeater","onStartSelecting","onMovingSelectedCards","onDeleteSelectedCards","onCopySelectedCards","hideOpenRepeaterButton","hideOpenEditorButton","hideMovingSelectedCardsButton","hideDeleteSelectedCardsButton","hideCopySelectedCardButton","IRepeatingType","CardPrimaryTextComponent","card","question","answer","CardsListItemComponent","onSelect","isEnabledSelecting","isSelected","dateText","dateRepeating","rangeOfKnowledge","DONE","IN_PROGRESS","getIconColor","Checkbox","checked","tabIndex","disableRipple","CardsListComponent","cards","onSelectItem","selectedItems","CardsComponent","QUESTION_ASK","QUESTION_DESK","STATUS_ASK","STATUS_DESK","ANSWER_ASK","ANSWER_DESK","cardsListService","deleteCardsChannel","selectionDialogService","selectionChannel","groupID","copyCardsChannel","destinationGroupID","title","selectionItems","existedGroupsIDs","movingCardsChannel","cardID","cardsIDsBySelectedItemsChannel","cardsIDsByGroupIDsChannel","onCardsChannel","onCardsIDsByGroupIDsChannel","onCardsIDsBySelectedItemsChannel","cardsChannel","existedGroupsIDsChannel","onChangeFilter","onResetCardProgressChannel","onDeleteSingleCardChannel","onMovingCardsChannel","onCopyCardsChannel","onDeleteCardsChannel","onExistedGroupsIDsChannel","deleteSingleCardChannel","resetCardProgressChannel","CardsContainer","CardsService","SelectionDialogService","startSelecting","openRepeater","selectItem","movingSelectedCards","copySelectedCards","deleteSelectedCards","StatisticComponent","repeatingProgress","todo","inProgress","done","AllCardsRepeatedComponent","onBackClick","CardsHeaderComponent","isQuestionSide","onSwitchEditing","onReadByVoiceEngine","isEditable","Campaign","gutterBottom","Check","Edit","LongTextViewerComponent","viewHeight","text","onClickText","paddingTop","TextEditorComponent","onChangeText","changeableText","multiline","LongTextEditorComponent","DeleteButtonFooterComponent","CardActions","QuestionCardComponent","onClickCard","cardHeight","onDeleteCard","onChangeQuestion","Card","CardContent","AnswerCardFooterComponent","onClickYesNoButton","AnswerCardComponent","onChangeAnswer","actionStatus","setActionStatus","getText","cardBackgroundColor","arg","CardsContentComponent","CardsRepeaterComponent","cardsRepeaterService","cardChannel","defaultCard","onCardChannel","repeatingProgressChannel","onCardEditingChannel","defaultRepeatingProgress","onStatisticChannel","statistic","onRepeatingResultChannel","isKnown","repeatingResultChannel","goBack","initDefaultCard","getTime","cardsEditorService","cardEditingChannel","editableCard","readByVoiceEngineChannel","onReadByVoiceEngineChannel","CardRepeaterContainer","CardsRepeaterService","CardsEditorService","clickCard","backClick","switchEditing","changeQuestion","changeAnswer","deleteCard","readByVoiceEngine","onLoadBackupChannel","onFileSelect","localBackupsService","file","files","reader","FileReader","onload","readerEvent","games","result","loadBackupChannel","readAsText","LocalBackupsContainer","LocalBackupsService","localBackupChannel","handleFileSelect","CardsGroupsEditorComponent","groupName","onChangeGroupName","onSaveGroup","cardsGroupsEditorService","groupEditingChannel","groupChannel","onGroupEditingChannel","defaultCardsGroup","onGroupChannel","CardsGroupsEditorContainer","CardsGroupsEditorService","changeGroupName","saveGroup","CardsEditorComponent","onSaveCard","CardsEditorContainer","saveCard","SettingsSwitcherComponent","FormControlLabel","control","Switch","SettingsNumberInputComponent","Input","Number","SettingsComponent","onChangeAlgorithm","onChangeAutoObsolete","onChangeTimeInDone","onChangeTimeInProgress","FormGroup","FormLabel","RadioGroup","repeatingType","DEFAULT","Radio","RANDOM","autoObsolete","isEnable","timeInDone","timeInProgress","difficultCardsAmountForRepeating","defaultSettings","onChangeSettingsChannel","settingsService","settingsChannel","onSettingsChannel","changeSettingsChannel","SettingsContainer","SettingsService","changeAlgorithm","changeAutoObsolete","changeTimeInDone","changeTimeInProgress","CardViewerComponent","props","cardViewerService","CardViewerContainer","CardViewerService","clickYesNoButton","RemoveButtonComponent","rows","onRemoveStatistic","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","row","date","statisticService","statisticChannel","removeStatisticChannel","onRemoveStatisticChannel","StatisticContainer","StatisticService","removeStatistic","SelectingGroupListItem","RepeaterEditorComponent","onSaveRepeater","selectedGroups","onChangeName","repeaterName","defaultRepeater","cardsGroupsIDs","repeater","onSaveRepeaterChannel","repeaterEditorService","saveRepeaterChannel","onUpdateGroupsIDsChannel","updateGroupsIDsChannel","onRepeaterChannel","selectedGroupsChannel","repeaterID","repeaterChannel","onSelectedGroupsChannel","RepeaterEditorContainer","RepeaterEditorService","saveRepeater","select","changeName","colors","chosenColors","RepeaterListItem","onStartRepeating","onDeleteRepeater","Stack","direction","groupsNames","isChosenColor","floor","random","indexOf","getRandomColor","Chip","borderColor","RepeaterListComponent","repeaters","onEditRepeater","onRepeaterListChannel","repeaterListService","repeaterListChannel","onStartRepeatingChannel","startRepeatingChannel","onRemoveRepeater","removingRepeaterChannel","RepeaterListContainer","RepeaterListService","startRepeating","removeRepeater","editRepeater","NavigationContainer","exact","from","SelectionDialogComponent","item","itemID","SelectionDialogContainer","jsonEqual","other","Array","JSON","stringify","fromThread","workerFunction","thread","functionString","toString","functionBlob","Blob","Worker","URL","createObjectURL","functionToThread","Observable","observer","postMessage","onmessage","data","complete","terminate","onerror","err","error","Channel","observableCreator","outputSubject","previousEmittedValue","this","Subject","customErrorHandler","outputSubjectSubscription","globalNextHandler","globalErrorHandler","equalityError","console","setGlobalErrorHandler","setGlobalNextHandler","defaultAppState","defaultStatistic","dailyStatistic","cardsInProgressFrequency","cardsInDone","StorageService","dataBaseService","cardsStorageID","authTokenLocalStorageID","settingsID","filterID","statisticID","repeatersID","getBackup","getBackupFromDataBase","a","get","setBackupToDataBase","set","Promise","resolve","reject","authToken","localStorage","getItem","setItem","parse","STORE_NAME","VoiceService","voices","speechSynthesis","addEventListener","getVoices","voice","lang","getBackupFolder","token","url","googleDriveFilesAPI","fetch","headers","method","then","json","find","mimeType","getCardsByGroup","foundCardsGroup","deleteSingleCard","cardGroupIndex","findIndex","cardIndex","selectedItemsObjectToArray","selectedItemsObject","array","getExistedCardsGroups","changeRangeOfKnowledge","TO_DO","getCardForRepeating","foundCard","randomIndex","copy","shuffleCards","refreshCardRepeatingDate","updateStatistic","today","getDate","month","getMonth","year","getFullYear","foundDayIndex","dayStatistic","synth","window","speaking","cancel","speechSynthesisUtterance","SpeechSynthesisUtterance","warn","rate","speak","prepareTextForVoiceEngine","log","getCardForViewing","i","getRepeaterByID","repeaterIndex","DependenciesMap","storageService","of","pipe","tap","setAuthToken","setBackup","getEditingCard","fileData","blob","fileBuffer","document","createElement","href","download","revokeObjectURL","saveBackupFile","backupFile","switchMap","difference","DataBaseService","dataBase","DATA_BASE_NAME","put","openDB","upgrade","db","createObjectStore","string","cardsGroupIndex","group","getCardsCount","getGroupName","getPageLabel","editedCardGroup","saveCardsGroup","cardGroupID","getEditingCardsGroup","getStatistic","getSettings","cardsInProgress","Map","Object","entries","b","cardsForRepeating","getDifficultCardsForRepeating","defer","millisecondsInDay","currentDate","timeInProgressMilliseconds","timeInDoneMilliseconds","differences","updateObsoleteStatus","updateRepeatingDate","statusDone","countRepeatedCardsPercent","mergeMap","getFilter","storedFilter","sortedCards","toLowerCase","firstCardGroup","secondCardsGroup","sortByFilter","deleteGroup","resetRepeatingProgress","storedFilters","setFilter","getAuthToken","folder","getBackupFiles","googleDriveFiles","googleDriveFile","outputFormat","getHours","getMinutes","formatCreatedDate","fileId","loadBackupFile","requestOptions","body","createBackupFolder","folderId","cardsAmount","createBackupName","fileName","parents","createEmptyBackupFile","responseType","uploadBackupFile","fileID","deleteBackupFile","foundByTextCards","card1","card2","filterCards","resetCardProgress","selectedCardsIDs","selectedCards","changeCardsGroup","copyCardsInGroup","deleteCards","cardsToIDS","ids","selectedItemsToIDs","voiceService","statisticValue","foundCards","getCardsByIDs","getRepeatingProgress","setStatistic","inputText","getRandomVoice","setSettings","reverse","dateAsString","monthAsString","inProgressSum","keys","k","doneSum","getRowsFromStatistic","getRepeaters","mapGroupsNameToRepeater","mappedRepeaters","repeatedCardsCount","updateRepeatersProgress","idsForRepeating","getCardsIDsFromRepeater","setRepeaters","updateExistRepeater","updateGroupsIDs","getSelectedGroups","App","appState","setAppState","screen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","catch","ReactDOM","render","getElementById","process","origin","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8fd0ec7a.chunk.js","sourcesContent":["export enum IDependenciesNames {\n    GoogleAuthService,\n    ErrorService,\n    CardsEditorService,\n    LocalBackupsService,\n    SpinnerService,\n    ConfirmDialogService,\n    StorageService,\n    DataBaseService,\n    SelectionDialogService,\n    NavigationPanelService,\n    ToolbarService,\n    VoiceService,\n    CardsGroupsEditorService,\n    CardsGroupsListService,\n    GoogleBackupsService,\n    CardsService,\n    CardsRepeaterService,\n    SettingsService,\n    CardViewerService,\n    StatisticService,\n    RepeaterListService,\n    RepeaterEditorService\n}","import {FC} from 'react';\nimport {AppBar, IconButton, Toolbar, Typography} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nimport './ToolbarComponent.css'\nimport {IToolbarComponent} from './types/IToolbarComponent';\n\nexport const ToolbarComponent: FC<IToolbarComponent> = ({pageLabel, onClick, cardsCount}) => {\n\n    return (\n        <AppBar position=\"fixed\">\n            <Toolbar className=\"toolbar\">\n                <IconButton className=\"toolbar_menu-icon\" edge=\"start\" color=\"inherit\" aria-label=\"menu\"\n                            onClick={onClick}>\n                    <MenuIcon/>\n                </IconButton>\n                <Typography className=\"toolbar_label\" variant=\"h6\">\n                    {pageLabel}{cardsCount !== -1 ? ` (cards count: ${cardsCount})` : ''}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n};\n","import {useEffect, useRef} from 'react';\nimport {Subscription} from 'rxjs';\n\nimport {Channel} from '../Channel';\n\nexport const useChannel = <A, D>(\n    channel: Channel<A, D>,\n    next?: (value: D) => void,\n    additionalErrorHandler?: (error: Error) => void,\n    deepEqual: boolean = false\n) => {\n\n    const value = useRef<{ subscription: Subscription | null }>({\n        subscription: null\n    });\n\n    if (!value.current.subscription || value.current.subscription.closed) {\n        const subscription = channel.subscribe(next, additionalErrorHandler, deepEqual);\n        value.current.subscription = subscription;\n    }\n\n    useEffect(() => {\n        return () => {\n            channel.unsubscribe();\n        }\n    }, [channel]);\n};\n","import {useHistory, useLocation} from 'react-router';\nimport {Context, useContext, useState} from 'react';\nimport {useUnsubscribe} from './useUnsubscribe';\nimport {ICallbackSettings} from '../react-types/ICallbackSettings';\nimport {CallbackFactory} from '../react-callback-factory/CallbackFactory';\n\nexport const useCallbackFactory = <T extends ICallbackSettings<any, any, any, any>>(\n    initialState: T['state'],\n    services: T['services'],\n    context: Context<T['context']>\n) => {\n    const location = useLocation<T['location']>();\n\n    const history = useHistory<T['location']>();\n\n    const [state, setState] = useState<T[\"state\"]>(initialState);\n\n    const {setSubscription} = useUnsubscribe();\n\n    const value = useContext<T[\"context\"]>(context);\n\n    const callbackSettings: ICallbackSettings<T['state'], T['services'], T['location']['state'], T['context']> = {\n        location,\n        history,\n        services,\n        state,\n        setState,\n        context: value,\n        setSubscription\n    }\n\n    const externalCallbackSettings = callbackSettings as Pick<ICallbackSettings<T['state'], T['services'], T['location']['state'], T['context']>,\n        Exclude<keyof ICallbackSettings<T['state'], T['services'], T['location']['state'], T['context']>, 'services'>>\n\n    return {\n        callbackFactory: CallbackFactory(callbackSettings),\n        externalCallbackSettings\n    };\n}","import {ICallback} from \"../react-types/ICallback\";\n\nexport const CallbackFactory = <S>(settings: S) => <A>(callback: ICallback<S, A>) => {\n    return (args?: A) => callback(settings, args)\n}","import {useEffect, useRef} from 'react';\nimport {Subscription} from 'rxjs';\n\nexport const useUnsubscribe = () => {\n\n    const subscriptions = useRef<Array<Subscription>>([]);\n\n    useEffect(() => {\n        return () => {\n            subscriptions.current.forEach((subscription: Subscription) => {\n                if( !subscription.closed ) {\n                    subscription.unsubscribe();\n                }\n            });\n            subscriptions.current = [];\n        }\n    }, []);\n\n    return { setSubscription: (subscribtion: Subscription) => {\n        subscriptions.current.push(subscribtion);\n    }}\n};\n","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ToolbarCallbackSettings} from '../types/ToolbarCallbackSettings';\n\nexport const onPageLabelChannel: ICallback<ToolbarCallbackSettings, string> = (\n    {setState},\n    label = ''\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            label\n        }\n    });\n}","export const empty = {\n    empty: 'empty'\n};","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ToolbarCallbackSettings} from \"../types/ToolbarCallbackSettings\";\nimport {MouseEvent} from \"react\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onClick: ICallback<ToolbarCallbackSettings, MouseEvent> = (\n    {services: {navigationPanelService}}\n) => {\n    navigationPanelService.navigationPanelOpenChannel.next(empty);\n}","import {IServicesProvider} from '../types/IServicesProvider';\n\nexport const defaultServiceProvider: IServicesProvider = {\n    dependenciesMap: {},\n    updateDependency: () => {\n    }\n};","import {createContext, FC, useRef} from 'react';\nimport {defaultServiceProvider} from './defaults/defaultServiceProvider';\nimport {IServicesProvider} from './types/IServicesProvider';\nimport {IDependenciesMap} from './types/IDependenciesMap';\n\nexport const DependenciesContext = createContext<IServicesProvider>(defaultServiceProvider);\n\nexport const DependenciesProvider: FC<{ dependenciesMap: IDependenciesMap }> = (\n    {dependenciesMap, children}\n) => {\n\n    const ref = useRef(dependenciesMap);\n\n    const updateDependency = (dependency: Object, key: string | number) => {\n        ref.current[key].dependency = dependency;\n    }\n\n    return <DependenciesContext.Provider value={{dependenciesMap: ref.current, updateDependency}}>\n        {children}\n    </DependenciesContext.Provider>\n}","import {IServicesProvider} from '../types/IServicesProvider';\n\nlet dependenciesInjectionPath: Array<number | string> = [];\nexport const getDependency = <T>(\n    dependencyKey: string | number,\n    context: IServicesProvider,\n    clearDependenciesPath = true\n): T => {\n    let dependency;\n    let initialArgs: Object[] = [];\n\n    if (clearDependenciesPath) {\n        dependenciesInjectionPath = [];\n    }\n\n    dependenciesInjectionPath.push(dependencyKey);\n    let countOfInjectionKey = 0;\n    dependenciesInjectionPath.forEach((key: string | number) => {\n        if (key === dependencyKey) {\n            countOfInjectionKey++;\n        }\n    });\n    if (countOfInjectionKey > 2) {\n        throw Error(`There seems to be circular dependency: ${dependenciesInjectionPath.join(' -> ')}!`);\n    }\n\n    if (\n        context.dependenciesMap[dependencyKey]\n        && !context.dependenciesMap[dependencyKey].dependency\n        && context.dependenciesMap[dependencyKey].dependencyConstructor\n    ) {\n        const constructor = context.dependenciesMap[dependencyKey].dependencyConstructor;\n        const args = context.dependenciesMap[dependencyKey].arguments;\n\n        initialArgs = args ? args.map(\n            (argument) => {\n                return getDependency(argument, context, false);\n            }\n        ) : [];\n\n        const classInstance = new constructor(...initialArgs);\n        context.updateDependency(classInstance, dependencyKey);\n        dependency = classInstance;\n    } else if (\n        context.dependenciesMap[dependencyKey]\n        && context.dependenciesMap[dependencyKey].dependency\n    ) {\n        dependency = context.dependenciesMap[dependencyKey].dependency;\n    } else {\n        throw Error(`There is no any suited dependency with name: ${dependencyKey}!`);\n    }\n    return dependency as T;\n}","import {useContext, useMemo} from 'react';\nimport {IServicesProvider} from '../types/IServicesProvider';\nimport {DependenciesContext} from '../DependenciesProvider';\nimport {getDependency} from '../logic/getDependency';\n\nexport const useDependencyContext = <T>(dependencyKey: string | number): T => {\n    const context = useContext<IServicesProvider>(DependenciesContext);\n\n    const dependency = useMemo(() => {\n        return getDependency(dependencyKey, context);\n    }, []);\n\n    return dependency as T;\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ToolbarCallbackSettings} from '../types/ToolbarCallbackSettings';\n\nexport const onLoadCardsCount: ICallback<ToolbarCallbackSettings, string> = (\n    {\n        location,\n        services: {toolbarService}\n    }\n) => {\n    toolbarService.cardsCountInGroupChannel.next({\n        path: location.pathname,\n        cardsGroupsId: location.state ? location.state.cardsGroupID : -1\n    });\n}","import {ToolbarContainerState} from '../types/ToolbarContainerState';\n\nexport const initialState: ToolbarContainerState = {\n    label: '',\n    cardsCount: -1\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ToolbarCallbackSettings} from '../types/ToolbarCallbackSettings';\n\nexport const onCardsCountInGroupChannel: ICallback<ToolbarCallbackSettings, number> = (\n    {setState},\n    cardsCount = -1\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            cardsCount\n        }\n    })\n}","import {ToolbarCallbackSettings} from '../types/ToolbarCallbackSettings';\nimport {ICallback} from '../../../../MyTools/react-types/ICallback';\n\nexport const onLoadLabel: ICallback<ToolbarCallbackSettings, string> = (\n    {\n        location,\n        services: {toolbarService}\n    }\n) => {\n    toolbarService.pageLabelChannel.next({\n        path: location.pathname,\n        cardsGroupsId: location.state ? location.state.cardsGroupID : -1\n    });\n}","import React, {FC, useCallback, useEffect} from 'react';\n\nimport {ToolbarComponent} from './ToolbarComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {ToolbarCallbackSettings} from './types/ToolbarCallbackSettings';\nimport {onPageLabelChannel} from './channels-callbacks/onPageLabelChannel';\nimport {onClick} from './ui-callbacks/onClick';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {ToolbarService} from './ToolbarService';\nimport {NavigationPanelService} from '../navigation-panel/NavigationPanelService';\nimport {onLoadCardsCount} from './ui-callbacks/onLoadCardsCount';\nimport {initialState} from './defaults/initialState';\nimport {onCardsCountInGroupChannel} from './channels-callbacks/onCardsCountInGroupChannel';\nimport {onLoadLabel} from './ui-callbacks/onLoadLabel';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const ToolbarContainer: FC = () => {\n\n    const toolbarService = useDependencyContext<ToolbarService>(IDependenciesNames.ToolbarService);\n    const navigationPanelService = useDependencyContext<NavigationPanelService>(IDependenciesNames.NavigationPanelService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<ToolbarCallbackSettings>(\n        initialState,\n        {toolbarService, navigationPanelService},\n        AppContext\n    );\n\n    const {state, location} = externalCallbackSettings;\n\n    useChannel(toolbarService.pageLabelChannel, callbackFactory(onPageLabelChannel))\n    useChannel(toolbarService.cardsCountInGroupChannel, callbackFactory(onCardsCountInGroupChannel))\n\n    useEffect(() => {\n        callbackFactory(onLoadLabel)();\n        callbackFactory(onLoadCardsCount)();\n    }, [location.pathname]);\n\n    const click = useCallback(callbackFactory(onClick), []);\n\n    return (\n        <ToolbarComponent pageLabel={state.label} onClick={click} cardsCount={state.cardsCount}/>\n    )\n};\n","export enum ISortVariant {\n    NONE = 'Нет сортировки',\n    QUESTION_ASK = 'По вопросу по возрастанию',\n    QUESTION_DESK = 'По вопросу по убыванию',\n    ANSWER_ASK = 'По ответу по возрастанию',\n    ANSWER_DESK = 'По ответу по убыванию',\n    NAME_ASK = 'По имени по возрастанию',\n    NAME_DESK = 'По имени по убыванию',\n    STATUS_ASK = 'По стсатусу сначала пройденные',\n    STATUS_DESK = 'По статусу сначала не пройденные',\n    DATE_ASK = 'По дате повторения сначала устаревшие',\n    DATE_DESK = 'По дате повторения сначала новые',\n    PROGRESS_ASK = 'Прогресс повторения повышение',\n    PROGRESS_DESC = 'Прогресс повторения понижение',\n}","export const Routs = {\n    googleAuth: {\n        path: '/google-auth',\n        name: 'Auth Google'\n    },\n\n    googleBackups: {\n        path: '/google-backups',\n        name: 'Google Backups'\n    },\n\n    cardsGroups: {\n        path: '/cards-groups',\n        name: 'Cards Groups'\n    },\n\n    cards: {\n        path: '/cards-list',\n        name: 'Cards'\n    },\n\n    cardsRepeater: {\n        path: '/cards-repeater',\n        name: 'Repeat Card'\n    },\n\n    cardsEditor: {\n        path: '/cards-editor',\n        name: 'Edit Card'\n    },\n\n    localBackups: {\n        path: '/local-backups',\n        name: 'Local Backups'\n    },\n\n    cardsGroupEditor: {\n        path: '/cards-group-editor',\n        name: 'Edit Group'\n    },\n\n    settings: {\n        path: '/settings',\n        name: 'Settings'\n    },\n\n    cardViewer: {\n        path: '/card-viewer',\n        name: 'Card Preview'\n    },\n\n    statistic: {\n        path: '/statistic',\n        name: 'Statistic'\n    },\n\n    repeaterEditor: {\n        path: '/repeater-editor',\n        name: 'Edit repeater'\n    },\n\n    repeaterList: {\n        path: '/repeater-list',\n        name: 'Repeater list'\n    }\n};\n","import {Link} from 'react-router-dom';\nimport {ListItem} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {INavigationLinkComponent} from \"./types/INavigationLinkComponent\";\n\nexport const NavigationLinkComponent: FC<INavigationLinkComponent> = (\n    {\n        path,\n        name,\n        toggleDrawer\n    }: INavigationLinkComponent\n) => {\n    return (\n        <ListItem button>\n            <Link to={path} onClick={toggleDrawer}>\n                {name}\n            </Link>\n        </ListItem>\n    )\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {List, SwipeableDrawer} from '@mui/material';\n\nimport {Routs} from '../../common/Routs';\nimport {NavigationLinkComponent} from './elements/navigation-link-component/NavigationLinkComponent';\nimport {INavigationPanelComponent} from \"./types/INavigationPanelComponent\";\n\nexport const NavigationPanelComponent: FC<INavigationPanelComponent> = ({isOpen, toggleDrawer}) => {\n\n    return (\n        <SwipeableDrawer\n            anchor=\"left\"\n            open={isOpen}\n            onClose={toggleDrawer}\n            onOpen={toggleDrawer}\n        >\n            <List>\n                <NavigationLinkComponent path={Routs.cardsGroups.path} name={Routs.cardsGroups.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.repeaterList.path} name={Routs.repeaterList.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.statistic.path} name={Routs.statistic.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.googleAuth.path} name={Routs.googleAuth.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.localBackups.path} name={Routs.localBackups.name}\n                                         toggleDrawer={toggleDrawer}/>\n                <NavigationLinkComponent path={Routs.settings.path} name={Routs.settings.name}\n                                         toggleDrawer={toggleDrawer}/>\n            </List>\n        </SwipeableDrawer>\n    )\n};\n\n\n","export const initialState = {\n    isOpen: false\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {NavigationPanelCallbackSettings} from \"../types/NavigationPanelCallbackSettings\";\nimport {IEmpty} from \"../../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport const onNavigationPanelOpenChannel: ICallback<NavigationPanelCallbackSettings, IEmpty> = (\n    {setState}\n) => {\n    setState((prevState) => {\n        return {...prevState, isOpen: true}\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {NavigationPanelCallbackSettings} from \"../types/NavigationPanelCallbackSettings\";\nimport {SyntheticEvent} from \"react\";\n\nexport const onToggleDrawer: ICallback<NavigationPanelCallbackSettings, SyntheticEvent<Element, Event>> = (\n    {setState},\n    event\n) => {\n    const keyboardEvent = event && event.nativeEvent as KeyboardEvent\n    if (event && event.type === 'keydown' && (keyboardEvent?.key === 'Tab' || keyboardEvent?.key === 'Shift')) {\n        return;\n    }\n\n    setState((prevState) => {\n        return {...prevState, isOpen: !prevState.isOpen}\n    });\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {NavigationPanelComponent} from './NavigationPanelComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {initialState} from './defaults/initialState';\nimport {onNavigationPanelOpenChannel} from './channels-callbacks/onNavigationPanelOpenChannel';\nimport {onToggleDrawer} from './ui-callbacks/onToggleDrawer';\nimport {NavigationPanelCallbackSettings} from './types/NavigationPanelCallbackSettings';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {NavigationPanelService} from './NavigationPanelService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const NavigationPanelContainer: FC = () => {\n\n    const navigationPanelService = useDependencyContext<NavigationPanelService>(IDependenciesNames.NavigationPanelService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<NavigationPanelCallbackSettings>(\n        initialState,\n        {navigationPanelService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel(navigationPanelService.navigationPanelOpenChannel, callbackFactory(onNavigationPanelOpenChannel));\n\n    const toggleDrawer = useCallback(callbackFactory(onToggleDrawer), []);\n\n    return (\n        <NavigationPanelComponent isOpen={state.isOpen} toggleDrawer={toggleDrawer}/>\n    )\n};\n","import {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {IErrorComponent} from './types/IErrorComponent';\n\nexport const ErrorComponent: FC<IErrorComponent> = ({isOpen, errorMessage, handleClose}) => {\n\n    return (\n        <Dialog\n            open={isOpen}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n            onClose={handleClose}\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"Something went wrong\"}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {errorMessage}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button color=\"primary\" onClick={handleClose}>\n                    Ok\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n","export const initialState = {\n    isOpen: false,\n    errorMessage: ''\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ErrorCallbackSettings} from '../types/ErrorCallbackSettings';\n\nexport const onErrorChannel: ICallback<ErrorCallbackSettings, string> = (\n    {setState},\n    errorMessage = ''\n) => {\n    setState(() => {\n        return {\n            isOpen: true,\n            errorMessage\n        }\n    })\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ErrorCallbackSettings} from '../types/ErrorCallbackSettings';\nimport {initialState} from '../defaults/initialState';\n\nexport const onClose: ICallback<ErrorCallbackSettings, void> = (\n    {setState}\n) => {\n    setState(() => {\n        return initialState\n    })\n}","import React, {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {ErrorComponent} from './ErrorComponent';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {initialState} from './defaults/initialState';\nimport {onErrorChannel} from './channels-callbacks/onErrorChannel';\nimport {onClose} from './ui-callbacks/onClose';\nimport {ErrorCallbackSettings} from './types/ErrorCallbackSettings';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {ErrorService} from './ErrorService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const ErrorContainer: FC = () => {\n\n    const errorService = useDependencyContext<ErrorService>(IDependenciesNames.ErrorService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<ErrorCallbackSettings>(\n        initialState,\n        {\n            errorService\n        },\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel(errorService.errorChannel, callbackFactory(onErrorChannel));\n\n    const close = useCallback(callbackFactory(onClose), []);\n\n    return <ErrorComponent isOpen={state.isOpen} errorMessage={state.errorMessage} handleClose={close}/>\n};\n","import {LinearProgress} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport {ISpinnerComponent} from \"./types/ISpinnerComponent\";\n\nexport const SpinnerComponent: FC<ISpinnerComponent> = ({isShow}) => {\n    return (\n        isShow ? <LinearProgress color=\"secondary\" /> : null\n    )\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SpinnerCallbackSettings} from \"../types/SpinnerCallbackSettings\";\n\nexport const onSpinnerCounterChannel: ICallback<SpinnerCallbackSettings, number> = (\n    {setState},\n    spinnerCounter = 0\n) => {\n    setState(() => spinnerCounter !== 0);\n}","import * as React from 'react';\nimport {FC} from 'react';\n\nimport {SpinnerComponent} from './SpinnerComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {SpinnerCallbackSettings} from './types/SpinnerCallbackSettings';\nimport {onSpinnerCounterChannel} from './channels-callbacks/onSpinnerCounterChannel';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {SpinnerService} from './SpinnerService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const SpinnerContainer: FC = () => {\n\n    const spinnerService = useDependencyContext<SpinnerService>(IDependenciesNames.SpinnerService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<SpinnerCallbackSettings>(\n        false,\n        {spinnerService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel<number, number>(spinnerService.spinnerCounterChannel, callbackFactory(onSpinnerCounterChannel));\n\n    return <SpinnerComponent isShow={state}/>\n};\n","import DialogTitle from \"@mui/material/DialogTitle\";\nimport React, {FC} from \"react\";\n\nimport {IDialogTitleComponent} from \"./types/IDialogTitleComponent\";\nimport './DialogTitleComponent.css'\n\nexport const DialogTitleComponent: FC<IDialogTitleComponent> = (\n    {\n        titleBackgroundColor = 'grey',\n        icon = null\n    }\n) => {\n    return <DialogTitle\n        id=\"alert-dialog-title\"\n        style={\n            {\n                backgroundColor: titleBackgroundColor,\n                color: 'white'\n            }\n        }\n    >\n        <div className=\"dialog-title_value\">\n            Warning {icon}\n        </div>\n    </DialogTitle>\n}","import React, {FC} from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\nimport {IConfirmDialogComponent} from \"./types/IConfirmDialogComponent\";\nimport {DialogTitleComponent} from \"./elements/dialog-title/DialogTitleComponent\";\n\nexport const ConfirmDialogComponent: FC<IConfirmDialogComponent> = (\n    {\n        onClickAgree,\n        onClickDisagree,\n        isOpen,\n        message,\n        onClose,\n        titleBackgroundColor = 'grey',\n        icon = null\n    }\n) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitleComponent\n                    titleBackgroundColor={titleBackgroundColor}\n                    icon={icon}\n                />\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClickDisagree} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={onClickAgree} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n","import {ConfirmDialogContainerState} from \"../../parts/confirm-dialog/types/ConfirmDialogContainerState\";\n\nexport const defaultConfirmDialogState: ConfirmDialogContainerState = {\n    isOpen: false,\n    message: '',\n    icon: null,\n    titleBackgroundColor: 'grey'\n}","import {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\nimport {ConfirmDialogContainerState} from \"../types/ConfirmDialogContainerState\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\n\nexport const onOpenDialogChannel: ICallback<ConfirmDialogCallbackSettings, ConfirmDialogContainerState> = (\n    {setState, services: {confirmDialogService}},\n    confirmDialogContainerState = defaultConfirmDialogState\n) => {\n    setState(() => {\n        return {...confirmDialogContainerState}\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\n\nexport const onClose: ICallback<ConfirmDialogCallbackSettings, void> = (\n    {setState, services: {confirmDialogService}}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            isOpen: false, message: ''\n        }\n    });\n    confirmDialogService.confirmationChannel.unsubscribe();\n}","import {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\n\nexport const onClickAgree: ICallback<ConfirmDialogCallbackSettings, void> = (\n    {services: {confirmDialogService}}\n) => {\n    confirmDialogService.confirmationChannel.next(true);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ConfirmDialogCallbackSettings} from \"../types/ConfirmDialogCallbackSettings\";\n\nexport const onClickDisagree: ICallback<ConfirmDialogCallbackSettings, void> = (\n    {services: {confirmDialogService}}\n) => {\n    confirmDialogService.confirmationChannel.next(false);\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {ConfirmDialogComponent} from './ConfirmDialogComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {defaultConfirmDialogState} from '../../common/defaults/defaultConfirmDialogState';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {onOpenDialogChannel} from './channels-callbacks/onOpenDialogChannel';\nimport {onClose} from './ui-callbacks/onClose';\nimport {onClickAgree} from './ui-callbacks/onClickAgree';\nimport {onClickDisagree} from './ui-callbacks/onClickDisagree';\nimport {ConfirmDialogCallbackSettings} from './types/ConfirmDialogCallbackSettings';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {ConfirmDialogService} from './ConfirmDialogService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const ConfirmDialogContainer: FC = () => {\n\n    const confirmDialogService = useDependencyContext<ConfirmDialogService>(IDependenciesNames.ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<ConfirmDialogCallbackSettings>(\n        defaultConfirmDialogState,\n        {\n            confirmDialogService\n        },\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel(confirmDialogService.openDialogChannel, callbackFactory(onOpenDialogChannel));\n\n    const close = useCallback(callbackFactory(onClose), []);\n    const clickAgree = useCallback(callbackFactory(onClickAgree), [])\n    const clickDisagree = useCallback(callbackFactory(onClickDisagree), [])\n\n    return <ConfirmDialogComponent\n        isOpen={state.isOpen}\n        onClickAgree={clickAgree}\n        onClickDisagree={clickDisagree}\n        onClose={close}\n        message={state.message}\n        titleBackgroundColor={state.titleBackgroundColor}\n        icon={state.icon}\n    />\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport Fab from '@mui/material/Fab';\nimport AddIcon from '@mui/icons-material/Add';\n\nimport {IAddButton} from \"./types/IAddButton\";\nimport './AddButtonComponent.css'\n\nexport const AddButtonComponent: FC<IAddButton> = ({onClick}) => {\n    return <Fab size=\"medium\" color=\"secondary\" aria-label=\"add\" className=\"add-button\" onClick={onClick}>\n        <AddIcon/>\n    </Fab>\n};\n","import React, {FC} from 'react';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nimport {ICircularProgressComponent} from \"./types/ICircularProgressComponent\";\n\nexport const CircularProgressComponent: FC<ICircularProgressComponent> = ({percent}) => {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" value={percent}/>\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                    percent,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n};\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nimport {IListItemMenuComponent} from './types/IListItemMenuComponent';\n\nexport const ListItemMenuComponent: FC<IListItemMenuComponent> = (\n    {menuSetup}\n) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const onMenuClick = (handler: () => void) => () => {\n        handler();\n        handleClose();\n    }\n\n    return (\n        <>\n            <Menu\n                id=\"menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {menuSetup.map((menuItem) => {\n                    return <MenuItem key={menuItem.fieldName} onClick={onMenuClick(menuItem.handler)}>\n                        {menuItem.fieldName}\n                    </MenuItem>\n                })}\n            </Menu>\n            <IconButton aria-controls=\"menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n","export const DATE_FORMAT = \"dd-MM-yyyy\";","import React, {FC} from 'react'\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\n\nimport {CircularProgressComponent} from '../circular-progress/CircularProgressComponent';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport './CardsGroupsListItemComponent.css'\nimport {ICardsGroupsListItemComponent} from './types/ICardsGroupsListItemComponent';\nimport {DATE_FORMAT} from '../../../../common/constants/DATE_FORMAT';\nimport {IMenuSetupItem} from '../../../../common/elements/list-item-menu/types/IMenuSetupItem';\n\nexport const CardsGroupsListItemComponent: FC<ICardsGroupsListItemComponent> = (\n    {\n        cardsGroup,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onStartRepeatingDifficultCards\n    }\n) => {\n\n    const menuSetup: IMenuSetupItem[] = [\n        {\n            fieldName: 'Start Repeating Difficult Cards',\n            handler: () => {\n                onStartRepeatingDifficultCards(cardsGroup.id);\n            }\n        },\n        {\n            fieldName: 'Edit',\n            handler: () => {\n                onEditItem(cardsGroup.id);\n            }\n        },\n        {\n            fieldName: 'Delete',\n            handler: () => {\n                onDeleteItem(cardsGroup.id);\n            }\n        },\n        {\n            fieldName: 'Reset progress',\n            handler: () => {\n                onResetProgress(cardsGroup.id);\n            }\n        }\n    ];\n\n    return <>\n        <ListItem key={cardsGroup.id} button component=\"div\">\n            <ListItemIcon onClick={() => onClickItem(cardsGroup.id)}>\n                <CircularProgressComponent percent={cardsGroup.percentRepeatedCards || 0}/>\n            </ListItemIcon>\n            <ListItemText\n                className=\"cards-groups-list-item_card-name\"\n                onClick={() => onClickItem(cardsGroup.id)}\n                primary={cardsGroup.nameCardsGroup}\n                secondary={'Last repeating date: ' + format(cardsGroup.repeatingDate ? cardsGroup.repeatingDate : new Date(), DATE_FORMAT)}\n            />\n            <ListItemIcon>\n                <ListItemMenuComponent menuSetup={menuSetup}/>\n            </ListItemIcon>\n        </ListItem>\n    </>\n};\n","import {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    TextField,\n} from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport {ChangeEvent, default as React, FC} from \"react\";\n\nimport {ISortVariant} from \"../../types/ISortVariant\";\nimport {IFilterComponent} from \"./types/IFilterComponent\";\n\nexport const FilterComponent: FC<IFilterComponent> = (\n    {\n        onChangeSearchableText,\n        filter,\n        onChangeSorting,\n        sortVariants\n    }\n) => {\n\n    const handleChangingSearchableText = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeSearchableText(event.target.value);\n    };\n\n    const handleChangingSortingVariant = (event: SelectChangeEvent<ISortVariant>) => {\n        onChangeSorting(event.target.value as ISortVariant)\n    }\n\n    return <Accordion>\n        <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n        >\n            <TextField\n                className=\"text-editor\"\n                required\n                id=\"outlined-required\"\n                placeholder=\"Search text\"\n                onChange={handleChangingSearchableText}\n                value={filter.searchableText}\n                style={{\n                    marginRight: '20px',\n                }}\n                onClick={(event) => {\n                    event.stopPropagation()\n                    event.preventDefault()\n                }}\n            />\n        </AccordionSummary>\n        <AccordionDetails>\n            <Select\n                value={filter.sort}\n                label=\"Sorting\"\n                onChange={handleChangingSortingVariant}\n            >\n                {\n                    sortVariants.map((variant: ISortVariant) => {\n                        return <MenuItem key={variant} value={variant}>{variant}</MenuItem>\n                    })\n                }\n            </Select>\n        </AccordionDetails>\n    </Accordion>\n}","import React, {FC} from 'react';\nimport {FixedSizeList as List} from 'react-window';\n\nimport './CardsGroupsListComponent.css'\nimport {AddButtonComponent} from '../../common/elements/add-button/AddButtonComponent';\nimport {CardsGroupsListItemComponent} from './elements/cards-groups-list-item/CardsGroupsListItemComponent';\nimport {ICardsGroupsListComponent} from './types/ICardsGroupsListComponent';\nimport {FilterComponent} from '../../common/elements/filter/FilterComponent';\nimport {ISortVariant} from '../../common/types/ISortVariant';\n\nexport const CardsGroupsListComponent: FC<ICardsGroupsListComponent> = (\n    {\n        cardsGroups,\n        onClickItem,\n        onEditItem,\n        onDeleteItem,\n        onOpenEditor,\n        onResetProgress,\n        onChangeSearchableText,\n        onChangeSorting,\n        onStartRepeatingDifficultCards,\n        filter,\n        height,\n    }\n) => {\n\n    return <>\n        <FilterComponent\n            filter={filter}\n            onChangeSearchableText={onChangeSearchableText}\n            onChangeSorting={onChangeSorting}\n            sortVariants={[\n                ISortVariant.NONE,\n                ISortVariant.DATE_ASK,\n                ISortVariant.DATE_DESK,\n                ISortVariant.NAME_ASK,\n                ISortVariant.NAME_DESK,\n                ISortVariant.PROGRESS_ASK,\n                ISortVariant.PROGRESS_DESC\n            ]}\n        />\n        <List\n            className=\"cards-groups\"\n            itemData={cardsGroups}\n            itemSize={55}\n            itemCount={cardsGroups.length}\n            overscanCount={5}\n            height={height}\n            width=\"100%\"\n        >\n            {({index, style}: any) => {\n                const cardGroup = cardsGroups[index];\n                return <div style={style}><CardsGroupsListItemComponent\n                    key={cardGroup.id}\n                    cardsGroup={cardGroup}\n                    onClickItem={onClickItem}\n                    onEditItem={onEditItem}\n                    onDeleteItem={onDeleteItem}\n                    onResetProgress={onResetProgress}\n                    onStartRepeatingDifficultCards={onStartRepeatingDifficultCards}\n                /></div>\n            }}\n        </List>\n        <AddButtonComponent onClick={onOpenEditor}/>\n    </>\n};\n","export enum IRangeOfKnowledge {\n    TO_DO,\n    IN_PROGRESS,\n    DONE\n}\n","import {useRef} from 'react';\n\nexport const useConstructor = (callback: () => void) => {\n\n    const value = useRef({isFirstRun: true});\n\n    if (value.current.isFirstRun) {\n        callback();\n        value.current.isFirstRun = false;\n    }\n};\n","import RefreshIcon from '@mui/icons-material/Refresh';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onResetProgress: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {services, setSubscription},\n    cardsGroupID = -1\n) => {\n    const {confirmDialogService, cardsGroupsListService} = services;\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsGroupsListService.resetProgressChannel.next(cardsGroupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to reset progress of this group?',\n        titleBackgroundColor: 'green',\n        icon: <RefreshIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {history, location},\n    cardsGroupID = -1\n) => {\n    history.push({\n        pathname: Routs.cardsGroupEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: cardsGroupID\n        }\n    })\n}","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {\n        history,\n        location,\n        services: {\n            confirmDialogService,\n            cardsGroupsListService\n        },\n        setSubscription\n    },\n    cardsGroupID = -1\n) => {\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            cardsGroupsListService.groupDeleteChannel.next(cardsGroupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this group?',\n        icon: <DeleteIcon/>,\n        titleBackgroundColor: 'red'\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onOpenEditor: ICallback<ICardsGroupsCallbackSettings, void> = (\n    {history}\n) => {\n    history.push({\n        pathname: Routs.cardsGroupEditor.path\n    })\n}","import {Routs} from \"../../../common/Routs\";\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onClickItem: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {history, location},\n    cardsGroupID = -1\n) => {\n    history.push({\n        pathname: Routs.cards.path,\n        state: {\n            ...location.state,\n            cardsGroupID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<ICardsGroupsCallbackSettings, void> = (\n    {services}\n) => {\n    services.cardsGroupsListService.groupsListChannel.next(empty);\n    services.cardsGroupsListService.filterChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onResetProgressChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {\n        services: {\n            cardsGroupsListService\n        },\n    }\n) => {\n    cardsGroupsListService.groupsListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onGroupDeleteChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {\n        services: {\n            cardsGroupsListService\n        }\n    }\n) => {\n    cardsGroupsListService.groupsListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupsListChannel: ICallback<ICardsGroupsCallbackSettings, ICardsGroup[]> = (\n    {setState},\n    cardsGroups = []\n) => {\n    setState((prevState) => {\n        return {...prevState, cardsGroups}\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const onChangeSorting: ICallback<ICardsGroupsCallbackSettings, ISortVariant> = (\n    {services: {cardsGroupsListService}, setState},\n    sortVariant = ISortVariant.NONE\n) => {\n    setState((prevState) => {\n        const newFilter = {\n            ...prevState.filter,\n            sort: sortVariant\n        }\n        cardsGroupsListService.changeFilterChannel.next(newFilter);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {IStoredFilters} from \"../../../common/types/IStoredFilters\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onChangeFilterChannel: ICallback<ICardsGroupsCallbackSettings, IStoredFilters> = (\n    {\n        services: {\n            cardsGroupsListService\n        }\n    }\n) => {\n    cardsGroupsListService.filterChannel.next(empty);\n    cardsGroupsListService.groupsListChannel.next(empty);\n}","import {ISortVariant} from \"../types/ISortVariant\";\n\nexport const defaultFilter = {\n    searchableText: '',\n    sort: ISortVariant.NONE\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const onFilterChannel: ICallback<ICardsGroupsCallbackSettings, IFilter> = (\n    {setState, services},\n    filter = defaultFilter\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            filter\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsCallbackSettings} from \"../types/ICardsGroupsCallbackSettings\";\n\nexport const onChangeSearchableText: ICallback<ICardsGroupsCallbackSettings, string> = (\n    {\n        setState,\n        services: {\n            cardsGroupsListService\n        }\n    },\n    searchableText = ''\n) => {\n    setState((prevState) => {\n        cardsGroupsListService.changeFilterChannel.next({\n            ...prevState.filter,\n            searchableText\n        })\n        return prevState\n    })\n}","import {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const initialState = {\n    cardsGroups: [],\n    filter: defaultFilter\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ICardsGroupsCallbackSettings} from '../types/ICardsGroupsCallbackSettings';\n\nexport const onStartRepeatingDifficultCards: ICallback<ICardsGroupsCallbackSettings, number> = (\n    {services: {cardsGroupsListService}},\n    cardsGroupId = -1\n) => {\n    cardsGroupsListService.startRepeatingDifficultCardsChannel.next(cardsGroupId);\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {ICardsGroupsCallbackSettings} from '../types/ICardsGroupsCallbackSettings';\nimport {Routs} from '../../../common/Routs';\n\nexport const onStartRepeatingDifficultCardsChannel: ICallback<ICardsGroupsCallbackSettings, number[]> = (\n    {\n        history,\n        location,\n        services: {\n            cardsGroupsListService\n        },\n    },\n    cardsIDs = []\n) => {\n    history.push({\n        pathname: Routs.cardsRepeater.path,\n        state: {\n            ...location.state,\n            cardsIDsForRepeating: cardsIDs\n        }\n    })\n}","import React, {FC, useCallback} from 'react';\n\nimport {CardsGroupsListComponent} from './CardsGroupsListComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {AppContext} from '../../../App';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {onResetProgress} from './ui-callbacks/onResetProgress';\nimport {onEditItem} from './ui-callbacks/onEditItem';\nimport {onDeleteItem} from './ui-callbacks/onDeleteItem';\nimport {onOpenEditor} from './ui-callbacks/onOpenEditor';\nimport {onClickItem} from './ui-callbacks/onClickItem';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onResetProgressChannel} from './channels-callbacks/onResetProgressChannel';\nimport {onGroupDeleteChannel} from './channels-callbacks/onGroupDeleteChannel';\nimport {onGroupsListChannel} from './channels-callbacks/onGroupsListChannel';\nimport {onChangeSorting} from './ui-callbacks/onChangeSorting';\nimport {onChangeFilterChannel} from './channels-callbacks/onChangeFilterChannel';\nimport {onFilterChannel} from './channels-callbacks/onFilterChannel';\nimport {onChangeSearchableText} from './ui-callbacks/onChangeSearchableText';\nimport {initialState} from './defaults/initialState';\nimport {ICardsGroupsCallbackSettings} from './types/ICardsGroupsCallbackSettings';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {CardsGroupsListService} from './CardsGroupsListService';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {onStartRepeatingDifficultCards} from './ui-callbacks/onStartRepeatingDifficultCards';\nimport {onStartRepeatingDifficultCardsChannel} from './channels-callbacks/onStartRepeatingDifficultCardsChannel';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const CardsGroupsListContainer: FC = () => {\n\n    const cardsGroupsListService = useDependencyContext<CardsGroupsListService>(IDependenciesNames.CardsGroupsListService);\n    const confirmDialogService = useDependencyContext<ConfirmDialogService>(IDependenciesNames.ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<ICardsGroupsCallbackSettings>(\n        initialState,\n        {cardsGroupsListService, confirmDialogService},\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings;\n\n    useChannel(cardsGroupsListService.groupsListChannel, callbackFactory(onGroupsListChannel));\n    useChannel(cardsGroupsListService.groupDeleteChannel, callbackFactory(onGroupDeleteChannel));\n    useChannel(cardsGroupsListService.resetProgressChannel, callbackFactory(onResetProgressChannel));\n    useChannel(cardsGroupsListService.changeFilterChannel, callbackFactory(onChangeFilterChannel));\n    useChannel(cardsGroupsListService.filterChannel, callbackFactory(onFilterChannel))\n    useChannel(cardsGroupsListService.startRepeatingDifficultCardsChannel, callbackFactory(onStartRepeatingDifficultCardsChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const clickItem = useCallback(callbackFactory(onClickItem), []);\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const deleteItem = useCallback(callbackFactory(onDeleteItem), []);\n    const editItem = useCallback(callbackFactory(onEditItem), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const changeSorting = useCallback(callbackFactory(onChangeSorting), []);\n    const changeSearchableText = useCallback(callbackFactory(onChangeSearchableText), []);\n    const startRepeatingDifficultCards = useCallback(callbackFactory(onStartRepeatingDifficultCards), [])\n\n    return <CardsGroupsListComponent\n        onClickItem={clickItem}\n        onOpenEditor={openEditor}\n        onDeleteItem={deleteItem}\n        onEditItem={editItem}\n        onResetProgress={resetProgress}\n        onChangeSorting={changeSorting}\n        filter={state.filter}\n        onChangeSearchableText={changeSearchableText}\n        onStartRepeatingDifficultCards={startRepeatingDifficultCards}\n        height={context.height}\n        cardsGroups={state.cardsGroups}/>\n};\n","import GoogleLogin from 'react-google-login';\nimport * as React from 'react';\nimport {FC} from 'react';\nimport './GoogleAuthComponent.css'\nimport {IGoogleAuthComponent} from \"./types/IGoogleAuthComponent\";\n\nexport const GoogleAuthComponent: FC<IGoogleAuthComponent> = ({onSuccess, onFailure, height}) => {\n    return (\n        <div className=\"google-auth\" style={{height}}>\n            <GoogleLogin\n                className=\"google-auth_button\"\n                clientId=\"627973926597-tj2la0mnorvm04cqmcosu2nj3b02g6k2.apps.googleusercontent.com\"\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                scope={'profile email https://www.googleapis.com/auth/drive'}\n            />\n        </div>\n    )\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleLoginResponse, GoogleLoginResponseOffline} from \"react-google-login\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\n\nexport const onSuccess: ICallback<GoogleAuthCallbackSettings, GoogleLoginResponse | GoogleLoginResponseOffline> = (\n    {services: {googleAuthService}},\n    response\n) => {\n    googleAuthService.loginChannel.next((response as GoogleLoginResponse).accessToken);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\nimport {GoogleLoginResponse, GoogleLoginResponseOffline} from \"react-google-login\";\n\nexport const onFailure: ICallback<GoogleAuthCallbackSettings, GoogleLoginResponse | GoogleLoginResponseOffline> = (\n    {services: {errorService}}\n) => {\n    errorService.errorChannel.next('Error of connection');\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleAuthCallbackSettings} from \"../types/GoogleAuthCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onLoginChannel: ICallback<GoogleAuthCallbackSettings, string> = (\n    {history}\n) => {\n    history.replace(Routs.googleBackups.path);\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {GoogleAuthComponent} from './GoogleAuthComponent';\nimport {AppContext} from '../../../App';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {onSuccess} from './ui-callbacks/onSuccess';\nimport {onFailure} from './ui-callbacks/onFailure';\nimport {onLoginChannel} from './channels-callbacks/onLoginChannel';\nimport {GoogleAuthCallbackSettings} from './types/GoogleAuthCallbackSettings';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {GoogleAuthService} from './GoogleAuthService';\nimport {ErrorService} from '../../parts/error-dialog/ErrorService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const GoogleAuthContainer: FC = () => {\n\n    const googleAuthService = useDependencyContext<GoogleAuthService>(IDependenciesNames.GoogleAuthService);\n    const errorService = useDependencyContext<ErrorService>(IDependenciesNames.ErrorService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<GoogleAuthCallbackSettings>(\n        null,\n        {googleAuthService, errorService},\n        AppContext\n    );\n\n    const {context} = externalCallbackSettings;\n\n    useChannel(googleAuthService.loginChannel, callbackFactory(onLoginChannel));\n\n    const success = useCallback(callbackFactory(onSuccess), []);\n    const failure = useCallback(callbackFactory(onFailure), []);\n\n    return <GoogleAuthComponent\n        onSuccess={success}\n        onFailure={failure}\n        height={context.height}\n    />;\n};\n","import MoreVertIcon from '@mui/icons-material/MoreVert';\nimport {IconButton, Menu, MenuItem} from '@mui/material';\nimport {default as React, FC} from 'react';\n\nimport {IBackupMenuComponent} from \"./types/IBackupMenuComponent\";\n\n\nexport const BackupMenuComponent: FC<IBackupMenuComponent> = ({backupID, onLoad, onDelete}) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const onLoadBackup = () => {\n        setAnchorEl(null);\n        onLoad(backupID);\n    };\n\n    const onDeleteBackup = () => {\n        setAnchorEl(null);\n        onDelete(backupID);\n    };\n\n    return (\n        <>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={onLoadBackup}>Load</MenuItem>\n                <MenuItem onClick={onDeleteBackup}>Delete</MenuItem>\n            </Menu>\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                <MoreVertIcon/>\n            </IconButton>\n        </>\n    )\n};\n","import {default as React, FC} from 'react';\nimport {ListItem, ListItemIcon, ListItemText} from '@mui/material';\n\nimport {BackupMenuComponent} from '../backup-menu-component/BackupMenuComponent';\nimport {IBackupsListItemComponent} from \"./types/IBackupsListItemComponent\";\n\nexport const BackupsListItemComponent: FC<IBackupsListItemComponent> = (\n    {\n        backupName,\n        backupDate,\n        backupID,\n        onLoad,\n        onDelete\n    }\n) => {\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={backupName}\n                secondary={backupDate}\n            />\n            <ListItemIcon>\n                <BackupMenuComponent backupID={backupID} onLoad={onLoad} onDelete={onDelete}/>\n            </ListItemIcon>\n        </ListItem>\n    );\n};\n","import {List} from '@mui/material';\nimport * as React from 'react';\nimport {FC} from 'react';\n\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {BackupsListItemComponent} from './elements/backups-list-item-component/BackupsListItemComponent';\nimport {AddButtonComponent} from '../../common/elements/add-button/AddButtonComponent';\nimport {IBackupsListComponent} from \"../local-backup/types/IBackupsListComponent\";\n\n\nexport const GoogleBackupsComponent: FC<IBackupsListComponent> = ({backupsFiles, onLoad, onCreate, onDelete}) => {\n    return (\n        <>\n            <List>\n                {\n                    backupsFiles.map((backup: IGoogleDriveFile) => {\n                        return <BackupsListItemComponent\n                            key={backup.id}\n                            backupName={backup.name}\n                            backupDate={backup.createdTime}\n                            onLoad={onLoad}\n                            onDelete={onDelete}\n                            backupID={backup.id}/>\n                    })\n                }\n            </List>\n            <AddButtonComponent onClick={onCreate}/>\n        </>\n    )\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {Routs} from \"../../../common/Routs\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\n\nexport const onBackupsNameLoadChannelError: ICallback<GoogleBackupCallbackSettings, Error> = (\n    {history, services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n    history.replace(Routs.googleAuth.path);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const onBackupsNameLoadChannel: ICallback<GoogleBackupCallbackSettings, IGoogleDriveFile[]> = (\n    {setState, services: {spinnerService}},\n    backupsFiles = []\n) => {\n    setState((prevState) => {\n        return {...prevState, backupsFiles}\n    });\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onBackupLoadChannelError: ICallback<GoogleBackupCallbackSettings, Error> = (\n    {history, services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n    history.replace(Routs.googleAuth.path);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onBackupLoadChannel: ICallback<GoogleBackupCallbackSettings, ICardsGroup[]> = (\n    {services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onBackupDeleteChannel: ICallback<GoogleBackupCallbackSettings, string> = (\n    {services: {googleBackupsService, spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n    googleBackupsService.backupsNameLoadChannel.next(empty)\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onBackupUploadChannel: ICallback<GoogleBackupCallbackSettings, string> = (\n    {services: {spinnerService, googleBackupsService}}\n) => {\n    googleBackupsService.backupsNameLoadChannel.next(empty)\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<GoogleBackupCallbackSettings, string> = (\n    {services: {googleBackupsService}}\n) => {\n    googleBackupsService.backupsNameLoadChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport UploadIcon from \"@mui/icons-material/Upload\";\nimport * as React from \"react\";\n\nexport const onLoad: ICallback<GoogleBackupCallbackSettings, string> = (\n    {\n        setSubscription,\n        services: {\n            spinnerService,\n            googleBackupsService,\n            confirmDialogService\n        }\n    },\n    backupID = '-1'\n) => {\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            spinnerService.spinnerCounterChannel.next(1);\n            googleBackupsService.backupLoadChannel.next(backupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to load this backup?',\n            titleBackgroundColor: 'red',\n            icon: <UploadIcon/>\n        }\n    );\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {GoogleBackupCallbackSettings} from \"../types/GoogleBackupCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport * as React from \"react\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nexport const onDelete: ICallback<GoogleBackupCallbackSettings, string> = (\n    {\n        setSubscription,\n        services: {\n            spinnerService,\n            googleBackupsService,\n            confirmDialogService\n        }\n    },\n    backupID = '-1'\n) => {\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            spinnerService.spinnerCounterChannel.next(1);\n            googleBackupsService.backupDeleteChannel.next(backupID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this backup?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {GoogleBackupsComponent} from './GoogleBackupsComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {onBackupsNameLoadChannelError} from './channels-callback/onBackupsNameLoadChannelError';\nimport {onBackupsNameLoadChannel} from './channels-callback/onBackupsNameLoadChannel';\nimport {onBackupLoadChannelError} from './channels-callback/onBackupLoadChannelError';\nimport {onBackupLoadChannel} from './channels-callback/onBackupLoadChannel';\nimport {onBackupDeleteChannel} from './channels-callback/onBackupDeleteChannel';\nimport {onBackupUploadChannel} from './channels-callback/onBackupUploadChannel';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onLoad} from './ui-callbacks/onLoad';\nimport {onDelete} from './ui-callbacks/onDelete';\nimport {GoogleBackupCallbackSettings} from './types/GoogleBackupCallbackSettings';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {GoogleBackupsService} from './GoogleBackupsService';\nimport {SpinnerService} from '../../parts/spinner/SpinnerService';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const GoogleBackupsContainer: FC = () => {\n\n    const googleBackupsService = useDependencyContext<GoogleBackupsService>(IDependenciesNames.GoogleBackupsService);\n    const spinnerService = useDependencyContext<SpinnerService>(IDependenciesNames.SpinnerService);\n    const confirmDialogService = useDependencyContext<ConfirmDialogService>(IDependenciesNames.ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<GoogleBackupCallbackSettings>(\n        {\n            backupsFiles: []\n        },\n        {\n            googleBackupsService,\n            spinnerService,\n            confirmDialogService\n        },\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel(\n        googleBackupsService.backupsNameLoadChannel,\n        callbackFactory(onBackupsNameLoadChannel),\n        callbackFactory(onBackupsNameLoadChannelError)\n    );\n    useChannel(\n        googleBackupsService.backupLoadChannel,\n        callbackFactory(onBackupLoadChannel),\n        callbackFactory(onBackupLoadChannelError)\n    );\n    useChannel(googleBackupsService.backupDeleteChannel, callbackFactory(onBackupDeleteChannel));\n    useChannel(googleBackupsService.backupUploadChannel, callbackFactory(onBackupUploadChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const load = useCallback(callbackFactory(onLoad), []);\n    const deleteBackup = useCallback(callbackFactory(onDelete), []);\n\n    const onCreate = () => {\n        spinnerService.spinnerCounterChannel.next(1);\n        googleBackupsService.backupUploadChannel.next();\n    };\n\n    return <GoogleBackupsComponent\n        backupsFiles={state.backupsFiles}\n        onLoad={load}\n        onDelete={deleteBackup}\n        onCreate={onCreate}\n    />;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport CopyIcon from \"@mui/icons-material/CopyAll\";\nimport Fab from \"@mui/material/Fab\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport SelectAllIcon from \"@mui/icons-material/SelectAll\";\nimport DriveFileMoveIcon from \"@mui/icons-material/DriveFileMove\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport {ICardsListActions} from \"./types/ICardsListActions\";\nimport './CardsListActions.css'\n\nexport const CardsListActions: FC<ICardsListActions> = (\n    {\n        onOpenEditor,\n        onOpenRepeater,\n        onStartSelecting,\n        onMovingSelectedCards,\n        onDeleteSelectedCards,\n        onCopySelectedCards,\n        hideOpenRepeaterButton = false,\n        hideOpenEditorButton = false,\n        hideMovingSelectedCardsButton = false,\n        hideDeleteSelectedCardsButton = false,\n        hideCopySelectedCardButton = false\n    }\n) => {\n    return <div className=\"cards-list-actions\">\n        <Fab size=\"medium\" color=\"secondary\" onClick={onStartSelecting}>\n            <SelectAllIcon/>\n        </Fab>\n        <Fab size=\"medium\" color=\"primary\" onClick={onOpenRepeater}>\n            <PlayArrowIcon/>\n        </Fab>\n        {\n            !hideOpenEditorButton && <Fab size=\"medium\" color=\"secondary\" onClick={onOpenEditor}>\n                <AddIcon/>\n            </Fab>\n        }\n        {\n            !hideMovingSelectedCardsButton && <Fab size=\"medium\" color=\"primary\" onClick={onMovingSelectedCards}>\n                <DriveFileMoveIcon/>\n            </Fab>\n        }\n        {\n            !hideCopySelectedCardButton && <Fab size=\"medium\" color=\"secondary\" onClick={onCopySelectedCards}>\n                <CopyIcon/>\n            </Fab>\n        }\n        {\n            !hideDeleteSelectedCardsButton && <Fab size=\"medium\" color=\"secondary\" onClick={onDeleteSelectedCards}>\n                <DeleteIcon/>\n            </Fab>\n        }\n    </div>\n}","export enum IRepeatingType {\n    DEFAULT,\n    RANDOM\n}","import React, {FC} from \"react\";\n\nimport {ICardPrimaryTextComponent} from \"./types/ICardPrimaryTextComponent\";\nimport './CardPrimaryTextComponent.css'\n\nexport const CardPrimaryTextComponent: FC<ICardPrimaryTextComponent> = ({card}) => {\n    return <div className=\"card-primary-text\">\n        <p className=\"card-primary-text_title\">\n            {card.question}\n        </p>\n        <p className=\"card-primary-text_content\">\n            {card.answer}\n        </p>\n    </div>\n}","import React, {FC} from 'react'\nimport format from 'date-fns/format'\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport FlagIcon from '@mui/icons-material/Flag';\nimport {Checkbox} from '@mui/material';\n\nimport {ICard} from '../../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../../common/types/IRangeOfKnowledge';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport {ICardListItemComponent} from './types/ICardListItemComponent';\nimport {CardPrimaryTextComponent} from '../card-primary-text/CardPrimaryTextComponent';\nimport {DATE_FORMAT} from '../../../../common/constants/DATE_FORMAT';\nimport {IMenuSetupItem} from '../../../../common/elements/list-item-menu/types/IMenuSetupItem';\n\nexport const CardsListItemComponent: FC<ICardListItemComponent> = (\n    {\n        card,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onSelect,\n        isEnabledSelecting,\n        isSelected\n    }\n) => {\n\n    const dateText = 'Last repeating date: ' + format(card.dateRepeating ? card.dateRepeating : new Date(), DATE_FORMAT)\n\n    const getIconColor = (card: ICard): string => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n            return 'green'\n        }\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            return 'yellow'\n        }\n        return 'red'\n    };\n\n    const menuSetup: IMenuSetupItem[] = [\n        {\n            fieldName: 'Edit',\n            handler: () => {\n                onEditItem(card.id);\n            }\n        },\n        {\n            fieldName: 'Delete',\n            handler: () => {\n                onDeleteItem(card.id);\n            }\n        },\n        {\n            fieldName: 'Reset progress',\n            handler: () => {\n                onResetProgress(card.id);\n            }\n        }\n    ];\n\n    return <ListItem key={card.id} button>\n        <ListItemIcon onClick={() => onClickItem(card.id)}>\n            <FlagIcon style={{color: getIconColor(card)}}/>\n        </ListItemIcon>\n        <ListItemText\n            onClick={() => onClickItem(card.id)}\n            primary={<CardPrimaryTextComponent card={card}/>}\n            secondary={dateText}\n        />\n        {\n            !isEnabledSelecting ?\n                <ListItemIcon>\n                    <ListItemMenuComponent menuSetup={menuSetup}/>\n                </ListItemIcon> :\n                <ListItemIcon onClick={() => isEnabledSelecting && onSelect(card.id)}>\n                    <Checkbox\n                        edge=\"start\"\n                        checked={isSelected}\n                        tabIndex={-1}\n                        disableRipple\n                    />\n                </ListItemIcon>\n        }\n    </ListItem>\n};\n","import {FixedSizeList as List} from \"react-window\";\nimport * as React from \"react\";\nimport {FC} from \"react\";\n\nimport {CardsListItemComponent} from \"../cards-list-item/CardsListItemComponent\";\nimport {ICardsListComponent} from \"./types/ICardsListComponent\";\n\nexport const CardsListComponent: FC<ICardsListComponent> = (\n    {\n        cards,\n        height,\n        onEditItem,\n        onDeleteItem,\n        onSelectItem,\n        onResetProgress,\n        onClickItem,\n        isEnabledSelecting,\n        selectedItems\n    }\n) => {\n    return <List\n        className=\"cards\"\n        itemData={cards}\n        itemSize={75}\n        itemCount={cards.length}\n        overscanCount={5}\n        height={height}\n        width=\"100%\"\n    >\n        {\n            ({index, style}: any) => {\n                const card = cards[index];\n                return <div style={style}>\n                    <CardsListItemComponent\n                        key={card.id}\n                        card={card}\n                        onEditItem={onEditItem}\n                        onDeleteItem={onDeleteItem}\n                        onResetProgress={onResetProgress}\n                        onClickItem={onClickItem}\n                        onSelect={onSelectItem}\n                        isEnabledSelecting={isEnabledSelecting}\n                        isSelected={selectedItems[card.id]}\n                    />\n                </div>\n            }\n        }\n    </List>\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {FilterComponent} from \"../../common/elements/filter/FilterComponent\";\nimport {CardsListActions} from \"./elements/cards-list-actions/CardsListActions\";\nimport {ICardsComponent} from \"./types/ICardsComponent\";\nimport './CardsComponent.css';\nimport {CardsListComponent} from \"./elements/cards-list/CardsListComponent\";\nimport {ISortVariant} from \"../../common/types/ISortVariant\";\n\nexport const CardsComponent: FC<ICardsComponent> = (\n    {\n        cards,\n        filter,\n        onOpenEditor,\n        onEditItem,\n        onDeleteItem,\n        onResetProgress,\n        onClickItem,\n        onChangeSearchableText,\n        onChangeSorting,\n        height,\n        onOpenRepeater,\n        onStartSelecting,\n        onSelectItem,\n        onDeleteSelectedCards,\n        onMovingSelectedCards,\n        onCopySelectedCards,\n        isEnabledSelecting,\n        selectedItems\n    }\n) => {\n    return (\n        <>\n                <FilterComponent\n                    onChangeSearchableText={onChangeSearchableText}\n                    onChangeSorting={onChangeSorting}\n                    filter={filter}\n                    sortVariants={[\n                            ISortVariant.NONE,\n                            ISortVariant.DATE_ASK,\n                            ISortVariant.DATE_DESK,\n                            ISortVariant.QUESTION_ASK,\n                            ISortVariant.QUESTION_DESK,\n                            ISortVariant.STATUS_ASK,\n                            ISortVariant.STATUS_DESK,\n                            ISortVariant.ANSWER_ASK,\n                            ISortVariant.ANSWER_DESK\n                    ]}\n                />\n                <CardsListComponent\n                    cards={cards}\n                    height={height}\n                    onEditItem={onEditItem}\n                    onDeleteItem={onDeleteItem}\n                    onResetProgress={onResetProgress}\n                    onClickItem={onClickItem}\n                    onSelectItem={onSelectItem}\n                    isEnabledSelecting={isEnabledSelecting}\n                    selectedItems={selectedItems}\n                />\n                <CardsListActions\n                    onOpenRepeater={onOpenRepeater}\n                    onOpenEditor={onOpenEditor}\n                    onStartSelecting={onStartSelecting}\n                    onCopySelectedCards={onCopySelectedCards}\n                    hideOpenEditorButton={isEnabledSelecting}\n                    hideOpenRepeaterButton={isEnabledSelecting}\n                    hideDeleteSelectedCardsButton={!isEnabledSelecting}\n                    hideMovingSelectedCardsButton={!isEnabledSelecting}\n                    hideCopySelectedCardButton={!isEnabledSelecting}\n                    onDeleteSelectedCards={onDeleteSelectedCards}\n                    onMovingSelectedCards={onMovingSelectedCards}\n                />\n        </>\n    )\n};\n","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteSelectedCards: ICallback<CardsCallbackSettings, void> = (\n    {services: {confirmDialogService, cardsListService}, setState, setSubscription}\n) => {\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            setState((prevState) => {\n                cardsListService.deleteCardsChannel.next(prevState.selectedItems);\n                return prevState;\n            })\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import CopyIcon from '@mui/icons-material/CopyAll';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onCopySelectedCards: ICallback<CardsCallbackSettings, void> = (\n    {services, setState, setSubscription}\n) => {\n    const {\n        cardsListService,\n        confirmDialogService,\n        selectionDialogService\n    } = services;\n\n    setState((prevState) => {\n\n        const subscription = selectionDialogService.selectionChannel.subscribe((groupID) => {\n\n            const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n                if (isConfirm) {\n                    cardsListService.copyCardsChannel.next({\n                        selectedItems: prevState.selectedItems,\n                        destinationGroupID: groupID\n                    });\n\n                    selectionDialogService.openDialogChannel.next({\n                        isOpen: false,\n                        title: '',\n                        selectionItems: []\n                    });\n                }\n\n                confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n            });\n\n            setSubscription(subscription);\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: true,\n                message: 'Do you want to copy this cards?',\n                titleBackgroundColor: 'orange',\n                icon: <CopyIcon/>\n            });\n        });\n\n        setSubscription(subscription);\n\n        selectionDialogService.openDialogChannel.next({\n            isOpen: true,\n            title: 'Select cards group',\n            selectionItems: prevState.existedGroupsIDs\n        })\n\n        return prevState;\n    })\n}","import MoveIcon from '@mui/icons-material/MoveToInbox';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onMovingSelectedCards: ICallback<CardsCallbackSettings, void> = (\n    {services, setState, setSubscription}\n) => {\n\n    setState((prevState) => {\n        const {\n            cardsListService,\n            confirmDialogService,\n            selectionDialogService\n        } = services;\n\n        const subscription = selectionDialogService.selectionChannel.subscribe((groupID) => {\n\n            const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n                if (isConfirm) {\n                    cardsListService.movingCardsChannel.next({\n                        selectedItems: prevState.selectedItems,\n                        destinationGroupID: groupID\n                    });\n\n                    selectionDialogService.openDialogChannel.next({\n                        isOpen: false,\n                        title: '',\n                        selectionItems: []\n                    });\n                }\n\n                confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n            });\n\n            setSubscription(subscription);\n\n            confirmDialogService.openDialogChannel.next({\n                isOpen: true,\n                message: 'Do you want to move this cards?',\n                titleBackgroundColor: 'green',\n                icon: <MoveIcon/>\n            });\n        });\n\n        setSubscription(subscription);\n\n        selectionDialogService.openDialogChannel.next({\n            isOpen: true,\n            title: 'Select cards group',\n            selectionItems: prevState.existedGroupsIDs\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onSelectItem: ICallback<CardsCallbackSettings, number> = (\n    settings,\n    cardID = -1\n) => {\n\n    const {setState} = settings;\n\n    setState((prevState) => {\n        const selectedItems = {\n            ...prevState.selectedItems\n        };\n\n        if (selectedItems[cardID]) {\n            selectedItems[cardID] = !selectedItems[cardID]\n        } else {\n            selectedItems[cardID] = true\n        }\n        return {\n            ...prevState,\n            selectedItems\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onStartSelecting: ICallback<CardsCallbackSettings, void> = (\n    {setState}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            isEnabledSelecting: !prevState.isEnabledSelecting,\n            selectedItems: !prevState.isEnabledSelecting ? {} : prevState.selectedItems\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onOpenRepeater: ICallback<CardsCallbackSettings, void> = (\n    {\n        setState,\n        location,\n        services\n    }\n) => {\n    setState((prevState) => {\n        if (prevState.isEnabledSelecting) {\n            services.cardsListService.cardsIDsBySelectedItemsChannel.next(prevState.selectedItems);\n        } else {\n            services.cardsListService.cardsIDsByGroupIDsChannel.next(location.state.cardsGroupID);\n        }\n        return prevState;\n    })\n}","import {ISortVariant} from \"../../../common/types/ISortVariant\";\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onChangeSorting: ICallback<CardsCallbackSettings, ISortVariant> = (\n    {setState, services, location},\n    sortVariant: ISortVariant = ISortVariant.NONE\n) => {\n    setState((prevState) => {\n        const newFilter = {\n            ...prevState.filter,\n            sort: sortVariant\n        }\n        services.cardsListService.changeFilterChannel.next(newFilter);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onChangeSearchableText: ICallback<CardsCallbackSettings, string> = (\n    {services, setState, location},\n    searchableText = ''\n) => {\n    setState((prevState) => {\n        const newFilter = {\n            ...prevState.filter,\n            searchableText: searchableText\n        }\n\n        services.cardsListService.changeFilterChannel.next(newFilter)\n\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {CardsContainerState} from \"../types/CardsContainerState\";\n\nexport const onCardsChannel: ICallback<CardsCallbackSettings, ICard[]> = (\n    {setState},\n    cards = []\n) => {\n    setState((prevState: CardsContainerState) => {\n        return {\n            ...prevState,\n            cards\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onCardsIDsByGroupIDsChannel: ICallback<CardsCallbackSettings, number[]> = (\n    {history, location},\n    args\n) => {\n    history.push({\n        pathname: Routs.cardsRepeater.path,\n        state: {\n            ...location.state,\n            cardsIDsForRepeating: args || []\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onCardsIDsBySelectedItemsChannel: ICallback<CardsCallbackSettings, number[]> = (\n    {history, location},\n    args\n) => {\n    if (args && args.length > 1) {\n        history.push({\n            pathname: Routs.cardsRepeater.path,\n            state: {\n                ...location.state,\n                cardsIDsForRepeating: args || []\n            }\n        })\n    } else if (args && args.length === 1) {\n        history.push({\n            pathname: Routs.cardViewer.path,\n            state: {\n                ...location.state,\n                cardsGroupID: location.state.cardsGroupID,\n                cardID: args[0]\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const onFilterChannel: ICallback<CardsCallbackSettings, IFilter> = (\n    {setState, services, location},\n    filter = defaultFilter\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            filter\n        }\n    });\n    services.cardsListService.cardsChannel.next({\n        cardsGroupID: location.state.cardsGroupID,\n        filter: filter\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<CardsCallbackSettings, ISortVariant> = (\n    {services, setState, location}\n) => {\n    const {cardsListService} = services;\n    setState((prevState) => {\n        cardsListService.filterChannel.next(empty)\n        cardsListService.existedGroupsIDsChannel.next(empty);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {IStoredFilters} from \"../../../common/types/IStoredFilters\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onChangeFilter: ICallback<CardsCallbackSettings, IStoredFilters> = (\n    {services, location}\n) => {\n    services.cardsListService.filterChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onResetCardProgressChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next(\n            {\n                cardsGroupID: location.state.cardsGroupID,\n                filter: prevState.filter\n            }\n        )\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location},\n    cards = []\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onMovingCardsChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onCopyCardsChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {services, setState, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteCardsChannel: ICallback<CardsCallbackSettings, ICardsGroup[]> = (\n    {setState, services, location}\n) => {\n    setState((prevState) => {\n        services.cardsListService.cardsChannel.next({\n            cardsGroupID: location.state.cardsGroupID,\n            filter: prevState.filter\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {CardsContainerState} from \"../types/CardsContainerState\";\n\nexport const onExistedGroupsIDsChannel: ICallback<CardsCallbackSettings, { id: number; label: string; }[]> = (\n    {setState},\n    existedGroupsIDs = []\n) => {\n    setState((prevState: CardsContainerState) => {\n        return {\n            ...prevState,\n            existedGroupsIDs\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onOpenEditor: ICallback<CardsCallbackSettings, void> = (\n    {\n        location,\n        history\n    }\n) => {\n    history.push({\n        pathname: Routs.cardsEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditItem: ICallback<CardsCallbackSettings, number> = (\n    {\n        location,\n        history\n    },\n    cardID = -1\n) => {\n    history.push({\n        pathname: Routs.cardsEditor.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID,\n            cardID: cardID\n        }\n    })\n}","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteItem: ICallback<CardsCallbackSettings, number> = (\n    {\n        setSubscription,\n        services\n    },\n    cardID = -1\n) => {\n    const {confirmDialogService, cardsListService} = services;\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            cardsListService.deleteSingleCardChannel.next(cardID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this card?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\n\nexport const onResetProgress: ICallback<CardsCallbackSettings, number> = (\n    {\n        services,\n        location\n    },\n    cardID = -1\n) => {\n    services.cardsListService.resetCardProgressChannel.next(\n        {\n            cardID,\n            cardsGroupID: location.state.cardsGroupID\n        }\n    )\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsCallbackSettings} from \"../types/CardsCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onClickItem: ICallback<CardsCallbackSettings, number> = (\n    {\n        location,\n        history\n    },\n    cardID = -1\n) => {\n    history.push({\n        pathname: Routs.cardViewer.path,\n        state: {\n            ...location.state,\n            cardsGroupID: location.state.cardsGroupID,\n            cardID\n        }\n    })\n}","import {defaultFilter} from \"../../../common/defaults/defaultFilter\";\n\nexport const initialState = {\n    cards: [],\n    filter: defaultFilter,\n    isEnabledSelecting: false,\n    selectedItems: {},\n    existedGroupsIDs: []\n}","import React, {FC, useCallback} from 'react';\n\nimport {CardsComponent} from './CardsComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {AppContext} from '../../../App';\nimport {onDeleteSelectedCards} from './ui-callbacks/onDeleteSelectedCards';\nimport {onCopySelectedCards} from './ui-callbacks/onCopySelectedCards';\nimport {onMovingSelectedCards} from './ui-callbacks/onMovingSelectedCards';\nimport {onSelectItem} from './ui-callbacks/onSelectItem';\nimport {onStartSelecting} from './ui-callbacks/onStartSelecting';\nimport {onOpenRepeater} from './ui-callbacks/onOpenRepeater';\nimport {onChangeSorting} from './ui-callbacks/onChangeSorting';\nimport {onChangeSearchableText} from './ui-callbacks/onChangeSearchableText';\nimport {onCardsChannel} from './channels-callbacks/onCardsChannel';\nimport {onCardsIDsByGroupIDsChannel} from './channels-callbacks/onCardsIDsByGroupIDsChannel';\nimport {onCardsIDsBySelectedItemsChannel} from './channels-callbacks/onCardsIDsBySelectedItemsChannel';\nimport {onFilterChannel} from './channels-callbacks/onFilterChannel';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onChangeFilter} from './channels-callbacks/onChangeFilter';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {onResetCardProgressChannel} from './channels-callbacks/onResetCardProgressChannel';\nimport {onDeleteSingleCardChannel} from './channels-callbacks/onDeleteSingleCardChannel';\nimport {onMovingCardsChannel} from './channels-callbacks/onMovingCardsChannel';\nimport {onCopyCardsChannel} from './channels-callbacks/onCopyCardsChannel';\nimport {onDeleteCardsChannel} from './channels-callbacks/onDeleteCardsChannel';\nimport {onExistedGroupsIDsChannel} from './channels-callbacks/onExistedGroupsIDsChannel';\nimport {onOpenEditor} from './ui-callbacks/onOpenEditor';\nimport {onEditItem} from './ui-callbacks/onEditItem';\nimport {onDeleteItem} from './ui-callbacks/onDeleteItem';\nimport {onResetProgress} from './ui-callbacks/onResetProgress';\nimport {onClickItem} from './ui-callbacks/onClickItem';\nimport {initialState} from './defaults/initialState';\nimport {CardsCallbackSettings} from './types/CardsCallbackSettings';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {CardsService} from './CardsService';\nimport {SelectionDialogService} from '../../parts/selection-dialog/SelectionDialogService';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const CardsContainer: FC = () => {\n\n    const cardsListService = useDependencyContext<CardsService>(IDependenciesNames.CardsService);\n    const selectionDialogService = useDependencyContext<SelectionDialogService>(IDependenciesNames.SelectionDialogService);\n    const confirmDialogService = useDependencyContext<ConfirmDialogService>(IDependenciesNames.ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<CardsCallbackSettings>(\n        initialState,\n        {cardsListService, selectionDialogService, confirmDialogService},\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings\n\n    useChannel(cardsListService.cardsChannel, callbackFactory(onCardsChannel));\n    useChannel(cardsListService.cardsIDsByGroupIDsChannel, callbackFactory(onCardsIDsByGroupIDsChannel));\n    useChannel(cardsListService.cardsIDsBySelectedItemsChannel, callbackFactory(onCardsIDsBySelectedItemsChannel));\n    useChannel(cardsListService.filterChannel, callbackFactory(onFilterChannel));\n    useChannel(cardsListService.changeFilterChannel, callbackFactory(onChangeFilter))\n    useChannel(cardsListService.resetCardProgressChannel, callbackFactory(onResetCardProgressChannel));\n    useChannel(cardsListService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel));\n    useChannel(cardsListService.movingCardsChannel, callbackFactory(onMovingCardsChannel));\n    useChannel(cardsListService.copyCardsChannel, callbackFactory(onCopyCardsChannel));\n    useChannel(cardsListService.deleteCardsChannel, callbackFactory(onDeleteCardsChannel))\n    useChannel(cardsListService.existedGroupsIDsChannel, callbackFactory(onExistedGroupsIDsChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const editItem = useCallback(callbackFactory(onEditItem), []);\n    const deleteItem = useCallback(callbackFactory(onDeleteItem), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const clickItem = useCallback(callbackFactory(onClickItem), []);\n    const changeSearchableText = useCallback(callbackFactory(onChangeSearchableText), [state.filter]);\n    const changeSorting = useCallback(callbackFactory(onChangeSorting), [state.filter]);\n\n    const startSelecting = useCallback(callbackFactory(onStartSelecting), []);\n    const openRepeater = useCallback(callbackFactory(onOpenRepeater), []);\n    const selectItem = useCallback(callbackFactory(onSelectItem), []);\n    const movingSelectedCards = useCallback(callbackFactory(onMovingSelectedCards), []);\n    const copySelectedCards = useCallback(callbackFactory(onCopySelectedCards), []);\n    const deleteSelectedCards = useCallback(callbackFactory(onDeleteSelectedCards), [])\n\n    return <CardsComponent\n        filter={state.filter}\n        onChangeSorting={changeSorting}\n        onChangeSearchableText={changeSearchableText}\n        cards={state.cards}\n        onOpenEditor={openEditor}\n        onEditItem={editItem}\n        onDeleteItem={deleteItem}\n        onResetProgress={resetProgress}\n        onClickItem={clickItem}\n        height={context.height}\n        onOpenRepeater={openRepeater}\n        onStartSelecting={startSelecting}\n        isEnabledSelecting={state.isEnabledSelecting}\n        onSelectItem={selectItem}\n        selectedItems={state.selectedItems}\n        onMovingSelectedCards={movingSelectedCards}\n        onDeleteSelectedCards={deleteSelectedCards}\n        onCopySelectedCards={copySelectedCards}\n    />\n};\n","import React, {FC} from 'react';\n\nimport {Button} from '@mui/material';\nimport {IRepeatingStatisticComponent} from \"./types/IRepeatingStatisticComponent\";\n\nexport const StatisticComponent: FC<IRepeatingStatisticComponent> = ({repeatingProgress}) => {\n\n    return <div>\n        <Button size=\"small\">\n            <span style={{color: \"red\"}}>To Do: {repeatingProgress.todo}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"orange\"}}>In progress: {repeatingProgress.inProgress}</span>\n        </Button>\n        <Button size=\"small\">\n            <span style={{color: \"green\"}}>Completed: {repeatingProgress.done}</span>\n        </Button>\n    </div>\n};\n","import React, {FC} from 'react';\nimport {Button} from '@mui/material';\n\nimport {IAllCardsRepeatedComponent} from \"./types/IAllCardsRepeatedComponent\";\n\nexport const AllCardsRepeatedComponent: FC<IAllCardsRepeatedComponent> = ({onBackClick}) => {\n    return <>\n        <span>No cards for repeating</span>\n        <Button size=\"small\" color=\"primary\" onClick={onBackClick}>\n            Go back\n        </Button>\n    </>\n};\n","import React, {FC} from 'react';\nimport {IconButton} from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport {Campaign, Check, Edit} from '@mui/icons-material';\nimport {ICardsRepeaterHeaderComponent} from \"./types/ICardsRepeaterHeaderComponent\";\n\nexport const CardsHeaderComponent: FC<ICardsRepeaterHeaderComponent> = (\n    {\n        isQuestionSide,\n        onSwitchEditing,\n        onReadByVoiceEngine,\n        isEditable\n    }\n) => {\n    return <div className=\"cards-repeater_title\">\n        <IconButton color=\"inherit\" onClick={onReadByVoiceEngine}>\n            <Campaign/>\n        </IconButton>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {isQuestionSide ? 'Question' : 'Answer'}\n        </Typography>\n        <IconButton color=\"inherit\" onClick={onSwitchEditing}>\n            {isEditable ? <Check/> : <Edit/>}\n        </IconButton>\n    </div>\n};\n","import React, {FC} from 'react';\nimport {List} from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport {ILongTextViewerComponent} from './types/ILongTextViewerComponent';\nimport './LongTextViewerComponent.css'\n\nexport const LongTextViewerComponent: FC<ILongTextViewerComponent> = (\n    {\n        viewHeight,\n        text,\n        onClickText = () => {\n        }\n    }\n) => {\n    return <Typography\n        component=\"div\"\n        color=\"textSecondary\"\n        gutterBottom\n        onClick={onClickText}\n        className=\"long-text-viewer\"\n        style={{height: viewHeight - 20}}\n    >\n        <List style={{paddingTop: 0}}>\n            {text}\n        </List>\n    </Typography>\n}","import {ChangeEvent, default as React, FC} from 'react';\nimport {TextField} from '@mui/material';\n\nimport './TextEditorComponent.css'\nimport {ITextEditorComponent} from \"./types/ITextEditorComponent\";\n\nexport const TextEditorComponent: FC<ITextEditorComponent> = ({onChangeText, changeableText, label}) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeText(event.target.value);\n    };\n\n    return <TextField\n        className=\"text-editor\"\n        required\n        id=\"outlined-required\"\n        label={label || \"\"}\n        multiline\n        onChange={onChange}\n        value={changeableText}\n        variant=\"filled\"\n    />\n};\n","import React, {FC} from 'react';\n\nimport {TextEditorComponent} from '../text-editor/TextEditorComponent';\nimport {ILongTextEditorComponent} from './types/ILongTextEditorComponent';\nimport './LongTextEditorComponent.css'\n\nexport const LongTextEditorComponent: FC<ILongTextEditorComponent> = (\n    {\n        viewHeight,\n        text,\n        onChangeText\n    }\n) => {\n    return <div\n        className=\"long-text-editor\"\n        style={{\n            height: viewHeight - 20\n        }}\n    >\n        <TextEditorComponent onChangeText={onChangeText} changeableText={text}/>\n    </div>\n}","import React, {FC} from 'react';\nimport {Button, CardActions} from '@mui/material';\n\nimport {IDeleteButtonFooterComponent} from \"./types/IDeleteButtonFooterComponent\";\n\nexport const DeleteButtonFooterComponent: FC<IDeleteButtonFooterComponent> = ({onClick}) => {\n\n    return <>\n        {\n            <CardActions className=\"cards-repeater_buttons-container\" style={{height: 10}}>\n                <Button size=\"small\" color=\"primary\" onClick={() => onClick()}>\n                    Remove\n                </Button>\n            </CardActions>\n        }\n    </>\n};\n","import React, {FC} from 'react';\n\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\nimport {LongTextViewerComponent} from \"../long-text-viewer/LongTextViewerComponent\";\nimport {IQuestionCard} from \"./types/IQuestionCard\";\nimport {LongTextEditorComponent} from \"../long-text-editor/LongTextEditorComponent\";\nimport {DeleteButtonFooterComponent} from \"../delete-button-footer/DeleteButtonFooterComponent\";\n\nexport const QuestionCardComponent: FC<IQuestionCard> = (\n    {\n        card,\n        onClickCard,\n        cardHeight,\n        isEditable,\n        onDeleteCard,\n        onChangeQuestion\n    }\n) => {\n\n    const question = card ? card.question : '';\n\n    return <Card>\n        <CardContent onClick={onClickCard} style={{height: cardHeight}}>\n            {\n                isEditable ?\n                    <>\n                        <LongTextEditorComponent\n                            text={question}\n                            viewHeight={cardHeight}\n                            onChangeText={onChangeQuestion}\n                        />\n                        <DeleteButtonFooterComponent onClick={onDeleteCard}/>\n                    </>\n                    :\n                    <LongTextViewerComponent viewHeight={cardHeight} text={question}/>\n            }\n        </CardContent>\n    </Card>\n};\n","import React, {FC} from 'react';\nimport {Button, CardActions} from '@mui/material';\n\nimport {IRangeOfKnowledge} from '../../types/IRangeOfKnowledge';\nimport {IAnswerCardFooterComponent} from './types/IAnswerCardFooterComponent';\nimport './AnswerCardFooterComponent.css'\n\nexport const AnswerCardFooterComponent: FC<IAnswerCardFooterComponent> = ({card, onClickYesNoButton}) => {\n\n    return <>\n        {\n            card && card.rangeOfKnowledge !== IRangeOfKnowledge.DONE ?\n                <CardActions className=\"answer-card-footer\">\n                    <Button\n                        className=\"answer-card-footer_action answer-card-footer_action-button-yes\"\n                        size=\"small\"\n                        color=\"primary\"\n                        onClick={() => onClickYesNoButton(true)}>\n                        Yes\n                    </Button>\n                    <Button\n                        className=\"answer-card-footer_action answer-card-footer_action-button-no\"\n                        size=\"small\" color=\"primary\"\n                        onClick={() => onClickYesNoButton(false)}>\n                        No\n                    </Button>\n                </CardActions> :\n                <div>Repeated</div>\n        }\n    </>\n};\n","import React, {FC, useState} from 'react';\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\n\nimport {AnswerCardFooterComponent} from '../answer-card-footer/AnswerCardFooterComponent';\nimport {IAnswerCardComponent} from './types/IAnswerCardComponent';\nimport {LongTextViewerComponent} from '../long-text-viewer/LongTextViewerComponent';\nimport {LongTextEditorComponent} from '../long-text-editor/LongTextEditorComponent';\nimport {DeleteButtonFooterComponent} from '../delete-button-footer/DeleteButtonFooterComponent';\n\nexport const AnswerCardComponent: FC<IAnswerCardComponent> = (\n    {\n        card,\n        cardHeight,\n        onClickText,\n        onClickYesNoButton,\n        isEditable,\n        onChangeAnswer,\n        onDeleteCard\n    }\n) => {\n    const [actionStatus, setActionStatus] = useState<null | 'yes' | 'no'>(null);\n\n    const getText = () => {\n        return card ? card.answer : '';\n    };\n\n    const onClickButton = (arg: boolean) => {\n        onClickYesNoButton(arg);\n        setActionStatus(arg ? 'yes' : 'no');\n    }\n\n    const cardBackgroundColor = actionStatus === 'yes' ?\n        'rgba(0,128,0,0.35)' :\n        actionStatus === 'no' ? 'rgb(252,189,154)' : 'white'\n\n    return <Card\n        className=\"cards-repeater answer-card-component\"\n        style={{\n            backgroundColor: cardBackgroundColor\n        }}>\n        <CardContent\n            style={{\n                height: cardHeight\n            }}>\n            {\n                isEditable ?\n                    <>\n                        <LongTextEditorComponent\n                            text={getText()}\n                            viewHeight={cardHeight}\n                            onChangeText={onChangeAnswer}\n                        />\n                        <DeleteButtonFooterComponent onClick={onDeleteCard}/>\n                    </>\n                    :\n                    <>\n                        <LongTextViewerComponent\n                            viewHeight={cardHeight}\n                            text={getText()}\n                            onClickText={onClickText}\n                        />\n                        <AnswerCardFooterComponent onClickYesNoButton={onClickButton} card={card}/>\n                    </>\n            }\n        </CardContent>\n    </Card>\n};\n","import React, {FC} from \"react\";\n\nimport {CardsHeaderComponent} from \"../cards-header/CardsHeaderComponent\";\nimport {QuestionCardComponent} from \"../question-card/QuestionCardComponent\";\nimport {AnswerCardComponent} from \"../answer-card/AnswerCardComponent\";\nimport {ICardsContentComponent} from \"./types/ICardsContentComponent\";\n\nexport const CardsContentComponent: FC<ICardsContentComponent> = (\n    {\n        isQuestionSide,\n        isEditable,\n        onSwitchEditing,\n        card,\n        cardHeight,\n        onClickCard,\n        onChangeAnswer,\n        onChangeQuestion,\n        onDeleteCard,\n        onClickYesNoButton,\n        onReadByVoiceEngine\n    }\n) => {\n    return <>\n        <CardsHeaderComponent\n            onReadByVoiceEngine={onReadByVoiceEngine}\n            isQuestionSide={isQuestionSide}\n            isEditable={isEditable}\n            onSwitchEditing={onSwitchEditing}\n        />\n        {\n            isQuestionSide ?\n                <QuestionCardComponent\n                    card={card}\n                    onClickCard={onClickCard}\n                    cardHeight={cardHeight}\n                    isEditable={isEditable}\n                    onChangeQuestion={onChangeQuestion}\n                    onDeleteCard={onDeleteCard}\n                /> :\n                <AnswerCardComponent\n                    card={card}\n                    onClickText={onClickCard}\n                    cardHeight={cardHeight}\n                    onClickYesNoButton={onClickYesNoButton}\n                    onChangeAnswer={onChangeAnswer}\n                    isEditable={isEditable}\n                    onDeleteCard={onDeleteCard}\n                />\n        }\n    </>\n}","import React, {FC} from 'react';\n\nimport {StatisticComponent} from './elements/statistic/StatisticComponent';\nimport './CardsRepeaterComponent.css'\nimport {AllCardsRepeatedComponent} from './elements/all-cards-repeated/AllCardsRepeatedComponent';\nimport {CardsContentComponent} from '../../common/elements/cards-content/CardsContentComponent';\nimport {ICardsRepeaterComponent} from './types/ICardsRepeaterComponent';\n\nexport const CardsRepeaterComponent: FC<ICardsRepeaterComponent> = (\n    {\n            card,\n            cardHeight,\n            isQuestionSide,\n            onClickCard,\n            onClickYesNoButton,\n            repeatingProgress,\n            onBackClick,\n            onSwitchEditing,\n            isEditable,\n            onChangeAnswer,\n            onChangeQuestion,\n            onReadByVoiceEngine,\n            onDeleteCard\n    }\n) => {\n\n        return card && card.id !== -1 ?\n            <div className=\"cards-repeater\">\n                    <StatisticComponent repeatingProgress={repeatingProgress}/>\n                    <CardsContentComponent\n                        card={card}\n                        onDeleteCard={onDeleteCard}\n                        onClickYesNoButton={onClickYesNoButton}\n                        isQuestionSide={isQuestionSide}\n                        onClickCard={onClickCard}\n                        cardHeight={cardHeight}\n                        onSwitchEditing={onSwitchEditing}\n                        isEditable={isEditable}\n                        onChangeQuestion={onChangeQuestion}\n                        onChangeAnswer={onChangeAnswer}\n                        onReadByVoiceEngine={onReadByVoiceEngine}\n                    />\n            </div> :\n            <AllCardsRepeatedComponent onBackClick={onBackClick}/>\n};\n","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteCard: ICallback<CardRepeaterCallbackSettings, void> = (\n    {services, setState, setSubscription}\n) => {\n    const {confirmDialogService, cardsRepeaterService} = services;\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            setState((prevState) => {\n                cardsRepeaterService.deleteSingleCardChannel.next(prevState.card.id);\n                return prevState;\n            })\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete this cards?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardRepeaterCallbackSettings, ICardsGroup[]> = (\n    {services, location}\n) => {\n    services.cardsRepeaterService.cardChannel.next(\n        location.state ? location.state.cardsIDsForRepeating : []\n    )\n}","import {IRangeOfKnowledge} from \"../types/IRangeOfKnowledge\";\n\nexport const defaultCard = {\n    id: -1,\n    question: '',\n    answer: '',\n    rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n    dateRepeating: 0\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {CardRepeaterCallbackSettings} from '../types/CardRepeaterCallbackSettings';\nimport {ICard} from '../../../common/types/ICard';\nimport {defaultCard} from '../../../common/defaults/defaultCard';\nimport {empty} from '../../../../MyTools/channel-conception/defaults/empty';\n\nexport const onCardChannel: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {services: {cardsRepeaterService}, setState},\n    card = defaultCard\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card,\n            isQuestionSide: true,\n            isEditable: false\n        }\n    });\n    cardsRepeaterService.repeatingProgressChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onCardEditingChannel: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {setState},\n    card = defaultCard\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","export const defaultRepeatingProgress = {\n    inProgress: 0,\n    todo: 0,\n    done: 0\n};","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {IRepeatingProgress} from \"../../../common/types/IRepeatingProgress\";\nimport {defaultRepeatingProgress} from \"../../../common/defaults/defaultRepeatingProgress\";\n\nexport const onStatisticChannel: ICallback<CardRepeaterCallbackSettings, IRepeatingProgress> = (\n    {setState},\n    statistic = defaultRepeatingProgress\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeatingProgress: statistic\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onRepeatingResultChannel: ICallback<CardRepeaterCallbackSettings, ICardsGroup[]> = (\n    {services: {cardsRepeaterService}, location}\n) => {\n    cardsRepeaterService.cardChannel.next(location.state.cardsIDsForRepeating);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<CardRepeaterCallbackSettings, ICard> = (\n    {services: {cardsRepeaterService}, location}\n) => {\n    if (location.state) {\n        cardsRepeaterService.cardChannel.next(location.state.cardsIDsForRepeating);\n    }\n    cardsRepeaterService.repeatingProgressChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const onClick: ICallback<CardRepeaterCallbackSettings, boolean> = (\n    {\n        setState,\n        location,\n        services: {cardsRepeaterService}\n    },\n    isKnown = false\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            cardsRepeaterService.repeatingResultChannel.next({\n                isKnown: isKnown,\n                cardID: prevState.card.id,\n                cardsGroupID: location.state.cardsGroupID\n            });\n            return prevState;\n        } else {\n            return {\n                ...prevState,\n                card: {\n                    id: -1,\n                    question: '',\n                    answer: '',\n                    rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n                    dateRepeating: 0\n                },\n                isQuestionSide: false,\n                isEditable: false\n            }\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onClickCard: ICallback<CardRepeaterCallbackSettings, void> = (\n    {setState}\n) => {\n\n    setState((prevState) => {\n        if (!prevState.isEditable) {\n            return {\n                ...prevState,\n                isQuestionSide: !prevState.isQuestionSide\n            }\n        }\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onBackClick: ICallback<CardRepeaterCallbackSettings, void> = (\n    {history}\n) => {\n    history.goBack();\n}","import {IRangeOfKnowledge} from \"../types/IRangeOfKnowledge\";\n\nexport const initDefaultCard = () => {\n    return {\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        answer: '',\n        question: '',\n        dateRepeating: 0,\n        id: new Date().getTime()\n    }\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\nimport {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const onSwitchEditing: ICallback<CardRepeaterCallbackSettings, void> = (\n    {setState, location, services: {cardsEditorService}}\n) => {\n    setState((prevState) => {\n        if (prevState.isEditable) {\n            cardsEditorService.cardEditingChannel.next({\n                card: prevState.card || initDefaultCard(),\n                cardsGroupID: location.state.cardsGroupID\n            })\n        }\n        return {\n            ...prevState,\n            isEditable: !prevState.isEditable\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardRepeaterCallbackSettings, string> = (\n    {setState},\n    question = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                question\n            };\n            return {...prevState, card: editableCard}\n        }\n        return prevState\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardRepeaterCallbackSettings, string> = (\n    {setState},\n    answer = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                answer\n            };\n            return {...prevState, card: editableCard}\n        }\n        return prevState;\n    });\n}","import {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\nimport {defaultRepeatingProgress} from \"../../../common/defaults/defaultRepeatingProgress\";\n\nexport const initialState = {\n    card: {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    },\n    isQuestionSide: true,\n    isEditable: false,\n    repeatingProgress: defaultRepeatingProgress\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onReadByVoiceEngine: ICallback<CardRepeaterCallbackSettings, void> = (\n    {setState, services}\n) => {\n    setState((prevState) => {\n        if (prevState.isQuestionSide) {\n            services.cardsRepeaterService.readByVoiceEngineChannel.next(prevState.card.question);\n        } else {\n            services.cardsRepeaterService.readByVoiceEngineChannel.next(prevState.card.answer);\n        }\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardRepeaterCallbackSettings} from \"../types/CardRepeaterCallbackSettings\";\n\nexport const onReadByVoiceEngineChannel: ICallback<CardRepeaterCallbackSettings, string> = (\n    {},\n) => {\n}","import React, {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {CardsRepeaterComponent} from './CardsRepeaterComponent';\nimport {AppContext} from '../../../App';\nimport {onDeleteCard} from './ui-callbacks/onDeleteCard';\nimport {onDeleteSingleCardChannel} from './channels-callbacks/onDeleteSingleCardChannel';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {onCardChannel} from './channels-callbacks/onCardChannel';\nimport {onCardEditingChannel} from './channels-callbacks/onCardEditingChannel';\nimport {onStatisticChannel} from './channels-callbacks/onStatisticChannel';\nimport {onRepeatingResultChannel} from './channels-callbacks/onRepeatingResultChannel';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onClick} from './ui-callbacks/onClick';\nimport {onClickCard} from './ui-callbacks/onClickCard';\nimport {onBackClick} from './ui-callbacks/onBackClick';\nimport {onSwitchEditing} from './ui-callbacks/onSwitchEditing';\nimport {onChangeQuestion} from './ui-callbacks/onChangeQuestion';\nimport {onChangeAnswer} from './ui-callbacks/onChangeAnswer';\nimport {initialState} from './defaults/initialState';\nimport {CardRepeaterCallbackSettings} from './types/CardRepeaterCallbackSettings';\nimport {onReadByVoiceEngine} from './ui-callbacks/onReadByVoiceEngine';\nimport {onReadByVoiceEngineChannel} from './channels-callbacks/onReadByVoiceEngineChannel';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {CardsRepeaterService} from './CardsRepeaterService';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {CardsEditorService} from '../cards-editor/CardsEditorService';\nimport {ToolbarService} from '../../parts/toolbar/ToolbarService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const CardRepeaterContainer: FC = () => {\n\n    const cardsRepeaterService = useDependencyContext<CardsRepeaterService>(IDependenciesNames.CardsRepeaterService);\n    const cardsEditorService = useDependencyContext<CardsEditorService>(IDependenciesNames.CardsEditorService);\n    const confirmDialogService = useDependencyContext<ConfirmDialogService>(IDependenciesNames.ConfirmDialogService);\n    const toolbarService = useDependencyContext<ToolbarService>(IDependenciesNames.ToolbarService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<CardRepeaterCallbackSettings>(\n        initialState,\n        {\n            cardsRepeaterService,\n            cardsEditorService,\n            confirmDialogService,\n            toolbarService\n        },\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings;\n\n    useChannel(cardsRepeaterService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel))\n    useChannel(cardsRepeaterService.cardChannel, callbackFactory(onCardChannel));\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardsRepeaterService.repeatingProgressChannel, callbackFactory(onStatisticChannel));\n    useChannel(cardsRepeaterService.repeatingResultChannel, callbackFactory(onRepeatingResultChannel));\n    useChannel(cardsRepeaterService.readByVoiceEngineChannel, callbackFactory(onReadByVoiceEngineChannel))\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const click = useCallback(callbackFactory(onClick), []);\n    const clickCard = useCallback(callbackFactory(onClickCard), []);\n    const backClick = useCallback(callbackFactory(onBackClick), []);\n    const switchEditing = useCallback(callbackFactory(onSwitchEditing), []);\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), []);\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), []);\n    const deleteCard = useCallback(callbackFactory(onDeleteCard), [])\n    const readByVoiceEngine = useCallback(callbackFactory(onReadByVoiceEngine), []);\n\n    return <CardsRepeaterComponent\n        onReadByVoiceEngine={readByVoiceEngine}\n        onDeleteCard={deleteCard}\n        cardHeight={context.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={clickCard}\n        onClickYesNoButton={click}\n        card={state.card}\n        repeatingProgress={state.repeatingProgress}\n        onBackClick={backClick}\n        onSwitchEditing={switchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n    />\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {LocalBackupsCallbackSettings} from \"../types/LocalBackupsCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onLoadBackupChannel: ICallback<LocalBackupsCallbackSettings, ICardsGroup[]> = (\n    {services: {spinnerService}}\n) => {\n    spinnerService.spinnerCounterChannel.next(-1);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {LocalBackupsCallbackSettings} from \"../types/LocalBackupsCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport LoadIcon from \"@mui/icons-material/Download\";\nimport * as React from \"react\";\n\nexport const onFileSelect: ICallback<LocalBackupsCallbackSettings, any> = (\n    {\n        setSubscription,\n        services: {\n            spinnerService,\n            confirmDialogService,\n            localBackupsService\n        }\n    },\n    event\n) => {\n\n    let file = null;\n    if (event) {\n        file = event.target.files[0];\n    }\n    if (!file) {\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = (readerEvent: any) => {\n        const games: string = readerEvent.target.result;\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                spinnerService.spinnerCounterChannel.next(1);\n                localBackupsService.loadBackupChannel.next(games);\n            }\n\n            confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to load this backup, your current changes could be removed?',\n            titleBackgroundColor: 'red',\n            icon: <LoadIcon/>\n        });\n    };\n    reader.readAsText(file);\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {Button} from '@mui/material';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {onLoadBackupChannel} from './channels-callbacks/onLoadBackupChannel';\nimport {onFileSelect} from './ui-callbacks/onFileSelect';\nimport {LocalBackupsCallbackSettings} from './types/LocalBackupsCallbackSettings';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {LocalBackupsService} from './LocalBackupsService';\nimport {SpinnerService} from '../../parts/spinner/SpinnerService';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const LocalBackupsContainer: FC = () => {\n\n    const localBackupsService = useDependencyContext<LocalBackupsService>(IDependenciesNames.LocalBackupsService);\n    const spinnerService = useDependencyContext<SpinnerService>(IDependenciesNames.SpinnerService);\n    const confirmDialogService = useDependencyContext<ConfirmDialogService>(IDependenciesNames.ConfirmDialogService);\n\n    const {\n        callbackFactory\n    } = useCallbackFactory<LocalBackupsCallbackSettings>(\n        null,\n        {\n            localBackupsService,\n            spinnerService,\n            confirmDialogService\n        },\n        AppContext\n    );\n\n    useChannel(localBackupsService.localBackupChannel);\n    useChannel(localBackupsService.loadBackupChannel, callbackFactory(onLoadBackupChannel));\n\n    const handleFileSelect = useCallback(callbackFactory(onFileSelect), [])\n\n    return <>\n        <input type=\"file\" onChange={handleFileSelect}/>\n        <Button size=\"small\" onClick={() => localBackupsService.localBackupChannel.next()}>\n            Save\n        </Button>\n    </>\n};\n","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {Button, TextField} from '@mui/material';\n\nimport './CardsGroupsEditorComponent.css'\nimport {ICardsGroupsEditorComponent} from \"./types/ICardsGroupsEditorComponent\";\n\nexport const CardsGroupsEditorComponent: FC<ICardsGroupsEditorComponent> = (\n    {groupName, onChangeGroupName, onSaveGroup}\n) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeGroupName(event.target.value);\n    };\n\n    return <div className=\"group-editor\">\n        <TextField\n            className=\"group-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Group name\"\n            onChange={onChange}\n            value={groupName}\n            variant=\"filled\"\n        />\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveGroup()}>\n            Save\n        </Button>\n    </div>\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onChangeGroupName: ICallback<ICardsGroupsEditorCallbackSettings, string> = (\n    {setState},\n    groupName = ''\n) => {\n    setState((prevState) => {\n        return {\n            cardsGroup: {\n                ...prevState.cardsGroup,\n                nameCardsGroup: groupName\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onSaveGroup: ICallback<ICardsGroupsEditorCallbackSettings, void> = (\n    {setState, services}\n) => {\n    setState((prevState) => {\n        services.cardsGroupsEditorService.groupEditingChannel.next(prevState.cardsGroup);\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\n\nexport const onConstructor: ICallback<ICardsGroupsEditorCallbackSettings, void> = (\n    {services, location}\n) => {\n    let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n    services.cardsGroupsEditorService.groupChannel.next(cardsGroupID)\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupEditingChannel: ICallback<ICardsGroupsEditorCallbackSettings, ICardsGroup[]> = (\n    {history}\n) => {\n    history.goBack();\n}","export const defaultCardsGroup = {\n    cards: [],\n    nameCardsGroup: '',\n    repeatingDate: new Date().getTime(),\n    id: new Date().getTime(),\n    percentRepeatedCards: 0\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICardsGroupsEditorCallbackSettings} from \"../types/ICardsGroupsEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {defaultCardsGroup} from \"../../../common/defaults/defaultCardsGroup\";\n\nexport const onGroupChannel: ICallback<ICardsGroupsEditorCallbackSettings, ICardsGroup> = (\n    {setState},\n    cardsGroup = defaultCardsGroup\n) => {\n    setState((prevState) => {\n        return {\n            cardsGroup\n        }\n    })\n}","import {defaultCardsGroup} from \"../../../common/defaults/defaultCardsGroup\";\n\nexport const initialState = {\n    cardsGroup: defaultCardsGroup\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {CardsGroupsEditorComponent} from './CardsGroupsEditorComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {onChangeGroupName} from './ui-callbacks/onChangeGroupName';\nimport {onSaveGroup} from './ui-callbacks/onSaveGroup';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onGroupEditingChannel} from './channels-callbacks/onGroupEditingChannel';\nimport {onGroupChannel} from './channels-callbacks/onGroupChannel';\nimport {initialState} from './defaults/initialState';\nimport {ICardsGroupsEditorCallbackSettings} from './types/ICardsGroupsEditorCallbackSettings';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {CardsGroupsEditorService} from './CardsGroupsEditorService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const CardsGroupsEditorContainer: FC = () => {\n\n    const cardsGroupsEditorService = useDependencyContext<CardsGroupsEditorService>(IDependenciesNames.CardsGroupsEditorService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<ICardsGroupsEditorCallbackSettings>(\n        initialState,\n        {cardsGroupsEditorService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings;\n\n    useChannel(cardsGroupsEditorService.groupEditingChannel, callbackFactory(onGroupEditingChannel));\n    useChannel(cardsGroupsEditorService.groupChannel, callbackFactory(onGroupChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeGroupName = useCallback(callbackFactory(onChangeGroupName), []);\n    const saveGroup = useCallback(callbackFactory(onSaveGroup), []);\n\n    return <CardsGroupsEditorComponent\n        groupName={state.cardsGroup.nameCardsGroup}\n        onChangeGroupName={changeGroupName}\n        onSaveGroup={saveGroup}\n    />\n};\n","import * as React from 'react';\nimport {FC} from 'react';\nimport {Button} from '@mui/material';\n\nimport './CardsEditorComponent.css'\nimport {TextEditorComponent} from '../../common/elements/text-editor/TextEditorComponent';\nimport {ICardsEditorComponent} from \"./types/ICardsEditorComponent\";\n\nexport const CardsEditorComponent: FC<ICardsEditorComponent> = (\n    {\n        answer,\n        question,\n        onChangeAnswer,\n        onChangeQuestion,\n        onSaveCard\n    }\n) => {\n    return <div className=\"cards-editor\">\n        <TextEditorComponent onChangeText={onChangeQuestion} changeableText={question} label=\"Question\"/>\n        <TextEditorComponent onChangeText={onChangeAnswer} changeableText={answer} label=\"Answer\"/>\n        <Button variant=\"outlined\" className=\"group-editor_button\" size=\"small\" onClick={() => onSaveCard()}>\n            Save\n        </Button>\n    </div>\n};\n","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onCardEditingChannel: ICallback<CardsEditorCallbackSettings, ICard> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onCardChannel: ICallback<CardsEditorCallbackSettings, ICard> = (\n    {history, setState},\n    card = defaultCard\n) => {\n    if (card) {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                card\n            }\n        })\n    }\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onConstructor: ICallback<CardsEditorCallbackSettings, void> = (\n    {\n        location,\n        services\n    }\n) => {\n    let cardsGroupID = location.state ? location.state.cardsGroupID : -1;\n    let cardID = location.state ? location.state.cardID : -1;\n    services.cardsEditorService.cardChannel.next({cardID, cardsGroupID});\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardsEditorCallbackSettings, string> = (\n    {history, setState},\n    question = ''\n) => {\n    setState((prevState) => {\n        return {\n            card: {\n                ...prevState.card,\n                question\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardsEditorCallbackSettings, string> = (\n    {history, setState},\n    answer = ''\n) => {\n    setState((prevState) => {\n        return {\n            card: {\n                ...prevState.card,\n                answer\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardsEditorCallbackSettings} from \"../types/CardsEditorCallbackSettings\";\n\nexport const onSaveCard: ICallback<CardsEditorCallbackSettings, void> = (\n    {services, setState, location}\n) => {\n    setState((prevState) => {\n        services.cardsEditorService.cardEditingChannel.next(\n            {card: prevState.card, cardsGroupID: location.state.cardsGroupID}\n        );\n        return prevState;\n    })\n}","import {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const initialState = {\n    card: initDefaultCard()\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {CardsEditorComponent} from './CardsEditorComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {onCardEditingChannel} from './channels-callbacks/onCardEditingChannel';\nimport {onCardChannel} from './channels-callbacks/onCardChannel';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onChangeQuestion} from './ui-callbacks/onChangeQuestion';\nimport {onChangeAnswer} from './ui-callbacks/onChangeAnswer';\nimport {onSaveCard} from './ui-callbacks/onSaveCard';\nimport {initialState} from './defaults/initialState';\nimport {CardsEditorCallbackSettings} from './types/CardsEditorCallbackSettings';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {CardsEditorService} from './CardsEditorService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const CardsEditorContainer: FC = () => {\n\n    const cardsEditorService = useDependencyContext<CardsEditorService>(IDependenciesNames.CardsEditorService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<CardsEditorCallbackSettings>(\n        initialState,\n        {cardsEditorService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings;\n\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardsEditorService.cardChannel, callbackFactory(onCardChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), []);\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), []);\n    const saveCard = useCallback(callbackFactory(onSaveCard), []);\n\n    return <CardsEditorComponent\n        question={state.card.question}\n        answer={state.card.answer}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n        onSaveCard={saveCard}\n    />\n};\n","import * as React from \"react\";\nimport {ChangeEvent, FC} from \"react\";\nimport {FormControlLabel, Switch} from \"@mui/material\";\nimport {ISettingsSwitcherComponent} from \"./types/ISettingsSwitcherComponent\";\n\nexport const SettingsSwitcherComponent: FC<ISettingsSwitcherComponent> = (\n    {\n        checked,\n        label,\n        onChange\n    }\n) => {\n\n    const change = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.checked)\n    };\n\n    return <FormControlLabel\n        control={\n            <Switch\n                checked={checked}\n                onChange={change}\n            />\n        }\n        label={label}\n    />\n}","import * as React from \"react\";\nimport {ChangeEvent, FC} from \"react\";\n\nimport {ISettingsNumberInputComponent} from \"./types/ISettingsNumberInputComponent\";\nimport {FormControlLabel, Input} from \"@mui/material\";\n\nexport const SettingsNumberInputComponent: FC<ISettingsNumberInputComponent> = (\n    {\n        value,\n        label,\n        onChange,\n    }\n) => {\n\n    const change = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange(Number(event.target.value))\n    };\n\n    return <FormControlLabel\n        control={\n            <Input\n                type=\"number\"\n                value={value}\n                onChange={change}\n            />\n        }\n        label={label}\n    />\n}","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {FormControlLabel, FormGroup, FormLabel} from '@mui/material';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\n\nimport {ISettingsComponent} from './types/ISettingsComponent';\nimport {SettingsSwitcherComponent} from './elements/settings-switcher/SettingsSwitcherComponent';\nimport {SettingsNumberInputComponent} from './elements/settings-number-input/SettingsNumberInputComponent';\nimport './SettingsComponent.css'\nimport {IRepeatingType} from '../../common/types/IRepeatingType';\n\nexport const SettingsComponent: FC<ISettingsComponent> = (\n    {\n        settings,\n        onChangeAlgorithm,\n        onChangeAutoObsolete,\n        onChangeTimeInDone,\n        onChangeTimeInProgress\n    }\n) => {\n\n    const changeAlgorithm = (event: ChangeEvent<HTMLInputElement>) => {\n        let repeatingType = Number(event.target.value) as any\n        onChangeAlgorithm(repeatingType);\n    };\n\n    return <FormGroup className=\"settings-form\">\n        <FormLabel>Random repeating algorithm</FormLabel>\n        <RadioGroup value={settings.repeatingType} onChange={changeAlgorithm}>\n            <FormControlLabel value={IRepeatingType.DEFAULT} control={<Radio/>} label=\"Default\"/>\n            <FormControlLabel value={IRepeatingType.RANDOM} control={<Radio/>} label=\"Random\"/>\n        </RadioGroup>\n        <SettingsSwitcherComponent\n            checked={settings.autoObsolete?.isEnable}\n            label=\"Enable auto obsolete\"\n            onChange={onChangeAutoObsolete}\n        />\n        <SettingsNumberInputComponent\n            value={settings.autoObsolete?.timeInDone}\n            onChange={onChangeTimeInDone}\n            label=\"How long cards exist in done status (days)\"\n        />\n        <SettingsNumberInputComponent\n            value={settings.autoObsolete?.timeInProgress}\n            onChange={onChangeTimeInProgress}\n            label=\"How long cards exist in progress status (days)\"\n        />\n        <SettingsNumberInputComponent\n            value={settings.difficultCardsAmountForRepeating}\n            onChange={onChangeTimeInProgress}\n            label=\"How many difficult cards do you want to repeat by default\"\n        />\n    </FormGroup>\n};\n","import {ISettings} from '../types/ISettings';\nimport {IRepeatingType} from '../types/IRepeatingType';\n\nexport const defaultSettings: ISettings = {\n    repeatingType: IRepeatingType.DEFAULT,\n    autoObsolete: {\n        isEnable: false,\n        timeInDone: 7,\n        timeInProgress: 7\n    },\n    difficultCardsAmountForRepeating: 15\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {ISettings} from \"../../../common/types/ISettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onChangeSettingsChannel: ICallback<SettingsCallbackSettings, ISettings> = (\n    {services: {settingsService}}\n) => {\n    settingsService.settingsChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {ISettings} from \"../../../common/types/ISettings\";\nimport {defaultSettings} from \"../../../common/defaults/defaultSettings\";\n\nexport const onSettingsChannel: ICallback<SettingsCallbackSettings, ISettings> = (\n    {setState, services: {settingsService}},\n    settings = defaultSettings\n) => {\n    setState((prevState) => {\n        return {...prevState, ...settings}\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<SettingsCallbackSettings, void> = (\n    {setState, services: {settingsService}}\n) => {\n    settingsService.settingsChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\nimport {IRepeatingType} from \"../../../common/types/IRepeatingType\";\n\nexport const onChangeAlgorithm: ICallback<SettingsCallbackSettings, IRepeatingType> = (\n    {setState, services: {settingsService}},\n    repeatingType = IRepeatingType.DEFAULT\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            repeatingType\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\n\nexport const onChangeAutoObsolete: ICallback<SettingsCallbackSettings, boolean> = (\n    {setState, services: {settingsService}},\n    isEnable = false\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            autoObsolete: {\n                ...prevState.autoObsolete,\n                isEnable\n            }\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\n\nexport const onChangeTimeInDone: ICallback<SettingsCallbackSettings, number> = (\n    {setState, services: {settingsService}},\n    timeInDone = -1\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            autoObsolete: {\n                ...prevState.autoObsolete,\n                timeInDone\n            }\n        })\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SettingsCallbackSettings} from \"../types/SettingsCallbackSettings\";\n\nexport const onChangeTimeInProgress: ICallback<SettingsCallbackSettings, number> = (\n    {setState, services: {settingsService}},\n    timeInProgress = -1\n) => {\n    setState((prevState) => {\n        settingsService.changeSettingsChannel.next({\n            ...prevState,\n            autoObsolete: {\n                ...prevState.autoObsolete,\n                timeInProgress\n            }\n        })\n        return prevState;\n    })\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {SettingsComponent} from './SettingsComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {defaultSettings} from '../../common/defaults/defaultSettings';\nimport {onChangeSettingsChannel} from './channels-callbacks/onChangeSettingsChannel';\nimport {onSettingsChannel} from './channels-callbacks/onSettingsChannel';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onChangeAlgorithm} from './ui-callbacks/onChangeAlgorithm';\nimport {onChangeAutoObsolete} from './ui-callbacks/onChangeAutoObsolete';\nimport {onChangeTimeInDone} from './ui-callbacks/onChangeTimeInDone';\nimport {onChangeTimeInProgress} from './ui-callbacks/onChangeTimeInProgress';\nimport {SettingsCallbackSettings} from './types/SettingsCallbackSettings';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {SettingsService} from './SettingsService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const SettingsContainer: FC = () => {\n\n    const settingsService = useDependencyContext<SettingsService>(IDependenciesNames.SettingsService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<SettingsCallbackSettings>(\n        defaultSettings,\n        {settingsService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings;\n\n    useChannel(settingsService.changeSettingsChannel, callbackFactory(onChangeSettingsChannel));\n    useChannel(settingsService.settingsChannel, callbackFactory(onSettingsChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const changeAlgorithm = useCallback(callbackFactory(onChangeAlgorithm), []);\n    const changeAutoObsolete = useCallback(callbackFactory(onChangeAutoObsolete), [])\n    const changeTimeInDone = useCallback(callbackFactory(onChangeTimeInDone), [])\n    const changeTimeInProgress = useCallback(callbackFactory(onChangeTimeInProgress), [])\n\n    return <SettingsComponent\n        settings={state}\n        onChangeAlgorithm={changeAlgorithm}\n        onChangeAutoObsolete={changeAutoObsolete}\n        onChangeTimeInDone={changeTimeInDone}\n        onChangeTimeInProgress={changeTimeInProgress}\n    />\n};","import React, {FC} from \"react\";\n\nimport {CardsContentComponent} from \"../../common/elements/cards-content/CardsContentComponent\";\nimport {ICardsContentComponent} from \"../../common/elements/cards-content/types/ICardsContentComponent\";\n\nexport const CardViewerComponent: FC<ICardsContentComponent> = (props) => {\n\n    return <div className=\"cards-viewer\">\n        {\n            props.card.id === -1 ? <div>No card for viewing</div> : <CardsContentComponent {...props}/>\n        }\n    </div>\n};","import DeleteIcon from '@mui/icons-material/Delete';\n\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\n\nexport const onDeleteCard: ICallback<CardViewerCallbackSettings, void> = (\n    {services, setSubscription, setState}\n) => {\n    setState((prevState) => {\n        const {confirmDialogService, cardViewerService} = services;\n\n        const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n            if (isConfirm) {\n                cardViewerService.deleteSingleCardChannel.next(prevState.card.id);\n            }\n\n            confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n        });\n\n        setSubscription(subscription);\n\n        confirmDialogService.openDialogChannel.next({\n            isOpen: true,\n            message: 'Do you want to delete this cards?',\n            titleBackgroundColor: 'red',\n            icon: <DeleteIcon/>\n        });\n        return prevState;\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onDeleteSingleCardChannel: ICallback<CardViewerCallbackSettings, ICardsGroup[]> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onChangeAnswer: ICallback<CardViewerCallbackSettings, string> = (\n    {setState},\n    args = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                answer: args\n            };\n            return {...prevState, card: editableCard}\n        }\n        return prevState;\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onChangeQuestion: ICallback<CardViewerCallbackSettings, string> = (\n    {setState},\n    args = ''\n) => {\n    setState((prevState) => {\n        if (prevState.card) {\n            const editableCard = {\n                ...prevState.card,\n                question: args\n            };\n\n            return {...prevState, card: editableCard}\n        }\n        return prevState;\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {initDefaultCard} from \"../../../common/logic/initDefaultCard\";\n\nexport const onSwitchEditing: ICallback<CardViewerCallbackSettings, void> = (\n    {\n        setState,\n        services,\n        location\n    }\n) => {\n    setState((prevState) => {\n        if (prevState.isEditable) {\n            services.cardsEditorService.cardEditingChannel.next({\n                card: prevState.card || initDefaultCard(),\n                cardsGroupID: location.state.cardsGroupID\n            })\n        }\n        return {\n            ...prevState,\n            isEditable: !prevState.isEditable\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onClickYesNoButton: ICallback<CardViewerCallbackSettings, boolean> = (\n    {\n        setState,\n        services,\n        location\n    },\n    args = false\n) => {\n\n    setState((prevState) => {\n        if (prevState.card) {\n            services.cardViewerService.repeatingResultChannel.next({\n                isKnown: args,\n                cardID: prevState.card.id,\n                cardsGroupID: location.state.cardsGroupID\n            });\n            return prevState;\n        } else {\n            return {\n                card: defaultCard,\n                isQuestionSide: false,\n                isEditable: false\n            }\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onClickCard: ICallback<CardViewerCallbackSettings, void> = (\n    {setState}\n) => {\n    setState((prevState) => {\n        if (!prevState.isEditable) {\n            return {\n                ...prevState,\n                isQuestionSide: !prevState.isQuestionSide\n            }\n        }\n        return prevState;\n    })\n}","import {CardViewerCallbackSettings} from '../types/CardViewerCallbackSettings';\nimport {ICard} from '../../../common/types/ICard';\nimport {defaultCard} from '../../../common/defaults/defaultCard';\nimport {ICallback} from '../../../../MyTools/react-types/ICallback';\n\nexport const onCardChannel: ICallback<CardViewerCallbackSettings, ICard> = (\n    {services, setState},\n    card = defaultCard\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const onCardEditingChannel: ICallback<CardViewerCallbackSettings, ICard> = (\n    {setState},\n    card = defaultCard\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            card: card\n        }\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onRepeatingResultChannel: ICallback<CardViewerCallbackSettings, ICardsGroup[]> = (\n    {services, location}\n) => {\n    services.cardViewerService.cardChannel.next(location.state.cardID);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onConstructor: ICallback<CardViewerCallbackSettings, void> = (\n    {services, location}\n) => {\n    services.cardViewerService.cardChannel.next(location.state.cardID);\n}","import {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const initialState = {\n    card: {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    },\n    isQuestionSide: true,\n    isEditable: false\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onReadByVoiceEngine: ICallback<CardViewerCallbackSettings, void> = (\n    {services, setState}\n) => {\n    setState((prevState) => {\n        if (prevState.isQuestionSide) {\n            services.cardViewerService.readByVoiceEngineChannel.next(prevState.card.question);\n        } else {\n            services.cardViewerService.readByVoiceEngineChannel.next(prevState.card.answer);\n        }\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {CardViewerCallbackSettings} from \"../types/CardViewerCallbackSettings\";\n\nexport const onReadByVoiceEngineChannel: ICallback<CardViewerCallbackSettings, string> = (\n    {}\n) => {\n}","import React, {FC, useCallback} from 'react';\n\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {AppContext} from '../../../App';\nimport {CardViewerComponent} from './CardViewerComponent';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {onDeleteCard} from './ui-callbacks/onDeleteCard';\nimport {onDeleteSingleCardChannel} from './channels-callbacks/onDeleteSingleCardChannel';\nimport {onChangeAnswer} from './ui-callbacks/onChangeAnswer';\nimport {onChangeQuestion} from './ui-callbacks/onChangeQuestion';\nimport {onSwitchEditing} from './ui-callbacks/onSwitchEditing';\nimport {onClickYesNoButton} from './ui-callbacks/onClickYesNoButton';\nimport {onClickCard} from './ui-callbacks/onClickCard';\nimport {onCardChannel} from './channels-callbacks/onCardChannel';\nimport {onCardEditingChannel} from './channels-callbacks/onCardEditingChannel';\nimport {onRepeatingResultChannel} from './channels-callbacks/onRepeatingResultChannel';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {initialState} from './defaults/initialState';\nimport {CardViewerCallbackSettings} from './types/CardViewerCallbackSettings';\nimport {onReadByVoiceEngine} from './ui-callbacks/onReadByVoiceEngine';\nimport {onReadByVoiceEngineChannel} from './channels-callbacks/onReadByVoiceEngineChannel';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {CardViewerService} from './CardViewerService';\nimport {CardsEditorService} from '../cards-editor/CardsEditorService';\nimport {ToolbarService} from '../../parts/toolbar/ToolbarService';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const CardViewerContainer: FC = () => {\n\n    const cardViewerService = useDependencyContext<CardViewerService>(IDependenciesNames.CardViewerService);\n    const cardsEditorService = useDependencyContext<CardsEditorService>(IDependenciesNames.CardsEditorService);\n    const toolbarService = useDependencyContext<ToolbarService>(IDependenciesNames.ToolbarService);\n    const confirmDialogService = useDependencyContext<ConfirmDialogService>(IDependenciesNames.ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<CardViewerCallbackSettings>(\n        initialState,\n        {cardViewerService, cardsEditorService, toolbarService, confirmDialogService},\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings\n\n    useChannel(cardViewerService.deleteSingleCardChannel, callbackFactory(onDeleteSingleCardChannel))\n    useChannel(cardViewerService.cardChannel, callbackFactory(onCardChannel));\n    useChannel(cardsEditorService.cardEditingChannel, callbackFactory(onCardEditingChannel));\n    useChannel(cardViewerService.repeatingResultChannel, callbackFactory(onRepeatingResultChannel));\n    useChannel(cardViewerService.readByVoiceEngineChannel, callbackFactory(onReadByVoiceEngineChannel));\n\n    useConstructor(callbackFactory(onConstructor))\n\n    const clickCard = useCallback(callbackFactory(onClickCard), [])\n    const clickYesNoButton = useCallback(callbackFactory(onClickYesNoButton), [])\n    const switchEditing = useCallback(callbackFactory(onSwitchEditing), [])\n    const changeQuestion = useCallback(callbackFactory(onChangeQuestion), [])\n    const changeAnswer = useCallback(callbackFactory(onChangeAnswer), [])\n    const deleteCard = useCallback(callbackFactory(onDeleteCard), [])\n    const readByVoiceEngine = useCallback(callbackFactory(onReadByVoiceEngine), [])\n\n    return <CardViewerComponent\n        onReadByVoiceEngine={readByVoiceEngine}\n        cardHeight={context.height * 0.55}\n        isQuestionSide={state.isQuestionSide}\n        onClickCard={clickCard}\n        onClickYesNoButton={clickYesNoButton}\n        card={state.card}\n        onSwitchEditing={switchEditing}\n        isEditable={state.isEditable}\n        onChangeQuestion={changeQuestion}\n        onChangeAnswer={changeAnswer}\n        onDeleteCard={deleteCard}\n    />\n}","import DeleteIcon from \"@mui/icons-material/Delete\";\nimport Fab from \"@mui/material/Fab\";\nimport * as React from \"react\";\nimport {FC} from \"react\";\n\nimport './RemoveButtonComponent.css'\nimport {IRemoveButtonComponent} from \"./types/IRemoveButtonComponent\";\n\nexport const RemoveButtonComponent: FC<IRemoveButtonComponent> = ({onClick}) => {\n    return <div className='remove-button-container'>\n        <Fab size=\"medium\" color=\"secondary\" onClick={onClick}>\n            <DeleteIcon/>\n        </Fab>\n    </div>\n}","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@mui/material\";\n\nimport './StatisticComponent.css'\nimport {IStatisticComponent} from \"./types/IStatisticComponent\";\nimport {RemoveButtonComponent} from \"./elements/RemoveButtonComponent\";\n\nexport const StatisticComponent: FC<IStatisticComponent> = ({rows, onRemoveStatistic}) => {\n    return <>\n        <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Date</TableCell>\n                        <TableCell>Done</TableCell>\n                        <TableCell>In Progress</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {rows.map((row) => (\n                        <TableRow key={row.date}>\n                            <TableCell>{row.date}</TableCell>\n                            <TableCell>{row.done}</TableCell>\n                            <TableCell>{row.inProgress}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n        <RemoveButtonComponent onClick={onRemoveStatistic}/>\n    </>\n}","export const initialState = {\n    rows: []\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {IRow} from \"../types/IRow\";\n\nexport const onStatisticChannel: ICallback<StatisticCallbackSettings, IRow[]> = (\n    {setState},\n    rows = []\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            rows\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<StatisticCallbackSettings, void> = (\n    {services: {statisticService}}\n) => {\n    statisticService.statisticChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport * as React from \"react\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onRemoveStatistic: ICallback<StatisticCallbackSettings, void> = (\n    {setSubscription, services: {statisticService, confirmDialogService}}\n) => {\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm) => {\n        if (isConfirm) {\n            statisticService.removeStatisticChannel.next(empty);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to delete statistic?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {StatisticCallbackSettings} from \"../types/StatisticCallbackSettings\";\nimport {initialState} from \"../defaults/initialState\";\nimport {IStatistic} from \"../../../common/types/IStatistic\";\n\nexport const onRemoveStatisticChannel: ICallback<StatisticCallbackSettings, IStatistic> = (\n    {setState}\n) => {\n    setState(() => {\n        return initialState;\n    })\n}","import {StatisticComponent} from './StatisticComponent';\nimport {FC, useCallback} from 'react';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {StatisticCallbackSettings} from './types/StatisticCallbackSettings';\nimport {initialState} from './defaults/initialState';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {onStatisticChannel} from './channels-callbacks/onStatisticChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onRemoveStatistic} from './ui-callbacks/onRemoveStatistic';\nimport {onRemoveStatisticChannel} from './channels-callbacks/onRemoveStatisticChannel';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {StatisticService} from './StatisticService';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const StatisticContainer: FC = () => {\n\n    const statisticService = useDependencyContext<StatisticService>(IDependenciesNames.StatisticService);\n    const confirmDialogService = useDependencyContext<ConfirmDialogService>(IDependenciesNames.ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<StatisticCallbackSettings>(\n        initialState,\n        {statisticService, confirmDialogService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings;\n\n    useChannel(statisticService.statisticChannel, callbackFactory(onStatisticChannel));\n    useChannel(statisticService.removeStatisticChannel, callbackFactory(onRemoveStatisticChannel));\n\n    useConstructor(callbackFactory(onConstructor))\n\n    const removeStatistic = useCallback(callbackFactory(onRemoveStatistic), [])\n\n    return <StatisticComponent rows={state.rows} onRemoveStatistic={removeStatistic}/>\n}","import * as React from \"react\";\nimport {FC} from \"react\";\n\nimport {ISelectingGroupListItem} from \"./types/ISelectingGroupListItem\";\nimport ListItemText from \"@mui/material/ListItemText/ListItemText\";\nimport ListItemIcon from \"@mui/material/ListItemIcon/ListItemIcon\";\nimport {Checkbox, ListItem} from \"@mui/material\";\n\nexport const SelectingGroupListItem: FC<ISelectingGroupListItem> = (\n    {cardsGroup, onSelect, isSelected}\n) => {\n    return <ListItem key={cardsGroup.id} button>\n        <ListItemText\n            primary={<div>{cardsGroup.nameCardsGroup}</div>}\n        />\n        <ListItemIcon onClick={() => onSelect(cardsGroup.id)}>\n            <Checkbox\n                edge=\"start\"\n                checked={isSelected}\n                tabIndex={-1}\n                disableRipple\n            />\n        </ListItemIcon>\n    </ListItem>\n}","import * as React from 'react';\nimport {ChangeEvent, FC} from 'react';\nimport {Button, TextField} from '@mui/material';\nimport {FixedSizeList as List} from 'react-window';\n\nimport './RepeaterEditorComponent.css'\nimport {IRepeaterEditorComponent} from './types/IRepeaterEditorComponent';\nimport {SelectingGroupListItem} from './elements/selecting-group-list-element/SelectingGroupListItem';\n\nexport const RepeaterEditorComponent: FC<IRepeaterEditorComponent> = (\n    {\n        onSaveRepeater,\n        cardsGroups,\n        height,\n        onSelect,\n        selectedGroups,\n        onChangeName,\n        repeaterName\n    }\n) => {\n\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        onChangeName(event.target.value);\n    };\n\n    return <>\n        <TextField\n            className=\"repeater-editor_text\"\n            required\n            id=\"outlined-required\"\n            label=\"Repeater name\"\n            onChange={onChange}\n            value={repeaterName}\n            variant=\"filled\"\n        />\n        <List\n            className=\"repeater-editor_list\"\n            itemData={cardsGroups}\n            itemSize={55}\n            itemCount={cardsGroups.length}\n            overscanCount={5}\n            height={height - 500}\n            width=\"100%\"\n        >\n            {({index, style}: any) => {\n                return <div style={style}><SelectingGroupListItem\n                    cardsGroup={cardsGroups[index]}\n                    onSelect={onSelect}\n                    isSelected={selectedGroups[cardsGroups[index].id]}\n                /></div>\n            }}\n        </List>\n        <Button variant=\"outlined\" className=\"repeater-editor_button\" size=\"small\" onClick={onSaveRepeater}>\n            Save\n        </Button>\n    </>\n}","import {IRepeater} from \"../types/IRepeater\";\n\nexport const defaultRepeater: IRepeater = {\n    id: -1,\n    cardsGroupsIDs: [],\n    name: ''\n}","import {RepeaterEditorState} from \"../types/RepeaterEditorState\";\nimport {defaultRepeater} from \"../../../common/defaults/defaultRepeater\";\n\nexport const initialState: RepeaterEditorState = {\n    cardsGroups: [],\n    selectedGroups: {},\n    repeater: defaultRepeater\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const onGroupsListChannel: ICallback<RepeaterEditorCallbackSettings, ICardsGroup[]> = (\n    {setState},\n    cardsGroups = []\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            cardsGroups\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const onSaveRepeaterChannel: ICallback<RepeaterEditorCallbackSettings, IRepeater[]> = (\n    {history}\n) => {\n    history.goBack();\n}","import {ICallback} from '../../../../MyTools/react-types/ICallback';\nimport {RepeaterEditorCallbackSettings} from '../types/RepeaterEditorCallbackSettings';\nimport {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const onSaveRepeater: ICallback<RepeaterEditorCallbackSettings, ICardsGroup[]> = (\n    {setState, services: {repeaterEditorService, errorService}}\n) => {\n    setState((prevState) => {\n        if (prevState.repeater.name) {\n            repeaterEditorService.saveRepeaterChannel.next(prevState.repeater);\n        } else {\n            errorService.errorChannel.next('You cannot save repeater that does not have the name');\n        }\n\n        return prevState;\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\nimport {defaultRepeater} from \"../../../common/defaults/defaultRepeater\";\n\nexport const onUpdateGroupsIDsChannel: ICallback<RepeaterEditorCallbackSettings, IRepeater> = (\n    {setState},\n    repeater = defaultRepeater\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeater\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\n\nexport const onSelect: ICallback<RepeaterEditorCallbackSettings, number> = (\n    {setState, services: {repeaterEditorService}},\n    cardID = -1\n) => {\n    setState((prevState) => {\n        prevState.selectedGroups[cardID] = !prevState.selectedGroups[cardID];\n        repeaterEditorService.updateGroupsIDsChannel.next({\n            selectedGroups: prevState.selectedGroups,\n            repeater: prevState.repeater\n        })\n\n        return {\n            ...prevState\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\nimport {defaultRepeater} from \"../../../common/defaults/defaultRepeater\";\n\nexport const onRepeaterChannel: ICallback<RepeaterEditorCallbackSettings, IRepeater> = (\n    {setState, services: {repeaterEditorService}},\n    repeater = defaultRepeater\n) => {\n    repeaterEditorService.selectedGroupsChannel.next(repeater);\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeater\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\n\nexport const onChangeName: ICallback<RepeaterEditorCallbackSettings, string> = (\n    {setState},\n    name = ''\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeater: {\n                ...prevState.repeater,\n                name\n            }\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<RepeaterEditorCallbackSettings, void> = (\n    {services: {repeaterEditorService}, location}\n) => {\n    const repeaterID = location.state && location.state.repeaterID;\n    if (repeaterID) {\n        repeaterEditorService.repeaterChannel.next(repeaterID);\n    }\n    repeaterEditorService.groupsListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterEditorCallbackSettings} from \"../types/RepeaterEditorCallbackSettings\";\n\nexport const onSelectedGroupsChannel: ICallback<RepeaterEditorCallbackSettings, {\n    [key: number]: boolean;\n}> = (\n    {setState},\n    selectedGroups = {}\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            selectedGroups\n        }\n    })\n}","import {FC, useCallback} from 'react';\n\nimport {RepeaterEditorComponent} from './RepeaterEditorComponent';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {initialState} from './defaults/inititalState';\nimport {RepeaterEditorCallbackSettings} from './types/RepeaterEditorCallbackSettings';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {onGroupsListChannel} from './channels-callbacks/onGroupsListChannel';\nimport {onSaveRepeaterChannel} from './channels-callbacks/onSaveRepeaterChannel';\nimport {onSaveRepeater} from './ui-callbacks/onSaveRepeater';\nimport {onUpdateGroupsIDsChannel} from './channels-callbacks/onUpdateGroupsIDsChannel';\nimport {onSelect} from './ui-callbacks/onSelect';\nimport {onRepeaterChannel} from './channels-callbacks/onRepeaterChannel';\nimport {onChangeName} from './ui-callbacks/onChangeName';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onSelectedGroupsChannel} from './channels-callbacks/onSelectedGroupsChannel';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {RepeaterEditorService} from './RepeaterEditorService';\nimport {ErrorService} from '../../parts/error-dialog/ErrorService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const RepeaterEditorContainer: FC = () => {\n\n    const repeaterEditorService = useDependencyContext<RepeaterEditorService>(IDependenciesNames.RepeaterEditorService);\n    const errorService = useDependencyContext<ErrorService>(IDependenciesNames.ErrorService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<RepeaterEditorCallbackSettings>(\n        initialState,\n        {repeaterEditorService, errorService},\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings;\n\n    useChannel(repeaterEditorService.groupsListChannel, callbackFactory(onGroupsListChannel));\n    useChannel(repeaterEditorService.saveRepeaterChannel, callbackFactory(onSaveRepeaterChannel));\n    useChannel(repeaterEditorService.updateGroupsIDsChannel, callbackFactory(onUpdateGroupsIDsChannel));\n    useChannel(repeaterEditorService.repeaterChannel, callbackFactory(onRepeaterChannel));\n    useChannel(repeaterEditorService.selectedGroupsChannel, callbackFactory(onSelectedGroupsChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const saveRepeater = useCallback(callbackFactory(onSaveRepeater), []);\n    const select = useCallback(callbackFactory(onSelect), []);\n    const changeName = useCallback(callbackFactory(onChangeName), []);\n\n    return <RepeaterEditorComponent\n        onSaveRepeater={saveRepeater}\n        cardsGroups={state.cardsGroups}\n        height={context.height}\n        selectedGroups={state.selectedGroups}\n        onSelect={select}\n        onChangeName={changeName}\n        repeaterName={state.repeater.name}\n    />\n}","const colors: string[] = ['red', 'blue', 'orange', 'grey', 'green'];\nlet chosenColors: string[] = []\n\nexport const getRandomColor = () => {\n    let color = colors[0];\n    let isChosenColor = true;\n    do {\n        color = colors[Math.floor(Math.random() * colors.length)];\n        isChosenColor = chosenColors.indexOf(color) > -1;\n        if (chosenColors.length === colors.length) {\n            chosenColors = [];\n        }\n    } while (isChosenColor)\n    chosenColors.push(color);\n    return color;\n}","import React, {FC} from 'react';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport ListItem from '@mui/material/ListItem';\n\nimport {IRepeaterListItem} from './types/IRepeaterListItem';\nimport './RepeaterListItem.css';\nimport {ListItemMenuComponent} from '../../../../common/elements/list-item-menu/ListItemMenuComponent';\nimport {\n    CircularProgressComponent\n} from '../../../cards-groups-list/elements/circular-progress/CircularProgressComponent';\nimport {IMenuSetupItem} from '../../../../common/elements/list-item-menu/types/IMenuSetupItem';\nimport {Chip, Stack} from '@mui/material';\nimport {getRandomColor} from '../../../../common/logic/getRandomColor';\n\nexport const RepeaterListItem: FC<IRepeaterListItem> = (\n    {\n        repeater,\n        onStartRepeating,\n        onDeleteRepeater,\n        onResetProgress,\n        onEditItem\n    }\n) => {\n\n    const menuSetup: IMenuSetupItem[] = [\n        {\n            fieldName: 'Edit',\n            handler: () => {\n                onEditItem(repeater.id);\n            }\n        },\n        {\n            fieldName: 'Delete',\n            handler: () => {\n                onDeleteRepeater(repeater.id);\n            }\n        },\n        {\n            fieldName: 'Reset progress',\n            handler: () => {\n                onResetProgress(repeater.id);\n            }\n        }\n    ];\n\n    return <ListItem key={repeater.id} button component=\"div\">\n        <ListItemIcon onClick={() => onStartRepeating(repeater.id)}>\n            <CircularProgressComponent percent={repeater.percentRepeatedCards || 0}/>\n        </ListItemIcon>\n        <ListItemText\n            className=\"repeater-list-item_content\"\n            primary={repeater.name}\n            secondary={<Stack className=\"repeater-list-item_tag-container\" direction=\"row\">\n                {repeater.groupsNames?.map((groupName) => {\n                    const color = getRandomColor();\n                    return <Chip\n                        className=\"repeater-list-item_tag\"\n                        label={groupName}\n                        size=\"small\"\n                        variant=\"outlined\"\n                        style={{color, borderColor: color}}\n                    />\n                })}\n            </Stack>}\n            onClick={() => onStartRepeating(repeater.id)}\n        />\n        <ListItemIcon>\n            <ListItemMenuComponent menuSetup={menuSetup}/>\n        </ListItemIcon>\n    </ListItem>\n}","import React, {FC} from \"react\";\nimport {FixedSizeList as List} from \"react-window\";\n\nimport './RepeaterListComponent.css'\nimport {AddButtonComponent} from \"../../common/elements/add-button/AddButtonComponent\";\nimport {IRepeaterListComponent} from \"./types/IRepeaterListComponent\";\nimport {RepeaterListItem} from \"./elements/repeater-list-item/RepeaterListItem\";\n\nexport const RepeaterListComponent: FC<IRepeaterListComponent> = (\n    {\n        repeaters,\n        height,\n        onOpenEditor,\n        onStartRepeating,\n        onDeleteRepeater,\n        onEditRepeater,\n        onResetProgress\n    }\n) => {\n    return <>\n        <List\n            className=\"repeater-list\"\n            itemData={repeaters}\n            itemSize={55}\n            itemCount={repeaters.length}\n            overscanCount={5}\n            height={height}\n            width=\"100%\"\n        >\n            {({index, style}: any) => {\n                return <div style={style}>\n                    <RepeaterListItem\n                        repeater={repeaters[index]}\n                        onStartRepeating={onStartRepeating}\n                        onDeleteRepeater={onDeleteRepeater}\n                        onEditItem={onEditRepeater}\n                        onResetProgress={onResetProgress}\n                    />\n                </div>\n            }}\n        </List>\n        <AddButtonComponent onClick={onOpenEditor}/>\n    </>\n}","import {RepeaterListState} from \"../types/RepeaterListState\";\n\nexport const initialState: RepeaterListState = {\n    repeaters: []\n}","import {Routs} from \"../../../common/Routs\";\nimport {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\n\nexport const onOpenEditor: ICallback<RepeaterListCallbackSettings, void> = (\n    {history, location}\n) => {\n    history.push({\n        pathname: Routs.repeaterEditor.path\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const onRepeaterListChannel: ICallback<RepeaterListCallbackSettings, IRepeater[]> = (\n    {setState, services: {repeaterListService}},\n    repeaters = []\n) => {\n    setState((prevState) => {\n        return {\n            ...prevState,\n            repeaters\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onConstructor: ICallback<RepeaterListCallbackSettings, void> = (\n    {services: {repeaterListService}}\n) => {\n    repeaterListService.repeaterListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onStartRepeatingChannel: ICallback<RepeaterListCallbackSettings, number[]> = (\n    {setState, history, location},\n    cardsIDs = []\n) => {\n    history.push({\n        pathname: Routs.cardsRepeater.path,\n        state: {\n            ...location.state,\n            cardsIDsForRepeating: cardsIDs\n        }\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\n\nexport const onStartRepeating: ICallback<RepeaterListCallbackSettings, number> = (\n    {services: {repeaterListService}},\n    repeaterID = -1\n) => {\n    repeaterListService.startRepeatingChannel.next(repeaterID);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {defaultConfirmDialogState} from \"../../../common/defaults/defaultConfirmDialogState\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nexport const onRemoveRepeater: ICallback<RepeaterListCallbackSettings, number> = (\n    {\n        setSubscription,\n        services: {\n            repeaterListService,\n            confirmDialogService\n        }\n    },\n    repeaterID = -1\n) => {\n\n    const subscription = confirmDialogService.confirmationChannel.subscribe((isConfirm: boolean) => {\n        if (isConfirm) {\n            repeaterListService.removingRepeaterChannel.next(repeaterID);\n        }\n\n        confirmDialogService.openDialogChannel.next(defaultConfirmDialogState)\n    });\n\n    setSubscription(subscription);\n\n    confirmDialogService.openDialogChannel.next({\n        isOpen: true,\n        message: 'Do you want to remove this repeater?',\n        titleBackgroundColor: 'red',\n        icon: <DeleteIcon/>\n    })\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {empty} from \"../../../../MyTools/channel-conception/defaults/empty\";\n\nexport const onResetProgressChannel: ICallback<RepeaterListCallbackSettings, ICardsGroup[]> = (\n    {services: {repeaterListService}}\n) => {\n    repeaterListService.repeaterListChannel.next(empty);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\n\nexport const onResetProgress: ICallback<RepeaterListCallbackSettings, number> = (\n    {services: {repeaterListService}},\n    repeaterID = -1\n) => {\n    repeaterListService.resetProgressChannel.next(repeaterID);\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {RepeaterListCallbackSettings} from \"../types/RepeaterListCallbackSettings\";\nimport {Routs} from \"../../../common/Routs\";\n\nexport const onEditRepeater: ICallback<RepeaterListCallbackSettings, number> = (\n    {history, location},\n    repeaterID = -1\n) => {\n    history.push({\n        pathname: Routs.repeaterEditor.path,\n        state: {\n            ...location.state,\n            repeaterID\n        }\n    })\n}","import {FC, useCallback} from 'react';\n\nimport {RepeaterListComponent} from './RepeaterListComponent';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {RepeaterListCallbackSettings} from './types/RepeaterListCallbackSettings';\nimport {initialState} from './defaults/initialState';\nimport {onOpenEditor} from './ui-callbacks/onOpenEditor';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {onRepeaterListChannel} from './channels-callbacks/onRepeaterListChannel';\nimport {useConstructor} from '../../../MyTools/react-hooks/useConstructor';\nimport {onConstructor} from './ui-callbacks/onConstructor';\nimport {onStartRepeatingChannel} from './channels-callbacks/onStartRepeatingChannel';\nimport {onStartRepeating} from './ui-callbacks/onStartRepeating';\nimport {onRemoveRepeater} from './ui-callbacks/onRemoveRepeater';\nimport {onResetProgressChannel} from './channels-callbacks/onResetProgressChannel';\nimport {onResetProgress} from './ui-callbacks/onResetProgress';\nimport {onEditRepeater} from './ui-callbacks/onEditRepeater';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {RepeaterListService} from './RepeaterListService';\nimport {ConfirmDialogService} from '../../parts/confirm-dialog/ConfirmDialogService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const RepeaterListContainer: FC = () => {\n\n    const repeaterListService = useDependencyContext<RepeaterListService>(IDependenciesNames.RepeaterListService);\n    const confirmDialogService = useDependencyContext<ConfirmDialogService>(IDependenciesNames.ConfirmDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<RepeaterListCallbackSettings>(\n        initialState,\n        {repeaterListService, confirmDialogService},\n        AppContext\n    );\n\n    const {state, context} = externalCallbackSettings\n\n    useChannel(repeaterListService.repeaterListChannel, callbackFactory(onRepeaterListChannel));\n    useChannel(repeaterListService.startRepeatingChannel, callbackFactory(onStartRepeatingChannel));\n    useChannel(repeaterListService.removingRepeaterChannel, callbackFactory(onRepeaterListChannel));\n    useChannel(repeaterListService.resetProgressChannel, callbackFactory(onResetProgressChannel));\n\n    useConstructor(callbackFactory(onConstructor));\n\n    const openEditor = useCallback(callbackFactory(onOpenEditor), []);\n    const startRepeating = useCallback(callbackFactory(onStartRepeating), []);\n    const removeRepeater = useCallback(callbackFactory(onRemoveRepeater), []);\n    const resetProgress = useCallback(callbackFactory(onResetProgress), []);\n    const editRepeater = useCallback(callbackFactory(onEditRepeater), []);\n\n    return <RepeaterListComponent\n        repeaters={state.repeaters}\n        height={context.height}\n        onOpenEditor={openEditor}\n        onDeleteRepeater={removeRepeater}\n        onStartRepeating={startRepeating}\n        onResetProgress={resetProgress}\n        onEditRepeater={editRepeater}\n    />\n}","import * as React from 'react';\nimport {FC} from 'react';\nimport {Redirect, Route, Switch} from 'react-router';\n\nimport {Routs} from '../../common/Routs';\nimport {CardsGroupsListContainer} from '../../pages/cards-groups-list/CardsGroupsListContainer';\nimport {GoogleAuthContainer} from '../../pages/google-auth/GoogleAuthContainer';\nimport {GoogleBackupsContainer} from '../../pages/google-backups/GoogleBackupsContainer';\nimport {CardsContainer} from '../../pages/cards/CardsContainer';\nimport {CardRepeaterContainer} from '../../pages/cards-repeater/CardsRepeaterContainer';\nimport {LocalBackupsContainer} from '../../pages/local-backup/LocalBackupsContainer';\nimport {CardsGroupsEditorContainer} from '../../pages/cards-groups-editor/CardsGroupsEditorContainer';\nimport {CardsEditorContainer} from '../../pages/cards-editor/CardsEditorContainer';\nimport {SettingsContainer} from '../../pages/settings/SettingsContainer';\nimport {CardViewerContainer} from \"../../pages/card-viewer/CardViewerContainer\";\nimport {StatisticContainer} from \"../../pages/statistic/StatisticContainer\";\nimport {RepeaterEditorContainer} from \"../../pages/repeater-editor/RepeaterEditorContainer\";\nimport {RepeaterListContainer} from \"../../pages/repeater-list/RepeaterListContainer\";\n\n\nexport const NavigationContainer: FC = () => {\n\n    return <Switch>\n        <Redirect exact from=\"/MyCardsWeb\" to={Routs.cardsGroups.path}/>\n        <Redirect exact from=\"/\" to={Routs.cardsGroups.path}/>\n        <Route path={Routs.cardsGroups.path}>\n            <CardsGroupsListContainer/>\n        </Route>\n        <Route path={Routs.googleAuth.path}>\n            <GoogleAuthContainer/>\n        </Route>\n        <Route path={Routs.googleBackups.path}>\n            <GoogleBackupsContainer/>\n        </Route>\n        <Route path={Routs.cards.path}>\n            <CardsContainer/>\n        </Route>\n        <Route path={Routs.cardsRepeater.path}>\n            <CardRepeaterContainer/>\n        </Route>\n        <Route path={Routs.localBackups.path}>\n            <LocalBackupsContainer/>\n        </Route>\n        <Route path={Routs.cardsGroupEditor.path}>\n            <CardsGroupsEditorContainer/>\n        </Route>\n        <Route path={Routs.cardsEditor.path}>\n            <CardsEditorContainer/>\n        </Route>\n        <Route path={Routs.settings.path}>\n            <SettingsContainer/>\n        </Route>\n        <Route path={Routs.cardViewer.path}>\n            <CardViewerContainer/>\n        </Route>\n        <Route path={Routs.statistic.path}>\n            <StatisticContainer/>\n        </Route>\n        <Route path={Routs.repeaterEditor.path}>\n            <RepeaterEditorContainer/>\n        </Route>\n        <Route path={Routs.repeaterList.path}>\n            <RepeaterListContainer/>\n        </Route>\n    </Switch>\n};\n","import React, {FC} from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport {List, ListItem, ListItemText} from \"@mui/material\";\nimport {ISelectionDialogComponent} from \"./types/ISelectionDialogComponent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\n\nexport const SelectionDialogComponent: FC<ISelectionDialogComponent> = (\n    {\n        isOpen,\n        onClose,\n        onClickItem,\n        selectionItems,\n        title\n    }\n) => {\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                onClose={onClose}\n            >\n                <DialogTitle>{title}</DialogTitle>\n                <DialogContent>\n                    <List>\n                        {\n                            selectionItems.map((item) => {\n                                return <ListItem key={item.id} onClick={() => onClickItem(item.id)}>\n                                    <ListItemText primary={item.label}/>\n                                </ListItem>\n                            })\n                        }\n                    </List>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n};\n","export const initialState = {\n    isOpen: false,\n    title: '',\n    selectionItems: []\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SelectionDialogCallbackSettings} from \"../types/SelectionDialogCallbackSettings\";\nimport {SelectionDialogContainerState} from \"../types/SelectionDialogContainerState\";\nimport {initialState} from \"../defaults/initialState\";\n\nexport const onOpenDialogChannel: ICallback<SelectionDialogCallbackSettings, SelectionDialogContainerState> = (\n    {setState},\n    value = initialState\n) => {\n    setState(() => {\n        return {...value}\n    });\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SelectionDialogCallbackSettings} from \"../types/SelectionDialogCallbackSettings\";\nimport {initialState} from \"../defaults/initialState\";\n\nexport const onClose: ICallback<SelectionDialogCallbackSettings, void> = (\n    {setState, services: {selectionDialogService}}\n) => {\n    setState(() => initialState);\n    selectionDialogService.selectionChannel.unsubscribe();\n}","import {ICallback} from \"../../../../MyTools/react-types/ICallback\";\nimport {SelectionDialogCallbackSettings} from \"../types/SelectionDialogCallbackSettings\";\n\nexport const onClickItem: ICallback<SelectionDialogCallbackSettings, number> = (\n    {setState, services: {selectionDialogService}},\n    itemID = -1\n) => {\n    selectionDialogService.selectionChannel.next(itemID);\n}","import * as React from 'react';\nimport {FC, useCallback} from 'react';\n\nimport {SelectionDialogComponent} from './SelectionDialogComponent';\nimport {useChannel} from '../../../MyTools/channel-conception/react-hooks/useChannel';\nimport {useCallbackFactory} from '../../../MyTools/react-hooks/useCallbackFactory';\nimport {AppContext} from '../../../App';\nimport {initialState} from './defaults/initialState';\nimport {SelectionDialogCallbackSettings} from './types/SelectionDialogCallbackSettings';\nimport {onOpenDialogChannel} from './channels-callbacks/onOpenDialogChannel';\nimport {onClose} from './ui-callbacks/onClose';\nimport {onClickItem} from './ui-callbacks/onClickItem';\nimport {useDependencyContext} from '../../../MyTools/react-di/hooks/useDependency';\nimport {SelectionDialogService} from './SelectionDialogService';\nimport {IDependenciesNames} from '../../common/types/IDependenciesNames';\n\nexport const SelectionDialogContainer: FC = () => {\n\n    const selectionDialogService = useDependencyContext<SelectionDialogService>(IDependenciesNames.SelectionDialogService);\n\n    const {\n        callbackFactory,\n        externalCallbackSettings\n    } = useCallbackFactory<SelectionDialogCallbackSettings>(\n        initialState,\n        {selectionDialogService},\n        AppContext\n    );\n\n    const {state} = externalCallbackSettings\n\n    useChannel(selectionDialogService.openDialogChannel, callbackFactory(onOpenDialogChannel));\n\n    const close = useCallback(callbackFactory(onClose), [])\n    const clickItem = useCallback(callbackFactory(onClickItem), [])\n\n    return <SelectionDialogComponent\n        isOpen={state.isOpen}\n        onClickItem={clickItem}\n        onClose={close}\n        title={state.title}\n        selectionItems={state.selectionItems}\n    />\n};\n","export const jsonEqual = <T>(args: { value: T, other: T }) => {\n    const {value, other} = args;\n\n    if(typeof value !== 'object') {\n        return value === other;\n    }\n\n    if(value instanceof Array && other instanceof Array) {\n       if(value.length !== other.length) {\n           return false;\n       }\n    }\n\n    return JSON.stringify(value) === JSON.stringify(other);\n}","import {Observable} from 'rxjs';\n\nimport {functionToThread} from \"../logic/functionToThread\";\n\nexport const fromThread = <A, R>(arg: A, workerFunction: (arg: A) => R): Observable<R> => {\n\n    const thread = functionToThread(workerFunction)\n\n    return new Observable(observer => {\n        thread.postMessage(arg);\n        thread.onmessage = (event: MessageEvent) => {\n            observer.next(event.data);\n            observer.complete();\n            thread.terminate();\n        }\n        thread.onerror = (err) => {\n            observer.error(err);\n        }\n    })\n}","export const functionToThread = <A, R>(workerFunction: (arg: A) => R) => {\n\n    const functionString = `(function worker() {\n            var self = this;\n            self.onmessage = function(e) {\n                const result = (${workerFunction.toString()})(e.data)\n                self.postMessage(result);\n            }\n        })()`;\n\n    const functionBlob = new Blob([functionString], {type: 'text/javascript'});\n\n    return new Worker(URL.createObjectURL(functionBlob));\n}","import {Observable, Subject, Subscription} from 'rxjs';\n\nimport {jsonEqual} from \"./logic/jsonEqual\";\nimport {fromThread} from \"../worker-observable/operators/fromThread\";\n\nexport class Channel<A, D> {\n\n    private readonly outputSubject: Subject<D>;\n    private observableCreator: (arg: A) => Observable<D>;\n    private subscriptions: Subscription[] = [];\n    private previousEmittedValue: D | null = null;\n    private static globalErrorHandler = (error: Error) => {};\n    private static globalNextHandler = () => {};\n\n    constructor(\n        observableCreator: (arg: A) => Observable<D>\n    ) {\n        this.outputSubject = new Subject<D>();\n        this.observableCreator = observableCreator;\n    }\n\n    next(value: A) {\n        //Don't make implement complete method because it can affect on subject behaviour in app\n        this.subscriptions.push(this.observableCreator(value).subscribe(\n            (value) => {\n                this.outputSubject.next(value);\n            },\n            (error) => {\n                this.outputSubject.error(error);\n            }\n        ));\n    }\n\n    subscribe(\n        next?: (data: D) => void,\n        customErrorHandler?: (error: Error) => void,\n        deepEqual = false\n    ): Subscription {\n        const outputSubjectSubscription = this.outputSubject.subscribe(\n            (data: D) => {\n                if (next) {\n                    if (deepEqual) {\n                        this.deepEqual(next, data);\n                    } else {\n                        next(data)\n                        Channel.globalNextHandler()\n                    }\n                }\n            },\n            (error: Error) => {\n                if (customErrorHandler) {\n                    customErrorHandler(error);\n                }\n                Channel.globalErrorHandler(error)\n            }\n        );\n        this.subscriptions.push(outputSubjectSubscription);\n        return outputSubjectSubscription;\n    }\n\n    private deepEqual(next: (data: D) => void, data: D): void {\n        if (!this.previousEmittedValue) {\n            next(data)\n            Channel.globalNextHandler()\n            this.previousEmittedValue = data;\n        }\n\n        const subscription = fromThread(\n            {value: data, other: this.previousEmittedValue},\n            jsonEqual\n        ).subscribe(\n            (result) => {\n                if (!result) {\n                    next(data)\n                    Channel.globalNextHandler()\n                    this.previousEmittedValue = data;\n                }\n            },\n            (equalityError) => {\n                console.error(equalityError)\n            }\n        )\n        this.subscriptions.push(subscription)\n    }\n\n    unsubscribe() {\n        this.subscriptions.forEach((subscribtion: Subscription) => {\n            if (!subscribtion.closed) {\n                subscribtion.unsubscribe();\n            }\n        });\n        this.subscriptions = [];\n        this.previousEmittedValue = null;\n    }\n\n    static setGlobalErrorHandler = (globalErrorHandler: (error: Error) => void) => {\n        Channel.globalErrorHandler = globalErrorHandler;\n    }\n\n    static setGlobalNextHandler = (globalNextHandler: () => void) => {\n        Channel.globalNextHandler = globalNextHandler;\n    }\n}\n","export const defaultAppState = {\n    height: 0,\n    width: 0\n};","import {IStatistic} from \"../types/IStatistic\";\n\nexport const defaultStatistic: IStatistic = {\n    dailyStatistic: [],\n    cardsInProgressFrequency: {},\n    cardsInDone: {}\n}","import {from, Observable} from 'rxjs';\nimport {ICardsGroup} from '../types/ICardsGroup';\nimport {DataBaseService} from './DataBaseService';\nimport {ISettings} from '../types/ISettings';\nimport {IStoredFilters} from '../types/IStoredFilters';\nimport {defaultFilter} from '../defaults/defaultFilter';\nimport {IStatistic} from '../types/IStatistic';\nimport {defaultStatistic} from '../defaults/defaultStatistic';\nimport {defaultSettings} from '../defaults/defaultSettings';\nimport {IRepeater} from '../types/IRepeater';\n\nexport class StorageService {\n\n    private cardsStorageID = 'cards-local-storage';\n    private authTokenLocalStorageID = 'auth-token';\n    private settingsID = 'settings';\n    private filterID = 'filter'\n    private statisticID = 'statistic'\n    private repeatersID = 'repeaters'\n\n    constructor(private dataBaseService: DataBaseService) {\n    }\n\n    public getBackup = () : Observable<ICardsGroup[]> => {\n        return from(this.getBackupFromDataBase());\n    };\n\n    private getBackupFromDataBase = async () => {\n        let backup = null;\n\n        try {\n            backup = await this.dataBaseService.get<ICardsGroup[]>(this.cardsStorageID);\n        } catch (e) {\n            console.error(e);\n            return backup;\n        }\n        if(backup) {\n            return backup;\n        } else {\n            return [];\n        }\n    };\n\n    public setBackup(cardsGroups: ICardsGroup[]): Observable<ICardsGroup[]> {\n        return from(this.setBackupToDataBase(cardsGroups));\n    }\n\n    private setBackupToDataBase = async (cardsGroups: ICardsGroup[]) => {\n        try {\n            await this.dataBaseService.set(this.cardsStorageID, cardsGroups);\n        } catch (e) {\n            console.error(e);\n        }\n        return cardsGroups;\n    };\n\n    public getAuthToken(): Observable<string> {\n        return from(new Promise<string>((resolve, reject) => {\n            const authToken = localStorage.getItem(this.authTokenLocalStorageID);\n            if(authToken) {\n                resolve(authToken);\n            } else {\n                reject('Auth token is empty')\n            }\n        }));\n    }\n\n    public setAuthToken(authToken: string): Observable<string> {\n        return from(new Promise<string>((resolve) => {\n            localStorage.setItem(this.authTokenLocalStorageID, authToken);\n            resolve(authToken);\n        }));\n    }\n\n    public getSettings(): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve, reject) => {\n            const settings = localStorage.getItem(this.settingsID);\n            if(settings) {\n                resolve(JSON.parse(settings) as ISettings);\n            } else {\n                resolve(defaultSettings)\n            }\n        }));\n    }\n\n    public setSettings(settings: ISettings): Observable<ISettings> {\n        return from(new Promise<ISettings>((resolve) => {\n            localStorage.setItem(this.settingsID, JSON.stringify(settings));\n            resolve(settings);\n        }));\n    }\n\n    public getFilter(): Observable<IStoredFilters> {\n        return from(new Promise<IStoredFilters>((resolve) => {\n            const settings = localStorage.getItem(this.filterID);\n            if (settings) {\n                resolve(JSON.parse(settings) as IStoredFilters);\n            } else {\n                resolve({\n                    cards: defaultFilter,\n                    cardsGroups: defaultFilter\n                })\n            }\n        }));\n    }\n\n    public setFilter(settings: IStoredFilters): Observable<IStoredFilters> {\n        return from(new Promise<IStoredFilters>((resolve) => {\n            localStorage.setItem(this.filterID, JSON.stringify(settings));\n            resolve(settings);\n        }));\n    }\n\n    public getStatistic(): Observable<IStatistic> {\n        return from(new Promise<IStatistic>((resolve) => {\n            const statistic = localStorage.getItem(this.statisticID);\n            if (statistic) {\n                resolve(JSON.parse(statistic) as IStatistic);\n            } else {\n                resolve(defaultStatistic)\n            }\n        }));\n    }\n\n    public setStatistic(statistic: IStatistic): Observable<IStatistic> {\n        return from(new Promise<IStatistic>((resolve) => {\n            localStorage.setItem(this.statisticID, JSON.stringify(statistic));\n            resolve(statistic);\n        }));\n    }\n\n    public getRepeaters(): Observable<IRepeater[]> {\n        return from(new Promise<IRepeater[]>((resolve) => {\n            const repeaters = localStorage.getItem(this.repeatersID);\n            if (repeaters) {\n                resolve(JSON.parse(repeaters) as IRepeater[]);\n            } else {\n                resolve([])\n            }\n        }));\n    }\n\n    public setRepeaters(repeaters: IRepeater[]): Observable<IRepeater[]> {\n        return from(new Promise<IRepeater[]>((resolve) => {\n            localStorage.setItem(this.repeatersID, JSON.stringify(repeaters));\n            resolve(repeaters);\n        }));\n    }\n}\n","export const STORE_NAME = \"cards-store\";","export class VoiceService {\n\n    private voices: SpeechSynthesisVoice[] = [];\n\n    constructor() {\n        speechSynthesis.addEventListener(\"voiceschanged\", () => {\n            this.voices = speechSynthesis.getVoices().filter((voice) => {\n                return voice.lang === 'en-US';\n            });\n        })\n    }\n\n    public getRandomVoice(): SpeechSynthesisVoice {\n        return this.voices[Math.floor(Math.random() * this.voices.length)]\n    }\n}","import {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const getBackupFolder = (token: string): Promise<IGoogleDriveFile | null> => {\n\n    const googleDriveFolderType = 'application/vnd.google-apps.folder';\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const backupFolderName = 'my-cards';\n    const searchFolderURI = googleDriveFilesAPI + '?q=name%20contains%20';\n    const url = `${searchFolderURI}'${backupFolderName}'`\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + token\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (result) => result.json()\n    ).then((result: { files: IGoogleDriveFile[] }) => {\n        let foundedFolder = result.files.find((file) => {\n            return file.mimeType === googleDriveFolderType\n        });\n        return foundedFolder || null;\n    })\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getCardsByGroup = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n    const foundCardsGroup = cardsGroups.find((cardsGroup: ICardsGroup) => {\n        return cardsGroup.id === cardsGroupID;\n    });\n\n    return foundCardsGroup ? foundCardsGroup.cards : [];\n};\n","import {ICardsGroup} from '../types/ICardsGroup';\nimport {ICard} from '../types/ICard';\n\nexport const deleteSingleCard = (cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => {\n        const cardIndex = cardGroup.cards.findIndex((card) => {\n            return card.id === cardID;\n        })\n\n        return cardIndex > -1\n    });\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.filter((card: ICard) => card.id !== cardID);\n    }\n\n    return cardsGroups;\n};\n","export const selectedItemsObjectToArray = (selectedItemsObject: {[key: number]: boolean}): number[] => {\n    const array: number[] = [];\n    for (let item in selectedItemsObject) {\n        if (selectedItemsObject[item]) {\n            array.push(Number(item));\n        }\n    }\n    return array\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const getExistedCardsGroups = (cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.map((cardsGroup) => {\n        return {\n            id: cardsGroup.id,\n            label: cardsGroup.nameCardsGroup\n        }\n    })\n}","import {IRepeatingArgs} from '../types/IRepeatingArgs';\nimport {ICardsGroup} from '../types/ICardsGroup';\nimport {ICard} from '../types/ICard';\nimport {IRangeOfKnowledge} from '../types/IRangeOfKnowledge';\n\nexport const changeRangeOfKnowledge = (args: IRepeatingArgs, cardsGroups: ICardsGroup[]) => {\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (!args.cardID || card.id === args.cardID) {\n                    if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.DONE;\n                    } else if (!args.isKnown && card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n                        card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n                    }\n                }\n            });\n        }\n    });\n\n\n    return cardsGroups;\n};\n","import {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\nimport {IRepeatingType} from \"../../../common/types/IRepeatingType\";\nimport {shuffleCards} from \"./shuffleCards\";\nimport {defaultCard} from \"../../../common/defaults/defaultCard\";\n\nexport const getCardForRepeating = (cards: ICard[], repeatingType: IRepeatingType): ICard => {\n\n    let foundCard\n\n    if (repeatingType === IRepeatingType.RANDOM) {\n        const cardsWithoutDone = shuffleCards(cards).filter((card: ICard) => {\n            return card.rangeOfKnowledge !== IRangeOfKnowledge.DONE\n        })\n        foundCard = cardsWithoutDone[0];\n    } else {\n        foundCard = cards.find((card: ICard) => {\n            return card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO;\n        });\n\n        if (!foundCard) {\n            foundCard = cards.find((card: ICard) => {\n                return card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS;\n            });\n        }\n\n        if (cards.length === 1) {\n            foundCard = cards[0]\n        }\n    }\n\n    return foundCard || defaultCard\n};\n","import {ICard} from '../../../common/types/ICard';\n\nexport const shuffleCards = (array: ICard[]) => {\n    const copy = [];\n    let length = array.length;\n    let randomIndex;\n\n    while (length) {\n        randomIndex = Math.floor(Math.random() * array.length);\n        if (randomIndex in array) {\n            copy.push(array[randomIndex]);\n            delete array[randomIndex];\n            length--;\n        }\n    }\n\n    return copy;\n};\n","import {ICardsGroup} from \"../types/ICardsGroup\";\nimport {IRepeatingArgs} from \"../types/IRepeatingArgs\";\nimport {ICard} from \"../types/ICard\";\n\nexport const refreshCardRepeatingDate = (args: IRepeatingArgs, cardsGroups: ICardsGroup[]) => {\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        if (!args.cardsGroupID || cardsGroup.id === args.cardsGroupID) {\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (!args.cardID || card.id === args.cardID) {\n                    card.dateRepeating = new Date().getTime();\n                }\n            });\n        }\n    });\n\n    return cardsGroups;\n}","import {IRepeatingArgs} from \"../types/IRepeatingArgs\";\nimport {IStatistic} from \"../types/IStatistic\";\n\nexport const updateStatistic = (statistic: IStatistic, args: IRepeatingArgs): IStatistic => {\n\n    let today = new Date();\n    let date = today.getDate();\n    let month = today.getMonth();\n    let year = today.getFullYear();\n    let foundDayIndex = statistic.dailyStatistic.findIndex((dayStatistic) => {\n        return dayStatistic.date === date && dayStatistic.year === year && dayStatistic.month === month\n    });\n\n    if (foundDayIndex >= 0) {\n        let dailyStatistic = statistic.dailyStatistic[foundDayIndex];\n        if (args.isKnown) {\n            if (dailyStatistic.done[args.cardID]) {\n                dailyStatistic.done[args.cardID] = dailyStatistic.done[args.cardID] + 1;\n            } else {\n                dailyStatistic.done[args.cardID] = 1;\n            }\n        } else {\n            if (dailyStatistic.inProgress[args.cardID]) {\n                dailyStatistic.inProgress[args.cardID] = dailyStatistic.inProgress[args.cardID] + 1;\n            } else {\n                dailyStatistic.inProgress[args.cardID] = 1;\n            }\n        }\n    } else {\n        statistic.dailyStatistic.push({\n            date,\n            year,\n            month,\n            inProgress: args.isKnown ? {} : {[args.cardID]: 1},\n            done: args.isKnown ? {[args.cardID]: 1} : {}\n        });\n    }\n    if (!args.isKnown) {\n        if (statistic.cardsInProgressFrequency[args.cardID]) {\n            statistic.cardsInProgressFrequency[args.cardID] = statistic.cardsInProgressFrequency[args.cardID] + 1;\n        } else {\n            statistic.cardsInProgressFrequency[args.cardID] = 1;\n        }\n    }\n\n    return statistic;\n}","export const readByVoiceEngine = (text: string, voice: SpeechSynthesisVoice) => {\n\n    const synth = window.speechSynthesis;\n    if (synth.speaking) {\n        synth.cancel();\n        return text;\n    }\n    const speechSynthesisUtterance = new SpeechSynthesisUtterance(text);\n    speechSynthesisUtterance.onerror = (error) => {\n        console.warn('Read text error', error);\n    }\n    speechSynthesisUtterance.voice = voice;\n    speechSynthesisUtterance.lang = 'en-US';\n    speechSynthesisUtterance.rate = 1;\n    synth.speak(speechSynthesisUtterance);\n\n    return text;\n}","export const prepareTextForVoiceEngine = (text: string): string => {\n    text = text.replace(/_/g, '');\n    text = text.replace(/=/g, '');\n    text = text.replace(/\\+/g, '');\n    text = text.replace(/[\\u0400-\\u04FF]/gi, '');\n    console.log(text);\n    return text;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const getCardForViewing = (cardsGroups: ICardsGroup[], cardID: number): ICard => {\n    let card = {\n        id: -1,\n        question: '',\n        answer: '',\n        rangeOfKnowledge: IRangeOfKnowledge.IN_PROGRESS,\n        dateRepeating: 0\n    };\n\n    for (let i = 0; i < cardsGroups.length; i++) {\n        const index = cardsGroups[i].cards.findIndex((card: ICard) => {\n            return card.id === cardID\n        })\n\n        if (index > -1) {\n            card = cardsGroups[i].cards[index];\n            return card;\n        }\n    }\n\n    return card;\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const getRepeaterByID = (repeaters: IRepeater[], repeaterID: number) => {\n    const repeaterIndex = repeaters.findIndex((repeater) => {\n        return repeater.id === repeaterID;\n    })\n    return repeaters[repeaterIndex];\n}","import {GoogleAuthService} from './app/pages/google-auth/GoogleAuthService';\nimport {ErrorService} from './app/parts/error-dialog/ErrorService';\nimport {CardsEditorService} from './app/pages/cards-editor/CardsEditorService';\nimport {LocalBackupsService} from './app/pages/local-backup/LocalBackupsService';\nimport {SpinnerService} from './app/parts/spinner/SpinnerService';\nimport {ConfirmDialogService} from './app/parts/confirm-dialog/ConfirmDialogService';\nimport {StorageService} from './app/common/services/StorageService';\nimport {DataBaseService} from './app/common/services/DataBaseService';\nimport {SelectionDialogService} from './app/parts/selection-dialog/SelectionDialogService';\nimport {NavigationPanelService} from './app/parts/navigation-panel/NavigationPanelService';\nimport {ToolbarService} from './app/parts/toolbar/ToolbarService';\nimport {VoiceService} from './app/common/services/VoiceService';\nimport {CardsGroupsEditorService} from './app/pages/cards-groups-editor/CardsGroupsEditorService';\nimport {GoogleBackupsService} from './app/pages/google-backups/GoogleBackupsService';\nimport {CardsService} from './app/pages/cards/CardsService';\nimport {CardsRepeaterService} from './app/pages/cards-repeater/CardsRepeaterService';\nimport {SettingsService} from './app/pages/settings/SettingsService';\nimport {CardViewerService} from './app/pages/card-viewer/CardViewerService';\nimport {StatisticService} from './app/pages/statistic/StatisticService';\nimport {RepeaterListService} from './app/pages/repeater-list/RepeaterListService';\nimport {RepeaterEditorService} from './app/pages/repeater-editor/RepeaterEditorService';\nimport {IDependenciesMap} from './MyTools/react-di/types/IDependenciesMap';\nimport {IDependenciesNames} from './app/common/types/IDependenciesNames';\nimport {CardsGroupsListService} from './app/pages/cards-groups-list/CardsGroupsListService';\n\nexport const DependenciesMap: IDependenciesMap = {\n    [IDependenciesNames.GoogleAuthService]: {\n        dependencyConstructor: GoogleAuthService,\n        arguments: [IDependenciesNames.StorageService]\n    },\n    [IDependenciesNames.ErrorService]: {\n        dependencyConstructor: ErrorService,\n        arguments: []\n    },\n    [IDependenciesNames.CardsEditorService]: {\n        dependencyConstructor: CardsEditorService,\n        arguments: [IDependenciesNames.StorageService]\n    },\n    [IDependenciesNames.LocalBackupsService]: {\n        dependencyConstructor: LocalBackupsService,\n        arguments: [IDependenciesNames.StorageService]\n    },\n    [IDependenciesNames.SpinnerService]: {\n        dependencyConstructor: SpinnerService,\n        arguments: []\n    },\n    [IDependenciesNames.ConfirmDialogService]: {\n        dependencyConstructor: ConfirmDialogService,\n        arguments: []\n    },\n    [IDependenciesNames.StorageService]: {\n        dependencyConstructor: StorageService,\n        arguments: [IDependenciesNames.DataBaseService]\n    },\n    [IDependenciesNames.DataBaseService]: {\n        dependencyConstructor: DataBaseService,\n        arguments: []\n    },\n    [IDependenciesNames.SelectionDialogService]: {\n        dependencyConstructor: SelectionDialogService,\n        arguments: []\n    },\n    [IDependenciesNames.NavigationPanelService]: {\n        dependencyConstructor: NavigationPanelService,\n        arguments: []\n    },\n    [IDependenciesNames.ToolbarService]: {\n        dependencyConstructor: ToolbarService,\n        arguments: [IDependenciesNames.StorageService]\n    },\n    [IDependenciesNames.VoiceService]: {\n        dependencyConstructor: VoiceService,\n        arguments: []\n    },\n    [IDependenciesNames.CardsGroupsEditorService]: {\n        dependencyConstructor: CardsGroupsEditorService,\n        arguments: [IDependenciesNames.StorageService]\n    },\n    [IDependenciesNames.CardsGroupsListService]: {\n        dependencyConstructor: CardsGroupsListService,\n        arguments: [IDependenciesNames.StorageService]\n    },\n    [IDependenciesNames.GoogleBackupsService]: {\n        dependencyConstructor: GoogleBackupsService,\n        arguments: [IDependenciesNames.StorageService]\n    },\n    [IDependenciesNames.CardsService]: {\n        dependencyConstructor: CardsService,\n        arguments: [IDependenciesNames.StorageService]\n    },\n    [IDependenciesNames.CardsRepeaterService]: {\n        dependencyConstructor: CardsRepeaterService,\n        arguments: [IDependenciesNames.StorageService, IDependenciesNames.VoiceService]\n    },\n    [IDependenciesNames.SettingsService]: {\n        dependencyConstructor: SettingsService,\n        arguments: [IDependenciesNames.StorageService]\n    },\n    [IDependenciesNames.CardViewerService]: {\n        dependencyConstructor: CardViewerService,\n        arguments: [IDependenciesNames.StorageService, IDependenciesNames.VoiceService]\n    },\n    [IDependenciesNames.StatisticService]: {\n        dependencyConstructor: StatisticService,\n        arguments: [IDependenciesNames.StorageService]\n    },\n    [IDependenciesNames.RepeaterListService]: {\n        dependencyConstructor: RepeaterListService,\n        arguments: [IDependenciesNames.StorageService]\n    },\n    [IDependenciesNames.RepeaterEditorService]: {\n        dependencyConstructor: RepeaterEditorService,\n        arguments: [IDependenciesNames.StorageService]\n    }\n}","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class GoogleAuthService {\n    public loginChannel: Channel<string, string>;\n\n    constructor(storageService: StorageService) {\n        this.loginChannel = new Channel((authToken: string) => of('').pipe(\n            tap(() => {\n                storageService.setAuthToken(authToken)\n            })\n        ));\n    }\n}\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class ErrorService {\n    public errorChannel: Channel<string, string>;\n\n\n    constructor() {\n        this.errorChannel = new Channel<string, string>((error: string)=> of(error));\n    }\n\n}\n","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ICard} from '../../common/types/ICard';\nimport {saveCard} from './logic/saveCard';\nimport {getEditingCard} from './logic/getEditingCard';\n\nexport class CardsEditorService {\n\n    public cardEditingChannel: Channel<{ card: ICard, cardsGroupID: number }, ICard>;\n    public cardChannel: Channel<{ cardID: number, cardsGroupID: number }, ICard | undefined>;\n\n    constructor(storageService: StorageService) {\n        this.cardEditingChannel = new Channel(({card, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCard(cardsGroupID, card, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            }),\n            map(() => card)\n        ));\n\n        this.cardChannel = new Channel(({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCard(cardsGroupID, cardID, cardsGroups))\n        ));\n    }\n}","import {ICard} from '../../../common/types/ICard';\nimport {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveCard = (cardsGroupID: number, card: ICard, cardsGroups: ICardsGroup[]) => {\n\n    if (card.id === -1) {\n        card.id = new Date().getTime();\n    }\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => card.id === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex < 0) {\n        cardsGroups[cardGroupIndex].cards.push(card);\n    } else if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards[cardIndex] = card;\n    }\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const getEditingCard = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n        let card: ICard | undefined = {\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO,\n            answer: '',\n            question: '',\n            dateRepeating: 0,\n            id: new Date().getTime()\n        };\n\n        if (cardsGroup) {\n            card = cardsGroup.cards.find((card: ICard) => card.id === cardID)\n        }\n\n        return card;\n};\n","import {of} from 'rxjs';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {switchMap, tap} from 'rxjs/operators';\nimport {saveBackupFile} from './logic/saveBackupFile';\n\nexport class LocalBackupsService {\n\n    public localBackupChannel: Channel<void, ICardsGroup[]>;\n    public loadBackupChannel: Channel<string, ICardsGroup[]>;\n\n    constructor(private storageService: StorageService) {\n        this.localBackupChannel = new Channel(() => this.storageService.getBackup().pipe(\n            tap((backup: ICardsGroup[]) => saveBackupFile(backup))\n        ));\n\n        this.loadBackupChannel = new Channel((backupFile: string) => of('').pipe(\n            switchMap(() => {\n                return this.storageService.setBackup(JSON.parse(backupFile));\n            })\n        ));\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveBackupFile = (backup: ICardsGroup[]) => {\n    const fileData: string = JSON.stringify(backup, null, 4);\n    const blob = new Blob([fileData], {type: \"octet/stream\"});\n    const url = window.URL.createObjectURL(blob);\n\n    const fileBuffer = document.createElement('a');\n\n    if (fileBuffer) {\n        fileBuffer.href = url;\n        fileBuffer.download = 'My Cards.txt';\n        fileBuffer.click();\n    }\n    window.URL.revokeObjectURL(url);\n};\n","import {of} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\n\nexport class SpinnerService {\n\n    public spinnerCounterChannel: Channel<number, number>;\n\n    private spinnerCounter = 0;\n\n    constructor() {\n        this.spinnerCounterChannel = new Channel((difference: number) => of('').pipe(map(() => {\n            if(this.spinnerCounter + difference >= 0) {\n                this.spinnerCounter = this.spinnerCounter + difference;\n            }\n            return this.spinnerCounter;\n        })))\n    }\n}\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ConfirmDialogContainerState} from \"./types/ConfirmDialogContainerState\";\n\nexport class ConfirmDialogService {\n\n    public openDialogChannel = new Channel<ConfirmDialogContainerState, ConfirmDialogContainerState>(\n        (state: ConfirmDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.confirmationChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public confirmationChannel = new Channel<boolean, boolean>((value: boolean) => of(value));\n}\n\n","import {IDBPDatabase, openDB} from 'idb';\nimport {STORE_NAME} from \"../constants/STORE_NAME\";\n\nexport class DataBaseService {\n\n    private dataBase: Promise<IDBPDatabase>;\n\n    private DATA_BASE_NAME = \"my-cards-data-base\";\n\n    constructor() {\n        this.dataBase = openDB(this.DATA_BASE_NAME, 1, {\n            upgrade(db) {\n                db.createObjectStore(STORE_NAME);\n            },\n        });\n    }\n\n    get = async <T>(key: string) => {\n        return (await this.dataBase).get(STORE_NAME, key);\n    };\n\n    set = async <T>(key: string, value: T) => {\n        return (await this.dataBase).put(STORE_NAME, value, key);\n    };\n}\n","import {of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {SelectionDialogContainerState} from \"./types/SelectionDialogContainerState\";\n\nexport class SelectionDialogService {\n\n    public openDialogChannel = new Channel<SelectionDialogContainerState, SelectionDialogContainerState>(\n        (state: SelectionDialogContainerState) => of(state).pipe(tap((state) => {\n            if(!state.isOpen) {\n                this.selectionChannel.unsubscribe();\n            }\n        }))\n    );\n\n    public selectionChannel = new Channel<number, number>((value: number) => of(value));\n}\n\n","import {of} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\nimport {empty} from \"../../../MyTools/channel-conception/defaults/empty\";\n\nexport class NavigationPanelService {\n\n    public navigationPanelOpenChannel: Channel<IEmpty, IEmpty>;\n\n    constructor() {\n        this.navigationPanelOpenChannel = new Channel(() => of(empty))\n    }\n}\n","import {of, switchMap} from 'rxjs';\n\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {getPageLabel} from './logic/getPageLabel';\nimport {map} from 'rxjs/operators';\nimport {Routs} from '../../common/Routs';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {getCardsCount} from './logic/getCardsCount';\nimport {getGroupName} from './logic/getGroupName';\n\nexport class ToolbarService {\n\n    public pageLabelChannel: Channel<{ path: string, cardsGroupsId: number }, string>;\n\n    public cardsCountInGroupChannel: Channel<{ path: string, cardsGroupsId: number }, number>;\n\n    constructor(storageService: StorageService) {\n        this.cardsCountInGroupChannel = new Channel(\n            ({path: string, cardsGroupsId}) => of({path: string, cardsGroupsId}).pipe(\n                switchMap(({path, cardsGroupsId}) => {\n                    const isShowingCardsCount = path === Routs.cards.path || path === Routs.cardsRepeater.path\n                    if (isShowingCardsCount) {\n                        return storageService.getBackup().pipe(\n                            map((backup: ICardsGroup[]) => getCardsCount(backup, cardsGroupsId))\n                        );\n                    } else {\n                        return of(-1);\n                    }\n                })\n            )\n        )\n\n        this.pageLabelChannel = new Channel(\n            ({path, cardsGroupsId}) => {\n                return of({path, cardsGroupsId}).pipe(\n                    switchMap(({path, cardsGroupsId}) => {\n                            const isShowingGroupName = path === Routs.cards.path || path === Routs.cardsRepeater.path || path === Routs.cardViewer.path\n                            if (isShowingGroupName) {\n                                return storageService.getBackup().pipe(\n                                    map((backup: ICardsGroup[]) => getGroupName(backup, cardsGroupsId))\n                                );\n                            }\n                            return of(getPageLabel(path))\n                        }\n                    )\n                )\n            }\n        )\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getCardsCount = (backup: ICardsGroup[], cardsGroupsId: number) => {\n    const cardsGroupIndex = backup.findIndex((group) => {\n        return group.id === cardsGroupsId;\n    });\n    if (cardsGroupIndex > -1) {\n        return backup[cardsGroupIndex].cards.length;\n    } else {\n        return -1;\n    }\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getGroupName = (backup: ICardsGroup[], cardsGroupsId: number) => {\n    const cardsGroupIndex = backup.findIndex((group) => {\n        return group.id === cardsGroupsId;\n    });\n    if (cardsGroupIndex > -1) {\n        return backup[cardsGroupIndex].nameCardsGroup\n    } else {\n        return '';\n    }\n}","import {Routs} from \"../../../common/Routs\";\n\nexport const getPageLabel = (path: string) => {\n    if (path === Routs.googleAuth.path) {\n        return Routs.googleAuth.name;\n    }\n\n    if (path === Routs.googleBackups.path) {\n        return Routs.googleBackups.name;\n    }\n\n    if (path === Routs.cardsGroups.path) {\n        return Routs.cardsGroups.name;\n    }\n\n    if (path === Routs.cards.path) {\n        return Routs.cards.name;\n    }\n\n    if (path === Routs.cardsRepeater.path) {\n        return Routs.cardsRepeater.name;\n    }\n\n    if (path === Routs.localBackups.path) {\n        return Routs.localBackups.name;\n    }\n\n    if (path === Routs.settings.path) {\n        return Routs.settings.name;\n    }\n\n    if (path === Routs.cardViewer.path) {\n        return Routs.cardViewer.name;\n    }\n\n    if (path === Routs.statistic.path) {\n        return Routs.statistic.name;\n    }\n\n    return 'My Cards'\n}","import {map, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {saveCardsGroup} from './logic/saveCardsGroup';\nimport {getEditingCardsGroup} from './logic/getEditingCardsGroup';\n\nexport class CardsGroupsEditorService {\n\n    public groupEditingChannel: Channel<ICardsGroup, ICardsGroup[]>;\n    public groupChannel: Channel<number, ICardsGroup>;\n\n    constructor(storageService: StorageService) {\n        this.groupEditingChannel = new Channel((editedCardGroup: ICardsGroup) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => saveCardsGroup(editedCardGroup, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => {\n                storageService.setBackup(cardsGroups);\n            })\n        ));\n\n        this.groupChannel = new Channel((cardGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getEditingCardsGroup(cardGroupID, cardsGroups))\n        ))\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const saveCardsGroup = (editedCardGroup: ICardsGroup, cardsGroups: ICardsGroup[]) => {\n        const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => editedCardGroup.id === cardGroup.id);\n\n        if (cardGroupIndex < 0) {\n            cardsGroups.push(editedCardGroup);\n        } else {\n            cardsGroups[cardGroupIndex] = editedCardGroup;\n        }\n\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const getEditingCardsGroup = (cardGroupID: number, cardsGroups: ICardsGroup[]): ICardsGroup => {\n\n        let cardsGroup = cardsGroups.find((cardGroup: ICardsGroup) => cardGroupID === cardGroup.id);\n\n        if (!cardsGroup) {\n            cardsGroup = {\n                cards: [],\n                nameCardsGroup: '',\n                repeatingDate: new Date().getTime(),\n                id: new Date().getTime(),\n                percentRepeatedCards: 0\n            }\n        }\n        return cardsGroup;\n};\n","import {map, mergeMap, switchMap, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {updateRepeatingDate} from './logic/updateRepeatingDate';\nimport {sortByFilter} from './logic/sortByFilter';\nimport {countRepeatedCardsPercent} from './logic/countRepeatedCardsPercent';\nimport {deleteGroup} from './logic/deleteGroup';\nimport {resetRepeatingProgress} from './logic/resetRepeatingProgress';\nimport {defer, of} from 'rxjs';\nimport {ISettings} from '../../common/types/ISettings';\nimport {updateObsoleteStatus} from './logic/updateObsoleteStatus';\nimport {IFilter} from '../../common/types/IFilter';\nimport {IStoredFilters} from '../../common/types/IStoredFilters';\nimport {IEmpty} from '../../../MyTools/channel-conception/defaults/IEmpty';\nimport {getDifficultCardsForRepeating} from './logic/getDifficultCardsForRepeating';\n\nexport class CardsGroupsListService {\n    public groupsListChannel: Channel<IEmpty, ICardsGroup[]>;\n    public groupDeleteChannel: Channel<number, ICardsGroup[]>;\n    public resetProgressChannel: Channel<number, ICardsGroup[]>;\n    public changeFilterChannel: Channel<IFilter, IStoredFilters>;\n    public filterChannel: Channel<IEmpty, IFilter>;\n    public startRepeatingDifficultCardsChannel: Channel<number, number[]>;\n\n    constructor(storageService: StorageService) {\n\n        this.startRepeatingDifficultCardsChannel = new Channel(\n            (cardsGroupId) => storageService.getStatistic().pipe(\n                switchMap((statistic) => {\n                    return storageService.getSettings().pipe(\n                        switchMap((settings) => {\n                            return storageService.getBackup().pipe(\n                                map((cardsGroups) => {\n                                    return getDifficultCardsForRepeating(cardsGroups, settings, statistic, cardsGroupId);\n                                })\n                            )\n                        })\n                    )\n                })\n            )\n        )\n\n        this.groupsListChannel = new Channel(() => storageService.getBackup().pipe(\n            switchMap((backup) => {\n                return storageService.getSettings().pipe(\n                    switchMap((settings: ISettings) => {\n                        return defer(() => {\n                            return settings.autoObsolete && settings.autoObsolete.isEnable ?\n                                of(\n                                    updateObsoleteStatus(\n                                        backup,\n                                        settings.autoObsolete.timeInProgress,\n                                        settings.autoObsolete.timeInDone\n                                    )\n                                ).pipe(tap((cardsGroups) => storageService.setBackup(cardsGroups))) :\n                                of(backup)\n                        })\n                    })\n                )\n            }),\n            map((cardsGroups: ICardsGroup[]) => updateRepeatingDate(cardsGroups)),\n            map((cardsGroups: ICardsGroup[]) => countRepeatedCardsPercent(cardsGroups)),\n            mergeMap((cardsGroups: ICardsGroup[]) => {\n                return storageService.getFilter().pipe(\n                    map((storedFilter) => sortByFilter(cardsGroups, storedFilter.cardsGroups))\n                )\n            })\n        ));\n\n        this.groupDeleteChannel = new Channel((groupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => deleteGroup(groupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ));\n\n        this.resetProgressChannel = new Channel((cardsGroupID: number) => storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => resetRepeatingProgress(cardsGroupID, cardsGroups)),\n            tap((cardsGroups: ICardsGroup[]) => storageService.setBackup(cardsGroups))\n        ))\n\n        this.filterChannel = new Channel(\n            () => storageService.getFilter().pipe(\n                map((storedFilters) => storedFilters.cardsGroups)\n            )\n        )\n\n        this.changeFilterChannel = new Channel<IFilter, IStoredFilters>(\n            (filter) => storageService.getFilter().pipe(\n                map((storedFilters) => {\n                        return {...storedFilters, cardsGroups: filter}\n                    }\n                ),\n                tap((storedFilters) => {\n                    storageService.setFilter(storedFilters);\n                })\n            )\n        )\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ISettings} from '../../../common/types/ISettings';\nimport {IStatistic} from '../../../common/types/IStatistic';\n\nexport const getDifficultCardsForRepeating = (\n    cardsGroups: ICardsGroup[],\n    settings: ISettings,\n    statistic: IStatistic,\n    cardsGroupId: number\n) => {\n    const cardsInProgress = new Map(Object.entries(statistic.cardsInProgressFrequency)\n        .filter((a) => {\n            const cardsGroupIndex = cardsGroups.findIndex((cardsGroup) => cardsGroup.id === cardsGroupId);\n            const group = cardsGroups[cardsGroupIndex];\n            const cardIndex = group.cards.findIndex((card) => card.id === Number(a[0]));\n            return cardIndex >= 0;\n        })\n        .sort((a, b) => {\n            if (a[1] > b[1]) {\n                return -1;\n            } else if (a[1] < b[1]) {\n                return 1;\n            } else {\n                return 0\n            }\n        })\n    );\n\n    const cardsForRepeating: number[] = [];\n    [...cardsInProgress.entries()].forEach((item) => {\n        if (cardsForRepeating.length <= settings.difficultCardsAmountForRepeating - 1) {\n            cardsForRepeating.push(Number(item[0]));\n        }\n    });\n\n    return cardsForRepeating;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const updateObsoleteStatus = (\n    cardsGroups: ICardsGroup[],\n    timeInProgress: number,\n    timeInDone: number\n): ICardsGroup[] => {\n\n    if(timeInProgress < 1 && timeInDone < 1) {\n        return cardsGroups;\n    }\n\n    const millisecondsInDay = 86400000;\n    const currentDate = new Date().getTime();\n    const timeInProgressMilliseconds = timeInProgress * millisecondsInDay;\n    const timeInDoneMilliseconds = timeInDone * millisecondsInDay;\n\n    cardsGroups.forEach((cardsGroup: ICardsGroup) => {\n        cardsGroup.cards.forEach((card: ICard) => {\n            const differences = currentDate - card.dateRepeating;\n\n            if(card.rangeOfKnowledge === IRangeOfKnowledge.DONE && differences > timeInDoneMilliseconds) {\n                card.rangeOfKnowledge = IRangeOfKnowledge.IN_PROGRESS;\n            }\n\n            if(card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS && differences > timeInProgressMilliseconds) {\n                card.rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n            }\n        });\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\n\nexport const updateRepeatingDate = (cardsGroups: ICardsGroup[]) => {\n        cardsGroups.map((cardsGroup: ICardsGroup) => {\n            let dateRepeating = 0;\n            cardsGroup.cards.forEach((card: ICard) => {\n                if (card.dateRepeating > dateRepeating) {\n                    dateRepeating = card.dateRepeating\n                }\n            });\n            cardsGroup.repeatingDate = dateRepeating;\n            return cardsGroup;\n        });\n        return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const countRepeatedCardsPercent = (cardsGroups: ICardsGroup[]) => {\n    cardsGroups.map((cardsGroup: ICardsGroup) => {\n        let statusDone = 0;\n        cardsGroup.cards.forEach((card: ICard) => {\n            if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n                statusDone++\n            }\n        });\n        cardsGroup.percentRepeatedCards = statusDone / cardsGroup.cards.length * 100;\n        return cardsGroup;\n    });\n    return cardsGroups;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const sortByFilter = (cardsGroups: ICardsGroup[], filter: IFilter) => {\n    let sortedCards = cardsGroups.filter(\n        (cardsGroup) => cardsGroup.nameCardsGroup.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1\n    );\n    if (filter.sort === ISortVariant.NAME_DESK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.nameCardsGroup > secondCardsGroup.nameCardsGroup) {\n                return 1\n            }\n            if (firstCardGroup.nameCardsGroup < secondCardsGroup.nameCardsGroup) {\n                return -1\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.NAME_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.nameCardsGroup > secondCardsGroup.nameCardsGroup) {\n                return -1\n            }\n            if (firstCardGroup.nameCardsGroup < secondCardsGroup.nameCardsGroup) {\n                return 1\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.DATE_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.repeatingDate && secondCardsGroup.repeatingDate) {\n                if (firstCardGroup.repeatingDate > secondCardsGroup.repeatingDate) {\n                    return 1\n                }\n                if (firstCardGroup.repeatingDate < secondCardsGroup.repeatingDate) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.DATE_DESK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (firstCardGroup.repeatingDate && secondCardsGroup.repeatingDate) {\n                if (firstCardGroup.repeatingDate < secondCardsGroup.repeatingDate) {\n                    return 1\n                }\n                if (firstCardGroup.repeatingDate > secondCardsGroup.repeatingDate) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.PROGRESS_DESC) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (\n                typeof firstCardGroup.percentRepeatedCards === 'number' &&\n                typeof secondCardsGroup.percentRepeatedCards === 'number'\n            ) {\n                if (firstCardGroup.percentRepeatedCards < secondCardsGroup.percentRepeatedCards) {\n                    return 1\n                }\n                if (firstCardGroup.percentRepeatedCards > secondCardsGroup.percentRepeatedCards) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    } else if (filter.sort === ISortVariant.PROGRESS_ASK) {\n        sortedCards = sortedCards && sortedCards.sort((firstCardGroup: ICardsGroup, secondCardsGroup: ICardsGroup) => {\n            if (\n                typeof firstCardGroup.percentRepeatedCards === 'number' &&\n                typeof secondCardsGroup.percentRepeatedCards === 'number'\n            ) {\n                if (firstCardGroup.percentRepeatedCards > secondCardsGroup.percentRepeatedCards) {\n                    return 1\n                }\n                if (firstCardGroup.percentRepeatedCards < secondCardsGroup.percentRepeatedCards) {\n                    return -1\n                }\n            }\n            return 0\n        })\n    }\n\n    return sortedCards;\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\n\nexport const deleteGroup = (groupID: number, cardsGroups: ICardsGroup[]) => {\n    return cardsGroups.filter((cardGroup) => {\n        return cardGroup.id !== groupID;\n    });\n};\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const resetRepeatingProgress = (cardsGroupID: number, cardsGroups: ICardsGroup[]) => {\n\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n\n    if (cardGroupIndex < 0) {\n        return cardsGroups;\n    }\n\n    cardsGroups[cardGroupIndex].cards = cardsGroups[cardGroupIndex].cards.map((card: ICard) => {\n        return {\n            ...card,\n            rangeOfKnowledge: IRangeOfKnowledge.TO_DO\n        }\n    });\n\n    return cardsGroups;\n};\n","import {defer, from, mergeMap, of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {StorageService} from '../../common/services/StorageService';\nimport {IGoogleDriveFile} from '../../common/types/IGoogleDriveFile';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {formatCreatedDate} from './logic/formatCreatedDate';\nimport {getBackupFolder} from \"./logic/getBackupFolder\";\nimport {getBackupFiles} from \"./logic/getBackupFiles\";\nimport {loadBackupFile} from \"./logic/loadBackupFile\";\nimport {createBackupFolder} from \"./logic/createBackupFolder\";\nimport {createEmptyBackupFile} from \"./logic/createEmptyBackupFile\";\nimport {createBackupName} from \"./logic/createBackupName\";\nimport {uploadBackupFile} from \"./logic/uploadBackupFile\";\nimport {deleteBackupFile} from \"./logic/deleteBackupFile\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class GoogleBackupsService {\n\n    public backupsNameLoadChannel: Channel<IEmpty, IGoogleDriveFile[]>;\n    public backupLoadChannel: Channel<string, ICardsGroup[]>;\n    public backupUploadChannel: Channel<void, string>;\n    public backupDeleteChannel: Channel<string, string>;\n\n    constructor(private storageService: StorageService) {\n\n        this.backupsNameLoadChannel = new Channel(() => storageService.getAuthToken().pipe(\n            mergeMap(\n                (authToken: string) => of(authToken).pipe(\n                    switchMap(() => from(getBackupFolder(authToken))),\n                    switchMap(\n                        (folder: IGoogleDriveFile | null) => from(getBackupFiles(authToken, folder))\n                    ),\n                    map((googleDriveFiles: IGoogleDriveFile[] | null) => formatCreatedDate(googleDriveFiles))\n                )\n            )\n        ));\n\n        this.backupLoadChannel = new Channel(\n            (backupID: string) => storageService.getAuthToken().pipe(\n                switchMap(\n                    (authToken) => from(loadBackupFile(authToken, backupID))\n                ),\n                tap((cards: ICardsGroup[]) => {\n                    storageService.setBackup(cards);\n                })\n            )\n        );\n\n        this.backupUploadChannel = new Channel(\n            () => storageService.getAuthToken().pipe(\n                mergeMap((authToken: string) => of(authToken).pipe(\n                        switchMap(() => from(getBackupFolder(authToken))),\n                        mergeMap((folder: IGoogleDriveFile | null) => {\n                            return defer(() => {\n                                return folder ? of(folder.id) : from(createBackupFolder(authToken))\n                            })\n                        }),\n                        mergeMap((folderId: string) => {\n                            return storageService.getBackup().pipe(\n                                map(\n                                    (cardsGroups) => createBackupName(cardsGroups)\n                                ),\n                                switchMap((name: string) => {\n                                    return from(createEmptyBackupFile(\n                                        authToken,\n                                        folderId,\n                                        name\n                                    ));\n                                })\n                            )\n                        }),\n                        switchMap((fileId: string) => {\n                            return storageService.getBackup().pipe(\n                                switchMap((cardsGroups) => {\n                                    return uploadBackupFile(\n                                        authToken,\n                                        fileId,\n                                        cardsGroups\n                                    )\n                                })\n                            )\n                        })\n                    )\n                )\n            )\n        );\n\n        this.backupDeleteChannel = new Channel((fileID: string) => storageService.getAuthToken().pipe(\n            switchMap((authToken) => deleteBackupFile(authToken, fileID))\n        ));\n    }\n}\n","import {IGoogleDriveFile} from \"../../../common/types/IGoogleDriveFile\";\n\nexport const getBackupFiles = (authToken: string, folder: IGoogleDriveFile | null): Promise<IGoogleDriveFile[] | null> => {\n\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const url = `${googleDriveFilesAPI}?q=\"${folder ? folder.id : -1}\"+in+parents&fields=files(id,createdTime,name)`\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.files)\n}","import {IGoogleDriveFile} from '../../../common/types/IGoogleDriveFile';\n\nexport const formatCreatedDate = (googleDriveFiles: IGoogleDriveFile[] | null) => {\n    return googleDriveFiles ? googleDriveFiles.map((googleDriveFile: IGoogleDriveFile) => {\n        const date = new Date(googleDriveFile.createdTime);\n        const outputFormat = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\n        return {\n            ...googleDriveFile, createdTime: outputFormat\n        };\n    }) : [];\n};\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const loadBackupFile = (authToken: string, fileId: string): Promise<ICardsGroup[]> => {\n\n    const googleDriveFilesAPI = 'https://www.googleapis.com/drive/v3/files/';\n    const url = googleDriveFilesAPI + fileId + '?alt=media';\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'GET'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    )\n}","export const createBackupFolder = (authToken: string): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/';\n    const backupFolderName = 'my-cards';\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            name: backupFolderName,\n            mimeType: 'application/vnd.google-apps.folder'\n        }),\n        method: 'POST'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.id)\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const createBackupName = (backup: ICardsGroup[]) => {\n    let cardsAmount = 0;\n    backup.forEach((cardsGroup) => {\n        cardsAmount = cardsAmount + cardsGroup.cards.length\n    })\n    return `groups(${backup.length})cards(${cardsAmount})`\n}","export const createEmptyBackupFile = (\n    authToken: string,\n    id: string,\n    fileName: string\n): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/';\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            parents: [id],\n            name: fileName\n        }),\n        method: 'POST'\n    }\n\n    return fetch(url, requestOptions).then(\n        (response) => response.json()\n    ).then((result) => result.id)\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const uploadBackupFile = (\n    authToken: string,\n    fileId: string,\n    cardsGroups: ICardsGroup[]\n): Promise<string> => {\n\n    const url = \"https://www.googleapis.com/upload/drive/v3/files/\" + fileId;\n    const requestOptions: any = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        body: JSON.stringify(cardsGroups, null, 4),\n        responseType: 'text',\n        method: 'PATCH'\n    }\n\n    return fetch(url, requestOptions).then(() => fileId);\n}","export const deleteBackupFile = (\n    authToken: string,\n    fileId: string\n): Promise<string> => {\n\n    const url = 'https://www.googleapis.com/drive/v3/files/' + fileId;\n    const requestOptions: RequestInit = {\n        headers: {\n            'Authorization': 'Bearer ' + authToken\n        },\n        method: 'DELETE'\n    }\n\n    return fetch(url, requestOptions).then(() => fileId)\n}","import {map, mergeMap, tap} from 'rxjs/operators';\nimport {of} from \"rxjs\";\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {getCardsByGroup} from './logic/getCardsByGroup';\nimport {resetCardProgress} from './logic/resetCardProgress';\nimport {deleteSingleCard} from '../../common/logic/deleteSingleCard';\nimport {filterCards} from \"./logic/filterCards\";\nimport {IFilter} from \"../../common/types/IFilter\";\nimport {changeCardsGroup} from \"./logic/changeCardsGroup\";\nimport {selectedItemsObjectToArray} from \"./logic/selectedItemsObjectToArray\";\nimport {getExistedCardsGroups} from \"./logic/getExistedCardsGroups\";\nimport {copyCardsInGroup} from \"./logic/copyCardsInGroup\";\nimport {deleteCards} from \"./logic/deleteCards\";\nimport {cardsToIDS} from \"./logic/cardsToIDS\";\nimport {selectedItemsToIDs} from \"./logic/selectedItemsToIDs\";\nimport {IStoredFilters} from \"../../common/types/IStoredFilters\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class CardsService {\n    public cardsChannel: Channel<{ cardsGroupID: number, filter: IFilter }, ICard[]>;\n    public resetCardProgressChannel: Channel<{ cardID: number, cardsGroupID: number }, ICardsGroup[]>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public movingCardsChannel: Channel<{\n        selectedItems: { [key: number]: boolean };\n        destinationGroupID: number;\n    }, ICardsGroup[]>;\n    public copyCardsChannel: Channel<{\n        selectedItems: { [key: number]: boolean };\n        destinationGroupID: number;\n    }, ICardsGroup[]>;\n    public deleteCardsChannel: Channel<{ [key: number]: boolean }, ICardsGroup[]>;\n    public existedGroupsIDsChannel: Channel<IEmpty, Array<{ id: number; label: string }>>;\n    public cardsIDsByGroupIDsChannel: Channel<number, number[]>;\n    public cardsIDsBySelectedItemsChannel: Channel<{ [key: number]: boolean }, number[]>;\n    public filterChannel: Channel<IEmpty, IFilter>;\n    public changeFilterChannel: Channel<IFilter, IStoredFilters>;\n\n    constructor(private storageService: StorageService) {\n        this.cardsChannel = new Channel(\n            ({cardsGroupID, filter}) => this.storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => getCardsByGroup(cardsGroupID, cardsGroups)),\n                map((cards: ICard[]) => filterCards(cards, filter)))\n        );\n\n        this.resetCardProgressChannel = new Channel(\n            ({cardID, cardsGroupID}) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => resetCardProgress(cardsGroupID, cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n\n        this.movingCardsChannel = new Channel((\n            {\n                selectedItems,\n                destinationGroupID\n            }\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => changeCardsGroup(\n                        cardsGroups,\n                        selectedCardsIDs,\n                        destinationGroupID\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.existedGroupsIDsChannel = new Channel(() => storageService.getBackup().pipe(\n            map(getExistedCardsGroups)\n        ))\n\n        this.copyCardsChannel = new Channel((\n            {\n                selectedItems,\n                destinationGroupID\n            }\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => copyCardsInGroup(\n                        cardsGroups,\n                        selectedCardsIDs,\n                        destinationGroupID\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.deleteCardsChannel = new Channel((\n            selectedItems\n        ) => storageService.getBackup().pipe(\n            mergeMap((cardsGroups) => {\n                return of(cardsGroups).pipe(\n                    map(() => {\n                        return selectedItemsObjectToArray(selectedItems);\n                    }),\n                    map((selectedCardsIDs) => deleteCards(\n                        cardsGroups,\n                        selectedCardsIDs\n                    )),\n                    tap((cardsGroups) => {\n                        storageService.setBackup(cardsGroups);\n                    })\n                )\n            })\n        ))\n\n        this.cardsIDsByGroupIDsChannel = new Channel<number, number[]>(\n            (groupID) => storageService.getBackup().pipe(\n                map((cardsGroups) => getCardsByGroup(groupID, cardsGroups)),\n                map((cards: ICard[]) => cardsToIDS(cards))\n            )\n        )\n\n        this.cardsIDsBySelectedItemsChannel = new Channel(\n            (args) => of(args).pipe(\n                map(() => selectedItemsToIDs(args))\n            )\n        )\n\n        this.filterChannel = new Channel(\n            () => storageService.getFilter().pipe(\n                map((storedFilters) => storedFilters.cards)\n            )\n        )\n\n        this.changeFilterChannel = new Channel<IFilter, IStoredFilters>(\n            (filter) => storageService.getFilter().pipe(\n                map((storedFilters) => {\n                        return {...storedFilters, cards: filter}\n                    }\n                ),\n                tap((storedFilters) => {\n                    storageService.setFilter(storedFilters);\n                })\n            )\n        )\n    }\n}\n","import {ICard} from \"../../../common/types/ICard\";\nimport {IFilter} from \"../../../common/types/IFilter\";\nimport {ISortVariant} from \"../../../common/types/ISortVariant\";\n\nexport const filterCards = (cards: ICard[], filter: IFilter) => {\n    const foundByTextCards = cards.filter((card: ICard) => {\n        return card.question.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1 ||\n            card.answer.toLowerCase().indexOf(filter.searchableText.toLowerCase()) > -1\n    })\n\n    let sortedCards = []\n\n    if (filter.sort === ISortVariant.QUESTION_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.question === card2.question) {\n                return 0\n            } else if (card1.question > card2.question) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.QUESTION_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.question === card2.question) {\n                return 0\n            } else if (card1.question > card2.question) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.STATUS_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.STATUS_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge === card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.DATE_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.dateRepeating === card2.dateRepeating) {\n                return 0\n            } else if (card1.dateRepeating > card2.dateRepeating) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.DATE_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.dateRepeating === card2.dateRepeating) {\n                return 0\n            } else if (card1.dateRepeating < card2.dateRepeating) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.ANSWER_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.answer === card2.answer) {\n                return 0\n            } else if (card1.answer < card2.answer) {\n                return 1\n            } else {\n                return -1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.ANSWER_DESK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.answer === card2.answer) {\n                return 0\n            } else if (card1.answer < card2.answer) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.PROGRESS_ASK) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge < card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    } else if (filter.sort === ISortVariant.PROGRESS_DESC) {\n        sortedCards = foundByTextCards.sort((card1: ICard, card2: ICard) => {\n            if (card1.rangeOfKnowledge < card2.rangeOfKnowledge) {\n                return 0\n            } else if (card1.rangeOfKnowledge > card2.rangeOfKnowledge) {\n                return -1\n            } else {\n                return 1\n            }\n        })\n        return sortedCards;\n    }\n\n    return foundByTextCards\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\n\nexport const resetCardProgress = (cardsGroupID: number, cardID: number, cardsGroups: ICardsGroup[]) => {\n    const cardGroupIndex = cardsGroups.findIndex((cardGroup: ICardsGroup) => cardsGroupID === cardGroup.id);\n    let cardIndex = -1;\n\n    if (cardGroupIndex >= 0) {\n        cardIndex = cardsGroups[cardGroupIndex].cards.findIndex((item: ICard) => cardID === item.id)\n    }\n\n    if (cardGroupIndex >= 0 && cardIndex >= 0) {\n        cardsGroups[cardGroupIndex].cards[cardIndex].rangeOfKnowledge = IRangeOfKnowledge.TO_DO;\n    }\n\n    return cardsGroups;\n};\n","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\n\nexport const changeCardsGroup = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[],\n    destinationGroupID: number\n) => {\n\n    const selectedCards: ICard[] = []\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card) => {\n            const isSelected = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id\n            }) > -1\n\n            if (isSelected) {\n                selectedCards.push(card);\n            }\n        });\n        cardsGroup.cards = cardsGroup.cards.filter((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id;\n            });\n\n            return foundCardIndex < 0;\n        })\n    })\n\n    cardsGroups.forEach((cardsGroup) => {\n        if(cardsGroup.id === destinationGroupID) {\n            cardsGroup.cards.push(...selectedCards)\n        }\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {ICard} from \"../../../common/types/ICard\";\n\nexport const copyCardsInGroup = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[],\n    destinationGroupID: number\n) => {\n    const selectedCards: ICard[] = []\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card, index) => {\n            const isSelected = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id\n            }) > -1\n\n            if (isSelected) {\n                selectedCards.push({\n                    ...card,\n                    id: new Date().getTime() + index * 1000\n                });\n            }\n        });\n    });\n\n    cardsGroups.forEach((cardsGroup) => {\n        if(cardsGroup.id === destinationGroupID) {\n            cardsGroup.cards.push(...selectedCards)\n        }\n    })\n\n    return cardsGroups;\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const deleteCards = (\n    cardsGroups: ICardsGroup[],\n    selectedCardsIDs: number[]\n) => {\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards = cardsGroup.cards.filter((card) => {\n            const foundCardIndex = selectedCardsIDs.findIndex((cardID) => {\n                return cardID === card.id;\n            });\n\n            return foundCardIndex < 0;\n        })\n    })\n\n    return cardsGroups;\n}","import {ICard} from \"../../../common/types/ICard\";\n\nexport const cardsToIDS = (cards: ICard[]) => {\n    return cards.map((card) => card.id)\n}","export const selectedItemsToIDs = (selectedItems: { [p: number]: boolean }): number[] => {\n    const ids = [];\n    for (let a in selectedItems) {\n        if (selectedItems[a]) {\n            ids.push(Number(a));\n        }\n    }\n    return ids;\n}","import {of} from 'rxjs';\nimport {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {IRepeatingArgs} from '../../common/types/IRepeatingArgs';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {IRepeatingProgress} from '../../common/types/IRepeatingProgress';\nimport {getCardsByIDs} from './logic/getCardsByIDs';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForRepeating} from './logic/getCardForRepeating';\nimport {getRepeatingProgress} from './logic/getRepeatingProgress';\nimport {refreshCardRepeatingDate} from '../../common/logic/refreshCardRepeatingDate';\nimport {deleteSingleCard} from '../../common/logic/deleteSingleCard';\nimport {updateStatistic} from '../../common/logic/updateStatistic';\nimport {IStatistic} from '../../common/types/IStatistic';\nimport {IEmpty} from '../../../MyTools/channel-conception/defaults/IEmpty';\nimport {readByVoiceEngine} from '../../common/logic/readByVoiceEngine';\nimport {VoiceService} from '../../common/services/VoiceService';\nimport {prepareTextForVoiceEngine} from '../../common/logic/prepareTextForVoiceEngine';\n\nexport class CardsRepeaterService {\n    public cardChannel: Channel<number[], ICard>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public repeatingProgressChannel: Channel<IEmpty, IRepeatingProgress>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public readByVoiceEngineChannel: Channel<string, string>;\n\n    private statisticValue = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    constructor(private storageService: StorageService, private voiceService: VoiceService) {\n        this.cardChannel = new Channel((cardsIDs) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardsByIDs(cardsGroups, cardsIDs)),\n            tap((cards) => {\n                this.statisticValue = getRepeatingProgress(cards);\n            }),\n            switchMap((cards: ICard[]) => this.storageService.getSettings().pipe(\n                map((settings) => {\n                    return getCardForRepeating(cards, settings.repeatingType);\n                })\n            ))\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getStatistic().pipe(\n                map((statistic: IStatistic) => updateStatistic(statistic, args)),\n                map((statistic: IStatistic) => this.storageService.setStatistic(statistic)),\n                switchMap(() => this.storageService.getBackup()),\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                map((cardsGroups: ICardsGroup[]) => refreshCardRepeatingDate(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups)),\n            );\n        });\n\n        this.repeatingProgressChannel = new Channel(() => of(this.statisticValue));\n\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n        this.readByVoiceEngineChannel = new Channel<string, string>(\n            (inputText) => of(inputText).pipe(\n                map((text) => prepareTextForVoiceEngine(text)),\n                map(\n                    (text) => readByVoiceEngine(text, voiceService.getRandomVoice())\n                )\n            )\n        );\n    }\n}\n","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {ICard} from '../../../common/types/ICard';\n\nexport const getCardsByIDs = (cardsGroups: ICardsGroup[], cardsIDs: number[]) => {\n\n    let foundCards: Array<ICard> = [];\n\n    cardsGroups.forEach((cardsGroup) => {\n        cardsGroup.cards.forEach((card) => {\n            const foundIndex = cardsIDs.findIndex((value) => value === card.id)\n            if (foundIndex > -1) {\n                foundCards.push(card);\n            }\n        })\n    });\n\n    return foundCards;\n};\n","import {ICard} from '../../../common/types/ICard';\nimport {IRangeOfKnowledge} from '../../../common/types/IRangeOfKnowledge';\nimport {IRepeatingProgress} from '../../../common/types/IRepeatingProgress';\n\nexport const getRepeatingProgress = (cards: ICard[]): IRepeatingProgress => {\n\n    const repeatingProgress = {\n        inProgress: 0,\n        todo: 0,\n        done: 0\n    };\n\n    cards.forEach((card: ICard) => {\n        if (card.rangeOfKnowledge === IRangeOfKnowledge.IN_PROGRESS) {\n            repeatingProgress.inProgress = repeatingProgress.inProgress + 1\n        } else if (card.rangeOfKnowledge === IRangeOfKnowledge.TO_DO) {\n            repeatingProgress.todo = repeatingProgress.todo + 1\n        } else {\n            repeatingProgress.done = repeatingProgress.done + 1\n        }\n    });\n\n    return repeatingProgress;\n};\n","import {StorageService} from '../../common/services/StorageService';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {ISettings} from '../../common/types/ISettings';\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class SettingsService {\n\n    public settingsChannel: Channel<IEmpty, ISettings>;\n\n    public changeSettingsChannel: Channel<ISettings, ISettings>;\n\n    constructor(storageService: StorageService) {\n\n        this.settingsChannel = new Channel(() => storageService.getSettings());\n\n        this.changeSettingsChannel = new Channel(\n            (settings: ISettings) => storageService.setSettings(settings)\n        );\n    }\n}\n","import {map, switchMap, tap} from 'rxjs/operators';\n\nimport {ICard} from '../../common/types/ICard';\nimport {StorageService} from '../../common/services/StorageService';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {IRepeatingArgs} from '../../common/types/IRepeatingArgs';\nimport {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {changeRangeOfKnowledge} from '../../common/logic/changeRangeOfKnowledge';\nimport {getCardForViewing} from './logic/getCardForViewing';\nimport {refreshCardRepeatingDate} from '../../common/logic/refreshCardRepeatingDate';\nimport {deleteSingleCard} from '../../common/logic/deleteSingleCard';\nimport {IStatistic} from '../../common/types/IStatistic';\nimport {updateStatistic} from '../../common/logic/updateStatistic';\nimport {readByVoiceEngine} from '../../common/logic/readByVoiceEngine';\nimport {of} from 'rxjs';\nimport {VoiceService} from '../../common/services/VoiceService';\nimport {prepareTextForVoiceEngine} from '../../common/logic/prepareTextForVoiceEngine';\n\nexport class CardViewerService {\n    public cardChannel: Channel<number, ICard>;\n    public repeatingResultChannel: Channel<IRepeatingArgs, ICardsGroup[]>;\n    public deleteSingleCardChannel: Channel<number, ICardsGroup[]>;\n    public readByVoiceEngineChannel: Channel<string, string>;\n\n    constructor(private storageService: StorageService, private voiceService: VoiceService) {\n        this.cardChannel = new Channel((cardID = -1) => this.storageService.getBackup().pipe(\n            map((cardsGroups: ICardsGroup[]) => getCardForViewing(cardsGroups, cardID))\n        ));\n\n        this.repeatingResultChannel = new Channel((args: IRepeatingArgs) => {\n            return this.storageService.getStatistic().pipe(\n                map((statistic: IStatistic) => updateStatistic(statistic, args)),\n                map((statistic: IStatistic) => this.storageService.setStatistic(statistic)),\n                switchMap(() => this.storageService.getBackup()),\n                map((cardsGroups: ICardsGroup[]) => changeRangeOfKnowledge(args, cardsGroups)),\n                map((cardsGroups: ICardsGroup[]) => refreshCardRepeatingDate(args, cardsGroups)),\n                switchMap((cardsGroups: ICardsGroup[]) => this.storageService.setBackup(cardsGroups))\n            );\n        });\n        this.deleteSingleCardChannel = new Channel(\n            (cardID) => storageService.getBackup().pipe(\n                map((cardsGroups: ICardsGroup[]) => deleteSingleCard(cardID, cardsGroups)),\n                tap((cardsGroups: ICardsGroup[]) => {\n                    storageService.setBackup(cardsGroups);\n                }))\n        );\n        this.readByVoiceEngineChannel = new Channel<string, string>(\n            (text) => of(text).pipe(\n                map((text) => prepareTextForVoiceEngine(text)),\n                map(\n                    (text) => readByVoiceEngine(text, voiceService.getRandomVoice())\n                )\n            )\n        );\n    }\n}\n","import {Channel} from \"../../../MyTools/channel-conception/Channel\";\nimport {IStatistic} from \"../../common/types/IStatistic\";\nimport {StorageService} from \"../../common/services/StorageService\";\nimport {map} from \"rxjs/operators\";\nimport {getRowsFromStatistic} from \"./logic/getRowsFromStatistic\";\nimport {IRow} from \"./types/IRow\";\nimport {defaultStatistic} from \"../../common/defaults/defaultStatistic\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\n\nexport class StatisticService {\n    public statisticChannel: Channel<IEmpty, IRow[]>;\n    public removeStatisticChannel: Channel<IEmpty, IStatistic>;\n\n    constructor(private storageService: StorageService) {\n        this.statisticChannel = new Channel(\n            () => storageService.getStatistic().pipe(\n                map((statistic: IStatistic) => {\n                    return getRowsFromStatistic(statistic);\n                })\n            )\n        )\n        this.removeStatisticChannel = new Channel(\n            () => storageService.setStatistic(defaultStatistic)\n        )\n    }\n}\n","import {IStatistic} from \"../../../common/types/IStatistic\";\nimport {IRow} from \"../types/IRow\";\n\nexport const getRowsFromStatistic = (statistic: IStatistic): IRow[] => {\n    return statistic.dailyStatistic.reverse().map((\n        {date, done, inProgress, year, month}\n    ) => {\n        let dateAsString = date > 0 && date < 10 ? '0' + date : date;\n        month = month + 1;\n        let monthAsString = month > 0 && month < 10 ? '0' + month : month;\n        let inProgressSum: number = 0;\n        Object.keys(inProgress).forEach((k) => {\n            inProgressSum = inProgressSum + inProgress[Number(k)]\n        })\n        let doneSum: number = 0;\n        Object.keys(done).forEach((k) => {\n            doneSum = doneSum + done[Number(k)]\n        })\n        return {\n            date: `${dateAsString}-${monthAsString}-${year}`,\n            inProgress: inProgressSum,\n            done: doneSum\n        }\n    })\n}","import {Channel} from '../../../MyTools/channel-conception/Channel';\nimport {IEmpty} from '../../../MyTools/channel-conception/defaults/IEmpty';\nimport {IRepeater} from '../../common/types/IRepeater';\nimport {StorageService} from '../../common/services/StorageService';\nimport {map, switchMap, tap} from 'rxjs/operators';\nimport {getRepeaterByID} from './logic/getRepeaterByID';\nimport {getCardsIDsFromRepeater} from './logic/getCardsIDsFromRepeater';\nimport {removeRepeater} from './logic/removeRepeater';\nimport {updateRepeatersProgress} from './logic/updateRepeatersProgress';\nimport {resetRepeatingProgress} from './logic/resetRepeatingProgress';\nimport {ICardsGroup} from '../../common/types/ICardsGroup';\nimport {of} from 'rxjs';\nimport {mapGroupsNameToRepeater} from './logic/mapGroupsNameToRepeater';\n\nexport class RepeaterListService {\n    public repeaterListChannel: Channel<IEmpty, IRepeater[]>;\n    public startRepeatingChannel: Channel<number, number[]>;\n    public removingRepeaterChannel: Channel<number, IRepeater[]>;\n    public resetProgressChannel: Channel<number, ICardsGroup[]>;\n\n    constructor(storageService: StorageService) {\n        this.repeaterListChannel = new Channel(\n            () => storageService.getRepeaters().pipe(\n                switchMap((repeaters) => {\n                    return storageService.getBackup().pipe(\n                        switchMap((cardsGroups) => {\n                            return of(cardsGroups).pipe(\n                                map(() => mapGroupsNameToRepeater(cardsGroups, repeaters)),\n                                map((mappedRepeaters) => updateRepeatersProgress(\n                                    cardsGroups,\n                                    mappedRepeaters\n                                ))\n                            )\n                        }),\n                    )\n                })\n            )\n        )\n        this.startRepeatingChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters: IRepeater[]) => {\n                    return getRepeaterByID(repeaters, repeaterID);\n                }),\n                switchMap((repeater: IRepeater) => storageService.getBackup().pipe(\n                    map((cardsGroups) => {\n                        return getCardsIDsFromRepeater(cardsGroups, repeater);\n                    })\n                ))\n            )\n        )\n        this.removingRepeaterChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters) => removeRepeater(repeaters, repeaterID)),\n                tap((repeaters) => storageService.setRepeaters(repeaters))\n            )\n        )\n        this.resetProgressChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters: IRepeater[]) => {\n                    return getRepeaterByID(repeaters, repeaterID);\n                }),\n                switchMap((repeater) => storageService.getBackup().pipe(\n                    map((cardsGroups) => resetRepeatingProgress(cardsGroups, repeater)),\n                    switchMap((cardsGroups) => storageService.setBackup(cardsGroups))\n                ))\n            )\n        )\n    }\n}","import {ICardsGroup} from '../../../common/types/ICardsGroup';\nimport {IRepeater} from '../../../common/types/IRepeater';\n\nexport const mapGroupsNameToRepeater = (\n    cardsGroups: ICardsGroup[],\n    repeaters: IRepeater[]\n) => {\n    return repeaters.map((repeater) => {\n        const groupsNames: string[] = []\n        cardsGroups.forEach((cardsGroup) => {\n            const isCardsGroupInRepeater = repeater.cardsGroupsIDs.findIndex((cardsGroupId) => {\n                return cardsGroupId === cardsGroup.id;\n            }) > -1;\n            if (isCardsGroupInRepeater) {\n                groupsNames.push(cardsGroup.nameCardsGroup);\n            }\n        })\n        return {\n            ...repeater,\n            groupsNames\n        }\n    })\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const updateRepeatersProgress = (\n    cardsGroups: ICardsGroup[],\n    repeaters: IRepeater[]\n) => {\n    repeaters.forEach((repeater) => {\n        let cardsCount = 0;\n        let repeatedCardsCount = 0;\n\n        cardsGroups.forEach((cardsGroup) => {\n            const isCardsGroupInRepeater = repeater.cardsGroupsIDs.findIndex(\n                (id) => cardsGroup.id === id\n            ) > -1\n\n            if (isCardsGroupInRepeater) {\n                cardsCount = cardsCount + cardsGroup.cards.length;\n                cardsGroup.cards.forEach((card) => {\n                    if (card.rangeOfKnowledge === IRangeOfKnowledge.DONE) {\n                        repeatedCardsCount++;\n                    }\n                })\n            }\n        });\n\n        repeater.percentRepeatedCards = repeatedCardsCount / cardsCount * 100;\n    })\n    return repeaters;\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\nimport {ICardsGroup} from \"../../../common/types/ICardsGroup\";\n\nexport const getCardsIDsFromRepeater = (cardsGroups: ICardsGroup[], repeater: IRepeater) => {\n    const idsForRepeating: number[] = [];\n\n    cardsGroups.forEach((cardsGroup) => {\n        const cardsGroupIndex = repeater.cardsGroupsIDs.findIndex((id) => id === cardsGroup.id);\n        if (cardsGroupIndex >= 0) {\n            idsForRepeating.push(...cardsGroup.cards.map((card) => card.id));\n        }\n    })\n\n    return idsForRepeating;\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const removeRepeater = (repeaters: IRepeater[], repeaterID: number) => {\n    const repeaterIndex = repeaters.findIndex((repeater) => repeater.id === repeaterID);\n\n    return repeaters.filter((repeater) => repeater.id !== repeaters[repeaterIndex].id);\n}","import {ICardsGroup} from \"../../../common/types/ICardsGroup\";\nimport {IRepeater} from \"../../../common/types/IRepeater\";\nimport {IRangeOfKnowledge} from \"../../../common/types/IRangeOfKnowledge\";\n\nexport const resetRepeatingProgress = (\n    cardsGroups: ICardsGroup[],\n    repeater: IRepeater\n) => {\n    cardsGroups.forEach((cardsGroup) => {\n        const isCardsGroupInRepeater = repeater.cardsGroupsIDs.findIndex(\n            (id) => cardsGroup.id === id\n        ) > -1\n\n        if (isCardsGroupInRepeater) {\n            cardsGroup.cards.forEach((card) => {\n                if (card.rangeOfKnowledge !== IRangeOfKnowledge.TO_DO) {\n                    card.rangeOfKnowledge = IRangeOfKnowledge.TO_DO\n                }\n            })\n        }\n    })\n    return cardsGroups;\n}","import {map, switchMap} from \"rxjs/operators\";\n\nimport {Channel} from \"../../../MyTools/channel-conception/Channel\";\nimport {IEmpty} from \"../../../MyTools/channel-conception/defaults/IEmpty\";\nimport {ICardsGroup} from \"../../common/types/ICardsGroup\";\nimport {StorageService} from \"../../common/services/StorageService\";\nimport {IRepeater} from \"../../common/types/IRepeater\";\nimport {updateExistRepeater} from \"./logic/updateExistRepeater\";\nimport {of} from \"rxjs\";\nimport {updateGroupsIDs} from \"./logic/updateGroupsIDs\";\nimport {getRepeaterByID} from \"./logic/getRepeaterByID\";\nimport {getSelectedGroups} from \"./logic/getSelectedGroups\";\n\nexport class RepeaterEditorService {\n    public groupsListChannel: Channel<IEmpty, ICardsGroup[]>;\n    public saveRepeaterChannel: Channel<IRepeater, IRepeater[]>;\n    public updateGroupsIDsChannel: Channel<{ selectedGroups: { [key: number]: boolean }; repeater: IRepeater },\n        IRepeater>;\n    public repeaterChannel: Channel<number, IRepeater>;\n    public selectedGroupsChannel: Channel<IRepeater, {\n        [key: number]: boolean;\n    }>;\n\n    constructor(private storageService: StorageService) {\n        this.groupsListChannel = new Channel(\n            () => storageService.getBackup()\n        );\n\n        this.saveRepeaterChannel = new Channel(\n            (repeater) => storageService.getRepeaters().pipe(\n                map((repeaters) => {\n                    if (repeater.id === -1) {\n                        repeater.id = new Date().getTime();\n                        repeaters.push(repeater);\n                    } else {\n                        updateExistRepeater(repeaters, repeater);\n                    }\n                    return repeaters;\n                }),\n                switchMap((repeaters) => storageService.setRepeaters(repeaters))\n            )\n        )\n\n        this.updateGroupsIDsChannel = new Channel(\n            ({repeater, selectedGroups}) => of(repeater).pipe(\n                map(() => updateGroupsIDs(selectedGroups, repeater))\n            )\n        )\n\n        this.repeaterChannel = new Channel(\n            (repeaterID) => storageService.getRepeaters().pipe(\n                map((repeaters) => {\n                    return getRepeaterByID(repeaters, repeaterID);\n                })\n            )\n        )\n        this.selectedGroupsChannel = new Channel(\n            (repeater: IRepeater) => of(repeater).pipe(\n                map(() => getSelectedGroups(repeater))\n            )\n        )\n    }\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const updateExistRepeater = (\n    repeaters: IRepeater[],\n    repeater: IRepeater\n) => {\n    const repeaterIndex = repeaters.findIndex((item) => item.id === repeater.id);\n    repeaters[repeaterIndex] = {\n        ...repeaters[repeaterIndex],\n        cardsGroupsIDs: repeater.cardsGroupsIDs,\n        name: repeater.name\n    }\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const updateGroupsIDs = (selectedGroups: { [key: number]: boolean }, repeater: IRepeater): IRepeater => {\n    const cardsGroupsIDs: number[] = [];\n    Object.keys(selectedGroups).forEach((groupID) => {\n        const id = Number(groupID);\n        if (selectedGroups[id]) {\n            cardsGroupsIDs.push(id);\n        }\n    });\n    return {\n        ...repeater,\n        cardsGroupsIDs\n    }\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const getRepeaterByID = (repeaters: IRepeater[], id: number) => {\n    const repeaterIndex = repeaters.findIndex((item) => item.id === id);\n    return repeaters[repeaterIndex]\n}","import {IRepeater} from \"../../../common/types/IRepeater\";\n\nexport const getSelectedGroups = (repeater: IRepeater) => {\n    const selectedGroups: {\n        [key: number]: boolean;\n    } = {};\n    repeater.cardsGroupsIDs.forEach((id) => {\n        selectedGroups[id] = true;\n    })\n    return selectedGroups;\n}","import React, {useEffect, useState} from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nimport './App.css';\nimport {IAppContext} from './app/common/types/IAppContext';\nimport {ToolbarContainer} from './app/parts/toolbar/ToolbarContainer';\nimport {NavigationPanelContainer} from './app/parts/navigation-panel/NavigationPanelContainer';\nimport {ErrorContainer} from './app/parts/error-dialog/ErrorContainer';\nimport {SpinnerContainer} from './app/parts/spinner/SpinnerContainer';\nimport {ConfirmDialogContainer} from './app/parts/confirm-dialog/ConfirmDialogContainer';\nimport {NavigationContainer} from './app/parts/navigation/NavigationContainer';\nimport {SelectionDialogContainer} from './app/parts/selection-dialog/SelectionDialogContainer';\nimport {Channel} from './MyTools/channel-conception/Channel';\nimport {defaultAppState} from './app/common/defaults/defaultAppState';\nimport {DependenciesProvider} from './MyTools/react-di/DependenciesProvider';\nimport {DependenciesMap} from './DependenciesMap';\n\nexport const AppContext = React.createContext<IAppContext>(defaultAppState);\n\nChannel.setGlobalErrorHandler((error) => {\n    console.error(error);\n})\n\nfunction App() {\n\n    const [appState, setAppState] = useState<IAppContext>(defaultAppState);\n\n    useEffect(() => {\n        const height = window.screen.height;\n        if (appState.height !== height) {\n            setAppState({...appState, height});\n        }\n    }, [appState]);\n\n    return (\n        <>\n            <DependenciesProvider dependenciesMap={DependenciesMap}>\n                <AppContext.Provider value={appState}>\n                    <Router>\n                        <div>\n                            <ErrorContainer/>\n                            <ToolbarContainer/>\n                            <NavigationPanelContainer/>\n                            <ConfirmDialogContainer/>\n                            <SelectionDialogContainer/>\n                            <div className=\"page-container\" style={{height: appState.height - 110, width: '100%'}}>\n                                <SpinnerContainer/>\n                                <NavigationContainer/>\n                            </div>\n                        </div>\n                    </Router>\n                </AppContext.Provider>\n            </DependenciesProvider>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://cra.link/PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}